
NUCLEO-U5A5JZ-Q_QSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a84  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e5a  08016cd4  08016cd4  00017cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017b30  08017b30  00018b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017b38  08017b38  00018b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017b3c  08017b3c  00018b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d4  20000000  08017b40  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00015855  200000d4  08017c14  000190d4  2**2
                  ALLOC
  8 ._user_heap_stack 00001407  20015929  08017c14  00019929  2**0
                  ALLOC
  9 .ARM.attributes 0000003a  00000000  00000000  000190d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0009df91  00000000  00000000  0001910e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00014e7f  00000000  00000000  000b709f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00028199  00000000  00000000  000cbf1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003cd8  00000000  00000000  000f40b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002ea4  00000000  00000000  000f7d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0005cc30  00000000  00000000  000fac34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00099277  00000000  00000000  00157864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001c5260  00000000  00000000  001f0adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000bec  00000000  00000000  003b5d3b  2**0
                  CONTENTS, READONLY
 19 .iar.rtmodel  000000b8  00000000  00000000  003b6927  2**0
                  CONTENTS, READONLY
 20 .iar_vfe_header 00000008  00000000  00000000  003b69e0  2**2
                  CONTENTS, READONLY
 21 .debug_frame  00009b08  00000000  00000000  003b69e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000107  00000000  00000000  003c04f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200000d4 	.word	0x200000d4
 800026c:	00000000 	.word	0x00000000
 8000270:	08016cbc 	.word	0x08016cbc

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200000d8 	.word	0x200000d8
 800028c:	08016cbc 	.word	0x08016cbc

08000290 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000290:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000296:	4917      	ldr	r1, [pc, #92]	@ (80002f4 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000298:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 800029c:	4816      	ldr	r0, [pc, #88]	@ (80002f8 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029e:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002a0:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a4:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a6:	4815      	ldr	r0, [pc, #84]	@ (80002fc <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a8:	4912      	ldr	r1, [pc, #72]	@ (80002f4 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002aa:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002ac:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ae:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002b2:	4913      	ldr	r1, [pc, #76]	@ (8000300 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b4:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b6:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002ba:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002bc:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002c0:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c4:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c8:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002cc:	490d      	ldr	r1, [pc, #52]	@ (8000304 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ce:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_BadHandler>

080002d8 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d8:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002de:	4770      	bx	lr

080002e0 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002e0:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002e2:	f000 f897 	bl	8000414 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ea:	4770      	bx	lr

080002ec <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_NMIHandler>

080002f0 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002f0:	f7ff bffe 	b.w	80002f0 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f4:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f8:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002fc:	200109dc 	.word	0x200109dc
    LDR     r1, =SYSTICK_CYCLES
 8000300:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000304:	40ff0000 	.word	0x40ff0000

08000308 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000308:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800030c:	4a2d      	ldr	r2, [pc, #180]	@ (80003c4 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030e:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000310:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000314:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000318:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 800031c:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000322:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000326:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 800032a:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032e:	f3bf 8f6f 	isb	sy

08000332 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000332:	e7fe      	b.n	8000332 <__tx_wait_here>

08000334 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000334:	4824      	ldr	r0, [pc, #144]	@ (80003c8 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000336:	4a25      	ldr	r2, [pc, #148]	@ (80003cc <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000338:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 800033c:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033e:	b191      	cbz	r1, 8000366 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000340:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000342:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000346:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800034a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034e:	d101      	bne.n	8000354 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000350:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000354 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000354:	4c1e      	ldr	r4, [pc, #120]	@ (80003d0 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000356:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800035a:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035e:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000360:	b10d      	cbz	r5, 8000366 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000362:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000364:	6023      	str	r3, [r4, #0]

08000366 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000366:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000368:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800036a:	b1d1      	cbz	r1, 80003a2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 800036c:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036e:	b662      	cpsie	i

08000370 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000370:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000372:	4c17      	ldr	r4, [pc, #92]	@ (80003d0 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000374:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000376:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800037a:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 800037c:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000382:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000386:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800038a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000392:	d101      	bne.n	8000398 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000394:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000398 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000398:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800039c:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003a0:	4770      	bx	lr

080003a2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003a2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a8:	b909      	cbnz	r1, 80003ae <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003aa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003ac:	e7f9      	b.n	80003a2 <__tx_ts_wait>

080003ae <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003ae:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003b2:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b6:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003ba:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003bc:	e7d8      	b.n	8000370 <__tx_ts_restore>
 80003be:	bf00      	nop

080003c0 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003c0:	4770      	bx	lr
 80003c2:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c4:	20010940 	.word	0x20010940
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c8:	200109d8 	.word	0x200109d8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003cc:	200109d4 	.word	0x200109d4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003d0:	200109e0 	.word	0x200109e0

080003d4 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d4:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d6:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003da:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003de:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003e2:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e4:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e8:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ea:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003ec:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ee:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003f0:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003f2:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f4:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f6:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f8:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003fa:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 8000400:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000406:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000408:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 800040a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040e:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000410:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 8000412:	4770      	bx	lr

08000414 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000414:	4922      	ldr	r1, [pc, #136]	@ (80004a0 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000416:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000418:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 800041c:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041e:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000420:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000422:	b13a      	cbz	r2, 8000434 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000424:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000428:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800042a:	b91a      	cbnz	r2, 8000434 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800042c:	4b1e      	ldr	r3, [pc, #120]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042e:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000432:	6018      	str	r0, [r3, #0]

08000434 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000434:	491d      	ldr	r1, [pc, #116]	@ (80004ac <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000436:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000438:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800043a:	b122      	cbz	r2, 8000446 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	4b1c      	ldr	r3, [pc, #112]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043e:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000442:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000444:	e008      	b.n	8000458 <__tx_timer_done>

08000446 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000446:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 800044c:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044e:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000450:	d101      	bne.n	8000456 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000452:	4b19      	ldr	r3, [pc, #100]	@ (80004b8 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000454:	6818      	ldr	r0, [r3, #0]

08000456 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000456:	6008      	str	r0, [r1, #0]

08000458 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800045a:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 800045c:	b912      	cbnz	r2, 8000464 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045e:	4914      	ldr	r1, [pc, #80]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000462:	b1c8      	cbz	r0, 8000498 <__tx_timer_nothing_expired>

08000464 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000464:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000466:	4912      	ldr	r1, [pc, #72]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000468:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800046a:	b108      	cbz	r0, 8000470 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800046c:	f011 fc6c 	bl	8011d48 <_tx_timer_expiration_process>

08000470 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000470:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000472:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000474:	b172      	cbz	r2, 8000494 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000476:	f011 fc1d 	bl	8011cb4 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800047a:	4810      	ldr	r0, [pc, #64]	@ (80004bc <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800047c:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047e:	b949      	cbnz	r1, 8000494 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000480:	480f      	ldr	r0, [pc, #60]	@ (80004c0 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000482:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000484:	4a0f      	ldr	r2, [pc, #60]	@ (80004c4 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000486:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000488:	480f      	ldr	r0, [pc, #60]	@ (80004c8 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800048a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000490:	d000      	beq.n	8000494 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000492:	6002      	str	r2, [r0, #0]

08000494 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000494:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000498 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000498:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800049c:	4770      	bx	lr
 800049e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004a0:	20010f40 	.word	0x20010f40
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a4:	200109e0 	.word	0x200109e0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a8:	20010f3c 	.word	0x20010f3c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004ac:	20010eb0 	.word	0x20010eb0
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004b0:	20010eac 	.word	0x20010eac
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b4:	20010eb4 	.word	0x20010eb4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b8:	20010eb8 	.word	0x20010eb8
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004bc:	20010940 	.word	0x20010940
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004c0:	200109d8 	.word	0x200109d8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c4:	200109d4 	.word	0x200109d4
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c8:	e000ed04 	.word	0xe000ed04

080004cc <USBPD_CAD_Init>:
 80004cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004d0:	2600      	movs	r6, #0
 80004d2:	2803      	cmp	r0, #3
 80004d4:	4681      	mov	r9, r0
 80004d6:	460c      	mov	r4, r1
 80004d8:	4690      	mov	r8, r2
 80004da:	bf28      	it	cs
 80004dc:	2601      	movcs	r6, #1
 80004de:	461f      	mov	r7, r3
 80004e0:	d219      	bcs.n	8000516 <USBPD_CAD_Init+0x4a>
 80004e2:	b90c      	cbnz	r4, 80004e8 <USBPD_CAD_Init+0x1c>
 80004e4:	2602      	movs	r6, #2
 80004e6:	e016      	b.n	8000516 <USBPD_CAD_Init+0x4a>
 80004e8:	200c      	movs	r0, #12
 80004ea:	f015 fa47 	bl	801597c <malloc>
 80004ee:	0005      	movs	r5, r0
 80004f0:	bf08      	it	eq
 80004f2:	2603      	moveq	r6, #3
 80004f4:	d00f      	beq.n	8000516 <USBPD_CAD_Init+0x4a>
 80004f6:	210c      	movs	r1, #12
 80004f8:	f015 fbc8 	bl	8015c8c <__aeabi_memclr>
 80004fc:	602f      	str	r7, [r5, #0]
 80004fe:	722e      	strb	r6, [r5, #8]
 8000500:	606c      	str	r4, [r5, #4]
 8000502:	493a      	ldr	r1, [pc, #232]	@ (80005ec <.text_6>)
 8000504:	464a      	mov	r2, r9
 8000506:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 800050a:	6863      	ldr	r3, [r4, #4]
 800050c:	463a      	mov	r2, r7
 800050e:	4641      	mov	r1, r8
 8000510:	4648      	mov	r0, r9
 8000512:	f00f fb6d 	bl	800fbf0 <CAD_Init>
 8000516:	4630      	mov	r0, r6
 8000518:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

0800051c <USBPD_CAD_PortEnable>:
 800051c:	2803      	cmp	r0, #3
 800051e:	d203      	bcs.n	8000528 <USBPD_CAD_PortEnable+0xc>
 8000520:	4a32      	ldr	r2, [pc, #200]	@ (80005ec <.text_6>)
 8000522:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000526:	7201      	strb	r1, [r0, #8]
 8000528:	4770      	bx	lr

0800052a <USBPD_CAD_Process>:
 800052a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800052c:	2100      	movs	r1, #0
 800052e:	f88d 1000 	strb.w	r1, [sp]
 8000532:	9101      	str	r1, [sp, #4]
 8000534:	f04f 35ff 	mov.w	r5, #4294967295
 8000538:	2600      	movs	r6, #0
 800053a:	4c2c      	ldr	r4, [pc, #176]	@ (80005ec <.text_6>)
 800053c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000540:	2800      	cmp	r0, #0
 8000542:	d04e      	beq.n	80005e2 <USBPD_CAD_Process+0xb8>
 8000544:	7a00      	ldrb	r0, [r0, #8]
 8000546:	2801      	cmp	r0, #1
 8000548:	d14b      	bne.n	80005e2 <USBPD_CAD_Process+0xb8>
 800054a:	aa01      	add	r2, sp, #4
 800054c:	4669      	mov	r1, sp
 800054e:	b2f0      	uxtb	r0, r6
 8000550:	f00f fc12 	bl	800fd78 <CAD_StateMachine>
 8000554:	42a8      	cmp	r0, r5
 8000556:	bf98      	it	ls
 8000558:	4605      	movls	r5, r0
 800055a:	f89d 0000 	ldrb.w	r0, [sp]
 800055e:	2801      	cmp	r0, #1
 8000560:	d004      	beq.n	800056c <USBPD_CAD_Process+0x42>
 8000562:	2802      	cmp	r0, #2
 8000564:	bf18      	it	ne
 8000566:	2804      	cmpne	r0, #4
 8000568:	d012      	beq.n	8000590 <USBPD_CAD_Process+0x66>
 800056a:	e02d      	b.n	80005c8 <USBPD_CAD_Process+0x9e>
 800056c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000570:	6801      	ldr	r1, [r0, #0]
 8000572:	680a      	ldr	r2, [r1, #0]
 8000574:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000578:	600a      	str	r2, [r1, #0]
 800057a:	6801      	ldr	r1, [r0, #0]
 800057c:	680b      	ldr	r3, [r1, #0]
 800057e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000582:	600b      	str	r3, [r1, #0]
 8000584:	6800      	ldr	r0, [r0, #0]
 8000586:	6801      	ldr	r1, [r0, #0]
 8000588:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 800058c:	6001      	str	r1, [r0, #0]
 800058e:	e01e      	b.n	80005ce <USBPD_CAD_Process+0xa4>
 8000590:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000594:	9901      	ldr	r1, [sp, #4]
 8000596:	6803      	ldr	r3, [r0, #0]
 8000598:	681f      	ldr	r7, [r3, #0]
 800059a:	f361 1787 	bfi	r7, r1, #6, #2
 800059e:	601f      	str	r7, [r3, #0]
 80005a0:	6801      	ldr	r1, [r0, #0]
 80005a2:	680a      	ldr	r2, [r1, #0]
 80005a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80005a8:	600a      	str	r2, [r1, #0]
 80005aa:	6800      	ldr	r0, [r0, #0]
 80005ac:	6801      	ldr	r1, [r0, #0]
 80005ae:	f3c1 0080 	ubfx	r0, r1, #2, #1
 80005b2:	2800      	cmp	r0, #0
 80005b4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80005b8:	6800      	ldr	r0, [r0, #0]
 80005ba:	6801      	ldr	r1, [r0, #0]
 80005bc:	bf0c      	ite	eq
 80005be:	f021 0108 	biceq.w	r1, r1, #8
 80005c2:	f041 0108 	orrne.w	r1, r1, #8
 80005c6:	6001      	str	r1, [r0, #0]
 80005c8:	f89d 0000 	ldrb.w	r0, [sp]
 80005cc:	b148      	cbz	r0, 80005e2 <USBPD_CAD_Process+0xb8>
 80005ce:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 80005d2:	9a01      	ldr	r2, [sp, #4]
 80005d4:	f89d 1000 	ldrb.w	r1, [sp]
 80005d8:	685f      	ldr	r7, [r3, #4]
 80005da:	b2f0      	uxtb	r0, r6
 80005dc:	f8d7 c000 	ldr.w	ip, [r7]
 80005e0:	47e0      	blx	ip
 80005e2:	1c76      	adds	r6, r6, #1
 80005e4:	2e03      	cmp	r6, #3
 80005e6:	d3a9      	bcc.n	800053c <USBPD_CAD_Process+0x12>
 80005e8:	4628      	mov	r0, r5
 80005ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080005ec <.text_6>:
 80005ec:	200000f0 	.word	0x200000f0

080005f0 <USBPD_CAD_AssertRd>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	4604      	mov	r4, r0
 80005f4:	f00f fdfc 	bl	80101f0 <USBPDM1_DeAssertRp>
 80005f8:	4620      	mov	r0, r4
 80005fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005fe:	f00f bdf9 	b.w	80101f4 <USBPDM1_AssertRd>

08000602 <USBPD_CAD_AssertRp>:
 8000602:	b510      	push	{r4, lr}
 8000604:	4604      	mov	r4, r0
 8000606:	f00f fe45 	bl	8010294 <USBPDM1_DeAssertRd>
 800060a:	4620      	mov	r0, r4
 800060c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000610:	f00f bcf4 	b.w	800fffc <USBPDM1_AssertRp>

08000614 <USBPD_CAD_EnterErrorRecovery>:
 8000614:	f00f bb96 	b.w	800fd44 <CAD_Enter_ErrorRecovery>

08000618 <USBPD_CAD_GetMemoryConsumption>:
 8000618:	2024      	movs	r0, #36	@ 0x24
 800061a:	4770      	bx	lr

0800061c <USBPD_PE_SetTrace>:
 800061c:	0001      	movs	r1, r0
 800061e:	4906      	ldr	r1, [pc, #24]	@ (8000638 <.text_5>)
 8000620:	bf08      	it	eq
 8000622:	f20f 0021 	addweq	r0, pc, #33	@ 0x21
 8000626:	6008      	str	r0, [r1, #0]
 8000628:	4770      	bx	lr

0800062a <USBPD_PE_CheckLIB>:
 800062a:	4601      	mov	r1, r0
 800062c:	2000      	movs	r0, #0
 800062e:	4a03      	ldr	r2, [pc, #12]	@ (800063c <.text_6>)
 8000630:	4291      	cmp	r1, r2
 8000632:	bf08      	it	eq
 8000634:	2001      	moveq	r0, #1
 8000636:	4770      	bx	lr

08000638 <.text_5>:
 8000638:	20000000 	.word	0x20000000

0800063c <.text_6>:
 800063c:	00410100 	.word	0x00410100

08000640 <USBPD_PE_GetMemoryConsumption>:
 8000640:	f7ff bfea 	b.w	8000618 <USBPD_CAD_GetMemoryConsumption>

08000644 <PE_Trace_Empty>:
 8000644:	4770      	bx	lr

08000646 <strlen>:
 8000646:	4603      	mov	r3, r0
 8000648:	f813 2b01 	ldrb.w	r2, [r3], #1
 800064c:	2a00      	cmp	r2, #0
 800064e:	d1fb      	bne.n	8000648 <strlen+0x2>
 8000650:	1a18      	subs	r0, r3, r0
 8000652:	3801      	subs	r0, #1
 8000654:	4770      	bx	lr

08000656 <__aeabi_memset>:
 8000656:	b470      	push	{r4, r5, r6}
 8000658:	0784      	lsls	r4, r0, #30
 800065a:	d046      	beq.n	80006ea <__aeabi_memset+0x94>
 800065c:	1e4c      	subs	r4, r1, #1
 800065e:	2900      	cmp	r1, #0
 8000660:	d041      	beq.n	80006e6 <__aeabi_memset+0x90>
 8000662:	b2d5      	uxtb	r5, r2
 8000664:	4603      	mov	r3, r0
 8000666:	e002      	b.n	800066e <__aeabi_memset+0x18>
 8000668:	1e61      	subs	r1, r4, #1
 800066a:	b3e4      	cbz	r4, 80006e6 <__aeabi_memset+0x90>
 800066c:	460c      	mov	r4, r1
 800066e:	f803 5b01 	strb.w	r5, [r3], #1
 8000672:	0799      	lsls	r1, r3, #30
 8000674:	d1f8      	bne.n	8000668 <__aeabi_memset+0x12>
 8000676:	2c03      	cmp	r4, #3
 8000678:	d92e      	bls.n	80006d8 <__aeabi_memset+0x82>
 800067a:	b2d5      	uxtb	r5, r2
 800067c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000680:	2c0f      	cmp	r4, #15
 8000682:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000686:	d919      	bls.n	80006bc <__aeabi_memset+0x66>
 8000688:	4626      	mov	r6, r4
 800068a:	f103 0110 	add.w	r1, r3, #16
 800068e:	3e10      	subs	r6, #16
 8000690:	2e0f      	cmp	r6, #15
 8000692:	f841 5c10 	str.w	r5, [r1, #-16]
 8000696:	f841 5c0c 	str.w	r5, [r1, #-12]
 800069a:	f841 5c08 	str.w	r5, [r1, #-8]
 800069e:	f841 5c04 	str.w	r5, [r1, #-4]
 80006a2:	f101 0110 	add.w	r1, r1, #16
 80006a6:	d8f2      	bhi.n	800068e <__aeabi_memset+0x38>
 80006a8:	f1a4 0110 	sub.w	r1, r4, #16
 80006ac:	f021 010f 	bic.w	r1, r1, #15
 80006b0:	f004 040f 	and.w	r4, r4, #15
 80006b4:	3110      	adds	r1, #16
 80006b6:	2c03      	cmp	r4, #3
 80006b8:	440b      	add	r3, r1
 80006ba:	d90d      	bls.n	80006d8 <__aeabi_memset+0x82>
 80006bc:	461e      	mov	r6, r3
 80006be:	4621      	mov	r1, r4
 80006c0:	3904      	subs	r1, #4
 80006c2:	2903      	cmp	r1, #3
 80006c4:	f846 5b04 	str.w	r5, [r6], #4
 80006c8:	d8fa      	bhi.n	80006c0 <__aeabi_memset+0x6a>
 80006ca:	1f21      	subs	r1, r4, #4
 80006cc:	f021 0103 	bic.w	r1, r1, #3
 80006d0:	3104      	adds	r1, #4
 80006d2:	440b      	add	r3, r1
 80006d4:	f004 0403 	and.w	r4, r4, #3
 80006d8:	b12c      	cbz	r4, 80006e6 <__aeabi_memset+0x90>
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	441c      	add	r4, r3
 80006de:	f803 2b01 	strb.w	r2, [r3], #1
 80006e2:	42a3      	cmp	r3, r4
 80006e4:	d1fb      	bne.n	80006de <__aeabi_memset+0x88>
 80006e6:	bc70      	pop	{r4, r5, r6}
 80006e8:	4770      	bx	lr
 80006ea:	460c      	mov	r4, r1
 80006ec:	4603      	mov	r3, r0
 80006ee:	e7c2      	b.n	8000676 <__aeabi_memset+0x20>

080006f0 <__aeabi_uldivmod>:
 80006f0:	b953      	cbnz	r3, 8000708 <__aeabi_uldivmod+0x18>
 80006f2:	b94a      	cbnz	r2, 8000708 <__aeabi_uldivmod+0x18>
 80006f4:	2900      	cmp	r1, #0
 80006f6:	bf08      	it	eq
 80006f8:	2800      	cmpeq	r0, #0
 80006fa:	bf1c      	itt	ne
 80006fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000700:	f04f 30ff 	movne.w	r0, #4294967295
 8000704:	f000 b97e 	b.w	8000a04 <__aeabi_idiv0>
 8000708:	f1ad 0c08 	sub.w	ip, sp, #8
 800070c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000710:	f000 f806 	bl	8000720 <__udivmoddi4>
 8000714:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800071c:	b004      	add	sp, #16
 800071e:	4770      	bx	lr

08000720 <__udivmoddi4>:
 8000720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000724:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000726:	460c      	mov	r4, r1
 8000728:	2b00      	cmp	r3, #0
 800072a:	d14d      	bne.n	80007c8 <__udivmoddi4+0xa8>
 800072c:	428a      	cmp	r2, r1
 800072e:	460f      	mov	r7, r1
 8000730:	4684      	mov	ip, r0
 8000732:	4696      	mov	lr, r2
 8000734:	fab2 f382 	clz	r3, r2
 8000738:	d960      	bls.n	80007fc <__udivmoddi4+0xdc>
 800073a:	b14b      	cbz	r3, 8000750 <__udivmoddi4+0x30>
 800073c:	fa02 fe03 	lsl.w	lr, r2, r3
 8000740:	f1c3 0220 	rsb	r2, r3, #32
 8000744:	409f      	lsls	r7, r3
 8000746:	fa00 fc03 	lsl.w	ip, r0, r3
 800074a:	fa20 f202 	lsr.w	r2, r0, r2
 800074e:	4317      	orrs	r7, r2
 8000750:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000754:	fa1f f48e 	uxth.w	r4, lr
 8000758:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800075c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000760:	fb06 7711 	mls	r7, r6, r1, r7
 8000764:	fb01 f004 	mul.w	r0, r1, r4
 8000768:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800076c:	4290      	cmp	r0, r2
 800076e:	d908      	bls.n	8000782 <__udivmoddi4+0x62>
 8000770:	eb1e 0202 	adds.w	r2, lr, r2
 8000774:	f101 37ff 	add.w	r7, r1, #4294967295
 8000778:	d202      	bcs.n	8000780 <__udivmoddi4+0x60>
 800077a:	4290      	cmp	r0, r2
 800077c:	f200 812d 	bhi.w	80009da <__udivmoddi4+0x2ba>
 8000780:	4639      	mov	r1, r7
 8000782:	1a12      	subs	r2, r2, r0
 8000784:	fa1f fc8c 	uxth.w	ip, ip
 8000788:	fbb2 f0f6 	udiv	r0, r2, r6
 800078c:	fb06 2210 	mls	r2, r6, r0, r2
 8000790:	fb00 f404 	mul.w	r4, r0, r4
 8000794:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000798:	4564      	cmp	r4, ip
 800079a:	d908      	bls.n	80007ae <__udivmoddi4+0x8e>
 800079c:	eb1e 0c0c 	adds.w	ip, lr, ip
 80007a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80007a4:	d202      	bcs.n	80007ac <__udivmoddi4+0x8c>
 80007a6:	4564      	cmp	r4, ip
 80007a8:	f200 811a 	bhi.w	80009e0 <__udivmoddi4+0x2c0>
 80007ac:	4610      	mov	r0, r2
 80007ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007b2:	ebac 0c04 	sub.w	ip, ip, r4
 80007b6:	2100      	movs	r1, #0
 80007b8:	b125      	cbz	r5, 80007c4 <__udivmoddi4+0xa4>
 80007ba:	fa2c f303 	lsr.w	r3, ip, r3
 80007be:	2200      	movs	r2, #0
 80007c0:	e9c5 3200 	strd	r3, r2, [r5]
 80007c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007c8:	428b      	cmp	r3, r1
 80007ca:	d905      	bls.n	80007d8 <__udivmoddi4+0xb8>
 80007cc:	b10d      	cbz	r5, 80007d2 <__udivmoddi4+0xb2>
 80007ce:	e9c5 0100 	strd	r0, r1, [r5]
 80007d2:	2100      	movs	r1, #0
 80007d4:	4608      	mov	r0, r1
 80007d6:	e7f5      	b.n	80007c4 <__udivmoddi4+0xa4>
 80007d8:	fab3 f183 	clz	r1, r3
 80007dc:	2900      	cmp	r1, #0
 80007de:	d14d      	bne.n	800087c <__udivmoddi4+0x15c>
 80007e0:	42a3      	cmp	r3, r4
 80007e2:	f0c0 80f2 	bcc.w	80009ca <__udivmoddi4+0x2aa>
 80007e6:	4290      	cmp	r0, r2
 80007e8:	f080 80ef 	bcs.w	80009ca <__udivmoddi4+0x2aa>
 80007ec:	4606      	mov	r6, r0
 80007ee:	4623      	mov	r3, r4
 80007f0:	4608      	mov	r0, r1
 80007f2:	2d00      	cmp	r5, #0
 80007f4:	d0e6      	beq.n	80007c4 <__udivmoddi4+0xa4>
 80007f6:	e9c5 6300 	strd	r6, r3, [r5]
 80007fa:	e7e3      	b.n	80007c4 <__udivmoddi4+0xa4>
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	f040 80a2 	bne.w	8000946 <__udivmoddi4+0x226>
 8000802:	1a8a      	subs	r2, r1, r2
 8000804:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000808:	fa1f f68e 	uxth.w	r6, lr
 800080c:	2101      	movs	r1, #1
 800080e:	fbb2 f4f7 	udiv	r4, r2, r7
 8000812:	fb07 2014 	mls	r0, r7, r4, r2
 8000816:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800081a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800081e:	fb06 f004 	mul.w	r0, r6, r4
 8000822:	4290      	cmp	r0, r2
 8000824:	d90f      	bls.n	8000846 <__udivmoddi4+0x126>
 8000826:	eb1e 0202 	adds.w	r2, lr, r2
 800082a:	f104 38ff 	add.w	r8, r4, #4294967295
 800082e:	bf2c      	ite	cs
 8000830:	f04f 0901 	movcs.w	r9, #1
 8000834:	f04f 0900 	movcc.w	r9, #0
 8000838:	4290      	cmp	r0, r2
 800083a:	d903      	bls.n	8000844 <__udivmoddi4+0x124>
 800083c:	f1b9 0f00 	cmp.w	r9, #0
 8000840:	f000 80c8 	beq.w	80009d4 <__udivmoddi4+0x2b4>
 8000844:	4644      	mov	r4, r8
 8000846:	1a12      	subs	r2, r2, r0
 8000848:	fa1f fc8c 	uxth.w	ip, ip
 800084c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000850:	fb07 2210 	mls	r2, r7, r0, r2
 8000854:	fb00 f606 	mul.w	r6, r0, r6
 8000858:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800085c:	4566      	cmp	r6, ip
 800085e:	d908      	bls.n	8000872 <__udivmoddi4+0x152>
 8000860:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000864:	f100 32ff 	add.w	r2, r0, #4294967295
 8000868:	d202      	bcs.n	8000870 <__udivmoddi4+0x150>
 800086a:	4566      	cmp	r6, ip
 800086c:	f200 80bb 	bhi.w	80009e6 <__udivmoddi4+0x2c6>
 8000870:	4610      	mov	r0, r2
 8000872:	ebac 0c06 	sub.w	ip, ip, r6
 8000876:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800087a:	e79d      	b.n	80007b8 <__udivmoddi4+0x98>
 800087c:	f1c1 0620 	rsb	r6, r1, #32
 8000880:	408b      	lsls	r3, r1
 8000882:	fa04 fe01 	lsl.w	lr, r4, r1
 8000886:	fa22 f706 	lsr.w	r7, r2, r6
 800088a:	fa20 fc06 	lsr.w	ip, r0, r6
 800088e:	40f4      	lsrs	r4, r6
 8000890:	408a      	lsls	r2, r1
 8000892:	431f      	orrs	r7, r3
 8000894:	ea4e 030c 	orr.w	r3, lr, ip
 8000898:	fa00 fe01 	lsl.w	lr, r0, r1
 800089c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008a4:	fa1f fc87 	uxth.w	ip, r7
 80008a8:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ac:	fb08 4410 	mls	r4, r8, r0, r4
 80008b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008b4:	fb00 f90c 	mul.w	r9, r0, ip
 80008b8:	45a1      	cmp	r9, r4
 80008ba:	d90e      	bls.n	80008da <__udivmoddi4+0x1ba>
 80008bc:	193c      	adds	r4, r7, r4
 80008be:	f100 3aff 	add.w	sl, r0, #4294967295
 80008c2:	bf2c      	ite	cs
 80008c4:	f04f 0b01 	movcs.w	fp, #1
 80008c8:	f04f 0b00 	movcc.w	fp, #0
 80008cc:	45a1      	cmp	r9, r4
 80008ce:	d903      	bls.n	80008d8 <__udivmoddi4+0x1b8>
 80008d0:	f1bb 0f00 	cmp.w	fp, #0
 80008d4:	f000 8093 	beq.w	80009fe <__udivmoddi4+0x2de>
 80008d8:	4650      	mov	r0, sl
 80008da:	eba4 0409 	sub.w	r4, r4, r9
 80008de:	fa1f f983 	uxth.w	r9, r3
 80008e2:	fbb4 f3f8 	udiv	r3, r4, r8
 80008e6:	fb08 4413 	mls	r4, r8, r3, r4
 80008ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80008ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f2:	45a4      	cmp	ip, r4
 80008f4:	d906      	bls.n	8000904 <__udivmoddi4+0x1e4>
 80008f6:	193c      	adds	r4, r7, r4
 80008f8:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fc:	d201      	bcs.n	8000902 <__udivmoddi4+0x1e2>
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d87a      	bhi.n	80009f8 <__udivmoddi4+0x2d8>
 8000902:	4643      	mov	r3, r8
 8000904:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000908:	eba4 040c 	sub.w	r4, r4, ip
 800090c:	fba0 9802 	umull	r9, r8, r0, r2
 8000910:	4544      	cmp	r4, r8
 8000912:	46cc      	mov	ip, r9
 8000914:	4643      	mov	r3, r8
 8000916:	d302      	bcc.n	800091e <__udivmoddi4+0x1fe>
 8000918:	d106      	bne.n	8000928 <__udivmoddi4+0x208>
 800091a:	45ce      	cmp	lr, r9
 800091c:	d204      	bcs.n	8000928 <__udivmoddi4+0x208>
 800091e:	3801      	subs	r0, #1
 8000920:	ebb9 0c02 	subs.w	ip, r9, r2
 8000924:	eb68 0307 	sbc.w	r3, r8, r7
 8000928:	b15d      	cbz	r5, 8000942 <__udivmoddi4+0x222>
 800092a:	ebbe 020c 	subs.w	r2, lr, ip
 800092e:	eb64 0403 	sbc.w	r4, r4, r3
 8000932:	fa04 f606 	lsl.w	r6, r4, r6
 8000936:	fa22 f301 	lsr.w	r3, r2, r1
 800093a:	40cc      	lsrs	r4, r1
 800093c:	431e      	orrs	r6, r3
 800093e:	e9c5 6400 	strd	r6, r4, [r5]
 8000942:	2100      	movs	r1, #0
 8000944:	e73e      	b.n	80007c4 <__udivmoddi4+0xa4>
 8000946:	fa02 fe03 	lsl.w	lr, r2, r3
 800094a:	f1c3 0120 	rsb	r1, r3, #32
 800094e:	fa04 f203 	lsl.w	r2, r4, r3
 8000952:	fa00 fc03 	lsl.w	ip, r0, r3
 8000956:	40cc      	lsrs	r4, r1
 8000958:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800095c:	fa20 f101 	lsr.w	r1, r0, r1
 8000960:	fa1f f68e 	uxth.w	r6, lr
 8000964:	fbb4 f0f7 	udiv	r0, r4, r7
 8000968:	430a      	orrs	r2, r1
 800096a:	fb07 4410 	mls	r4, r7, r0, r4
 800096e:	0c11      	lsrs	r1, r2, #16
 8000970:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000974:	fb00 f406 	mul.w	r4, r0, r6
 8000978:	428c      	cmp	r4, r1
 800097a:	d90e      	bls.n	800099a <__udivmoddi4+0x27a>
 800097c:	eb1e 0101 	adds.w	r1, lr, r1
 8000980:	f100 38ff 	add.w	r8, r0, #4294967295
 8000984:	bf2c      	ite	cs
 8000986:	f04f 0901 	movcs.w	r9, #1
 800098a:	f04f 0900 	movcc.w	r9, #0
 800098e:	428c      	cmp	r4, r1
 8000990:	d902      	bls.n	8000998 <__udivmoddi4+0x278>
 8000992:	f1b9 0f00 	cmp.w	r9, #0
 8000996:	d02c      	beq.n	80009f2 <__udivmoddi4+0x2d2>
 8000998:	4640      	mov	r0, r8
 800099a:	1b09      	subs	r1, r1, r4
 800099c:	b292      	uxth	r2, r2
 800099e:	fbb1 f4f7 	udiv	r4, r1, r7
 80009a2:	fb07 1114 	mls	r1, r7, r4, r1
 80009a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009aa:	fb04 f106 	mul.w	r1, r4, r6
 80009ae:	4291      	cmp	r1, r2
 80009b0:	d907      	bls.n	80009c2 <__udivmoddi4+0x2a2>
 80009b2:	eb1e 0202 	adds.w	r2, lr, r2
 80009b6:	f104 38ff 	add.w	r8, r4, #4294967295
 80009ba:	d201      	bcs.n	80009c0 <__udivmoddi4+0x2a0>
 80009bc:	4291      	cmp	r1, r2
 80009be:	d815      	bhi.n	80009ec <__udivmoddi4+0x2cc>
 80009c0:	4644      	mov	r4, r8
 80009c2:	1a52      	subs	r2, r2, r1
 80009c4:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 80009c8:	e721      	b.n	800080e <__udivmoddi4+0xee>
 80009ca:	1a86      	subs	r6, r0, r2
 80009cc:	eb64 0303 	sbc.w	r3, r4, r3
 80009d0:	2001      	movs	r0, #1
 80009d2:	e70e      	b.n	80007f2 <__udivmoddi4+0xd2>
 80009d4:	3c02      	subs	r4, #2
 80009d6:	4472      	add	r2, lr
 80009d8:	e735      	b.n	8000846 <__udivmoddi4+0x126>
 80009da:	3902      	subs	r1, #2
 80009dc:	4472      	add	r2, lr
 80009de:	e6d0      	b.n	8000782 <__udivmoddi4+0x62>
 80009e0:	44f4      	add	ip, lr
 80009e2:	3802      	subs	r0, #2
 80009e4:	e6e3      	b.n	80007ae <__udivmoddi4+0x8e>
 80009e6:	44f4      	add	ip, lr
 80009e8:	3802      	subs	r0, #2
 80009ea:	e742      	b.n	8000872 <__udivmoddi4+0x152>
 80009ec:	3c02      	subs	r4, #2
 80009ee:	4472      	add	r2, lr
 80009f0:	e7e7      	b.n	80009c2 <__udivmoddi4+0x2a2>
 80009f2:	3802      	subs	r0, #2
 80009f4:	4471      	add	r1, lr
 80009f6:	e7d0      	b.n	800099a <__udivmoddi4+0x27a>
 80009f8:	3b02      	subs	r3, #2
 80009fa:	443c      	add	r4, r7
 80009fc:	e782      	b.n	8000904 <__udivmoddi4+0x1e4>
 80009fe:	3802      	subs	r0, #2
 8000a00:	443c      	add	r4, r7
 8000a02:	e76a      	b.n	80008da <__udivmoddi4+0x1ba>

08000a04 <__aeabi_idiv0>:
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000a08:	b500      	push	{lr}
 8000a0a:	b083      	sub	sp, #12

#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000a0c:	2334      	movs	r3, #52	@ 0x34
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a14:	4a16      	ldr	r2, [pc, #88]	@ (8000a70 <tx_application_define+0x68>)
 8000a16:	4917      	ldr	r1, [pc, #92]	@ (8000a74 <tx_application_define+0x6c>)
 8000a18:	4817      	ldr	r0, [pc, #92]	@ (8000a78 <tx_application_define+0x70>)
 8000a1a:	f011 fb2d 	bl	8012078 <_txe_byte_pool_create>
 8000a1e:	b920      	cbnz	r0, 8000a2a <tx_application_define+0x22>
  {
  }
  else
  {
    memory_ptr = (VOID *)&tx_app_byte_pool;
    status = App_ThreadX_Init(memory_ptr);
 8000a20:	4815      	ldr	r0, [pc, #84]	@ (8000a78 <tx_application_define+0x70>)
 8000a22:	f001 f8cb 	bl	8001bbc <App_ThreadX_Init>
    if (status != TX_SUCCESS)
 8000a26:	b100      	cbz	r0, 8000a2a <tx_application_define+0x22>
    {
      while(1)
 8000a28:	e7fe      	b.n	8000a28 <tx_application_define+0x20>
      {
      }
    }
  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000a2a:	2334      	movs	r3, #52	@ 0x34
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a32:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <tx_application_define+0x74>)
 8000a34:	4912      	ldr	r1, [pc, #72]	@ (8000a80 <tx_application_define+0x78>)
 8000a36:	4813      	ldr	r0, [pc, #76]	@ (8000a84 <tx_application_define+0x7c>)
 8000a38:	f011 fb1e 	bl	8012078 <_txe_byte_pool_create>
 8000a3c:	b920      	cbnz	r0, 8000a48 <tx_application_define+0x40>
  {
  }
  else
  {
    memory_ptr = (VOID *)&ux_device_app_byte_pool;
    status = MX_USBX_Device_Init(memory_ptr);
 8000a3e:	4811      	ldr	r0, [pc, #68]	@ (8000a84 <tx_application_define+0x7c>)
 8000a40:	f014 f8d6 	bl	8014bf0 <MX_USBX_Device_Init>
    if (status != UX_SUCCESS)
 8000a44:	b100      	cbz	r0, 8000a48 <tx_application_define+0x40>
    {
      while(1)
 8000a46:	e7fe      	b.n	8000a46 <tx_application_define+0x3e>
      {
      }
    }
  }
  if (tx_byte_pool_create(&usbpd_app_byte_pool, "USBPD App memory pool", usbpd_byte_pool_buffer, USBPD_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000a48:	2334      	movs	r3, #52	@ 0x34
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a50:	4a0d      	ldr	r2, [pc, #52]	@ (8000a88 <tx_application_define+0x80>)
 8000a52:	490e      	ldr	r1, [pc, #56]	@ (8000a8c <tx_application_define+0x84>)
 8000a54:	480e      	ldr	r0, [pc, #56]	@ (8000a90 <tx_application_define+0x88>)
 8000a56:	f011 fb0f 	bl	8012078 <_txe_byte_pool_create>
 8000a5a:	b110      	cbz	r0, 8000a62 <tx_application_define+0x5a>
 * The "tx_initialize_low_level.S" should be also modified to enable the "USE_DYNAMIC_MEMORY_ALLOCATION" flag.
 */

  (void)first_unused_memory;
#endif
}
 8000a5c:	b003      	add	sp, #12
 8000a5e:	f85d fb04 	ldr.w	pc, [sp], #4
    status = MX_USBPD_Init(memory_ptr);
 8000a62:	480b      	ldr	r0, [pc, #44]	@ (8000a90 <tx_application_define+0x88>)
 8000a64:	f013 ff53 	bl	801490e <MX_USBPD_Init>
    if (status != USBPD_OK)
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d0f7      	beq.n	8000a5c <tx_application_define+0x54>
      while(1)
 8000a6c:	e7fe      	b.n	8000a6c <tx_application_define+0x64>
 8000a6e:	bf00      	nop
 8000a70:	20005998 	.word	0x20005998
 8000a74:	08016ce0 	.word	0x08016ce0
 8000a78:	20005964 	.word	0x20005964
 8000a7c:	20001964 	.word	0x20001964
 8000a80:	08016cf4 	.word	0x08016cf4
 8000a84:	20001930 	.word	0x20001930
 8000a88:	20000130 	.word	0x20000130
 8000a8c:	08016d08 	.word	0x08016d08
 8000a90:	200000fc 	.word	0x200000fc

08000a94 <FLASH_Read>:
#if !defined(NUCLEO_BOARD) || defined(LEVEL_SHIFT)

#include "I2C3_flash.h"

int FLASH_Read(unsigned long addr, unsigned char *data, size_t bytes)
{
 8000a94:	b500      	push	{lr}
 8000a96:	b085      	sub	sp, #20
#ifdef LEVEL_SHIFT
	unsigned short devAddr = 0xA8;
#else
	unsigned short devAddr = 0xA0;
#endif
	devAddr |= (uint16_t)((addr >> 15) & 0x6);
 8000a98:	ea4f 3cd0 	mov.w	ip, r0, lsr #15
 8000a9c:	f00c 0c06 	and.w	ip, ip, #6
#ifdef LEVEL_SHIFT
	if (HAL_I2C_Mem_Read(&hi2c2, devAddr, (uint16_t)addr, 2, data, bytes, 5000) == HAL_OK)
 8000aa0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000aa4:	9302      	str	r3, [sp, #8]
 8000aa6:	b292      	uxth	r2, r2
 8000aa8:	9201      	str	r2, [sp, #4]
 8000aaa:	9100      	str	r1, [sp, #0]
 8000aac:	2302      	movs	r3, #2
 8000aae:	b282      	uxth	r2, r0
 8000ab0:	f04c 01a8 	orr.w	r1, ip, #168	@ 0xa8
 8000ab4:	4804      	ldr	r0, [pc, #16]	@ (8000ac8 <FLASH_Read+0x34>)
 8000ab6:	f006 fe27 	bl	8007708 <HAL_I2C_Mem_Read>
 8000aba:	b118      	cbz	r0, 8000ac4 <FLASH_Read+0x30>
#endif
	{
		return 0;
	}

	return 1;	//ERROR
 8000abc:	2001      	movs	r0, #1
}
 8000abe:	b005      	add	sp, #20
 8000ac0:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	e7fa      	b.n	8000abe <FLASH_Read+0x2a>
 8000ac8:	2000fe54 	.word	0x2000fe54

08000acc <FLASH_Write>:

int FLASH_Write(unsigned long addr, unsigned char *data, size_t bytes)
{
 8000acc:	b500      	push	{lr}
 8000ace:	b085      	sub	sp, #20
#ifdef LEVEL_SHIFT
	unsigned short devAddr = 0xA8;
#else
	unsigned short devAddr = 0xA0;
#endif
	devAddr |= (uint16_t)((addr >> 15) & 0x6);
 8000ad0:	ea4f 3cd0 	mov.w	ip, r0, lsr #15
 8000ad4:	f00c 0c06 	and.w	ip, ip, #6
#ifdef LEVEL_SHIFT
	if (HAL_I2C_Mem_Write(&hi2c2, devAddr, (uint16_t)addr, 2, data, bytes, 5000) == HAL_OK)
 8000ad8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000adc:	9302      	str	r3, [sp, #8]
 8000ade:	b292      	uxth	r2, r2
 8000ae0:	9201      	str	r2, [sp, #4]
 8000ae2:	9100      	str	r1, [sp, #0]
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	b282      	uxth	r2, r0
 8000ae8:	f04c 01a8 	orr.w	r1, ip, #168	@ 0xa8
 8000aec:	4804      	ldr	r0, [pc, #16]	@ (8000b00 <FLASH_Write+0x34>)
 8000aee:	f006 fd36 	bl	800755e <HAL_I2C_Mem_Write>
 8000af2:	b118      	cbz	r0, 8000afc <FLASH_Write+0x30>
#endif
	{
		return 0;
	}

	return 1;	//ERROR
 8000af4:	2001      	movs	r0, #1
}
 8000af6:	b005      	add	sp, #20
 8000af8:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
 8000afc:	2000      	movs	r0, #0
 8000afe:	e7fa      	b.n	8000af6 <FLASH_Write+0x2a>
 8000b00:	2000fe54 	.word	0x2000fe54

08000b04 <MEM_PoolInit>:
	//initialize MEM_Pool
	unsigned long i;

#if 1
	/* just to avoid a "not used" warning */
	sMemPoolRAM[0] = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <MEM_PoolInit+0x34>)
 8000b08:	7013      	strb	r3, [r2, #0]
#endif

	for (i= 0; i < MEM_POOL_SEGMENTS; i++)
 8000b0a:	e00a      	b.n	8000b22 <MEM_PoolInit+0x1e>
	{
		gMemPoolMgt[i].startAddr = SRAM_FREE_START + (i * MEM_POOL_SEG_SIZE);
 8000b0c:	490a      	ldr	r1, [pc, #40]	@ (8000b38 <MEM_PoolInit+0x34>)
 8000b0e:	eb01 3103 	add.w	r1, r1, r3, lsl #12
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <MEM_PoolInit+0x38>)
 8000b14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		gMemPoolMgt[i].alloc 	 = ALLOC_FREE;
 8000b18:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	6051      	str	r1, [r2, #4]
	for (i= 0; i < MEM_POOL_SEGMENTS; i++)
 8000b20:	3301      	adds	r3, #1
 8000b22:	2b05      	cmp	r3, #5
 8000b24:	d9f2      	bls.n	8000b0c <MEM_PoolInit+0x8>
	}

	sMEMPoolWatermark = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <MEM_PoolInit+0x3c>)
 8000b2a:	6013      	str	r3, [r2, #0]
	lookAheadIdx = 0;
 8000b2c:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <MEM_PoolInit+0x40>)
 8000b2e:	6013      	str	r3, [r2, #0]
	inUse = 0;
 8000b30:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <MEM_PoolInit+0x44>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	200061d4 	.word	0x200061d4
 8000b3c:	200061a4 	.word	0x200061a4
 8000b40:	2000619c 	.word	0x2000619c
 8000b44:	200061a0 	.word	0x200061a0
 8000b48:	20006198 	.word	0x20006198

08000b4c <MEM_PoolAlloc>:
{
	//allocate N * SEGMENTS as one chunk
	unsigned int i, j, k;
	int f;

	if ( ! n)
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	f000 8090 	beq.w	8000c72 <MEM_PoolAlloc+0x126>
{
 8000b52:	b508      	push	{r3, lr}
		return NULL;

	/* translate into N * MEM_POOL_SEG_SIZE */
	n = (n + MEM_POOL_SEG_SIZE -1) / MEM_POOL_SEG_SIZE;
 8000b54:	f600 7cff 	addw	ip, r0, #4095	@ 0xfff
 8000b58:	ea4f 3c1c 	mov.w	ip, ip, lsr #12

	f = -1;
	/* start searching from current position
	 * keep the previously used segments still untouched, e.g. for network NO_COPY
	 */
	for (i = lookAheadIdx; i < MEM_POOL_SEGMENTS; i++)
 8000b5c:	4b46      	ldr	r3, [pc, #280]	@ (8000c78 <MEM_PoolAlloc+0x12c>)
 8000b5e:	6819      	ldr	r1, [r3, #0]
 8000b60:	e003      	b.n	8000b6a <MEM_PoolAlloc+0x1e>
			k = 1;
			for (j = i + 1; (j < MEM_POOL_SEGMENTS) && (j < (i + n)); j++)
			{
				if (gMemPoolMgt[j].alloc != ALLOC_FREE)
				{
					i = j;		//start over to find free region
 8000b62:	4619      	mov	r1, r3
					break;
				}
				else
					k++;
			}
			if (k == n)
 8000b64:	4560      	cmp	r0, ip
 8000b66:	d019      	beq.n	8000b9c <MEM_PoolAlloc+0x50>
	for (i = lookAheadIdx; i < MEM_POOL_SEGMENTS; i++)
 8000b68:	3101      	adds	r1, #1
 8000b6a:	2905      	cmp	r1, #5
 8000b6c:	d81b      	bhi.n	8000ba6 <MEM_PoolAlloc+0x5a>
		if (gMemPoolMgt[i].alloc == ALLOC_FREE)
 8000b6e:	4b43      	ldr	r3, [pc, #268]	@ (8000c7c <MEM_PoolAlloc+0x130>)
 8000b70:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1f6      	bne.n	8000b68 <MEM_PoolAlloc+0x1c>
			for (j = i + 1; (j < MEM_POOL_SEGMENTS) && (j < (i + n)); j++)
 8000b7a:	1c4b      	adds	r3, r1, #1
			k = 1;
 8000b7c:	2001      	movs	r0, #1
			for (j = i + 1; (j < MEM_POOL_SEGMENTS) && (j < (i + n)); j++)
 8000b7e:	2b05      	cmp	r3, #5
 8000b80:	d8f0      	bhi.n	8000b64 <MEM_PoolAlloc+0x18>
 8000b82:	eb01 020c 	add.w	r2, r1, ip
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d9ec      	bls.n	8000b64 <MEM_PoolAlloc+0x18>
				if (gMemPoolMgt[j].alloc != ALLOC_FREE)
 8000b8a:	4a3c      	ldr	r2, [pc, #240]	@ (8000c7c <MEM_PoolAlloc+0x130>)
 8000b8c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000b90:	6852      	ldr	r2, [r2, #4]
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	d1e5      	bne.n	8000b62 <MEM_PoolAlloc+0x16>
					k++;
 8000b96:	3001      	adds	r0, #1
			for (j = i + 1; (j < MEM_POOL_SEGMENTS) && (j < (i + n)); j++)
 8000b98:	3301      	adds	r3, #1
 8000b9a:	e7f0      	b.n	8000b7e <MEM_PoolAlloc+0x32>
			{
				f = (int)i;			//found free entry for requested segments
 8000b9c:	468e      	mov	lr, r1
				lookAheadIdx = i + 1;
 8000b9e:	3101      	adds	r1, #1
 8000ba0:	4b35      	ldr	r3, [pc, #212]	@ (8000c78 <MEM_PoolAlloc+0x12c>)
 8000ba2:	6019      	str	r1, [r3, #0]
				break;
 8000ba4:	e001      	b.n	8000baa <MEM_PoolAlloc+0x5e>
	f = -1;
 8000ba6:	f04f 3eff 	mov.w	lr, #4294967295
			}
		}
	}

	//have we reached the end?
	if (lookAheadIdx >= MEM_POOL_SEGMENTS)
 8000baa:	4b33      	ldr	r3, [pc, #204]	@ (8000c78 <MEM_PoolAlloc+0x12c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b05      	cmp	r3, #5
 8000bb0:	d902      	bls.n	8000bb8 <MEM_PoolAlloc+0x6c>
		lookAheadIdx = 0;
 8000bb2:	4b31      	ldr	r3, [pc, #196]	@ (8000c78 <MEM_PoolAlloc+0x12c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]

	//if not yet found in remaining part - start again from begin
	if (f == -1)
 8000bb8:	f1be 3fff 	cmp.w	lr, #4294967295
 8000bbc:	d038      	beq.n	8000c30 <MEM_PoolAlloc+0xe4>
				}
			}
		}
	}

	if (lookAheadIdx >= MEM_POOL_SEGMENTS)
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8000c78 <MEM_PoolAlloc+0x12c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b05      	cmp	r3, #5
 8000bc4:	d902      	bls.n	8000bcc <MEM_PoolAlloc+0x80>
			lookAheadIdx = 0;
 8000bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c78 <MEM_PoolAlloc+0x12c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]

	//check if we have found a free range
	if (f != -1)
 8000bcc:	f1be 3fff 	cmp.w	lr, #4294967295
 8000bd0:	d04a      	beq.n	8000c68 <MEM_PoolAlloc+0x11c>
	{
		//allocate now all the entries requested (based on SEGMENT size)
		i = (unsigned int)f;
 8000bd2:	4670      	mov	r0, lr
		j = i;
		gMemPoolMgt[i].alloc = ALLOC_USED;
 8000bd4:	4b29      	ldr	r3, [pc, #164]	@ (8000c7c <MEM_PoolAlloc+0x130>)
 8000bd6:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 8000bda:	2201      	movs	r2, #1
 8000bdc:	605a      	str	r2, [r3, #4]
		inUse++;;
 8000bde:	4a28      	ldr	r2, [pc, #160]	@ (8000c80 <MEM_PoolAlloc+0x134>)
 8000be0:	6813      	ldr	r3, [r2, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	6013      	str	r3, [r2, #0]
		for(i++; i < (j + n); i++)
 8000be6:	f10e 0301 	add.w	r3, lr, #1
 8000bea:	e02d      	b.n	8000c48 <MEM_PoolAlloc+0xfc>
						i = j;		//start over to find free region
 8000bec:	4619      	mov	r1, r3
				if (k == n)
 8000bee:	4560      	cmp	r0, ip
 8000bf0:	d019      	beq.n	8000c26 <MEM_PoolAlloc+0xda>
		for (i = 0; i < MEM_POOL_SEGMENTS; i++)
 8000bf2:	3101      	adds	r1, #1
 8000bf4:	2905      	cmp	r1, #5
 8000bf6:	d8e2      	bhi.n	8000bbe <MEM_PoolAlloc+0x72>
			if (gMemPoolMgt[i].alloc == ALLOC_FREE)
 8000bf8:	4b20      	ldr	r3, [pc, #128]	@ (8000c7c <MEM_PoolAlloc+0x130>)
 8000bfa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1f6      	bne.n	8000bf2 <MEM_PoolAlloc+0xa6>
				for (j = i + 1; (j < MEM_POOL_SEGMENTS) && (j < (i + n)); j++)
 8000c04:	1c4b      	adds	r3, r1, #1
				k = 1;
 8000c06:	2001      	movs	r0, #1
				for (j = i + 1; (j < MEM_POOL_SEGMENTS) && (j < (i + n)); j++)
 8000c08:	2b05      	cmp	r3, #5
 8000c0a:	d8f0      	bhi.n	8000bee <MEM_PoolAlloc+0xa2>
 8000c0c:	eb01 020c 	add.w	r2, r1, ip
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d9ec      	bls.n	8000bee <MEM_PoolAlloc+0xa2>
					if (gMemPoolMgt[j].alloc != ALLOC_FREE)
 8000c14:	4a19      	ldr	r2, [pc, #100]	@ (8000c7c <MEM_PoolAlloc+0x130>)
 8000c16:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c1a:	6852      	ldr	r2, [r2, #4]
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d1e5      	bne.n	8000bec <MEM_PoolAlloc+0xa0>
						k++;
 8000c20:	3001      	adds	r0, #1
				for (j = i + 1; (j < MEM_POOL_SEGMENTS) && (j < (i + n)); j++)
 8000c22:	3301      	adds	r3, #1
 8000c24:	e7f0      	b.n	8000c08 <MEM_PoolAlloc+0xbc>
					f = (int)i;			//found free entry for requested segments
 8000c26:	468e      	mov	lr, r1
					lookAheadIdx = i + 1;
 8000c28:	3101      	adds	r1, #1
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <MEM_PoolAlloc+0x12c>)
 8000c2c:	6019      	str	r1, [r3, #0]
					break;
 8000c2e:	e7c6      	b.n	8000bbe <MEM_PoolAlloc+0x72>
		for (i = 0; i < MEM_POOL_SEGMENTS; i++)
 8000c30:	2100      	movs	r1, #0
 8000c32:	e7df      	b.n	8000bf4 <MEM_PoolAlloc+0xa8>
		{
			gMemPoolMgt[i].alloc = ALLOC_SUBSEQ;
 8000c34:	4a11      	ldr	r2, [pc, #68]	@ (8000c7c <MEM_PoolAlloc+0x130>)
 8000c36:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	6051      	str	r1, [r2, #4]
			inUse++;
 8000c3e:	4910      	ldr	r1, [pc, #64]	@ (8000c80 <MEM_PoolAlloc+0x134>)
 8000c40:	680a      	ldr	r2, [r1, #0]
 8000c42:	3201      	adds	r2, #1
 8000c44:	600a      	str	r2, [r1, #0]
		for(i++; i < (j + n); i++)
 8000c46:	3301      	adds	r3, #1
 8000c48:	eb0c 0200 	add.w	r2, ip, r0
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f1      	bhi.n	8000c34 <MEM_PoolAlloc+0xe8>
		}

		//watermark: how much is used as maximum
		if (sMEMPoolWatermark < inUse)
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MEM_PoolAlloc+0x138>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <MEM_PoolAlloc+0x134>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d201      	bcs.n	8000c60 <MEM_PoolAlloc+0x114>
			sMEMPoolWatermark = inUse;
 8000c5c:	4a09      	ldr	r2, [pc, #36]	@ (8000c84 <MEM_PoolAlloc+0x138>)
 8000c5e:	6013      	str	r3, [r2, #0]

		//return the start address of the region
		return((void *)gMemPoolMgt[f].startAddr);
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MEM_PoolAlloc+0x130>)
 8000c62:	f853 003e 	ldr.w	r0, [r3, lr, lsl #3]
	{
		//set syserr for Out of Memory
		SYS_SetError(SYS_ERR_OUT_OF_MEM);
		return NULL;		//error, not found a free region
	}
}
 8000c66:	bd08      	pop	{r3, pc}
		SYS_SetError(SYS_ERR_OUT_OF_MEM);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f003 f9e5 	bl	8004038 <SYS_SetError>
		return NULL;		//error, not found a free region
 8000c6e:	2000      	movs	r0, #0
 8000c70:	e7f9      	b.n	8000c66 <MEM_PoolAlloc+0x11a>
		return NULL;
 8000c72:	2000      	movs	r0, #0
}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	200061a0 	.word	0x200061a0
 8000c7c:	200061a4 	.word	0x200061a4
 8000c80:	20006198 	.word	0x20006198
 8000c84:	2000619c 	.word	0x2000619c

08000c88 <MEM_PoolFree>:

void MEM_PoolFree(void *ptr)
{
 8000c88:	b508      	push	{r3, lr}
	//search first for the address
	unsigned int i, ok;

	ok = 0;

	if ( ! ptr)
 8000c8a:	b118      	cbz	r0, 8000c94 <MEM_PoolFree+0xc>
 8000c8c:	4684      	mov	ip, r0
	ok = 0;
 8000c8e:	2100      	movs	r1, #0
	{
		SYS_SetError(SYS_ERR_NULL_PTR);
		return;			//not a valid pointer, e.g. alloc has failed
	}

	for (i = 0; i < MEM_POOL_SEGMENTS; i++)
 8000c90:	460b      	mov	r3, r1
 8000c92:	e006      	b.n	8000ca2 <MEM_PoolFree+0x1a>
		SYS_SetError(SYS_ERR_NULL_PTR);
 8000c94:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000c98:	f003 f9ce 	bl	8004038 <SYS_SetError>
		return;			//not a valid pointer, e.g. alloc has failed
 8000c9c:	e029      	b.n	8000cf2 <MEM_PoolFree+0x6a>
		if (gMemPoolMgt[i].startAddr == (unsigned long)ptr)
		{
			//found the start address
			//now release all the segments
			gMemPoolMgt[i].alloc = ALLOC_FREE;
			ok = 1;		//we have released the pointer
 8000c9e:	2101      	movs	r1, #1
	for (i = 0; i < MEM_POOL_SEGMENTS; i++)
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	d824      	bhi.n	8000cf0 <MEM_PoolFree+0x68>
		if (gMemPoolMgt[i].startAddr == (unsigned long)ptr)
 8000ca6:	4a16      	ldr	r2, [pc, #88]	@ (8000d00 <MEM_PoolFree+0x78>)
 8000ca8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000cac:	4562      	cmp	r2, ip
 8000cae:	d1f7      	bne.n	8000ca0 <MEM_PoolFree+0x18>
			gMemPoolMgt[i].alloc = ALLOC_FREE;
 8000cb0:	4a13      	ldr	r2, [pc, #76]	@ (8000d00 <MEM_PoolFree+0x78>)
 8000cb2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	6051      	str	r1, [r2, #4]
			inUse--;
 8000cba:	4912      	ldr	r1, [pc, #72]	@ (8000d04 <MEM_PoolFree+0x7c>)
 8000cbc:	680a      	ldr	r2, [r1, #0]
 8000cbe:	3a01      	subs	r2, #1
 8000cc0:	600a      	str	r2, [r1, #0]
			for (i++; i < MEM_POOL_SEGMENTS; i++)
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	2b05      	cmp	r3, #5
 8000cc6:	d8ea      	bhi.n	8000c9e <MEM_PoolFree+0x16>
			{
				//the very last segment used cannot be subsequent
				if (gMemPoolMgt[i].alloc == ALLOC_SUBSEQ)
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <MEM_PoolFree+0x78>)
 8000cca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000cce:	6852      	ldr	r2, [r2, #4]
 8000cd0:	2a02      	cmp	r2, #2
 8000cd2:	d10a      	bne.n	8000cea <MEM_PoolFree+0x62>
				{
					gMemPoolMgt[i].alloc = ALLOC_FREE;
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <MEM_PoolFree+0x78>)
 8000cd6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000cda:	2100      	movs	r1, #0
 8000cdc:	6051      	str	r1, [r2, #4]
					inUse--;
 8000cde:	4909      	ldr	r1, [pc, #36]	@ (8000d04 <MEM_PoolFree+0x7c>)
 8000ce0:	680a      	ldr	r2, [r1, #0]
 8000ce2:	3a01      	subs	r2, #1
 8000ce4:	600a      	str	r2, [r1, #0]
			for (i++; i < MEM_POOL_SEGMENTS; i++)
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	e7ec      	b.n	8000cc4 <MEM_PoolFree+0x3c>
			ok = 1;		//we have released the pointer
 8000cea:	2101      	movs	r1, #1
				}
				else
				{
					i = MEM_POOL_SEGMENTS;	//break all loops
 8000cec:	2306      	movs	r3, #6
 8000cee:	e7d7      	b.n	8000ca0 <MEM_PoolFree+0x18>
				}
			}
		}
	}

	if ( ! ok)
 8000cf0:	b101      	cbz	r1, 8000cf4 <MEM_PoolFree+0x6c>
		SYS_SetError(SYS_ERR_INV_PTR);
}
 8000cf2:	bd08      	pop	{r3, pc}
		SYS_SetError(SYS_ERR_INV_PTR);
 8000cf4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000cf8:	f003 f99e 	bl	8004038 <SYS_SetError>
 8000cfc:	e7f9      	b.n	8000cf2 <MEM_PoolFree+0x6a>
 8000cfe:	bf00      	nop
 8000d00:	200061a4 	.word	0x200061a4
 8000d04:	20006198 	.word	0x20006198

08000d08 <MEM_PoolWatermark>:

inline unsigned int MEM_PoolWatermark(void)
{
	return sMEMPoolWatermark;
}
 8000d08:	4b01      	ldr	r3, [pc, #4]	@ (8000d10 <MEM_PoolWatermark+0x8>)
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	2000619c 	.word	0x2000619c

08000d14 <MEM_PoolMax>:

inline unsigned int MEM_PoolMax(void)
{
	return MEM_POOL_SEGMENTS;
}
 8000d14:	2006      	movs	r0, #6
 8000d16:	4770      	bx	lr

08000d18 <MEM_PoolAvailable>:

unsigned int MEM_PoolAvailable(void)
{
	unsigned int i,j;

	j = 0;
 8000d18:	2000      	movs	r0, #0
	for (i = 0; i < MEM_POOL_SEGMENTS; i++)
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	e000      	b.n	8000d20 <MEM_PoolAvailable+0x8>
 8000d1e:	3301      	adds	r3, #1
 8000d20:	2b05      	cmp	r3, #5
 8000d22:	d807      	bhi.n	8000d34 <MEM_PoolAvailable+0x1c>
		if (gMemPoolMgt[i].alloc == ALLOC_FREE)
 8000d24:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <MEM_PoolAvailable+0x20>)
 8000d26:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000d2a:	6852      	ldr	r2, [r2, #4]
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	d1f6      	bne.n	8000d1e <MEM_PoolAvailable+0x6>
			j++;
 8000d30:	3001      	adds	r0, #1
 8000d32:	e7f4      	b.n	8000d1e <MEM_PoolAvailable+0x6>
	return j;
}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	200061a4 	.word	0x200061a4

08000d3c <QSPI_SetQSPI>:
////volatile int GSPI_DMA_RxComplete = 0;
#endif

void QSPI_SetQSPI(unsigned long x)
{
	selQSPI = x;
 8000d3c:	4b01      	ldr	r3, [pc, #4]	@ (8000d44 <QSPI_SetQSPI+0x8>)
 8000d3e:	6018      	str	r0, [r3, #0]
}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000004 	.word	0x20000004

08000d48 <QSPI_GetQSPI>:

unsigned long QSPI_GetQSPI(void)
{
	return selQSPI;
}
 8000d48:	4b01      	ldr	r3, [pc, #4]	@ (8000d50 <QSPI_GetQSPI+0x8>)
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000004 	.word	0x20000004

08000d54 <OSPI_WriteReadTransaction>:

uint8_t OSPI_WriteReadTransaction(int device, OSPI_HandleTypeDef *hospi, unsigned long *params, unsigned long numParams, unsigned long numRead)
{
 8000d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d58:	b094      	sub	sp, #80	@ 0x50
 8000d5a:	4606      	mov	r6, r0
 8000d5c:	460c      	mov	r4, r1
 8000d5e:	4615      	mov	r5, r2
 8000d60:	461f      	mov	r7, r3
 8000d62:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
  OSPI_RegularCmdTypeDef sCommand = {0};
 8000d66:	2250      	movs	r2, #80	@ 0x50
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4668      	mov	r0, sp
 8000d6c:	f014 ff1c 	bl	8015ba8 <memset>
  x = numParams;

  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;

  sCommand.Instruction        = params[0];
 8000d70:	682b      	ldr	r3, [r5, #0]
 8000d72:	9302      	str	r3, [sp, #8]
  x--;
  i++;

  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8000d74:	2301      	movs	r3, #1
 8000d76:	9303      	str	r3, [sp, #12]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;

  sCommand.Address			  = params[1];
 8000d78:	686b      	ldr	r3, [r5, #4]
 8000d7a:	9306      	str	r3, [sp, #24]
  sCommand.AddressMode		  = HAL_OSPI_ADDRESS_4_LINES;
 8000d7c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d80:	9307      	str	r3, [sp, #28]
  switch (gCFGparams.QSPIaddr)
 8000d82:	4b67      	ldr	r3, [pc, #412]	@ (8000f20 <OSPI_WriteReadTransaction+0x1cc>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d819      	bhi.n	8000dbe <OSPI_WriteReadTransaction+0x6a>
 8000d8a:	e8df f003 	tbb	[pc, r3]
 8000d8e:	0402      	.short	0x0402
 8000d90:	1410      	.short	0x1410
  {
  case 0 : sCommand.AddressMode = HAL_OSPI_ADDRESS_NONE; break;
 8000d92:	2300      	movs	r3, #0
 8000d94:	9307      	str	r3, [sp, #28]
  case 1 : sCommand.AddressSize = HAL_OSPI_ADDRESS_8_BITS; break;
  case 2 : sCommand.AddressSize = HAL_OSPI_ADDRESS_16_BITS; break;
  case 3 : sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS; break;
  default: sCommand.AddressSize = HAL_OSPI_ADDRESS_32_BITS; break;
  }
  x--;
 8000d96:	1eba      	subs	r2, r7, #2
  i++;

  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;

  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8000d98:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000d9c:	930b      	str	r3, [sp, #44]	@ 0x2c
  switch (gCFGparams.QSPIalt)
 8000d9e:	4b60      	ldr	r3, [pc, #384]	@ (8000f20 <OSPI_WriteReadTransaction+0x1cc>)
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d865      	bhi.n	8000e72 <OSPI_WriteReadTransaction+0x11e>
 8000da6:	e8df f003 	tbb	[pc, r3]
 8000daa:	100e      	.short	0x100e
 8000dac:	605c      	.short	0x605c
  case 2 : sCommand.AddressSize = HAL_OSPI_ADDRESS_16_BITS; break;
 8000dae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db2:	9308      	str	r3, [sp, #32]
 8000db4:	e7ef      	b.n	8000d96 <OSPI_WriteReadTransaction+0x42>
  case 3 : sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS; break;
 8000db6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dba:	9308      	str	r3, [sp, #32]
 8000dbc:	e7eb      	b.n	8000d96 <OSPI_WriteReadTransaction+0x42>
  default: sCommand.AddressSize = HAL_OSPI_ADDRESS_32_BITS; break;
 8000dbe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000dc2:	9308      	str	r3, [sp, #32]
 8000dc4:	e7e7      	b.n	8000d96 <OSPI_WriteReadTransaction+0x42>
  {
  case 0 : sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE; break;
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	910b      	str	r1, [sp, #44]	@ 0x2c
  case 1 : sCommand.AlternateBytesSize = HAL_OSPI_ALTERNATE_BYTES_8_BITS; break;
  case 2 : sCommand.AlternateBytesSize = HAL_OSPI_ALTERNATE_BYTES_16_BITS; break;
  case 3 : sCommand.AlternateBytesSize = HAL_OSPI_ALTERNATE_BYTES_24_BITS; break;
  default: sCommand.AlternateBytesSize = HAL_OSPI_ALTERNATE_BYTES_32_BITS; break;
  }
  if (gCFGparams.QSPIalt)
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d055      	beq.n	8000e7a <OSPI_WriteReadTransaction+0x126>
  {
	  sCommand.AlternateBytes = params[2];
 8000dce:	68ab      	ldr	r3, [r5, #8]
 8000dd0:	930a      	str	r3, [sp, #40]	@ 0x28
	  x--;
 8000dd2:	1efa      	subs	r2, r7, #3
	  i++;
 8000dd4:	2703      	movs	r7, #3
  }

  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8000dd6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000dda:	930e      	str	r3, [sp, #56]	@ 0x38
  if (numRead)
 8000ddc:	f1b8 0f00 	cmp.w	r8, #0
 8000de0:	d04d      	beq.n	8000e7e <OSPI_WriteReadTransaction+0x12a>
  {
	  sCommand.NbData         = numRead * 4;
 8000de2:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8000de6:	930f      	str	r3, [sp, #60]	@ 0x3c
	  sCommand.NbData         = x * 4;
  }

  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;		//DQS even does not work in DTR mode
  sCommand.DummyCycles        = 0;
  if (numRead)
 8000de8:	f1b8 0f00 	cmp.w	r8, #0
 8000dec:	d002      	beq.n	8000df4 <OSPI_WriteReadTransaction+0xa0>
  {
	  sCommand.DummyCycles    = gCFGparams.QSPIturn;
 8000dee:	4b4c      	ldr	r3, [pc, #304]	@ (8000f20 <OSPI_WriteReadTransaction+0x1cc>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	9311      	str	r3, [sp, #68]	@ 0x44
   * Remark: HAL_QSPI_Command sets all the parameter needed for entire transaction
   * It can be followed by HAL_QSPI_Reveive OR (!) HAL_QSPI_Transmit, but not both!
   * The transaction finishes with one of these calls.
   * So, not possible to write longer and then to read (not intended!)
   */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000df8:	4669      	mov	r1, sp
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	f007 fde4 	bl	80089c8 <HAL_OSPI_Command>
 8000e00:	2800      	cmp	r0, #0
 8000e02:	f040 8088 	bne.w	8000f16 <OSPI_WriteReadTransaction+0x1c2>

#ifdef QSPI_DMA
  ////GQSPI_DMA_TxComplete = 0;
#endif

  if (numRead)
 8000e06:	f1b8 0f00 	cmp.w	r8, #0
 8000e0a:	d054      	beq.n	8000eb6 <OSPI_WriteReadTransaction+0x162>
  {
#ifdef NUCLEO_BOARD
	  if (device == 0x1)
 8000e0c:	2e01      	cmp	r6, #1
 8000e0e:	d039      	beq.n	8000e84 <OSPI_WriteReadTransaction+0x130>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
	  if (device == 0x2)
 8000e10:	2e02      	cmp	r6, #2
 8000e12:	d03d      	beq.n	8000e90 <OSPI_WriteReadTransaction+0x13c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	  if (device == 0x4)
 8000e14:	2e04      	cmp	r6, #4
 8000e16:	d041      	beq.n	8000e9c <OSPI_WriteReadTransaction+0x148>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
	  if (device == 0x8)
 8000e18:	2e08      	cmp	r6, #8
 8000e1a:	d046      	beq.n	8000eaa <OSPI_WriteReadTransaction+0x156>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	  if (device == 0x2)
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
#endif
#ifdef QSPI_DMA
	  if (HAL_OSPI_Receive_DMA(hospi, (uint8_t *)params) != HAL_OK)
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f007 f82e 	bl	8007e80 <HAL_OSPI_Receive_DMA>
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d178      	bne.n	8000f1a <OSPI_WriteReadTransaction+0x1c6>
  }

#ifdef QSPI_DMA
  /* this is too early! DMA has finished but OSPI shifts still out! */
  ////while ( ! GQSPI_DMA_TxComplete ) {;}
  while ( hospi->State != HAL_OSPI_STATE_READY) { /* tx_thread_sleep(1); */ }
 8000e28:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d1fc      	bne.n	8000e28 <OSPI_WriteReadTransaction+0xd4>
  /* with sleep it is too long */
#endif
#ifdef NUCLEO_BOARD
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000e2e:	4c3d      	ldr	r4, [pc, #244]	@ (8000f24 <OSPI_WriteReadTransaction+0x1d0>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	2104      	movs	r1, #4
 8000e34:	4620      	mov	r0, r4
 8000e36:	f006 f959 	bl	80070ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f006 f954 	bl	80070ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e4a:	4837      	ldr	r0, [pc, #220]	@ (8000f28 <OSPI_WriteReadTransaction+0x1d4>)
 8000e4c:	f006 f94e 	bl	80070ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2140      	movs	r1, #64	@ 0x40
 8000e54:	4835      	ldr	r0, [pc, #212]	@ (8000f2c <OSPI_WriteReadTransaction+0x1d8>)
 8000e56:	f006 f949 	bl	80070ec <HAL_GPIO_WritePin>
#else
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
#endif

  return 1;
 8000e5a:	2001      	movs	r0, #1
}
 8000e5c:	b014      	add	sp, #80	@ 0x50
 8000e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  case 2 : sCommand.AlternateBytesSize = HAL_OSPI_ALTERNATE_BYTES_16_BITS; break;
 8000e62:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8000e66:	910c      	str	r1, [sp, #48]	@ 0x30
 8000e68:	e7af      	b.n	8000dca <OSPI_WriteReadTransaction+0x76>
  case 3 : sCommand.AlternateBytesSize = HAL_OSPI_ALTERNATE_BYTES_24_BITS; break;
 8000e6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8000e6e:	910c      	str	r1, [sp, #48]	@ 0x30
 8000e70:	e7ab      	b.n	8000dca <OSPI_WriteReadTransaction+0x76>
  default: sCommand.AlternateBytesSize = HAL_OSPI_ALTERNATE_BYTES_32_BITS; break;
 8000e72:	f44f 1140 	mov.w	r1, #3145728	@ 0x300000
 8000e76:	910c      	str	r1, [sp, #48]	@ 0x30
 8000e78:	e7a7      	b.n	8000dca <OSPI_WriteReadTransaction+0x76>
  i++;
 8000e7a:	2702      	movs	r7, #2
 8000e7c:	e7ab      	b.n	8000dd6 <OSPI_WriteReadTransaction+0x82>
	  sCommand.NbData         = x * 4;
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	920f      	str	r2, [sp, #60]	@ 0x3c
 8000e82:	e7b1      	b.n	8000de8 <OSPI_WriteReadTransaction+0x94>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2104      	movs	r1, #4
 8000e88:	4826      	ldr	r0, [pc, #152]	@ (8000f24 <OSPI_WriteReadTransaction+0x1d0>)
 8000e8a:	f006 f92f 	bl	80070ec <HAL_GPIO_WritePin>
 8000e8e:	e7bf      	b.n	8000e10 <OSPI_WriteReadTransaction+0xbc>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2101      	movs	r1, #1
 8000e94:	4823      	ldr	r0, [pc, #140]	@ (8000f24 <OSPI_WriteReadTransaction+0x1d0>)
 8000e96:	f006 f929 	bl	80070ec <HAL_GPIO_WritePin>
 8000e9a:	e7bb      	b.n	8000e14 <OSPI_WriteReadTransaction+0xc0>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ea2:	4821      	ldr	r0, [pc, #132]	@ (8000f28 <OSPI_WriteReadTransaction+0x1d4>)
 8000ea4:	f006 f922 	bl	80070ec <HAL_GPIO_WritePin>
 8000ea8:	e7b6      	b.n	8000e18 <OSPI_WriteReadTransaction+0xc4>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2140      	movs	r1, #64	@ 0x40
 8000eae:	481f      	ldr	r0, [pc, #124]	@ (8000f2c <OSPI_WriteReadTransaction+0x1d8>)
 8000eb0:	f006 f91c 	bl	80070ec <HAL_GPIO_WritePin>
 8000eb4:	e7b2      	b.n	8000e1c <OSPI_WriteReadTransaction+0xc8>
	  if (i)
 8000eb6:	2f00      	cmp	r7, #0
 8000eb8:	d0b6      	beq.n	8000e28 <OSPI_WriteReadTransaction+0xd4>
		  if ((device & 0x1) == 0x1)
 8000eba:	f016 0f01 	tst.w	r6, #1
 8000ebe:	d111      	bne.n	8000ee4 <OSPI_WriteReadTransaction+0x190>
		  if ((device & 0x2) == 0x2)
 8000ec0:	f016 0f02 	tst.w	r6, #2
 8000ec4:	d114      	bne.n	8000ef0 <OSPI_WriteReadTransaction+0x19c>
		  if ((device & 0x4) == 0x4)
 8000ec6:	f016 0f04 	tst.w	r6, #4
 8000eca:	d117      	bne.n	8000efc <OSPI_WriteReadTransaction+0x1a8>
		  if ((device & 0x8) == 0x8)
 8000ecc:	f016 0f08 	tst.w	r6, #8
 8000ed0:	d11b      	bne.n	8000f0a <OSPI_WriteReadTransaction+0x1b6>
		  if (HAL_OSPI_Transmit_DMA(hospi, (uint8_t *)&params[i]) != HAL_OK)
 8000ed2:	eb05 0187 	add.w	r1, r5, r7, lsl #2
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f006 ff1c 	bl	8007d14 <HAL_OSPI_Transmit_DMA>
 8000edc:	2800      	cmp	r0, #0
 8000ede:	d0a3      	beq.n	8000e28 <OSPI_WriteReadTransaction+0xd4>
		 	return -1;
 8000ee0:	20ff      	movs	r0, #255	@ 0xff
 8000ee2:	e7bb      	b.n	8000e5c <OSPI_WriteReadTransaction+0x108>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	480e      	ldr	r0, [pc, #56]	@ (8000f24 <OSPI_WriteReadTransaction+0x1d0>)
 8000eea:	f006 f8ff 	bl	80070ec <HAL_GPIO_WritePin>
 8000eee:	e7e7      	b.n	8000ec0 <OSPI_WriteReadTransaction+0x16c>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	480b      	ldr	r0, [pc, #44]	@ (8000f24 <OSPI_WriteReadTransaction+0x1d0>)
 8000ef6:	f006 f8f9 	bl	80070ec <HAL_GPIO_WritePin>
 8000efa:	e7e4      	b.n	8000ec6 <OSPI_WriteReadTransaction+0x172>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f02:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <OSPI_WriteReadTransaction+0x1d4>)
 8000f04:	f006 f8f2 	bl	80070ec <HAL_GPIO_WritePin>
 8000f08:	e7e0      	b.n	8000ecc <OSPI_WriteReadTransaction+0x178>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2140      	movs	r1, #64	@ 0x40
 8000f0e:	4807      	ldr	r0, [pc, #28]	@ (8000f2c <OSPI_WriteReadTransaction+0x1d8>)
 8000f10:	f006 f8ec 	bl	80070ec <HAL_GPIO_WritePin>
 8000f14:	e7dd      	b.n	8000ed2 <OSPI_WriteReadTransaction+0x17e>
    return -1;
 8000f16:	20ff      	movs	r0, #255	@ 0xff
 8000f18:	e7a0      	b.n	8000e5c <OSPI_WriteReadTransaction+0x108>
	    return -1;
 8000f1a:	20ff      	movs	r0, #255	@ 0xff
 8000f1c:	e79e      	b.n	8000e5c <OSPI_WriteReadTransaction+0x108>
 8000f1e:	bf00      	nop
 8000f20:	2000c1d4 	.word	0x2000c1d4
 8000f24:	42020000 	.word	0x42020000
 8000f28:	42020400 	.word	0x42020400
 8000f2c:	42020800 	.word	0x42020800

08000f30 <QSPI_SetClock>:

	return e;
}

unsigned long QSPI_SetClock(unsigned long div)
{
 8000f30:	b510      	push	{r4, lr}
	extern void MX_OCTOSPI1_Init(void);

	if ( ! div)
 8000f32:	b160      	cbz	r0, 8000f4e <QSPI_SetClock+0x1e>
 8000f34:	4604      	mov	r4, r0
		return gCFGparams.QSPIdiv;

	if (div > 255)
 8000f36:	28ff      	cmp	r0, #255	@ 0xff
 8000f38:	d900      	bls.n	8000f3c <QSPI_SetClock+0xc>
		div = 255;		/* max. possible divider */
 8000f3a:	24ff      	movs	r4, #255	@ 0xff

	gCFGparams.QSPIdiv = div;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <QSPI_SetClock+0x24>)
 8000f3e:	605c      	str	r4, [r3, #4]

	/* initialize QSPI again */
	HAL_OSPI_DeInit(&hospi1);
 8000f40:	4805      	ldr	r0, [pc, #20]	@ (8000f58 <QSPI_SetClock+0x28>)
 8000f42:	f006 fed3 	bl	8007cec <HAL_OSPI_DeInit>
	MX_OCTOSPI1_Init();
 8000f46:	f002 fa5f 	bl	8003408 <MX_OCTOSPI1_Init>

	return div;
}
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	bd10      	pop	{r4, pc}
		return gCFGparams.QSPIdiv;
 8000f4e:	4b01      	ldr	r3, [pc, #4]	@ (8000f54 <QSPI_SetClock+0x24>)
 8000f50:	685c      	ldr	r4, [r3, #4]
 8000f52:	e7fa      	b.n	8000f4a <QSPI_SetClock+0x1a>
 8000f54:	2000c1d4 	.word	0x2000c1d4
 8000f58:	20010730 	.word	0x20010730

08000f5c <QSPI_DeInit>:
	/* take the ChipID from response */
	return cid;
}

void QSPI_DeInit(void)
{
 8000f5c:	b508      	push	{r3, lr}
	/* un-initialize all QSPI signals */
	HAL_OSPI_DeInit(&hospi1);
 8000f5e:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <QSPI_DeInit+0xc>)
 8000f60:	f006 fec4 	bl	8007cec <HAL_OSPI_DeInit>
}
 8000f64:	bd08      	pop	{r3, pc}
 8000f66:	bf00      	nop
 8000f68:	20010730 	.word	0x20010730

08000f6c <QSPI_ReleasePins>:

void QSPI_ReleasePins(void)
{
 8000f6c:	b508      	push	{r3, lr}
    */
#if 0
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
#endif

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_10);
 8000f6e:	f240 4101 	movw	r1, #1025	@ 0x401
 8000f72:	4804      	ldr	r0, [pc, #16]	@ (8000f84 <QSPI_ReleasePins+0x18>)
 8000f74:	f006 f838 	bl	8006fe8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15);
 8000f78:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <QSPI_ReleasePins+0x1c>)
 8000f7e:	f006 f833 	bl	8006fe8 <HAL_GPIO_DeInit>
}
 8000f82:	bd08      	pop	{r3, pc}
 8000f84:	42020400 	.word	0x42020400
 8000f88:	42021000 	.word	0x42021000

08000f8c <QSPI_ActivatePins>:

void QSPI_ActivatePins(void)
{
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	2400      	movs	r4, #0
 8000f92:	9401      	str	r4, [sp, #4]
 8000f94:	9402      	str	r4, [sp, #8]
 8000f96:	9403      	str	r4, [sp, #12]
 8000f98:	9404      	str	r4, [sp, #16]
 8000f9a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = gCFGparams.QSPIspeed;		//GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
#endif

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8000f9c:	f240 4301 	movw	r3, #1025	@ 0x401
 8000fa0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2702      	movs	r7, #2
 8000fa4:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = gCFGparams.QSPIspeed;		//GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	4e0b      	ldr	r6, [pc, #44]	@ (8000fd4 <QSPI_ActivatePins+0x48>)
 8000fa8:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8000faa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000fac:	250a      	movs	r5, #10
 8000fae:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	a901      	add	r1, sp, #4
 8000fb2:	4809      	ldr	r0, [pc, #36]	@ (8000fd8 <QSPI_ActivatePins+0x4c>)
 8000fb4:	f005 ff0a 	bl	8006dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000fb8:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000fbc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = gCFGparams.QSPIspeed;		//GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8000fc4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000fc6:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc8:	a901      	add	r1, sp, #4
 8000fca:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <QSPI_ActivatePins+0x50>)
 8000fcc:	f005 fefe 	bl	8006dcc <HAL_GPIO_Init>
}
 8000fd0:	b007      	add	sp, #28
 8000fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd4:	2000c1d4 	.word	0x2000c1d4
 8000fd8:	42020400 	.word	0x42020400
 8000fdc:	42021000 	.word	0x42021000

08000fe0 <QSPI_Transaction>:
{
 8000fe0:	b570      	push	{r4, r5, r6, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	460d      	mov	r5, r1
 8000fe8:	4616      	mov	r6, r2
	if (gCFGparams.CfgFlags & 0x1)
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <QSPI_Transaction+0x44>)
 8000fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fee:	f013 0f01 	tst.w	r3, #1
 8000ff2:	d110      	bne.n	8001016 <QSPI_Transaction+0x36>
	e = OSPI_WriteReadTransaction(selQSPI, &hospi1, params, numParams, rdWords);
 8000ff4:	9600      	str	r6, [sp, #0]
 8000ff6:	462b      	mov	r3, r5
 8000ff8:	4622      	mov	r2, r4
 8000ffa:	490b      	ldr	r1, [pc, #44]	@ (8001028 <QSPI_Transaction+0x48>)
 8000ffc:	480b      	ldr	r0, [pc, #44]	@ (800102c <QSPI_Transaction+0x4c>)
 8000ffe:	6800      	ldr	r0, [r0, #0]
 8001000:	f7ff fea8 	bl	8000d54 <OSPI_WriteReadTransaction>
 8001004:	4604      	mov	r4, r0
	if (gCFGparams.CfgFlags & 0x1)
 8001006:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <QSPI_Transaction+0x44>)
 8001008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800100a:	f013 0f01 	tst.w	r3, #1
 800100e:	d105      	bne.n	800101c <QSPI_Transaction+0x3c>
}
 8001010:	4620      	mov	r0, r4
 8001012:	b002      	add	sp, #8
 8001014:	bd70      	pop	{r4, r5, r6, pc}
		QSPI_ActivatePins();
 8001016:	f7ff ffb9 	bl	8000f8c <QSPI_ActivatePins>
 800101a:	e7eb      	b.n	8000ff4 <QSPI_Transaction+0x14>
		QSPI_ReleasePins();
 800101c:	f7ff ffa6 	bl	8000f6c <QSPI_ReleasePins>
 8001020:	e7f6      	b.n	8001010 <QSPI_Transaction+0x30>
 8001022:	bf00      	nop
 8001024:	2000c1d4 	.word	0x2000c1d4
 8001028:	20010730 	.word	0x20010730
 800102c:	20000004 	.word	0x20000004

08001030 <QSPI_ReadChipID>:
{
 8001030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001034:	4605      	mov	r5, r0
	params = (unsigned long *)MEM_PoolAlloc(MEM_POOL_SEG_SIZE);
 8001036:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800103a:	f7ff fd87 	bl	8000b4c <MEM_PoolAlloc>
	if ( ! params)
 800103e:	2800      	cmp	r0, #0
 8001040:	f000 80eb 	beq.w	800121a <QSPI_ReadChipID+0x1ea>
 8001044:	4604      	mov	r4, r0
	params[0] = 0xE0;			/* CMD */
 8001046:	23e0      	movs	r3, #224	@ 0xe0
 8001048:	6003      	str	r3, [r0, #0]
	params[1] = 0;				/* ADDR */
 800104a:	2600      	movs	r6, #0
 800104c:	6046      	str	r6, [r0, #4]
	params[2] = 0x00001F;		/* ALT */
 800104e:	231f      	movs	r3, #31
 8001050:	6083      	str	r3, [r0, #8]
	params[3] = 0x00040580;
 8001052:	4b73      	ldr	r3, [pc, #460]	@ (8001220 <QSPI_ReadChipID+0x1f0>)
 8001054:	60c3      	str	r3, [r0, #12]
	params[4] = 0x400B0FD0;		/* ChipID register address */
 8001056:	4b73      	ldr	r3, [pc, #460]	@ (8001224 <QSPI_ReadChipID+0x1f4>)
 8001058:	6103      	str	r3, [r0, #16]
	params[5] = 0xAAA00000;
 800105a:	4b73      	ldr	r3, [pc, #460]	@ (8001228 <QSPI_ReadChipID+0x1f8>)
 800105c:	6143      	str	r3, [r0, #20]
	QSPI_Transaction(params, 6, 0);		//#1 - write
 800105e:	4632      	mov	r2, r6
 8001060:	2106      	movs	r1, #6
 8001062:	f7ff ffbd 	bl	8000fe0 <QSPI_Transaction>
	params[0] = 0xE1;			/* CMD */
 8001066:	23e1      	movs	r3, #225	@ 0xe1
 8001068:	6023      	str	r3, [r4, #0]
	params[1] = 0;				/* ADDR */
 800106a:	6066      	str	r6, [r4, #4]
	params[2] = 0x00001E;		/* ALT */
 800106c:	231e      	movs	r3, #30
 800106e:	60a3      	str	r3, [r4, #8]
		unsigned long sQSPI = QSPI_GetQSPI();
 8001070:	f7ff fe6a 	bl	8000d48 <QSPI_GetQSPI>
 8001074:	4606      	mov	r6, r0
		if ((sQSPI & 0x3) == 0x3)
 8001076:	f000 0303 	and.w	r3, r0, #3
 800107a:	2b03      	cmp	r3, #3
 800107c:	d011      	beq.n	80010a2 <QSPI_ReadChipID+0x72>
			QSPI_Transaction(params, 0, 5);
 800107e:	2205      	movs	r2, #5
 8001080:	2100      	movs	r1, #0
 8001082:	4620      	mov	r0, r4
 8001084:	f7ff ffac 	bl	8000fe0 <QSPI_Transaction>
			if (gCFGparams.Debug & DBG_VERBOSE)
 8001088:	4b68      	ldr	r3, [pc, #416]	@ (800122c <QSPI_ReadChipID+0x1fc>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108c:	f013 0f01 	tst.w	r3, #1
 8001090:	f040 80bb 	bne.w	800120a <QSPI_ReadChipID+0x1da>
			cid = params[3];
 8001094:	68e5      	ldr	r5, [r4, #12]
	MEM_PoolFree(params);
 8001096:	4620      	mov	r0, r4
 8001098:	f7ff fdf6 	bl	8000c88 <MEM_PoolFree>
}
 800109c:	4628      	mov	r0, r5
 800109e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			QSPI_SetQSPI(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff fe4a 	bl	8000d3c <QSPI_SetQSPI>
			QSPI_Transaction(params, 0, 5);
 80010a8:	2205      	movs	r2, #5
 80010aa:	2100      	movs	r1, #0
 80010ac:	4620      	mov	r0, r4
 80010ae:	f7ff ff97 	bl	8000fe0 <QSPI_Transaction>
			if (gCFGparams.Debug & DBG_VERBOSE)
 80010b2:	4b5e      	ldr	r3, [pc, #376]	@ (800122c <QSPI_ReadChipID+0x1fc>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f013 0f01 	tst.w	r3, #1
 80010ba:	d142      	bne.n	8001142 <QSPI_ReadChipID+0x112>
			params[0] = 0xE1;			/* CMD */
 80010bc:	23e1      	movs	r3, #225	@ 0xe1
 80010be:	6023      	str	r3, [r4, #0]
			params[1] = 0;				/* ADDR */
 80010c0:	2700      	movs	r7, #0
 80010c2:	6067      	str	r7, [r4, #4]
			params[2] = 0x00001E;		/* ALT */
 80010c4:	231e      	movs	r3, #30
 80010c6:	60a3      	str	r3, [r4, #8]
			QSPI_SetQSPI(2);
 80010c8:	2002      	movs	r0, #2
 80010ca:	f7ff fe37 	bl	8000d3c <QSPI_SetQSPI>
			QSPI_Transaction(params, 0, 5);
 80010ce:	2205      	movs	r2, #5
 80010d0:	4639      	mov	r1, r7
 80010d2:	4620      	mov	r0, r4
 80010d4:	f7ff ff84 	bl	8000fe0 <QSPI_Transaction>
			if (gCFGparams.Debug & DBG_VERBOSE)
 80010d8:	4b54      	ldr	r3, [pc, #336]	@ (800122c <QSPI_ReadChipID+0x1fc>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010dc:	f013 0f01 	tst.w	r3, #1
 80010e0:	d162      	bne.n	80011a8 <QSPI_ReadChipID+0x178>
			cid = params[3];			/* we return the 2nd CID */
 80010e2:	68e5      	ldr	r5, [r4, #12]
			QSPI_SetQSPI(sQSPI);		/* set back the original one */
 80010e4:	4630      	mov	r0, r6
 80010e6:	f7ff fe29 	bl	8000d3c <QSPI_SetQSPI>
 80010ea:	e7d4      	b.n	8001096 <QSPI_ReadChipID+0x66>
					print_log(out, " %08lx", params[i]);
 80010ec:	2d01      	cmp	r5, #1
 80010ee:	d016      	beq.n	800111e <QSPI_ReadChipID+0xee>
				for (i = 0; i < 5; i++)
 80010f0:	3701      	adds	r7, #1
 80010f2:	2f04      	cmp	r7, #4
 80010f4:	dc27      	bgt.n	8001146 <QSPI_ReadChipID+0x116>
					print_log(out, " %08lx", params[i]);
 80010f6:	2d00      	cmp	r5, #0
 80010f8:	d1f8      	bne.n	80010ec <QSPI_ReadChipID+0xbc>
 80010fa:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8001238 <QSPI_ReadChipID+0x208>
 80010fe:	f854 3027 	ldr.w	r3, [r4, r7, lsl #2]
 8001102:	4a4b      	ldr	r2, [pc, #300]	@ (8001230 <QSPI_ReadChipID+0x200>)
 8001104:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001108:	4640      	mov	r0, r8
 800110a:	f014 fced 	bl	8015ae8 <sniprintf>
 800110e:	4640      	mov	r0, r8
 8001110:	f7ff fa99 	bl	8000646 <strlen>
 8001114:	4601      	mov	r1, r0
 8001116:	4640      	mov	r0, r8
 8001118:	f013 ff3a 	bl	8014f90 <UART_Send>
 800111c:	e7e6      	b.n	80010ec <QSPI_ReadChipID+0xbc>
 800111e:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 800123c <QSPI_ReadChipID+0x20c>
 8001122:	f854 3027 	ldr.w	r3, [r4, r7, lsl #2]
 8001126:	4a42      	ldr	r2, [pc, #264]	@ (8001230 <QSPI_ReadChipID+0x200>)
 8001128:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800112c:	4640      	mov	r0, r8
 800112e:	f014 fcdb 	bl	8015ae8 <sniprintf>
 8001132:	4640      	mov	r0, r8
 8001134:	f7ff fa87 	bl	8000646 <strlen>
 8001138:	4601      	mov	r1, r0
 800113a:	4640      	mov	r0, r8
 800113c:	f013 ff1a 	bl	8014f74 <VCP_UART_Send>
 8001140:	e7d6      	b.n	80010f0 <QSPI_ReadChipID+0xc0>
				for (i = 0; i < 5; i++)
 8001142:	2700      	movs	r7, #0
 8001144:	e7d5      	b.n	80010f2 <QSPI_ReadChipID+0xc2>
				Generic_Send((uint8_t *)"\r\n", 2, out);
 8001146:	462a      	mov	r2, r5
 8001148:	2102      	movs	r1, #2
 800114a:	483a      	ldr	r0, [pc, #232]	@ (8001234 <QSPI_ReadChipID+0x204>)
 800114c:	f001 f824 	bl	8002198 <Generic_Send>
 8001150:	e7b4      	b.n	80010bc <QSPI_ReadChipID+0x8c>
					print_log(out, " %08lx", params[i]);
 8001152:	2d01      	cmp	r5, #1
 8001154:	d016      	beq.n	8001184 <QSPI_ReadChipID+0x154>
				for (i = 0; i < 5; i++)
 8001156:	3701      	adds	r7, #1
 8001158:	2f04      	cmp	r7, #4
 800115a:	dc27      	bgt.n	80011ac <QSPI_ReadChipID+0x17c>
					print_log(out, " %08lx", params[i]);
 800115c:	2d00      	cmp	r5, #0
 800115e:	d1f8      	bne.n	8001152 <QSPI_ReadChipID+0x122>
 8001160:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001238 <QSPI_ReadChipID+0x208>
 8001164:	f854 3027 	ldr.w	r3, [r4, r7, lsl #2]
 8001168:	4a31      	ldr	r2, [pc, #196]	@ (8001230 <QSPI_ReadChipID+0x200>)
 800116a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800116e:	4640      	mov	r0, r8
 8001170:	f014 fcba 	bl	8015ae8 <sniprintf>
 8001174:	4640      	mov	r0, r8
 8001176:	f7ff fa66 	bl	8000646 <strlen>
 800117a:	4601      	mov	r1, r0
 800117c:	4640      	mov	r0, r8
 800117e:	f013 ff07 	bl	8014f90 <UART_Send>
 8001182:	e7e6      	b.n	8001152 <QSPI_ReadChipID+0x122>
 8001184:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 800123c <QSPI_ReadChipID+0x20c>
 8001188:	f854 3027 	ldr.w	r3, [r4, r7, lsl #2]
 800118c:	4a28      	ldr	r2, [pc, #160]	@ (8001230 <QSPI_ReadChipID+0x200>)
 800118e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001192:	4640      	mov	r0, r8
 8001194:	f014 fca8 	bl	8015ae8 <sniprintf>
 8001198:	4640      	mov	r0, r8
 800119a:	f7ff fa54 	bl	8000646 <strlen>
 800119e:	4601      	mov	r1, r0
 80011a0:	4640      	mov	r0, r8
 80011a2:	f013 fee7 	bl	8014f74 <VCP_UART_Send>
 80011a6:	e7d6      	b.n	8001156 <QSPI_ReadChipID+0x126>
				for (i = 0; i < 5; i++)
 80011a8:	2700      	movs	r7, #0
 80011aa:	e7d5      	b.n	8001158 <QSPI_ReadChipID+0x128>
				Generic_Send((uint8_t *)"\r\n", 2, out);
 80011ac:	462a      	mov	r2, r5
 80011ae:	2102      	movs	r1, #2
 80011b0:	4820      	ldr	r0, [pc, #128]	@ (8001234 <QSPI_ReadChipID+0x204>)
 80011b2:	f000 fff1 	bl	8002198 <Generic_Send>
 80011b6:	e794      	b.n	80010e2 <QSPI_ReadChipID+0xb2>
					print_log(out, " %08lx", params[i]);
 80011b8:	2d01      	cmp	r5, #1
 80011ba:	d015      	beq.n	80011e8 <QSPI_ReadChipID+0x1b8>
				for (i = 0; i < 5; i++)
 80011bc:	3601      	adds	r6, #1
 80011be:	2e04      	cmp	r6, #4
 80011c0:	dc25      	bgt.n	800120e <QSPI_ReadChipID+0x1de>
					print_log(out, " %08lx", params[i]);
 80011c2:	2d00      	cmp	r5, #0
 80011c4:	d1f8      	bne.n	80011b8 <QSPI_ReadChipID+0x188>
 80011c6:	4f1c      	ldr	r7, [pc, #112]	@ (8001238 <QSPI_ReadChipID+0x208>)
 80011c8:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 80011cc:	4a18      	ldr	r2, [pc, #96]	@ (8001230 <QSPI_ReadChipID+0x200>)
 80011ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011d2:	4638      	mov	r0, r7
 80011d4:	f014 fc88 	bl	8015ae8 <sniprintf>
 80011d8:	4638      	mov	r0, r7
 80011da:	f7ff fa34 	bl	8000646 <strlen>
 80011de:	4601      	mov	r1, r0
 80011e0:	4638      	mov	r0, r7
 80011e2:	f013 fed5 	bl	8014f90 <UART_Send>
 80011e6:	e7e7      	b.n	80011b8 <QSPI_ReadChipID+0x188>
 80011e8:	4f14      	ldr	r7, [pc, #80]	@ (800123c <QSPI_ReadChipID+0x20c>)
 80011ea:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 80011ee:	4a10      	ldr	r2, [pc, #64]	@ (8001230 <QSPI_ReadChipID+0x200>)
 80011f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011f4:	4638      	mov	r0, r7
 80011f6:	f014 fc77 	bl	8015ae8 <sniprintf>
 80011fa:	4638      	mov	r0, r7
 80011fc:	f7ff fa23 	bl	8000646 <strlen>
 8001200:	4601      	mov	r1, r0
 8001202:	4638      	mov	r0, r7
 8001204:	f013 feb6 	bl	8014f74 <VCP_UART_Send>
 8001208:	e7d8      	b.n	80011bc <QSPI_ReadChipID+0x18c>
				for (i = 0; i < 5; i++)
 800120a:	2600      	movs	r6, #0
 800120c:	e7d7      	b.n	80011be <QSPI_ReadChipID+0x18e>
				Generic_Send((uint8_t *)"\r\n", 2, out);
 800120e:	462a      	mov	r2, r5
 8001210:	2102      	movs	r1, #2
 8001212:	4808      	ldr	r0, [pc, #32]	@ (8001234 <QSPI_ReadChipID+0x204>)
 8001214:	f000 ffc0 	bl	8002198 <Generic_Send>
 8001218:	e73c      	b.n	8001094 <QSPI_ReadChipID+0x64>
		return 0;			/* error */
 800121a:	2500      	movs	r5, #0
 800121c:	e73e      	b.n	800109c <QSPI_ReadChipID+0x6c>
 800121e:	bf00      	nop
 8001220:	00040580 	.word	0x00040580
 8001224:	400b0fd0 	.word	0x400b0fd0
 8001228:	aaa00000 	.word	0xaaa00000
 800122c:	2000c1d4 	.word	0x2000c1d4
 8001230:	08016d20 	.word	0x08016d20
 8001234:	08016db4 	.word	0x08016db4
 8001238:	2000f20c 	.word	0x2000f20c
 800123c:	2000f60c 	.word	0x2000f60c

08001240 <OSPI_SPITransaction>:
/* --------------------------------------- QSPI as regular SPI --------------------------------- */

extern HAL_StatusTypeDef HAL_OSPI_SPITransaction(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout);

uint8_t OSPI_SPITransaction(unsigned char *bytes, unsigned long numParams)
{
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	b095      	sub	sp, #84	@ 0x54
 8001244:	4604      	mov	r4, r0
 8001246:	460d      	mov	r5, r1
  unsigned long device = QSPI_GetQSPI();
 8001248:	f7ff fd7e 	bl	8000d48 <QSPI_GetQSPI>
 800124c:	4606      	mov	r6, r0
#ifdef SPI3_DMA
  unsigned char *xBytes = bytes;
#endif

  OSPI_RegularCmdTypeDef sCommand = {0};
 800124e:	2250      	movs	r2, #80	@ 0x50
 8001250:	2100      	movs	r1, #0
 8001252:	4668      	mov	r0, sp
 8001254:	f014 fca8 	bl	8015ba8 <memset>

  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;

  sCommand.Instruction        = (uint32_t)*bytes++;
 8001258:	4627      	mov	r7, r4
 800125a:	f817 3b01 	ldrb.w	r3, [r7], #1
 800125e:	9302      	str	r3, [sp, #8]

  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;	//HAL_OSPI_INSTRUCTION_NONE; not possible w/o CMD, if no ADDR and no ALT
 8001260:	2301      	movs	r3, #1
 8001262:	9303      	str	r3, [sp, #12]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;	//we could send 4 bytes, actually
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;

  sCommand.Address			  = 0x66778899;						//not used
 8001264:	4b2d      	ldr	r3, [pc, #180]	@ (800131c <OSPI_SPITransaction+0xdc>)
 8001266:	9306      	str	r3, [sp, #24]
  sCommand.AddressMode		  = HAL_OSPI_ADDRESS_NONE;
  sCommand.AddressSize 		  = HAL_OSPI_ADDRESS_8_BITS;
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;

  sCommand.AlternateBytes	  = 0xAABBCCDD;						//not used
 8001268:	f103 3344 	add.w	r3, r3, #1145324612	@ 0x44444444
 800126c:	930a      	str	r3, [sp, #40]	@ 0x28
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  sCommand.AlternateBytesSize = HAL_OSPI_ALTERNATE_BYTES_8_BITS;

  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800126e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001272:	930e      	str	r3, [sp, #56]	@ 0x38

  sCommand.NbData         	  = numParams - 1;
 8001274:	1e6b      	subs	r3, r5, #1
 8001276:	930f      	str	r3, [sp, #60]	@ 0x3c
   * Remark: HAL_QSPI_Command sets all the parameter needed for entire transaction
   * It can be followed by HAL_QSPI_Reveive OR (!) HAL_QSPI_Transmit, but not both!
   * The transaction finishes with one of these calls.
   * So, not possible to write longer and then to read (not intended!)
   */
  if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800127c:	4669      	mov	r1, sp
 800127e:	4828      	ldr	r0, [pc, #160]	@ (8001320 <OSPI_SPITransaction+0xe0>)
 8001280:	f007 fba2 	bl	80089c8 <HAL_OSPI_Command>
 8001284:	2800      	cmp	r0, #0
 8001286:	d143      	bne.n	8001310 <OSPI_SPITransaction+0xd0>
    return -1;
  }

  /** SPI3 as receiver */
  //NEW: SS in SW mode - NSS is high polarity:
  __HAL_SPI_ENABLE(&hspi3);
 8001288:	4826      	ldr	r0, [pc, #152]	@ (8001324 <OSPI_SPITransaction+0xe4>)
 800128a:	6802      	ldr	r2, [r0, #0]
 800128c:	6813      	ldr	r3, [r2, #0]
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6013      	str	r3, [r2, #0]
  SET_BIT(((SPI_HandleTypeDef *)&hspi3)->Instance->CR1, SPI_CR1_SSI);
 8001294:	6802      	ldr	r2, [r0, #0]
 8001296:	6813      	ldr	r3, [r2, #0]
 8001298:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800129c:	6013      	str	r3, [r2, #0]

#ifdef SPI3_DMA
  /* start SPI3 Slave Rx in DMA mode */
  if (HAL_SPI_Receive_DMA(&hspi3, (uint8_t *)xBytes, numParams) != HAL_OK)
 800129e:	b2aa      	uxth	r2, r5
 80012a0:	4621      	mov	r1, r4
 80012a2:	f00b feb7 	bl	800d014 <HAL_SPI_Receive_DMA>
 80012a6:	2800      	cmp	r0, #0
 80012a8:	d134      	bne.n	8001314 <OSPI_SPITransaction+0xd4>
	return -1;
  }
#endif

#if 1
	  if (device == 0x1)
 80012aa:	2e01      	cmp	r6, #1
 80012ac:	d024      	beq.n	80012f8 <OSPI_SPITransaction+0xb8>
#ifdef NUCLEO_BOARD
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
#else
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
#endif
	  if (device == 0x2)
 80012ae:	2e02      	cmp	r6, #2
 80012b0:	d028      	beq.n	8001304 <OSPI_SPITransaction+0xc4>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
#endif
  ////SET_BIT(((SPI_HandleTypeDef *)&hspi3)->Instance->CR1, SPI_CR1_CSTART);

#ifdef QSPI_DMA
  if (HAL_OSPI_Transmit_DMA(&hospi1, bytes) != HAL_OK)
 80012b2:	4639      	mov	r1, r7
 80012b4:	481a      	ldr	r0, [pc, #104]	@ (8001320 <OSPI_SPITransaction+0xe0>)
 80012b6:	f006 fd2d 	bl	8007d14 <HAL_OSPI_Transmit_DMA>
 80012ba:	4604      	mov	r4, r0
 80012bc:	bb60      	cbnz	r0, 8001318 <OSPI_SPITransaction+0xd8>
  {
	  return -1;
  }

  while ( hospi1.State != HAL_OSPI_STATE_READY) { /*tx_thread_sleep(1)*/; }
 80012be:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <OSPI_SPITransaction+0xe0>)
 80012c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d1fb      	bne.n	80012be <OSPI_SPITransaction+0x7e>
	return -1;
  }
#endif

#ifdef NUCLEO_BOARD
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80012c6:	4d18      	ldr	r5, [pc, #96]	@ (8001328 <OSPI_SPITransaction+0xe8>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	2104      	movs	r1, #4
 80012cc:	4628      	mov	r0, r5
 80012ce:	f005 ff0d 	bl	80070ec <HAL_GPIO_WritePin>
#else
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
#endif
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	2102      	movs	r1, #2
 80012d6:	4628      	mov	r0, r5
 80012d8:	f005 ff08 	bl	80070ec <HAL_GPIO_WritePin>

  /* disable SPI3 */
  CLEAR_BIT(((SPI_HandleTypeDef *)&hspi3)->Instance->CR1, SPI_CR1_SSI);
 80012dc:	4a11      	ldr	r2, [pc, #68]	@ (8001324 <OSPI_SPITransaction+0xe4>)
 80012de:	6811      	ldr	r1, [r2, #0]
 80012e0:	680b      	ldr	r3, [r1, #0]
 80012e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012e6:	600b      	str	r3, [r1, #0]
  __HAL_SPI_DISABLE(&hspi3);
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	6013      	str	r3, [r2, #0]

  return 0;
}
 80012f2:	4620      	mov	r0, r4
 80012f4:	b015      	add	sp, #84	@ 0x54
 80012f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2104      	movs	r1, #4
 80012fc:	480a      	ldr	r0, [pc, #40]	@ (8001328 <OSPI_SPITransaction+0xe8>)
 80012fe:	f005 fef5 	bl	80070ec <HAL_GPIO_WritePin>
 8001302:	e7d4      	b.n	80012ae <OSPI_SPITransaction+0x6e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2102      	movs	r1, #2
 8001308:	4807      	ldr	r0, [pc, #28]	@ (8001328 <OSPI_SPITransaction+0xe8>)
 800130a:	f005 feef 	bl	80070ec <HAL_GPIO_WritePin>
 800130e:	e7d0      	b.n	80012b2 <OSPI_SPITransaction+0x72>
    return -1;
 8001310:	24ff      	movs	r4, #255	@ 0xff
 8001312:	e7ee      	b.n	80012f2 <OSPI_SPITransaction+0xb2>
	return -1;
 8001314:	24ff      	movs	r4, #255	@ 0xff
 8001316:	e7ec      	b.n	80012f2 <OSPI_SPITransaction+0xb2>
	  return -1;
 8001318:	24ff      	movs	r4, #255	@ 0xff
 800131a:	e7ea      	b.n	80012f2 <OSPI_SPITransaction+0xb2>
 800131c:	66778899 	.word	0x66778899
 8001320:	20010730 	.word	0x20010730
 8001324:	200106a0 	.word	0x200106a0
 8001328:	42020000 	.word	0x42020000

0800132c <CFG_Read>:
};

tCFGparams gCFGparams;

void CFG_Read(void)
{
 800132c:	b538      	push	{r3, r4, r5, lr}
	if (FLASH_Read(0, (unsigned char *)&gCFGparams, sizeof(tCFGparams)) == 0)
 800132e:	2238      	movs	r2, #56	@ 0x38
 8001330:	4911      	ldr	r1, [pc, #68]	@ (8001378 <CFG_Read+0x4c>)
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff fbae 	bl	8000a94 <FLASH_Read>
 8001338:	b988      	cbnz	r0, 800135e <CFG_Read+0x32>
	{
		if (gCFGparams.key != CFG_KEY_VALID)
 800133a:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <CFG_Read+0x4c>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <CFG_Read+0x50>)
 8001340:	429a      	cmp	r2, r3
 8001342:	d018      	beq.n	8001376 <CFG_Read+0x4a>
			memcpy(&gCFGparams, &defaultCFGparams, sizeof(tCFGparams));
 8001344:	4c0c      	ldr	r4, [pc, #48]	@ (8001378 <CFG_Read+0x4c>)
 8001346:	4d0e      	ldr	r5, [pc, #56]	@ (8001380 <CFG_Read+0x54>)
 8001348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001354:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001358:	e884 0003 	stmia.w	r4, {r0, r1}
 800135c:	e00b      	b.n	8001376 <CFG_Read+0x4a>
	}
	else
		memcpy(&gCFGparams, &defaultCFGparams, sizeof(tCFGparams));
 800135e:	4c06      	ldr	r4, [pc, #24]	@ (8001378 <CFG_Read+0x4c>)
 8001360:	4d07      	ldr	r5, [pc, #28]	@ (8001380 <CFG_Read+0x54>)
 8001362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800136c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001372:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001376:	bd38      	pop	{r3, r4, r5, pc}
 8001378:	2000c1d4 	.word	0x2000c1d4
 800137c:	c5acce55 	.word	0xc5acce55
 8001380:	08016fc0 	.word	0x08016fc0

08001384 <CFG_Write>:

void CFG_Write(void)
{
 8001384:	b508      	push	{r3, lr}
	FLASH_Write(0, (unsigned char *)&gCFGparams, sizeof(tCFGparams));
 8001386:	2238      	movs	r2, #56	@ 0x38
 8001388:	4902      	ldr	r1, [pc, #8]	@ (8001394 <CFG_Write+0x10>)
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff fb9e 	bl	8000acc <FLASH_Write>
}
 8001390:	bd08      	pop	{r3, pc}
 8001392:	bf00      	nop
 8001394:	2000c1d4 	.word	0x2000c1d4

08001398 <CFG_Default>:

void CFG_Default(void)
{
 8001398:	b430      	push	{r4, r5}
	memcpy(&gCFGparams, &defaultCFGparams, sizeof(tCFGparams));
 800139a:	4c07      	ldr	r4, [pc, #28]	@ (80013b8 <CFG_Default+0x20>)
 800139c:	4d07      	ldr	r5, [pc, #28]	@ (80013bc <CFG_Default+0x24>)
 800139e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013ae:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80013b2:	bc30      	pop	{r4, r5}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2000c1d4 	.word	0x2000c1d4
 80013bc:	08016fc0 	.word	0x08016fc0

080013c0 <CFG_Set>:
 */
void CFG_Set(unsigned long idx, unsigned long val)
{
	unsigned long *sPtr;

	if (idx >= (sizeof(tCFGparams) / 4))
 80013c0:	280d      	cmp	r0, #13
 80013c2:	d802      	bhi.n	80013ca <CFG_Set+0xa>
		return;			/* just 64 unsigned long elements */

	/* handle structure like an array */
	sPtr = (unsigned long *)&gCFGparams;

	sPtr[idx] = val;
 80013c4:	4b01      	ldr	r3, [pc, #4]	@ (80013cc <CFG_Set+0xc>)
 80013c6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 80013ca:	4770      	bx	lr
 80013cc:	2000c1d4 	.word	0x2000c1d4

080013d0 <CFG_Print>:

void CFG_Print(EResultOut out)
{
 80013d0:	b538      	push	{r3, r4, r5, lr}
 80013d2:	4604      	mov	r4, r0
	/* print SPI config */
	Generic_Send((const uint8_t *)"Sys Config:\r\n", 13, out);
 80013d4:	4602      	mov	r2, r0
 80013d6:	210d      	movs	r1, #13
 80013d8:	48bf      	ldr	r0, [pc, #764]	@ (80016d8 <CFG_Print+0x308>)
 80013da:	f000 fedd 	bl	8002198 <Generic_Send>
	print_log(out, (const char *)"[ 1] QSPI div          : %ld\r\n", gCFGparams.QSPIdiv);
 80013de:	2c00      	cmp	r4, #0
 80013e0:	d048      	beq.n	8001474 <CFG_Print+0xa4>
 80013e2:	2c01      	cmp	r4, #1
 80013e4:	d057      	beq.n	8001496 <CFG_Print+0xc6>
	print_log(out, (const char *)"[ 2] QSPI mode         : %ld\r\n", gCFGparams.QSPImode);
 80013e6:	2c00      	cmp	r4, #0
 80013e8:	d066      	beq.n	80014b8 <CFG_Print+0xe8>
 80013ea:	2c01      	cmp	r4, #1
 80013ec:	d075      	beq.n	80014da <CFG_Print+0x10a>
	print_log(out, (const char *)"[ 3] QSPI addr         : %ld\r\n", gCFGparams.QSPIaddr);
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	f000 8084 	beq.w	80014fc <CFG_Print+0x12c>
 80013f4:	2c01      	cmp	r4, #1
 80013f6:	f000 8092 	beq.w	800151e <CFG_Print+0x14e>
	print_log(out, (const char *)"[ 4] QSPI alt          : %ld\r\n", gCFGparams.QSPIalt);
 80013fa:	2c00      	cmp	r4, #0
 80013fc:	f000 80a0 	beq.w	8001540 <CFG_Print+0x170>
 8001400:	2c01      	cmp	r4, #1
 8001402:	f000 80ae 	beq.w	8001562 <CFG_Print+0x192>
	print_log(out, (const char *)"[ 5] QSPI turn         : %ld\r\n", gCFGparams.QSPIturn);
 8001406:	2c00      	cmp	r4, #0
 8001408:	f000 80bc 	beq.w	8001584 <CFG_Print+0x1b4>
 800140c:	2c01      	cmp	r4, #1
 800140e:	f000 80ca 	beq.w	80015a6 <CFG_Print+0x1d6>
	print_log(out, (const char *)"[ 6] QSPI shift enable : %lx\r\n", gCFGparams.QSPIshift);
 8001412:	2c00      	cmp	r4, #0
 8001414:	f000 80d8 	beq.w	80015c8 <CFG_Print+0x1f8>
 8001418:	2c01      	cmp	r4, #1
 800141a:	f000 80e6 	beq.w	80015ea <CFG_Print+0x21a>
	print_log(out, (const char *)"[ 7] QSPI qcycle enable: %lx\r\n", gCFGparams.QSPIqCycle);
 800141e:	2c00      	cmp	r4, #0
 8001420:	f000 80f4 	beq.w	800160c <CFG_Print+0x23c>
 8001424:	2c01      	cmp	r4, #1
 8001426:	f000 8102 	beq.w	800162e <CFG_Print+0x25e>
	print_log(out, (const char *)"[ 8] QSPI DLYB enable  : %lx\r\n", gCFGparams.QSPIdlyb);
 800142a:	2c00      	cmp	r4, #0
 800142c:	f000 8110 	beq.w	8001650 <CFG_Print+0x280>
 8001430:	2c01      	cmp	r4, #1
 8001432:	f000 811e 	beq.w	8001672 <CFG_Print+0x2a2>
	print_log(out, (const char *)"[ 9] QSPI GPIO speed   : %ld\r\n", gCFGparams.QSPIspeed);
 8001436:	2c00      	cmp	r4, #0
 8001438:	f000 812c 	beq.w	8001694 <CFG_Print+0x2c4>
 800143c:	2c01      	cmp	r4, #1
 800143e:	f000 813a 	beq.w	80016b6 <CFG_Print+0x2e6>
	print_log(out, (const char *)"[10] QSPI DLYB unit    : %ld\r\n", gCFGparams.DLYBunit);
 8001442:	2c00      	cmp	r4, #0
 8001444:	f000 8162 	beq.w	800170c <CFG_Print+0x33c>
 8001448:	2c01      	cmp	r4, #1
 800144a:	f000 8170 	beq.w	800172e <CFG_Print+0x35e>
	print_log(out, (const char *)"[11] QSPI DLYB phase   : %ld\r\n", gCFGparams.DLYBphase);
 800144e:	2c00      	cmp	r4, #0
 8001450:	f000 817e 	beq.w	8001750 <CFG_Print+0x380>
 8001454:	2c01      	cmp	r4, #1
 8001456:	f000 818c 	beq.w	8001772 <CFG_Print+0x3a2>
	print_log(out, (const char *)"[12] Debug             : %lx\r\n", gCFGparams.Debug);
 800145a:	2c00      	cmp	r4, #0
 800145c:	f000 819a 	beq.w	8001794 <CFG_Print+0x3c4>
 8001460:	2c01      	cmp	r4, #1
 8001462:	f000 81a8 	beq.w	80017b6 <CFG_Print+0x3e6>
	print_log(out, (const char *)"[13] CfgFlags          : %lx\r\n", gCFGparams.CfgFlags);
 8001466:	2c00      	cmp	r4, #0
 8001468:	f000 81b6 	beq.w	80017d8 <CFG_Print+0x408>
 800146c:	2c01      	cmp	r4, #1
 800146e:	f000 81c4 	beq.w	80017fa <CFG_Print+0x42a>
}
 8001472:	bd38      	pop	{r3, r4, r5, pc}
	print_log(out, (const char *)"[ 1] QSPI div          : %ld\r\n", gCFGparams.QSPIdiv);
 8001474:	4d99      	ldr	r5, [pc, #612]	@ (80016dc <CFG_Print+0x30c>)
 8001476:	4b9a      	ldr	r3, [pc, #616]	@ (80016e0 <CFG_Print+0x310>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4a9a      	ldr	r2, [pc, #616]	@ (80016e4 <CFG_Print+0x314>)
 800147c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001480:	4628      	mov	r0, r5
 8001482:	f014 fb31 	bl	8015ae8 <sniprintf>
 8001486:	4628      	mov	r0, r5
 8001488:	f7ff f8dd 	bl	8000646 <strlen>
 800148c:	4601      	mov	r1, r0
 800148e:	4628      	mov	r0, r5
 8001490:	f013 fd7e 	bl	8014f90 <UART_Send>
 8001494:	e7a5      	b.n	80013e2 <CFG_Print+0x12>
 8001496:	4d94      	ldr	r5, [pc, #592]	@ (80016e8 <CFG_Print+0x318>)
 8001498:	4b91      	ldr	r3, [pc, #580]	@ (80016e0 <CFG_Print+0x310>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4a91      	ldr	r2, [pc, #580]	@ (80016e4 <CFG_Print+0x314>)
 800149e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014a2:	4628      	mov	r0, r5
 80014a4:	f014 fb20 	bl	8015ae8 <sniprintf>
 80014a8:	4628      	mov	r0, r5
 80014aa:	f7ff f8cc 	bl	8000646 <strlen>
 80014ae:	4601      	mov	r1, r0
 80014b0:	4628      	mov	r0, r5
 80014b2:	f013 fd5f 	bl	8014f74 <VCP_UART_Send>
 80014b6:	e796      	b.n	80013e6 <CFG_Print+0x16>
	print_log(out, (const char *)"[ 2] QSPI mode         : %ld\r\n", gCFGparams.QSPImode);
 80014b8:	4d88      	ldr	r5, [pc, #544]	@ (80016dc <CFG_Print+0x30c>)
 80014ba:	4b89      	ldr	r3, [pc, #548]	@ (80016e0 <CFG_Print+0x310>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	4a8b      	ldr	r2, [pc, #556]	@ (80016ec <CFG_Print+0x31c>)
 80014c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014c4:	4628      	mov	r0, r5
 80014c6:	f014 fb0f 	bl	8015ae8 <sniprintf>
 80014ca:	4628      	mov	r0, r5
 80014cc:	f7ff f8bb 	bl	8000646 <strlen>
 80014d0:	4601      	mov	r1, r0
 80014d2:	4628      	mov	r0, r5
 80014d4:	f013 fd5c 	bl	8014f90 <UART_Send>
 80014d8:	e787      	b.n	80013ea <CFG_Print+0x1a>
 80014da:	4d83      	ldr	r5, [pc, #524]	@ (80016e8 <CFG_Print+0x318>)
 80014dc:	4b80      	ldr	r3, [pc, #512]	@ (80016e0 <CFG_Print+0x310>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4a82      	ldr	r2, [pc, #520]	@ (80016ec <CFG_Print+0x31c>)
 80014e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014e6:	4628      	mov	r0, r5
 80014e8:	f014 fafe 	bl	8015ae8 <sniprintf>
 80014ec:	4628      	mov	r0, r5
 80014ee:	f7ff f8aa 	bl	8000646 <strlen>
 80014f2:	4601      	mov	r1, r0
 80014f4:	4628      	mov	r0, r5
 80014f6:	f013 fd3d 	bl	8014f74 <VCP_UART_Send>
 80014fa:	e778      	b.n	80013ee <CFG_Print+0x1e>
	print_log(out, (const char *)"[ 3] QSPI addr         : %ld\r\n", gCFGparams.QSPIaddr);
 80014fc:	4d77      	ldr	r5, [pc, #476]	@ (80016dc <CFG_Print+0x30c>)
 80014fe:	4b78      	ldr	r3, [pc, #480]	@ (80016e0 <CFG_Print+0x310>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	4a7b      	ldr	r2, [pc, #492]	@ (80016f0 <CFG_Print+0x320>)
 8001504:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001508:	4628      	mov	r0, r5
 800150a:	f014 faed 	bl	8015ae8 <sniprintf>
 800150e:	4628      	mov	r0, r5
 8001510:	f7ff f899 	bl	8000646 <strlen>
 8001514:	4601      	mov	r1, r0
 8001516:	4628      	mov	r0, r5
 8001518:	f013 fd3a 	bl	8014f90 <UART_Send>
 800151c:	e76a      	b.n	80013f4 <CFG_Print+0x24>
 800151e:	4d72      	ldr	r5, [pc, #456]	@ (80016e8 <CFG_Print+0x318>)
 8001520:	4b6f      	ldr	r3, [pc, #444]	@ (80016e0 <CFG_Print+0x310>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4a72      	ldr	r2, [pc, #456]	@ (80016f0 <CFG_Print+0x320>)
 8001526:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800152a:	4628      	mov	r0, r5
 800152c:	f014 fadc 	bl	8015ae8 <sniprintf>
 8001530:	4628      	mov	r0, r5
 8001532:	f7ff f888 	bl	8000646 <strlen>
 8001536:	4601      	mov	r1, r0
 8001538:	4628      	mov	r0, r5
 800153a:	f013 fd1b 	bl	8014f74 <VCP_UART_Send>
 800153e:	e75c      	b.n	80013fa <CFG_Print+0x2a>
	print_log(out, (const char *)"[ 4] QSPI alt          : %ld\r\n", gCFGparams.QSPIalt);
 8001540:	4d66      	ldr	r5, [pc, #408]	@ (80016dc <CFG_Print+0x30c>)
 8001542:	4b67      	ldr	r3, [pc, #412]	@ (80016e0 <CFG_Print+0x310>)
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	4a6b      	ldr	r2, [pc, #428]	@ (80016f4 <CFG_Print+0x324>)
 8001548:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800154c:	4628      	mov	r0, r5
 800154e:	f014 facb 	bl	8015ae8 <sniprintf>
 8001552:	4628      	mov	r0, r5
 8001554:	f7ff f877 	bl	8000646 <strlen>
 8001558:	4601      	mov	r1, r0
 800155a:	4628      	mov	r0, r5
 800155c:	f013 fd18 	bl	8014f90 <UART_Send>
 8001560:	e74e      	b.n	8001400 <CFG_Print+0x30>
 8001562:	4d61      	ldr	r5, [pc, #388]	@ (80016e8 <CFG_Print+0x318>)
 8001564:	4b5e      	ldr	r3, [pc, #376]	@ (80016e0 <CFG_Print+0x310>)
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	4a62      	ldr	r2, [pc, #392]	@ (80016f4 <CFG_Print+0x324>)
 800156a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800156e:	4628      	mov	r0, r5
 8001570:	f014 faba 	bl	8015ae8 <sniprintf>
 8001574:	4628      	mov	r0, r5
 8001576:	f7ff f866 	bl	8000646 <strlen>
 800157a:	4601      	mov	r1, r0
 800157c:	4628      	mov	r0, r5
 800157e:	f013 fcf9 	bl	8014f74 <VCP_UART_Send>
 8001582:	e740      	b.n	8001406 <CFG_Print+0x36>
	print_log(out, (const char *)"[ 5] QSPI turn         : %ld\r\n", gCFGparams.QSPIturn);
 8001584:	4d55      	ldr	r5, [pc, #340]	@ (80016dc <CFG_Print+0x30c>)
 8001586:	4b56      	ldr	r3, [pc, #344]	@ (80016e0 <CFG_Print+0x310>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	4a5b      	ldr	r2, [pc, #364]	@ (80016f8 <CFG_Print+0x328>)
 800158c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001590:	4628      	mov	r0, r5
 8001592:	f014 faa9 	bl	8015ae8 <sniprintf>
 8001596:	4628      	mov	r0, r5
 8001598:	f7ff f855 	bl	8000646 <strlen>
 800159c:	4601      	mov	r1, r0
 800159e:	4628      	mov	r0, r5
 80015a0:	f013 fcf6 	bl	8014f90 <UART_Send>
 80015a4:	e732      	b.n	800140c <CFG_Print+0x3c>
 80015a6:	4d50      	ldr	r5, [pc, #320]	@ (80016e8 <CFG_Print+0x318>)
 80015a8:	4b4d      	ldr	r3, [pc, #308]	@ (80016e0 <CFG_Print+0x310>)
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	4a52      	ldr	r2, [pc, #328]	@ (80016f8 <CFG_Print+0x328>)
 80015ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015b2:	4628      	mov	r0, r5
 80015b4:	f014 fa98 	bl	8015ae8 <sniprintf>
 80015b8:	4628      	mov	r0, r5
 80015ba:	f7ff f844 	bl	8000646 <strlen>
 80015be:	4601      	mov	r1, r0
 80015c0:	4628      	mov	r0, r5
 80015c2:	f013 fcd7 	bl	8014f74 <VCP_UART_Send>
 80015c6:	e724      	b.n	8001412 <CFG_Print+0x42>
	print_log(out, (const char *)"[ 6] QSPI shift enable : %lx\r\n", gCFGparams.QSPIshift);
 80015c8:	4d44      	ldr	r5, [pc, #272]	@ (80016dc <CFG_Print+0x30c>)
 80015ca:	4b45      	ldr	r3, [pc, #276]	@ (80016e0 <CFG_Print+0x310>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	4a4b      	ldr	r2, [pc, #300]	@ (80016fc <CFG_Print+0x32c>)
 80015d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015d4:	4628      	mov	r0, r5
 80015d6:	f014 fa87 	bl	8015ae8 <sniprintf>
 80015da:	4628      	mov	r0, r5
 80015dc:	f7ff f833 	bl	8000646 <strlen>
 80015e0:	4601      	mov	r1, r0
 80015e2:	4628      	mov	r0, r5
 80015e4:	f013 fcd4 	bl	8014f90 <UART_Send>
 80015e8:	e716      	b.n	8001418 <CFG_Print+0x48>
 80015ea:	4d3f      	ldr	r5, [pc, #252]	@ (80016e8 <CFG_Print+0x318>)
 80015ec:	4b3c      	ldr	r3, [pc, #240]	@ (80016e0 <CFG_Print+0x310>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a42      	ldr	r2, [pc, #264]	@ (80016fc <CFG_Print+0x32c>)
 80015f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015f6:	4628      	mov	r0, r5
 80015f8:	f014 fa76 	bl	8015ae8 <sniprintf>
 80015fc:	4628      	mov	r0, r5
 80015fe:	f7ff f822 	bl	8000646 <strlen>
 8001602:	4601      	mov	r1, r0
 8001604:	4628      	mov	r0, r5
 8001606:	f013 fcb5 	bl	8014f74 <VCP_UART_Send>
 800160a:	e708      	b.n	800141e <CFG_Print+0x4e>
	print_log(out, (const char *)"[ 7] QSPI qcycle enable: %lx\r\n", gCFGparams.QSPIqCycle);
 800160c:	4d33      	ldr	r5, [pc, #204]	@ (80016dc <CFG_Print+0x30c>)
 800160e:	4b34      	ldr	r3, [pc, #208]	@ (80016e0 <CFG_Print+0x310>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a3b      	ldr	r2, [pc, #236]	@ (8001700 <CFG_Print+0x330>)
 8001614:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001618:	4628      	mov	r0, r5
 800161a:	f014 fa65 	bl	8015ae8 <sniprintf>
 800161e:	4628      	mov	r0, r5
 8001620:	f7ff f811 	bl	8000646 <strlen>
 8001624:	4601      	mov	r1, r0
 8001626:	4628      	mov	r0, r5
 8001628:	f013 fcb2 	bl	8014f90 <UART_Send>
 800162c:	e6fa      	b.n	8001424 <CFG_Print+0x54>
 800162e:	4d2e      	ldr	r5, [pc, #184]	@ (80016e8 <CFG_Print+0x318>)
 8001630:	4b2b      	ldr	r3, [pc, #172]	@ (80016e0 <CFG_Print+0x310>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	4a32      	ldr	r2, [pc, #200]	@ (8001700 <CFG_Print+0x330>)
 8001636:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800163a:	4628      	mov	r0, r5
 800163c:	f014 fa54 	bl	8015ae8 <sniprintf>
 8001640:	4628      	mov	r0, r5
 8001642:	f7ff f800 	bl	8000646 <strlen>
 8001646:	4601      	mov	r1, r0
 8001648:	4628      	mov	r0, r5
 800164a:	f013 fc93 	bl	8014f74 <VCP_UART_Send>
 800164e:	e6ec      	b.n	800142a <CFG_Print+0x5a>
	print_log(out, (const char *)"[ 8] QSPI DLYB enable  : %lx\r\n", gCFGparams.QSPIdlyb);
 8001650:	4d22      	ldr	r5, [pc, #136]	@ (80016dc <CFG_Print+0x30c>)
 8001652:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <CFG_Print+0x310>)
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4a2b      	ldr	r2, [pc, #172]	@ (8001704 <CFG_Print+0x334>)
 8001658:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800165c:	4628      	mov	r0, r5
 800165e:	f014 fa43 	bl	8015ae8 <sniprintf>
 8001662:	4628      	mov	r0, r5
 8001664:	f7fe ffef 	bl	8000646 <strlen>
 8001668:	4601      	mov	r1, r0
 800166a:	4628      	mov	r0, r5
 800166c:	f013 fc90 	bl	8014f90 <UART_Send>
 8001670:	e6de      	b.n	8001430 <CFG_Print+0x60>
 8001672:	4d1d      	ldr	r5, [pc, #116]	@ (80016e8 <CFG_Print+0x318>)
 8001674:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <CFG_Print+0x310>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a22      	ldr	r2, [pc, #136]	@ (8001704 <CFG_Print+0x334>)
 800167a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800167e:	4628      	mov	r0, r5
 8001680:	f014 fa32 	bl	8015ae8 <sniprintf>
 8001684:	4628      	mov	r0, r5
 8001686:	f7fe ffde 	bl	8000646 <strlen>
 800168a:	4601      	mov	r1, r0
 800168c:	4628      	mov	r0, r5
 800168e:	f013 fc71 	bl	8014f74 <VCP_UART_Send>
 8001692:	e6d0      	b.n	8001436 <CFG_Print+0x66>
	print_log(out, (const char *)"[ 9] QSPI GPIO speed   : %ld\r\n", gCFGparams.QSPIspeed);
 8001694:	4d11      	ldr	r5, [pc, #68]	@ (80016dc <CFG_Print+0x30c>)
 8001696:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <CFG_Print+0x310>)
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169a:	4a1b      	ldr	r2, [pc, #108]	@ (8001708 <CFG_Print+0x338>)
 800169c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016a0:	4628      	mov	r0, r5
 80016a2:	f014 fa21 	bl	8015ae8 <sniprintf>
 80016a6:	4628      	mov	r0, r5
 80016a8:	f7fe ffcd 	bl	8000646 <strlen>
 80016ac:	4601      	mov	r1, r0
 80016ae:	4628      	mov	r0, r5
 80016b0:	f013 fc6e 	bl	8014f90 <UART_Send>
 80016b4:	e6c2      	b.n	800143c <CFG_Print+0x6c>
 80016b6:	4d0c      	ldr	r5, [pc, #48]	@ (80016e8 <CFG_Print+0x318>)
 80016b8:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <CFG_Print+0x310>)
 80016ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016bc:	4a12      	ldr	r2, [pc, #72]	@ (8001708 <CFG_Print+0x338>)
 80016be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016c2:	4628      	mov	r0, r5
 80016c4:	f014 fa10 	bl	8015ae8 <sniprintf>
 80016c8:	4628      	mov	r0, r5
 80016ca:	f7fe ffbc 	bl	8000646 <strlen>
 80016ce:	4601      	mov	r1, r0
 80016d0:	4628      	mov	r0, r5
 80016d2:	f013 fc4f 	bl	8014f74 <VCP_UART_Send>
 80016d6:	e6b4      	b.n	8001442 <CFG_Print+0x72>
 80016d8:	08016d28 	.word	0x08016d28
 80016dc:	2000f20c 	.word	0x2000f20c
 80016e0:	2000c1d4 	.word	0x2000c1d4
 80016e4:	08016d38 	.word	0x08016d38
 80016e8:	2000f60c 	.word	0x2000f60c
 80016ec:	08016d58 	.word	0x08016d58
 80016f0:	08016d78 	.word	0x08016d78
 80016f4:	08016d98 	.word	0x08016d98
 80016f8:	08016db8 	.word	0x08016db8
 80016fc:	08016dd8 	.word	0x08016dd8
 8001700:	08016df8 	.word	0x08016df8
 8001704:	08016e18 	.word	0x08016e18
 8001708:	08016e38 	.word	0x08016e38
	print_log(out, (const char *)"[10] QSPI DLYB unit    : %ld\r\n", gCFGparams.DLYBunit);
 800170c:	4d43      	ldr	r5, [pc, #268]	@ (800181c <CFG_Print+0x44c>)
 800170e:	4b44      	ldr	r3, [pc, #272]	@ (8001820 <CFG_Print+0x450>)
 8001710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001712:	4a44      	ldr	r2, [pc, #272]	@ (8001824 <CFG_Print+0x454>)
 8001714:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001718:	4628      	mov	r0, r5
 800171a:	f014 f9e5 	bl	8015ae8 <sniprintf>
 800171e:	4628      	mov	r0, r5
 8001720:	f7fe ff91 	bl	8000646 <strlen>
 8001724:	4601      	mov	r1, r0
 8001726:	4628      	mov	r0, r5
 8001728:	f013 fc32 	bl	8014f90 <UART_Send>
 800172c:	e68c      	b.n	8001448 <CFG_Print+0x78>
 800172e:	4d3e      	ldr	r5, [pc, #248]	@ (8001828 <CFG_Print+0x458>)
 8001730:	4b3b      	ldr	r3, [pc, #236]	@ (8001820 <CFG_Print+0x450>)
 8001732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001734:	4a3b      	ldr	r2, [pc, #236]	@ (8001824 <CFG_Print+0x454>)
 8001736:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800173a:	4628      	mov	r0, r5
 800173c:	f014 f9d4 	bl	8015ae8 <sniprintf>
 8001740:	4628      	mov	r0, r5
 8001742:	f7fe ff80 	bl	8000646 <strlen>
 8001746:	4601      	mov	r1, r0
 8001748:	4628      	mov	r0, r5
 800174a:	f013 fc13 	bl	8014f74 <VCP_UART_Send>
 800174e:	e67e      	b.n	800144e <CFG_Print+0x7e>
	print_log(out, (const char *)"[11] QSPI DLYB phase   : %ld\r\n", gCFGparams.DLYBphase);
 8001750:	4d32      	ldr	r5, [pc, #200]	@ (800181c <CFG_Print+0x44c>)
 8001752:	4b33      	ldr	r3, [pc, #204]	@ (8001820 <CFG_Print+0x450>)
 8001754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001756:	4a35      	ldr	r2, [pc, #212]	@ (800182c <CFG_Print+0x45c>)
 8001758:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800175c:	4628      	mov	r0, r5
 800175e:	f014 f9c3 	bl	8015ae8 <sniprintf>
 8001762:	4628      	mov	r0, r5
 8001764:	f7fe ff6f 	bl	8000646 <strlen>
 8001768:	4601      	mov	r1, r0
 800176a:	4628      	mov	r0, r5
 800176c:	f013 fc10 	bl	8014f90 <UART_Send>
 8001770:	e670      	b.n	8001454 <CFG_Print+0x84>
 8001772:	4d2d      	ldr	r5, [pc, #180]	@ (8001828 <CFG_Print+0x458>)
 8001774:	4b2a      	ldr	r3, [pc, #168]	@ (8001820 <CFG_Print+0x450>)
 8001776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001778:	4a2c      	ldr	r2, [pc, #176]	@ (800182c <CFG_Print+0x45c>)
 800177a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800177e:	4628      	mov	r0, r5
 8001780:	f014 f9b2 	bl	8015ae8 <sniprintf>
 8001784:	4628      	mov	r0, r5
 8001786:	f7fe ff5e 	bl	8000646 <strlen>
 800178a:	4601      	mov	r1, r0
 800178c:	4628      	mov	r0, r5
 800178e:	f013 fbf1 	bl	8014f74 <VCP_UART_Send>
 8001792:	e662      	b.n	800145a <CFG_Print+0x8a>
	print_log(out, (const char *)"[12] Debug             : %lx\r\n", gCFGparams.Debug);
 8001794:	4d21      	ldr	r5, [pc, #132]	@ (800181c <CFG_Print+0x44c>)
 8001796:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <CFG_Print+0x450>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a25      	ldr	r2, [pc, #148]	@ (8001830 <CFG_Print+0x460>)
 800179c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017a0:	4628      	mov	r0, r5
 80017a2:	f014 f9a1 	bl	8015ae8 <sniprintf>
 80017a6:	4628      	mov	r0, r5
 80017a8:	f7fe ff4d 	bl	8000646 <strlen>
 80017ac:	4601      	mov	r1, r0
 80017ae:	4628      	mov	r0, r5
 80017b0:	f013 fbee 	bl	8014f90 <UART_Send>
 80017b4:	e654      	b.n	8001460 <CFG_Print+0x90>
 80017b6:	4d1c      	ldr	r5, [pc, #112]	@ (8001828 <CFG_Print+0x458>)
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <CFG_Print+0x450>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001830 <CFG_Print+0x460>)
 80017be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017c2:	4628      	mov	r0, r5
 80017c4:	f014 f990 	bl	8015ae8 <sniprintf>
 80017c8:	4628      	mov	r0, r5
 80017ca:	f7fe ff3c 	bl	8000646 <strlen>
 80017ce:	4601      	mov	r1, r0
 80017d0:	4628      	mov	r0, r5
 80017d2:	f013 fbcf 	bl	8014f74 <VCP_UART_Send>
 80017d6:	e646      	b.n	8001466 <CFG_Print+0x96>
	print_log(out, (const char *)"[13] CfgFlags          : %lx\r\n", gCFGparams.CfgFlags);
 80017d8:	4d10      	ldr	r5, [pc, #64]	@ (800181c <CFG_Print+0x44c>)
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <CFG_Print+0x450>)
 80017dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017de:	4a15      	ldr	r2, [pc, #84]	@ (8001834 <CFG_Print+0x464>)
 80017e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017e4:	4628      	mov	r0, r5
 80017e6:	f014 f97f 	bl	8015ae8 <sniprintf>
 80017ea:	4628      	mov	r0, r5
 80017ec:	f7fe ff2b 	bl	8000646 <strlen>
 80017f0:	4601      	mov	r1, r0
 80017f2:	4628      	mov	r0, r5
 80017f4:	f013 fbcc 	bl	8014f90 <UART_Send>
 80017f8:	e638      	b.n	800146c <CFG_Print+0x9c>
 80017fa:	4c0b      	ldr	r4, [pc, #44]	@ (8001828 <CFG_Print+0x458>)
 80017fc:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <CFG_Print+0x450>)
 80017fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001800:	4a0c      	ldr	r2, [pc, #48]	@ (8001834 <CFG_Print+0x464>)
 8001802:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001806:	4620      	mov	r0, r4
 8001808:	f014 f96e 	bl	8015ae8 <sniprintf>
 800180c:	4620      	mov	r0, r4
 800180e:	f7fe ff1a 	bl	8000646 <strlen>
 8001812:	4601      	mov	r1, r0
 8001814:	4620      	mov	r0, r4
 8001816:	f013 fbad 	bl	8014f74 <VCP_UART_Send>
}
 800181a:	e62a      	b.n	8001472 <CFG_Print+0xa2>
 800181c:	2000f20c 	.word	0x2000f20c
 8001820:	2000c1d4 	.word	0x2000c1d4
 8001824:	08016e58 	.word	0x08016e58
 8001828:	2000f60c 	.word	0x2000f60c
 800182c:	08016e78 	.word	0x08016e78
 8001830:	08016e98 	.word	0x08016e98
 8001834:	08016eb8 	.word	0x08016eb8

08001838 <CFG_Print_hex>:

void CFG_Print_hex(EResultOut out)
{
 8001838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183a:	b083      	sub	sp, #12
 800183c:	4606      	mov	r6, r0
	size_t i;
	unsigned long *ulPtr = (unsigned long *)&gCFGparams;
 800183e:	4d19      	ldr	r5, [pc, #100]	@ (80018a4 <CFG_Print_hex+0x6c>)

	for (i = 0; i < (sizeof(tCFGparams) / 4); i++)
 8001840:	2400      	movs	r4, #0
 8001842:	e002      	b.n	800184a <CFG_Print_hex+0x12>
	{
		print_log(out, (const char *)"%2d : 0x%08lx\r\n", (int)i, *ulPtr++);
 8001844:	2e01      	cmp	r6, #1
 8001846:	d017      	beq.n	8001878 <CFG_Print_hex+0x40>
	for (i = 0; i < (sizeof(tCFGparams) / 4); i++)
 8001848:	3401      	adds	r4, #1
 800184a:	2c0d      	cmp	r4, #13
 800184c:	d827      	bhi.n	800189e <CFG_Print_hex+0x66>
		print_log(out, (const char *)"%2d : 0x%08lx\r\n", (int)i, *ulPtr++);
 800184e:	2e00      	cmp	r6, #0
 8001850:	d1f8      	bne.n	8001844 <CFG_Print_hex+0xc>
 8001852:	4f15      	ldr	r7, [pc, #84]	@ (80018a8 <CFG_Print_hex+0x70>)
 8001854:	f855 3b04 	ldr.w	r3, [r5], #4
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	4623      	mov	r3, r4
 800185c:	4a13      	ldr	r2, [pc, #76]	@ (80018ac <CFG_Print_hex+0x74>)
 800185e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001862:	4638      	mov	r0, r7
 8001864:	f014 f940 	bl	8015ae8 <sniprintf>
 8001868:	4638      	mov	r0, r7
 800186a:	f7fe feec 	bl	8000646 <strlen>
 800186e:	4601      	mov	r1, r0
 8001870:	4638      	mov	r0, r7
 8001872:	f013 fb8d 	bl	8014f90 <UART_Send>
 8001876:	e7e5      	b.n	8001844 <CFG_Print_hex+0xc>
 8001878:	4f0d      	ldr	r7, [pc, #52]	@ (80018b0 <CFG_Print_hex+0x78>)
 800187a:	f855 3b04 	ldr.w	r3, [r5], #4
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	4623      	mov	r3, r4
 8001882:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <CFG_Print_hex+0x74>)
 8001884:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001888:	4638      	mov	r0, r7
 800188a:	f014 f92d 	bl	8015ae8 <sniprintf>
 800188e:	4638      	mov	r0, r7
 8001890:	f7fe fed9 	bl	8000646 <strlen>
 8001894:	4601      	mov	r1, r0
 8001896:	4638      	mov	r0, r7
 8001898:	f013 fb6c 	bl	8014f74 <VCP_UART_Send>
 800189c:	e7d4      	b.n	8001848 <CFG_Print_hex+0x10>
	}
}
 800189e:	b003      	add	sp, #12
 80018a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000c1d4 	.word	0x2000c1d4
 80018a8:	2000f20c 	.word	0x2000f20c
 80018ac:	08016ed8 	.word	0x08016ed8
 80018b0:	2000f60c 	.word	0x2000f60c

080018b4 <SYSINFO_print>:


void SYSINFO_print(EResultOut out)
{
 80018b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b6:	b083      	sub	sp, #12
	print_log(out, "%s", VERSION_STRING);
 80018b8:	4604      	mov	r4, r0
 80018ba:	b378      	cbz	r0, 800191c <SYSINFO_print+0x68>
 80018bc:	2c01      	cmp	r4, #1
 80018be:	d040      	beq.n	8001942 <SYSINFO_print+0x8e>
	print_log(out, (const char *)"MEMPool    : max: %d | free: %d | used: %d\r\n", (int)MEM_PoolMax(), (int)MEM_PoolAvailable(), (int)MEM_PoolWatermark());
 80018c0:	2c00      	cmp	r4, #0
 80018c2:	d051      	beq.n	8001968 <SYSINFO_print+0xb4>
 80018c4:	2c01      	cmp	r4, #1
 80018c6:	d069      	beq.n	800199c <SYSINFO_print+0xe8>
	print_log(out, (const char *)"CPU ID     : %08lx\r\n", (long)SCB->CPUID);
 80018c8:	2c00      	cmp	r4, #0
 80018ca:	f000 8081 	beq.w	80019d0 <SYSINFO_print+0x11c>
 80018ce:	2c01      	cmp	r4, #1
 80018d0:	f000 808f 	beq.w	80019f2 <SYSINFO_print+0x13e>
	print_log(out, (const char *)"REV ID     : %08lx\r\n", *((long *)DBGMCU_BASE));
 80018d4:	2c00      	cmp	r4, #0
 80018d6:	f000 809d 	beq.w	8001a14 <SYSINFO_print+0x160>
 80018da:	2c01      	cmp	r4, #1
 80018dc:	f000 80ab 	beq.w	8001a36 <SYSINFO_print+0x182>
	print_log(out, (const char *)"CPU Clock  : %ld\r\n", SystemCoreClock);
 80018e0:	2c00      	cmp	r4, #0
 80018e2:	f000 80b9 	beq.w	8001a58 <SYSINFO_print+0x1a4>
 80018e6:	2c01      	cmp	r4, #1
 80018e8:	f000 80c7 	beq.w	8001a7a <SYSINFO_print+0x1c6>
	print_log(out, (const char *)"Board      : %s\r\n", BOARD_INFO);
 80018ec:	2c00      	cmp	r4, #0
 80018ee:	f000 80d5 	beq.w	8001a9c <SYSINFO_print+0x1e8>
 80018f2:	2c01      	cmp	r4, #1
 80018f4:	f000 80e2 	beq.w	8001abc <SYSINFO_print+0x208>
	print_log(out, (const char *)"UART       : ");
 80018f8:	2c00      	cmp	r4, #0
 80018fa:	f000 80ef 	beq.w	8001adc <SYSINFO_print+0x228>
 80018fe:	2c01      	cmp	r4, #1
 8001900:	f000 80fc 	beq.w	8001afc <SYSINFO_print+0x248>
	if (out == UART_OUT)
 8001904:	2c00      	cmp	r4, #0
 8001906:	f000 8109 	beq.w	8001b1c <SYSINFO_print+0x268>
		print_log(out, (const char *)"Debug UART\r\n");
	else
		print_log(out, (const char *)"USB VCP\r\n");
 800190a:	2c01      	cmp	r4, #1
 800190c:	f000 8128 	beq.w	8001b60 <SYSINFO_print+0x2ac>
	ADC_RunOnce(out, 1);
 8001910:	2101      	movs	r1, #1
 8001912:	4620      	mov	r0, r4
 8001914:	f002 fcf6 	bl	8004304 <ADC_RunOnce>
	////print_log(out, (const char *)"volt range : %ld\r\n", 4 - (HAL_PWREx_GetVoltageRange() >> 16));
}
 8001918:	b003      	add	sp, #12
 800191a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	print_log(out, "%s", VERSION_STRING);
 800191c:	4e98      	ldr	r6, [pc, #608]	@ (8001b80 <SYSINFO_print+0x2cc>)
 800191e:	4d99      	ldr	r5, [pc, #612]	@ (8001b84 <SYSINFO_print+0x2d0>)
 8001920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001922:	6030      	str	r0, [r6, #0]
 8001924:	6071      	str	r1, [r6, #4]
 8001926:	60b2      	str	r2, [r6, #8]
 8001928:	60f3      	str	r3, [r6, #12]
 800192a:	cd07      	ldmia	r5!, {r0, r1, r2}
 800192c:	6130      	str	r0, [r6, #16]
 800192e:	6171      	str	r1, [r6, #20]
 8001930:	61b2      	str	r2, [r6, #24]
 8001932:	4630      	mov	r0, r6
 8001934:	f7fe fe87 	bl	8000646 <strlen>
 8001938:	4601      	mov	r1, r0
 800193a:	4630      	mov	r0, r6
 800193c:	f013 fb28 	bl	8014f90 <UART_Send>
 8001940:	e7bc      	b.n	80018bc <SYSINFO_print+0x8>
 8001942:	4e91      	ldr	r6, [pc, #580]	@ (8001b88 <SYSINFO_print+0x2d4>)
 8001944:	4d8f      	ldr	r5, [pc, #572]	@ (8001b84 <SYSINFO_print+0x2d0>)
 8001946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001948:	6030      	str	r0, [r6, #0]
 800194a:	6071      	str	r1, [r6, #4]
 800194c:	60b2      	str	r2, [r6, #8]
 800194e:	60f3      	str	r3, [r6, #12]
 8001950:	cd07      	ldmia	r5!, {r0, r1, r2}
 8001952:	6130      	str	r0, [r6, #16]
 8001954:	6171      	str	r1, [r6, #20]
 8001956:	61b2      	str	r2, [r6, #24]
 8001958:	4630      	mov	r0, r6
 800195a:	f7fe fe74 	bl	8000646 <strlen>
 800195e:	4601      	mov	r1, r0
 8001960:	4630      	mov	r0, r6
 8001962:	f013 fb07 	bl	8014f74 <VCP_UART_Send>
 8001966:	e7ab      	b.n	80018c0 <SYSINFO_print+0xc>
	print_log(out, (const char *)"MEMPool    : max: %d | free: %d | used: %d\r\n", (int)MEM_PoolMax(), (int)MEM_PoolAvailable(), (int)MEM_PoolWatermark());
 8001968:	f7ff f9d4 	bl	8000d14 <MEM_PoolMax>
 800196c:	4606      	mov	r6, r0
 800196e:	f7ff f9d3 	bl	8000d18 <MEM_PoolAvailable>
 8001972:	4607      	mov	r7, r0
 8001974:	f7ff f9c8 	bl	8000d08 <MEM_PoolWatermark>
 8001978:	4d81      	ldr	r5, [pc, #516]	@ (8001b80 <SYSINFO_print+0x2cc>)
 800197a:	9001      	str	r0, [sp, #4]
 800197c:	9700      	str	r7, [sp, #0]
 800197e:	4633      	mov	r3, r6
 8001980:	4a82      	ldr	r2, [pc, #520]	@ (8001b8c <SYSINFO_print+0x2d8>)
 8001982:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001986:	4628      	mov	r0, r5
 8001988:	f014 f8ae 	bl	8015ae8 <sniprintf>
 800198c:	4628      	mov	r0, r5
 800198e:	f7fe fe5a 	bl	8000646 <strlen>
 8001992:	4601      	mov	r1, r0
 8001994:	4628      	mov	r0, r5
 8001996:	f013 fafb 	bl	8014f90 <UART_Send>
 800199a:	e793      	b.n	80018c4 <SYSINFO_print+0x10>
 800199c:	f7ff f9ba 	bl	8000d14 <MEM_PoolMax>
 80019a0:	4606      	mov	r6, r0
 80019a2:	f7ff f9b9 	bl	8000d18 <MEM_PoolAvailable>
 80019a6:	4607      	mov	r7, r0
 80019a8:	f7ff f9ae 	bl	8000d08 <MEM_PoolWatermark>
 80019ac:	4d76      	ldr	r5, [pc, #472]	@ (8001b88 <SYSINFO_print+0x2d4>)
 80019ae:	9001      	str	r0, [sp, #4]
 80019b0:	9700      	str	r7, [sp, #0]
 80019b2:	4633      	mov	r3, r6
 80019b4:	4a75      	ldr	r2, [pc, #468]	@ (8001b8c <SYSINFO_print+0x2d8>)
 80019b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019ba:	4628      	mov	r0, r5
 80019bc:	f014 f894 	bl	8015ae8 <sniprintf>
 80019c0:	4628      	mov	r0, r5
 80019c2:	f7fe fe40 	bl	8000646 <strlen>
 80019c6:	4601      	mov	r1, r0
 80019c8:	4628      	mov	r0, r5
 80019ca:	f013 fad3 	bl	8014f74 <VCP_UART_Send>
 80019ce:	e77b      	b.n	80018c8 <SYSINFO_print+0x14>
	print_log(out, (const char *)"CPU ID     : %08lx\r\n", (long)SCB->CPUID);
 80019d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001b90 <SYSINFO_print+0x2dc>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4d6a      	ldr	r5, [pc, #424]	@ (8001b80 <SYSINFO_print+0x2cc>)
 80019d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001b94 <SYSINFO_print+0x2e0>)
 80019d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019dc:	4628      	mov	r0, r5
 80019de:	f014 f883 	bl	8015ae8 <sniprintf>
 80019e2:	4628      	mov	r0, r5
 80019e4:	f7fe fe2f 	bl	8000646 <strlen>
 80019e8:	4601      	mov	r1, r0
 80019ea:	4628      	mov	r0, r5
 80019ec:	f013 fad0 	bl	8014f90 <UART_Send>
 80019f0:	e76d      	b.n	80018ce <SYSINFO_print+0x1a>
 80019f2:	4b67      	ldr	r3, [pc, #412]	@ (8001b90 <SYSINFO_print+0x2dc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4d64      	ldr	r5, [pc, #400]	@ (8001b88 <SYSINFO_print+0x2d4>)
 80019f8:	4a66      	ldr	r2, [pc, #408]	@ (8001b94 <SYSINFO_print+0x2e0>)
 80019fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019fe:	4628      	mov	r0, r5
 8001a00:	f014 f872 	bl	8015ae8 <sniprintf>
 8001a04:	4628      	mov	r0, r5
 8001a06:	f7fe fe1e 	bl	8000646 <strlen>
 8001a0a:	4601      	mov	r1, r0
 8001a0c:	4628      	mov	r0, r5
 8001a0e:	f013 fab1 	bl	8014f74 <VCP_UART_Send>
 8001a12:	e75f      	b.n	80018d4 <SYSINFO_print+0x20>
	print_log(out, (const char *)"REV ID     : %08lx\r\n", *((long *)DBGMCU_BASE));
 8001a14:	4d5a      	ldr	r5, [pc, #360]	@ (8001b80 <SYSINFO_print+0x2cc>)
 8001a16:	4b60      	ldr	r3, [pc, #384]	@ (8001b98 <SYSINFO_print+0x2e4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a60      	ldr	r2, [pc, #384]	@ (8001b9c <SYSINFO_print+0x2e8>)
 8001a1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a20:	4628      	mov	r0, r5
 8001a22:	f014 f861 	bl	8015ae8 <sniprintf>
 8001a26:	4628      	mov	r0, r5
 8001a28:	f7fe fe0d 	bl	8000646 <strlen>
 8001a2c:	4601      	mov	r1, r0
 8001a2e:	4628      	mov	r0, r5
 8001a30:	f013 faae 	bl	8014f90 <UART_Send>
 8001a34:	e751      	b.n	80018da <SYSINFO_print+0x26>
 8001a36:	4d54      	ldr	r5, [pc, #336]	@ (8001b88 <SYSINFO_print+0x2d4>)
 8001a38:	4b57      	ldr	r3, [pc, #348]	@ (8001b98 <SYSINFO_print+0x2e4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a57      	ldr	r2, [pc, #348]	@ (8001b9c <SYSINFO_print+0x2e8>)
 8001a3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a42:	4628      	mov	r0, r5
 8001a44:	f014 f850 	bl	8015ae8 <sniprintf>
 8001a48:	4628      	mov	r0, r5
 8001a4a:	f7fe fdfc 	bl	8000646 <strlen>
 8001a4e:	4601      	mov	r1, r0
 8001a50:	4628      	mov	r0, r5
 8001a52:	f013 fa8f 	bl	8014f74 <VCP_UART_Send>
 8001a56:	e743      	b.n	80018e0 <SYSINFO_print+0x2c>
	print_log(out, (const char *)"CPU Clock  : %ld\r\n", SystemCoreClock);
 8001a58:	4d49      	ldr	r5, [pc, #292]	@ (8001b80 <SYSINFO_print+0x2cc>)
 8001a5a:	4b51      	ldr	r3, [pc, #324]	@ (8001ba0 <SYSINFO_print+0x2ec>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a51      	ldr	r2, [pc, #324]	@ (8001ba4 <SYSINFO_print+0x2f0>)
 8001a60:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a64:	4628      	mov	r0, r5
 8001a66:	f014 f83f 	bl	8015ae8 <sniprintf>
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f7fe fdeb 	bl	8000646 <strlen>
 8001a70:	4601      	mov	r1, r0
 8001a72:	4628      	mov	r0, r5
 8001a74:	f013 fa8c 	bl	8014f90 <UART_Send>
 8001a78:	e735      	b.n	80018e6 <SYSINFO_print+0x32>
 8001a7a:	4d43      	ldr	r5, [pc, #268]	@ (8001b88 <SYSINFO_print+0x2d4>)
 8001a7c:	4b48      	ldr	r3, [pc, #288]	@ (8001ba0 <SYSINFO_print+0x2ec>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a48      	ldr	r2, [pc, #288]	@ (8001ba4 <SYSINFO_print+0x2f0>)
 8001a82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a86:	4628      	mov	r0, r5
 8001a88:	f014 f82e 	bl	8015ae8 <sniprintf>
 8001a8c:	4628      	mov	r0, r5
 8001a8e:	f7fe fdda 	bl	8000646 <strlen>
 8001a92:	4601      	mov	r1, r0
 8001a94:	4628      	mov	r0, r5
 8001a96:	f013 fa6d 	bl	8014f74 <VCP_UART_Send>
 8001a9a:	e727      	b.n	80018ec <SYSINFO_print+0x38>
	print_log(out, (const char *)"Board      : %s\r\n", BOARD_INFO);
 8001a9c:	4d38      	ldr	r5, [pc, #224]	@ (8001b80 <SYSINFO_print+0x2cc>)
 8001a9e:	4b42      	ldr	r3, [pc, #264]	@ (8001ba8 <SYSINFO_print+0x2f4>)
 8001aa0:	4a42      	ldr	r2, [pc, #264]	@ (8001bac <SYSINFO_print+0x2f8>)
 8001aa2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001aa6:	4628      	mov	r0, r5
 8001aa8:	f014 f81e 	bl	8015ae8 <sniprintf>
 8001aac:	4628      	mov	r0, r5
 8001aae:	f7fe fdca 	bl	8000646 <strlen>
 8001ab2:	4601      	mov	r1, r0
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	f013 fa6b 	bl	8014f90 <UART_Send>
 8001aba:	e71a      	b.n	80018f2 <SYSINFO_print+0x3e>
 8001abc:	4d32      	ldr	r5, [pc, #200]	@ (8001b88 <SYSINFO_print+0x2d4>)
 8001abe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba8 <SYSINFO_print+0x2f4>)
 8001ac0:	4a3a      	ldr	r2, [pc, #232]	@ (8001bac <SYSINFO_print+0x2f8>)
 8001ac2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ac6:	4628      	mov	r0, r5
 8001ac8:	f014 f80e 	bl	8015ae8 <sniprintf>
 8001acc:	4628      	mov	r0, r5
 8001ace:	f7fe fdba 	bl	8000646 <strlen>
 8001ad2:	4601      	mov	r1, r0
 8001ad4:	4628      	mov	r0, r5
 8001ad6:	f013 fa4d 	bl	8014f74 <VCP_UART_Send>
 8001ada:	e70d      	b.n	80018f8 <SYSINFO_print+0x44>
	print_log(out, (const char *)"UART       : ");
 8001adc:	4d28      	ldr	r5, [pc, #160]	@ (8001b80 <SYSINFO_print+0x2cc>)
 8001ade:	4b34      	ldr	r3, [pc, #208]	@ (8001bb0 <SYSINFO_print+0x2fc>)
 8001ae0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001ae2:	6028      	str	r0, [r5, #0]
 8001ae4:	6069      	str	r1, [r5, #4]
 8001ae6:	60aa      	str	r2, [r5, #8]
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	81ab      	strh	r3, [r5, #12]
 8001aec:	4628      	mov	r0, r5
 8001aee:	f7fe fdaa 	bl	8000646 <strlen>
 8001af2:	4601      	mov	r1, r0
 8001af4:	4628      	mov	r0, r5
 8001af6:	f013 fa4b 	bl	8014f90 <UART_Send>
 8001afa:	e700      	b.n	80018fe <SYSINFO_print+0x4a>
 8001afc:	4d22      	ldr	r5, [pc, #136]	@ (8001b88 <SYSINFO_print+0x2d4>)
 8001afe:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb0 <SYSINFO_print+0x2fc>)
 8001b00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b02:	6028      	str	r0, [r5, #0]
 8001b04:	6069      	str	r1, [r5, #4]
 8001b06:	60aa      	str	r2, [r5, #8]
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	81ab      	strh	r3, [r5, #12]
 8001b0c:	4628      	mov	r0, r5
 8001b0e:	f7fe fd9a 	bl	8000646 <strlen>
 8001b12:	4601      	mov	r1, r0
 8001b14:	4628      	mov	r0, r5
 8001b16:	f013 fa2d 	bl	8014f74 <VCP_UART_Send>
 8001b1a:	e6f3      	b.n	8001904 <SYSINFO_print+0x50>
		print_log(out, (const char *)"Debug UART\r\n");
 8001b1c:	4d18      	ldr	r5, [pc, #96]	@ (8001b80 <SYSINFO_print+0x2cc>)
 8001b1e:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <SYSINFO_print+0x300>)
 8001b20:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b22:	6028      	str	r0, [r5, #0]
 8001b24:	6069      	str	r1, [r5, #4]
 8001b26:	60aa      	str	r2, [r5, #8]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	732b      	strb	r3, [r5, #12]
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	f7fe fd8a 	bl	8000646 <strlen>
 8001b32:	4601      	mov	r1, r0
 8001b34:	4628      	mov	r0, r5
 8001b36:	f013 fa2b 	bl	8014f90 <UART_Send>
 8001b3a:	2c01      	cmp	r4, #1
 8001b3c:	f47f aee8 	bne.w	8001910 <SYSINFO_print+0x5c>
 8001b40:	4d11      	ldr	r5, [pc, #68]	@ (8001b88 <SYSINFO_print+0x2d4>)
 8001b42:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb4 <SYSINFO_print+0x300>)
 8001b44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b46:	6028      	str	r0, [r5, #0]
 8001b48:	6069      	str	r1, [r5, #4]
 8001b4a:	60aa      	str	r2, [r5, #8]
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	732b      	strb	r3, [r5, #12]
 8001b50:	4628      	mov	r0, r5
 8001b52:	f7fe fd78 	bl	8000646 <strlen>
 8001b56:	4601      	mov	r1, r0
 8001b58:	4628      	mov	r0, r5
 8001b5a:	f013 fa0b 	bl	8014f74 <VCP_UART_Send>
 8001b5e:	e6d7      	b.n	8001910 <SYSINFO_print+0x5c>
		print_log(out, (const char *)"USB VCP\r\n");
 8001b60:	4d09      	ldr	r5, [pc, #36]	@ (8001b88 <SYSINFO_print+0x2d4>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <SYSINFO_print+0x304>)
 8001b64:	cb03      	ldmia	r3!, {r0, r1}
 8001b66:	6028      	str	r0, [r5, #0]
 8001b68:	6069      	str	r1, [r5, #4]
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	812b      	strh	r3, [r5, #8]
 8001b6e:	4628      	mov	r0, r5
 8001b70:	f7fe fd69 	bl	8000646 <strlen>
 8001b74:	4601      	mov	r1, r0
 8001b76:	4628      	mov	r0, r5
 8001b78:	f013 f9fc 	bl	8014f74 <VCP_UART_Send>
 8001b7c:	e6c8      	b.n	8001910 <SYSINFO_print+0x5c>
 8001b7e:	bf00      	nop
 8001b80:	2000f20c 	.word	0x2000f20c
 8001b84:	08016ee8 	.word	0x08016ee8
 8001b88:	2000f60c 	.word	0x2000f60c
 8001b8c:	08016f04 	.word	0x08016f04
 8001b90:	e000ed00 	.word	0xe000ed00
 8001b94:	08016f34 	.word	0x08016f34
 8001b98:	e0044000 	.word	0xe0044000
 8001b9c:	08016f4c 	.word	0x08016f4c
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	08016f64 	.word	0x08016f64
 8001ba8:	08016f78 	.word	0x08016f78
 8001bac:	08016f80 	.word	0x08016f80
 8001bb0:	08016f94 	.word	0x08016f94
 8001bb4:	08016fa4 	.word	0x08016fa4
 8001bb8:	08016fb4 	.word	0x08016fb4

08001bbc <App_ThreadX_Init>:
{
  (void)memory_ptr;
  UINT ret = TX_SUCCESS;

  return ret;
}
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	4770      	bx	lr

08001bc0 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8001bc0:	b508      	push	{r3, lr}
  tx_kernel_enter();
 8001bc2:	f00e ff2b 	bl	8010a1c <_tx_initialize_kernel_enter>
}
 8001bc6:	bd08      	pop	{r3, pc}

08001bc8 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001bcc:	4905      	ldr	r1, [pc, #20]	@ (8001be4 <__NVIC_SystemReset+0x1c>)
 8001bce:	68ca      	ldr	r2, [r1, #12]
 8001bd0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bd4:	4b04      	ldr	r3, [pc, #16]	@ (8001be8 <__NVIC_SystemReset+0x20>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60cb      	str	r3, [r1, #12]
 8001bda:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001bde:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001be0:	e7fd      	b.n	8001bde <__NVIC_SystemReset+0x16>
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00
 8001be8:	05fa0004 	.word	0x05fa0004

08001bec <CMD_keywordLen>:

/* ---------------------------------------------------------------------- */

/* helper function for help - keyword length */
static unsigned int CMD_keywordLen(const char *str)
{
 8001bec:	4602      	mov	r2, r0
	unsigned int l = 0;
 8001bee:	2000      	movs	r0, #0

	while (*str)
 8001bf0:	e003      	b.n	8001bfa <CMD_keywordLen+0xe>
 8001bf2:	2b3b      	cmp	r3, #59	@ 0x3b
 8001bf4:	d00b      	beq.n	8001c0e <CMD_keywordLen+0x22>
	{
		if ((*str == ';') || (*str == ' ') || (*str == '\r') || (*str == '\n'))
			break;
		str++;
 8001bf6:	3201      	adds	r2, #1
		l++;
 8001bf8:	3001      	adds	r0, #1
	while (*str)
 8001bfa:	7813      	ldrb	r3, [r2, #0]
 8001bfc:	b13b      	cbz	r3, 8001c0e <CMD_keywordLen+0x22>
		if ((*str == ';') || (*str == ' ') || (*str == '\r') || (*str == '\n'))
 8001bfe:	2b20      	cmp	r3, #32
 8001c00:	d005      	beq.n	8001c0e <CMD_keywordLen+0x22>
 8001c02:	d8f6      	bhi.n	8001bf2 <CMD_keywordLen+0x6>
 8001c04:	2b0a      	cmp	r3, #10
 8001c06:	d002      	beq.n	8001c0e <CMD_keywordLen+0x22>
 8001c08:	2b0d      	cmp	r3, #13
 8001c0a:	d1f4      	bne.n	8001bf6 <CMD_keywordLen+0xa>
 8001c0c:	4770      	bx	lr
	}

	return l;
}
 8001c0e:	4770      	bx	lr

08001c10 <CMD_lineLen>:

/* helper function for print - string length up to ';' or '#' */
static unsigned int CMD_lineLen(const char *str)
{
 8001c10:	4602      	mov	r2, r0
	unsigned int l = 0;
 8001c12:	2000      	movs	r0, #0

	while (*str)
 8001c14:	e003      	b.n	8001c1e <CMD_lineLen+0xe>
 8001c16:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c18:	d00b      	beq.n	8001c32 <CMD_lineLen+0x22>
	{
		if ((*str == ';') || (*str == '#') || (*str == '\r') || (*str == '\n'))
			break;
		str++;
 8001c1a:	3201      	adds	r2, #1
		l++;
 8001c1c:	3001      	adds	r0, #1
	while (*str)
 8001c1e:	7813      	ldrb	r3, [r2, #0]
 8001c20:	b13b      	cbz	r3, 8001c32 <CMD_lineLen+0x22>
		if ((*str == ';') || (*str == '#') || (*str == '\r') || (*str == '\n'))
 8001c22:	2b23      	cmp	r3, #35	@ 0x23
 8001c24:	d005      	beq.n	8001c32 <CMD_lineLen+0x22>
 8001c26:	d8f6      	bhi.n	8001c16 <CMD_lineLen+0x6>
 8001c28:	2b0a      	cmp	r3, #10
 8001c2a:	d002      	beq.n	8001c32 <CMD_lineLen+0x22>
 8001c2c:	2b0d      	cmp	r3, #13
 8001c2e:	d1f4      	bne.n	8001c1a <CMD_lineLen+0xa>
 8001c30:	4770      	bx	lr
	}

	return l;
}
 8001c32:	4770      	bx	lr

08001c34 <CMD_debug>:

ECMD_DEC_Status CMD_debug(TCMD_DEC_Results *res, EResultOut out)
{
	(void)out;

	gCFGparams.Debug = res->val[0];
 8001c34:	69c2      	ldr	r2, [r0, #28]
 8001c36:	4b02      	ldr	r3, [pc, #8]	@ (8001c40 <CMD_debug+0xc>)
 8001c38:	631a      	str	r2, [r3, #48]	@ 0x30

	return CMD_DEC_OK;
}
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	2000c1d4 	.word	0x2000c1d4

08001c44 <CMD_test>:
	MX_SAI1_Init();

	HAL_SAI_Receive_DMA(&hsai_BlockA1, SAIRxBuf, 192 * 16);
#endif
	return CMD_DEC_OK;
}
 8001c44:	2000      	movs	r0, #0
 8001c46:	4770      	bx	lr

08001c48 <CMD_memw>:

ECMD_DEC_Status CMD_memw(TCMD_DEC_Results *res, EResultOut out)
{
	(void)out;
	unsigned long i;
	unsigned long *p = (unsigned long *)res->val[0];	//address
 8001c48:	69c3      	ldr	r3, [r0, #28]

	for (i = 1; i < res->num; i++)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	e006      	b.n	8001c5c <CMD_memw+0x14>
		*p++ = res->val[i];
 8001c4e:	1d91      	adds	r1, r2, #6
 8001c50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001c54:	6849      	ldr	r1, [r1, #4]
 8001c56:	f843 1b04 	str.w	r1, [r3], #4
	for (i = 1; i < res->num; i++)
 8001c5a:	3201      	adds	r2, #1
 8001c5c:	6941      	ldr	r1, [r0, #20]
 8001c5e:	4291      	cmp	r1, r2
 8001c60:	d8f5      	bhi.n	8001c4e <CMD_memw+0x6>

	return CMD_DEC_OK;
}
 8001c62:	2000      	movs	r0, #0
 8001c64:	4770      	bx	lr

08001c66 <CMD_fwreset>:

ECMD_DEC_Status CMD_fwreset(TCMD_DEC_Results *res, EResultOut out)
{
 8001c66:	b508      	push	{r3, lr}
	(void)res;
	(void)out;

	NVIC_SystemReset();
 8001c68:	f7ff ffae 	bl	8001bc8 <__NVIC_SystemReset>

08001c6c <CMD_DEC_decode>:
{
 8001c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c6e:	4606      	mov	r6, r0
 8001c70:	460d      	mov	r5, r1
	res->cmd = NULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	600b      	str	r3, [r1, #0]
	res->cmdLen = 0;
 8001c76:	60cb      	str	r3, [r1, #12]
	res->offset = 0;
 8001c78:	610b      	str	r3, [r1, #16]
	res->opt = NULL;
 8001c7a:	604b      	str	r3, [r1, #4]
	res->str = NULL;
 8001c7c:	608b      	str	r3, [r1, #8]
	res->ctl = 0;
 8001c7e:	618b      	str	r3, [r1, #24]
	res->num = 0;
 8001c80:	614b      	str	r3, [r1, #20]
	for (i = 0; i < CMD_DEC_NUM_VAL; i++)
 8001c82:	e005      	b.n	8001c90 <CMD_DEC_decode+0x24>
		res->val[i] = 0L;
 8001c84:	1d9a      	adds	r2, r3, #6
 8001c86:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	6051      	str	r1, [r2, #4]
	for (i = 0; i < CMD_DEC_NUM_VAL; i++)
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c94:	d3f6      	bcc.n	8001c84 <CMD_DEC_decode+0x18>
 8001c96:	4634      	mov	r4, r6
	state = 0;
 8001c98:	2300      	movs	r3, #0
	i = 0;
 8001c9a:	461f      	mov	r7, r3
 8001c9c:	e019      	b.n	8001cd2 <CMD_DEC_decode+0x66>
				state++;
 8001c9e:	3301      	adds	r3, #1
			cmdStr++;
 8001ca0:	3401      	adds	r4, #1
		while ((*cmdStr == ' ') || (*cmdStr == '\t'))
 8001ca2:	7822      	ldrb	r2, [r4, #0]
 8001ca4:	2a20      	cmp	r2, #32
 8001ca6:	d001      	beq.n	8001cac <CMD_DEC_decode+0x40>
 8001ca8:	2a09      	cmp	r2, #9
 8001caa:	d109      	bne.n	8001cc0 <CMD_DEC_decode+0x54>
			if ((state == 1) || (state == 3))
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d0f6      	beq.n	8001c9e <CMD_DEC_decode+0x32>
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d003      	beq.n	8001cbc <CMD_DEC_decode+0x50>
			if (state == 5)
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d1f3      	bne.n	8001ca0 <CMD_DEC_decode+0x34>
				state--;
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	e7f1      	b.n	8001ca0 <CMD_DEC_decode+0x34>
				state++;
 8001cbc:	3301      	adds	r3, #1
			if (state == 5)
 8001cbe:	e7ef      	b.n	8001ca0 <CMD_DEC_decode+0x34>
		switch (state)
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d806      	bhi.n	8001cd2 <CMD_DEC_decode+0x66>
 8001cc4:	e8df f003 	tbb	[pc, r3]
 8001cc8:	362f1e03 	.word	0x362f1e03
 8001ccc:	7544      	.short	0x7544
			res->cmd = cmdStr;
 8001cce:	602c      	str	r4, [r5, #0]
			state = 1;
 8001cd0:	2301      	movs	r3, #1
	while ((*cmdStr != '\0') && (*cmdStr != '\r') && (*cmdStr != '\n') && (*cmdStr != CMD_DEC_SEPARATOR) && (*cmdStr != CMD_DEC_COMMENT))
 8001cd2:	7822      	ldrb	r2, [r4, #0]
 8001cd4:	b132      	cbz	r2, 8001ce4 <CMD_DEC_decode+0x78>
 8001cd6:	2a23      	cmp	r2, #35	@ 0x23
 8001cd8:	d004      	beq.n	8001ce4 <CMD_DEC_decode+0x78>
 8001cda:	d87a      	bhi.n	8001dd2 <CMD_DEC_decode+0x166>
 8001cdc:	2a0a      	cmp	r2, #10
 8001cde:	d001      	beq.n	8001ce4 <CMD_DEC_decode+0x78>
 8001ce0:	2a0d      	cmp	r2, #13
 8001ce2:	d1de      	bne.n	8001ca2 <CMD_DEC_decode+0x36>
	if (*cmdStr == CMD_DEC_SEPARATOR)
 8001ce4:	2a3b      	cmp	r2, #59	@ 0x3b
 8001ce6:	d078      	beq.n	8001dda <CMD_DEC_decode+0x16e>
	if (*cmdStr == CMD_DEC_COMMENT)
 8001ce8:	2a23      	cmp	r2, #35	@ 0x23
 8001cea:	d07a      	beq.n	8001de2 <CMD_DEC_decode+0x176>
	if (res->cmd)
 8001cec:	682b      	ldr	r3, [r5, #0]
 8001cee:	b113      	cbz	r3, 8001cf6 <CMD_DEC_decode+0x8a>
		if (*res->cmd == '\0')
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b903      	cbnz	r3, 8001cf6 <CMD_DEC_decode+0x8a>
			res->cmd = NULL;
 8001cf4:	602b      	str	r3, [r5, #0]
	if ((*cmdStr == '\r') || (*cmdStr == '\n'))
 8001cf6:	7823      	ldrb	r3, [r4, #0]
 8001cf8:	2b0d      	cmp	r3, #13
 8001cfa:	d075      	beq.n	8001de8 <CMD_DEC_decode+0x17c>
 8001cfc:	2b0a      	cmp	r3, #10
 8001cfe:	d073      	beq.n	8001de8 <CMD_DEC_decode+0x17c>
	return 0;
 8001d00:	2000      	movs	r0, #0
 8001d02:	e073      	b.n	8001dec <CMD_DEC_decode+0x180>
			if ((*cmdStr != '\0') && (*cmdStr != '\r') && (*cmdStr != '\n') && (*cmdStr != CMD_DEC_SEPARATOR) && (*cmdStr != CMD_DEC_COMMENT))
 8001d04:	2a00      	cmp	r2, #0
 8001d06:	d0e4      	beq.n	8001cd2 <CMD_DEC_decode+0x66>
 8001d08:	2a23      	cmp	r2, #35	@ 0x23
 8001d0a:	d0e2      	beq.n	8001cd2 <CMD_DEC_decode+0x66>
 8001d0c:	d804      	bhi.n	8001d18 <CMD_DEC_decode+0xac>
 8001d0e:	2a0a      	cmp	r2, #10
 8001d10:	d0df      	beq.n	8001cd2 <CMD_DEC_decode+0x66>
 8001d12:	2a0d      	cmp	r2, #13
 8001d14:	d0dd      	beq.n	8001cd2 <CMD_DEC_decode+0x66>
 8001d16:	e001      	b.n	8001d1c <CMD_DEC_decode+0xb0>
 8001d18:	2a3b      	cmp	r2, #59	@ 0x3b
 8001d1a:	d0da      	beq.n	8001cd2 <CMD_DEC_decode+0x66>
				cmdStr++;
 8001d1c:	3401      	adds	r4, #1
				res->cmdLen++;
 8001d1e:	68ea      	ldr	r2, [r5, #12]
 8001d20:	3201      	adds	r2, #1
 8001d22:	60ea      	str	r2, [r5, #12]
 8001d24:	e7d5      	b.n	8001cd2 <CMD_DEC_decode+0x66>
			if (*cmdStr == CMD_DEC_OPT_SIGN)
 8001d26:	2a2d      	cmp	r2, #45	@ 0x2d
 8001d28:	d001      	beq.n	8001d2e <CMD_DEC_decode+0xc2>
				state = 4;
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	e7d1      	b.n	8001cd2 <CMD_DEC_decode+0x66>
				res->opt = cmdStr;
 8001d2e:	606c      	str	r4, [r5, #4]
				state = 3;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e7ce      	b.n	8001cd2 <CMD_DEC_decode+0x66>
			if ((*cmdStr != '\0') && (*cmdStr != '\r') && (*cmdStr != '\n') && (*cmdStr != CMD_DEC_SEPARATOR) && (*cmdStr != CMD_DEC_COMMENT))
 8001d34:	2a00      	cmp	r2, #0
 8001d36:	d0cc      	beq.n	8001cd2 <CMD_DEC_decode+0x66>
 8001d38:	2a23      	cmp	r2, #35	@ 0x23
 8001d3a:	d0ca      	beq.n	8001cd2 <CMD_DEC_decode+0x66>
 8001d3c:	d804      	bhi.n	8001d48 <CMD_DEC_decode+0xdc>
 8001d3e:	2a0a      	cmp	r2, #10
 8001d40:	d0c7      	beq.n	8001cd2 <CMD_DEC_decode+0x66>
 8001d42:	2a0d      	cmp	r2, #13
 8001d44:	d0c5      	beq.n	8001cd2 <CMD_DEC_decode+0x66>
 8001d46:	e001      	b.n	8001d4c <CMD_DEC_decode+0xe0>
 8001d48:	2a3b      	cmp	r2, #59	@ 0x3b
 8001d4a:	d0c2      	beq.n	8001cd2 <CMD_DEC_decode+0x66>
				cmdStr++;
 8001d4c:	3401      	adds	r4, #1
 8001d4e:	e7c0      	b.n	8001cd2 <CMD_DEC_decode+0x66>
			if (i < CMD_DEC_NUM_VAL)
 8001d50:	f5b7 7f00 	cmp.w	r7, #512	@ 0x200
 8001d54:	d23b      	bcs.n	8001dce <CMD_DEC_decode+0x162>
				if (i == 0)
 8001d56:	b90f      	cbnz	r7, 8001d5c <CMD_DEC_decode+0xf0>
					if ( ! res->str)
 8001d58:	68ab      	ldr	r3, [r5, #8]
 8001d5a:	b19b      	cbz	r3, 8001d84 <CMD_DEC_decode+0x118>
				if (*cmdStr == '$')
 8001d5c:	7823      	ldrb	r3, [r4, #0]
 8001d5e:	2b24      	cmp	r3, #36	@ 0x24
 8001d60:	d012      	beq.n	8001d88 <CMD_DEC_decode+0x11c>
					if ((cmdStr[1] == 'x') || (cmdStr[1] == 'X'))
 8001d62:	7863      	ldrb	r3, [r4, #1]
 8001d64:	2b78      	cmp	r3, #120	@ 0x78
 8001d66:	d001      	beq.n	8001d6c <CMD_DEC_decode+0x100>
 8001d68:	2b58      	cmp	r3, #88	@ 0x58
 8001d6a:	d116      	bne.n	8001d9a <CMD_DEC_decode+0x12e>
						if (sscanf(cmdStr, "%lx", (unsigned long *)(&res->val[i])) == 1)
 8001d6c:	1dba      	adds	r2, r7, #6
 8001d6e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001d72:	3204      	adds	r2, #4
 8001d74:	491e      	ldr	r1, [pc, #120]	@ (8001df0 <CMD_DEC_decode+0x184>)
 8001d76:	4620      	mov	r0, r4
 8001d78:	f013 feea 	bl	8015b50 <siscanf>
 8001d7c:	2801      	cmp	r0, #1
 8001d7e:	d109      	bne.n	8001d94 <CMD_DEC_decode+0x128>
							i++;
 8001d80:	3701      	adds	r7, #1
 8001d82:	e007      	b.n	8001d94 <CMD_DEC_decode+0x128>
						res->str = cmdStr;
 8001d84:	60ac      	str	r4, [r5, #8]
 8001d86:	e7e9      	b.n	8001d5c <CMD_DEC_decode+0xf0>
					res->val[i] = usrVar;
 8001d88:	1dbb      	adds	r3, r7, #6
 8001d8a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001d8e:	2200      	movs	r2, #0
 8001d90:	605a      	str	r2, [r3, #4]
					i++;
 8001d92:	3701      	adds	r7, #1
				res->num = i;
 8001d94:	616f      	str	r7, [r5, #20]
			state = 5;
 8001d96:	2305      	movs	r3, #5
 8001d98:	e79b      	b.n	8001cd2 <CMD_DEC_decode+0x66>
						if (sscanf(cmdStr, "%lu", (unsigned long *)(&res->val[i])) == 1)
 8001d9a:	1dba      	adds	r2, r7, #6
 8001d9c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001da0:	3204      	adds	r2, #4
 8001da2:	4914      	ldr	r1, [pc, #80]	@ (8001df4 <CMD_DEC_decode+0x188>)
 8001da4:	4620      	mov	r0, r4
 8001da6:	f013 fed3 	bl	8015b50 <siscanf>
 8001daa:	2801      	cmp	r0, #1
 8001dac:	d1f2      	bne.n	8001d94 <CMD_DEC_decode+0x128>
							i++;
 8001dae:	3701      	adds	r7, #1
 8001db0:	e7f0      	b.n	8001d94 <CMD_DEC_decode+0x128>
			if ((*cmdStr != '\0') && (*cmdStr != '\r') && (*cmdStr != '\n') && (*cmdStr != CMD_DEC_SEPARATOR) && (*cmdStr != CMD_DEC_COMMENT))
 8001db2:	2a00      	cmp	r2, #0
 8001db4:	d08d      	beq.n	8001cd2 <CMD_DEC_decode+0x66>
 8001db6:	2a23      	cmp	r2, #35	@ 0x23
 8001db8:	d08b      	beq.n	8001cd2 <CMD_DEC_decode+0x66>
 8001dba:	d804      	bhi.n	8001dc6 <CMD_DEC_decode+0x15a>
 8001dbc:	2a0a      	cmp	r2, #10
 8001dbe:	d088      	beq.n	8001cd2 <CMD_DEC_decode+0x66>
 8001dc0:	2a0d      	cmp	r2, #13
 8001dc2:	d086      	beq.n	8001cd2 <CMD_DEC_decode+0x66>
 8001dc4:	e001      	b.n	8001dca <CMD_DEC_decode+0x15e>
 8001dc6:	2a3b      	cmp	r2, #59	@ 0x3b
 8001dc8:	d083      	beq.n	8001cd2 <CMD_DEC_decode+0x66>
				cmdStr++;
 8001dca:	3401      	adds	r4, #1
 8001dcc:	e781      	b.n	8001cd2 <CMD_DEC_decode+0x66>
			state = 5;
 8001dce:	2305      	movs	r3, #5
 8001dd0:	e77f      	b.n	8001cd2 <CMD_DEC_decode+0x66>
 8001dd2:	2a3b      	cmp	r2, #59	@ 0x3b
 8001dd4:	f47f af65 	bne.w	8001ca2 <CMD_DEC_decode+0x36>
 8001dd8:	e784      	b.n	8001ce4 <CMD_DEC_decode+0x78>
		cmdStr++;
 8001dda:	1c60      	adds	r0, r4, #1
		res->offset = (unsigned long)(cmdStr - xCmdStr);
 8001ddc:	1b80      	subs	r0, r0, r6
 8001dde:	6128      	str	r0, [r5, #16]
		return (unsigned int)(cmdStr - xCmdStr);
 8001de0:	e004      	b.n	8001dec <CMD_DEC_decode+0x180>
		*cmdStr = '\0';
 8001de2:	2300      	movs	r3, #0
 8001de4:	7023      	strb	r3, [r4, #0]
 8001de6:	e781      	b.n	8001cec <CMD_DEC_decode+0x80>
		*cmdStr = '\0';
 8001de8:	2000      	movs	r0, #0
 8001dea:	7020      	strb	r0, [r4, #0]
}
 8001dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	08016ff8 	.word	0x08016ff8
 8001df4:	08016ffc 	.word	0x08016ffc

08001df8 <CMD_DEC_findCmd>:
{
 8001df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfa:	4606      	mov	r6, r0
 8001dfc:	460d      	mov	r5, r1
	for (i = 0; i < (sizeof(Commands)/sizeof(TCMD_DEC_Command)); i++)
 8001dfe:	2400      	movs	r4, #0
 8001e00:	e000      	b.n	8001e04 <CMD_DEC_findCmd+0xc>
 8001e02:	3401      	adds	r4, #1
 8001e04:	2c16      	cmp	r4, #22
 8001e06:	d817      	bhi.n	8001e38 <CMD_DEC_findCmd+0x40>
		if (Commands[i].func == NULL)
 8001e08:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <CMD_DEC_findCmd+0x48>)
 8001e0e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f4      	beq.n	8001e02 <CMD_DEC_findCmd+0xa>
		if (len != (unsigned int)strlen(Commands[i].cmd))
 8001e18:	4a09      	ldr	r2, [pc, #36]	@ (8001e40 <CMD_DEC_findCmd+0x48>)
 8001e1a:	f852 702c 	ldr.w	r7, [r2, ip, lsl #2]
 8001e1e:	4638      	mov	r0, r7
 8001e20:	f7fe fc11 	bl	8000646 <strlen>
 8001e24:	42a8      	cmp	r0, r5
 8001e26:	d1ec      	bne.n	8001e02 <CMD_DEC_findCmd+0xa>
		if (strncmp(cmd, Commands[i].cmd, (size_t)len) == 0)
 8001e28:	462a      	mov	r2, r5
 8001e2a:	4639      	mov	r1, r7
 8001e2c:	4630      	mov	r0, r6
 8001e2e:	f013 fec3 	bl	8015bb8 <strncmp>
 8001e32:	2800      	cmp	r0, #0
 8001e34:	d1e5      	bne.n	8001e02 <CMD_DEC_findCmd+0xa>
 8001e36:	e001      	b.n	8001e3c <CMD_DEC_findCmd+0x44>
	return (unsigned int)-1;
 8001e38:	f04f 34ff 	mov.w	r4, #4294967295
}
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e40:	080175cc 	.word	0x080175cc

08001e44 <CMD_syscfg>:
{
 8001e44:	b538      	push	{r3, r4, r5, lr}
 8001e46:	460d      	mov	r5, r1
	if (res->opt)
 8001e48:	6844      	ldr	r4, [r0, #4]
 8001e4a:	b1e4      	cbz	r4, 8001e86 <CMD_syscfg+0x42>
		if (strncmp(res->opt, "-d", 2) == 0)
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	4910      	ldr	r1, [pc, #64]	@ (8001e90 <CMD_syscfg+0x4c>)
 8001e50:	4620      	mov	r0, r4
 8001e52:	f013 feb1 	bl	8015bb8 <strncmp>
 8001e56:	b170      	cbz	r0, 8001e76 <CMD_syscfg+0x32>
		if (strncmp(res->opt, "-D", 2) == 0)
 8001e58:	2202      	movs	r2, #2
 8001e5a:	490e      	ldr	r1, [pc, #56]	@ (8001e94 <CMD_syscfg+0x50>)
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	f013 feab 	bl	8015bb8 <strncmp>
 8001e62:	b160      	cbz	r0, 8001e7e <CMD_syscfg+0x3a>
		if (strncmp(res->opt, "-w", 2) == 0)
 8001e64:	2202      	movs	r2, #2
 8001e66:	490c      	ldr	r1, [pc, #48]	@ (8001e98 <CMD_syscfg+0x54>)
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f013 fea5 	bl	8015bb8 <strncmp>
 8001e6e:	b920      	cbnz	r0, 8001e7a <CMD_syscfg+0x36>
			CFG_Write();
 8001e70:	f7ff fa88 	bl	8001384 <CFG_Write>
 8001e74:	e001      	b.n	8001e7a <CMD_syscfg+0x36>
			CFG_Default();
 8001e76:	f7ff fa8f 	bl	8001398 <CFG_Default>
}
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	bd38      	pop	{r3, r4, r5, pc}
			CFG_Print_hex(out);
 8001e7e:	4628      	mov	r0, r5
 8001e80:	f7ff fcda 	bl	8001838 <CFG_Print_hex>
 8001e84:	e7f9      	b.n	8001e7a <CMD_syscfg+0x36>
		CFG_Print(out);
 8001e86:	4608      	mov	r0, r1
 8001e88:	f7ff faa2 	bl	80013d0 <CFG_Print>
 8001e8c:	e7f5      	b.n	8001e7a <CMD_syscfg+0x36>
 8001e8e:	bf00      	nop
 8001e90:	08017000 	.word	0x08017000
 8001e94:	08017004 	.word	0x08017004
 8001e98:	08017008 	.word	0x08017008

08001e9c <CMD_setcfg>:
{
 8001e9c:	b508      	push	{r3, lr}
	if (res->num < 2)
 8001e9e:	6943      	ldr	r3, [r0, #20]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d905      	bls.n	8001eb0 <CMD_setcfg+0x14>
	CFG_Set(res->val[0], res->val[1]);
 8001ea4:	6a01      	ldr	r1, [r0, #32]
 8001ea6:	69c0      	ldr	r0, [r0, #28]
 8001ea8:	f7ff fa8a 	bl	80013c0 <CFG_Set>
	return CMD_DEC_OK;
 8001eac:	2000      	movs	r0, #0
}
 8001eae:	bd08      	pop	{r3, pc}
		return CMD_DEC_INVPARAM;
 8001eb0:	2006      	movs	r0, #6
 8001eb2:	e7fc      	b.n	8001eae <CMD_setcfg+0x12>

08001eb4 <CMD_sysinfo>:
{
 8001eb4:	b508      	push	{r3, lr}
	SYSINFO_print(out);
 8001eb6:	4608      	mov	r0, r1
 8001eb8:	f7ff fcfc 	bl	80018b4 <SYSINFO_print>
}
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	bd08      	pop	{r3, pc}

08001ec0 <CMD_delay>:
{
 8001ec0:	b508      	push	{r3, lr}
	tx_thread_sleep(res->val[0]);
 8001ec2:	69c0      	ldr	r0, [r0, #28]
 8001ec4:	f00f fd5e 	bl	8011984 <_tx_thread_sleep>
}
 8001ec8:	2000      	movs	r0, #0
 8001eca:	bd08      	pop	{r3, pc}

08001ecc <CMD_sqspi>:
{
 8001ecc:	b538      	push	{r3, r4, r5, lr}
	if (res->val[0] == 0)
 8001ece:	69c0      	ldr	r0, [r0, #28]
 8001ed0:	bb38      	cbnz	r0, 8001f22 <CMD_sqspi+0x56>
 8001ed2:	460c      	mov	r4, r1
		print_log(out, "QSPI NCS: %ld\r\n", QSPI_GetQSPI());
 8001ed4:	b199      	cbz	r1, 8001efe <CMD_sqspi+0x32>
 8001ed6:	2c01      	cmp	r4, #1
 8001ed8:	d125      	bne.n	8001f26 <CMD_sqspi+0x5a>
 8001eda:	f7fe ff35 	bl	8000d48 <QSPI_GetQSPI>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4c12      	ldr	r4, [pc, #72]	@ (8001f2c <CMD_sqspi+0x60>)
 8001ee2:	4a13      	ldr	r2, [pc, #76]	@ (8001f30 <CMD_sqspi+0x64>)
 8001ee4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f013 fdfd 	bl	8015ae8 <sniprintf>
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f7fe fba9 	bl	8000646 <strlen>
 8001ef4:	4601      	mov	r1, r0
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	f013 f83c 	bl	8014f74 <VCP_UART_Send>
		return CMD_DEC_OK;
 8001efc:	e013      	b.n	8001f26 <CMD_sqspi+0x5a>
		print_log(out, "QSPI NCS: %ld\r\n", QSPI_GetQSPI());
 8001efe:	f7fe ff23 	bl	8000d48 <QSPI_GetQSPI>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4d0b      	ldr	r5, [pc, #44]	@ (8001f34 <CMD_sqspi+0x68>)
 8001f06:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <CMD_sqspi+0x64>)
 8001f08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f0c:	4628      	mov	r0, r5
 8001f0e:	f013 fdeb 	bl	8015ae8 <sniprintf>
 8001f12:	4628      	mov	r0, r5
 8001f14:	f7fe fb97 	bl	8000646 <strlen>
 8001f18:	4601      	mov	r1, r0
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	f013 f838 	bl	8014f90 <UART_Send>
 8001f20:	e7d9      	b.n	8001ed6 <CMD_sqspi+0xa>
	QSPI_SetQSPI(res->val[0]);
 8001f22:	f7fe ff0b 	bl	8000d3c <QSPI_SetQSPI>
}
 8001f26:	2000      	movs	r0, #0
 8001f28:	bd38      	pop	{r3, r4, r5, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000f60c 	.word	0x2000f60c
 8001f30:	0801700c 	.word	0x0801700c
 8001f34:	2000f20c 	.word	0x2000f20c

08001f38 <CMD_qspideinit>:
{
 8001f38:	b508      	push	{r3, lr}
	QSPI_DeInit();
 8001f3a:	f7ff f80f 	bl	8000f5c <QSPI_DeInit>
}
 8001f3e:	2000      	movs	r0, #0
 8001f40:	bd08      	pop	{r3, pc}
	...

08001f44 <CMD_qspiclk>:
{
 8001f44:	b530      	push	{r4, r5, lr}
 8001f46:	b083      	sub	sp, #12
	if ( ! res->val[0])
 8001f48:	69c0      	ldr	r0, [r0, #28]
 8001f4a:	2800      	cmp	r0, #0
 8001f4c:	d137      	bne.n	8001fbe <CMD_qspiclk+0x7a>
 8001f4e:	460c      	mov	r4, r1
		print_log(out, "QSPI div: %d [%d KHz]\r\n", (int)gCFGparams.QSPIdiv, (int)((SystemCoreClock / 1000) / gCFGparams.QSPIdiv));
 8001f50:	b1d9      	cbz	r1, 8001f8a <CMD_qspiclk+0x46>
 8001f52:	2c01      	cmp	r4, #1
 8001f54:	d135      	bne.n	8001fc2 <CMD_qspiclk+0x7e>
 8001f56:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc8 <CMD_qspiclk+0x84>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001fcc <CMD_qspiclk+0x88>)
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	491c      	ldr	r1, [pc, #112]	@ (8001fd0 <CMD_qspiclk+0x8c>)
 8001f60:	fba1 1202 	umull	r1, r2, r1, r2
 8001f64:	0992      	lsrs	r2, r2, #6
 8001f66:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f6a:	4c1a      	ldr	r4, [pc, #104]	@ (8001fd4 <CMD_qspiclk+0x90>)
 8001f6c:	9200      	str	r2, [sp, #0]
 8001f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd8 <CMD_qspiclk+0x94>)
 8001f70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f74:	4620      	mov	r0, r4
 8001f76:	f013 fdb7 	bl	8015ae8 <sniprintf>
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f7fe fb63 	bl	8000646 <strlen>
 8001f80:	4601      	mov	r1, r0
 8001f82:	4620      	mov	r0, r4
 8001f84:	f012 fff6 	bl	8014f74 <VCP_UART_Send>
		return CMD_DEC_OK;
 8001f88:	e01b      	b.n	8001fc2 <CMD_qspiclk+0x7e>
		print_log(out, "QSPI div: %d [%d KHz]\r\n", (int)gCFGparams.QSPIdiv, (int)((SystemCoreClock / 1000) / gCFGparams.QSPIdiv));
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc8 <CMD_qspiclk+0x84>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fcc <CMD_qspiclk+0x88>)
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	490f      	ldr	r1, [pc, #60]	@ (8001fd0 <CMD_qspiclk+0x8c>)
 8001f94:	fba1 1202 	umull	r1, r2, r1, r2
 8001f98:	0992      	lsrs	r2, r2, #6
 8001f9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f9e:	4d0f      	ldr	r5, [pc, #60]	@ (8001fdc <CMD_qspiclk+0x98>)
 8001fa0:	9200      	str	r2, [sp, #0]
 8001fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd8 <CMD_qspiclk+0x94>)
 8001fa4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fa8:	4628      	mov	r0, r5
 8001faa:	f013 fd9d 	bl	8015ae8 <sniprintf>
 8001fae:	4628      	mov	r0, r5
 8001fb0:	f7fe fb49 	bl	8000646 <strlen>
 8001fb4:	4601      	mov	r1, r0
 8001fb6:	4628      	mov	r0, r5
 8001fb8:	f012 ffea 	bl	8014f90 <UART_Send>
 8001fbc:	e7c9      	b.n	8001f52 <CMD_qspiclk+0xe>
	QSPI_SetClock(res->val[0]);
 8001fbe:	f7fe ffb7 	bl	8000f30 <QSPI_SetClock>
}
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	b003      	add	sp, #12
 8001fc6:	bd30      	pop	{r4, r5, pc}
 8001fc8:	2000c1d4 	.word	0x2000c1d4
 8001fcc:	20000008 	.word	0x20000008
 8001fd0:	10624dd3 	.word	0x10624dd3
 8001fd4:	2000f60c 	.word	0x2000f60c
 8001fd8:	0801701c 	.word	0x0801701c
 8001fdc:	2000f20c 	.word	0x2000f20c

08001fe0 <CMD_cid>:
{
 8001fe0:	b570      	push	{r4, r5, r6, lr}
 8001fe2:	460c      	mov	r4, r1
	cid = QSPI_ReadChipID(out);
 8001fe4:	4608      	mov	r0, r1
 8001fe6:	f7ff f823 	bl	8001030 <QSPI_ReadChipID>
 8001fea:	4605      	mov	r5, r0
	print_log(out, "0x%08lx\r\n", (unsigned long int)cid);
 8001fec:	b11c      	cbz	r4, 8001ff6 <CMD_cid+0x16>
 8001fee:	2c01      	cmp	r4, #1
 8001ff0:	d011      	beq.n	8002016 <CMD_cid+0x36>
}
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
	print_log(out, "0x%08lx\r\n", (unsigned long int)cid);
 8001ff6:	4e10      	ldr	r6, [pc, #64]	@ (8002038 <CMD_cid+0x58>)
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4a10      	ldr	r2, [pc, #64]	@ (800203c <CMD_cid+0x5c>)
 8001ffc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002000:	4630      	mov	r0, r6
 8002002:	f013 fd71 	bl	8015ae8 <sniprintf>
 8002006:	4630      	mov	r0, r6
 8002008:	f7fe fb1d 	bl	8000646 <strlen>
 800200c:	4601      	mov	r1, r0
 800200e:	4630      	mov	r0, r6
 8002010:	f012 ffbe 	bl	8014f90 <UART_Send>
 8002014:	e7eb      	b.n	8001fee <CMD_cid+0xe>
 8002016:	4c0a      	ldr	r4, [pc, #40]	@ (8002040 <CMD_cid+0x60>)
 8002018:	462b      	mov	r3, r5
 800201a:	4a08      	ldr	r2, [pc, #32]	@ (800203c <CMD_cid+0x5c>)
 800201c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002020:	4620      	mov	r0, r4
 8002022:	f013 fd61 	bl	8015ae8 <sniprintf>
 8002026:	4620      	mov	r0, r4
 8002028:	f7fe fb0d 	bl	8000646 <strlen>
 800202c:	4601      	mov	r1, r0
 800202e:	4620      	mov	r0, r4
 8002030:	f012 ffa0 	bl	8014f74 <VCP_UART_Send>
 8002034:	e7dd      	b.n	8001ff2 <CMD_cid+0x12>
 8002036:	bf00      	nop
 8002038:	2000f20c 	.word	0x2000f20c
 800203c:	08017034 	.word	0x08017034
 8002040:	2000f60c 	.word	0x2000f60c

08002044 <CMD_led>:
{
 8002044:	b508      	push	{r3, lr}
	LED_Status((int)res->val[0]);
 8002046:	69c0      	ldr	r0, [r0, #28]
 8002048:	f001 f866 	bl	8003118 <LED_Status>
}
 800204c:	2000      	movs	r0, #0
 800204e:	bd08      	pop	{r3, pc}

08002050 <CMD_flashw>:
{
 8002050:	b538      	push	{r3, r4, r5, lr}
	if (res->num < 2)
 8002052:	6943      	ldr	r3, [r0, #20]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d921      	bls.n	800209c <CMD_flashw+0x4c>
 8002058:	4604      	mov	r4, r0
	b = (unsigned char *)MEM_PoolAlloc(MEM_POOL_SEG_SIZE);
 800205a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800205e:	f7fe fd75 	bl	8000b4c <MEM_PoolAlloc>
	if ( !b )
 8002062:	4605      	mov	r5, r0
 8002064:	b1e0      	cbz	r0, 80020a0 <CMD_flashw+0x50>
	for (i = 0; i < res->num - 1; i++)
 8002066:	2300      	movs	r3, #0
 8002068:	e005      	b.n	8002076 <CMD_flashw+0x26>
		b[i] = (unsigned char)res->val[1 + i];
 800206a:	1dda      	adds	r2, r3, #7
 800206c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002070:	7912      	ldrb	r2, [r2, #4]
 8002072:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < res->num - 1; i++)
 8002074:	3301      	adds	r3, #1
 8002076:	6962      	ldr	r2, [r4, #20]
 8002078:	3a01      	subs	r2, #1
 800207a:	429a      	cmp	r2, r3
 800207c:	d8f5      	bhi.n	800206a <CMD_flashw+0x1a>
	if (FLASH_Write(res->val[0], b, res->num - 1) != 0)
 800207e:	4629      	mov	r1, r5
 8002080:	69e0      	ldr	r0, [r4, #28]
 8002082:	f7fe fd23 	bl	8000acc <FLASH_Write>
 8002086:	b920      	cbnz	r0, 8002092 <CMD_flashw+0x42>
	MEM_PoolFree(b);
 8002088:	4628      	mov	r0, r5
 800208a:	f7fe fdfd 	bl	8000c88 <MEM_PoolFree>
	return CMD_DEC_OK;
 800208e:	2000      	movs	r0, #0
}
 8002090:	bd38      	pop	{r3, r4, r5, pc}
		MEM_PoolFree(b);
 8002092:	4628      	mov	r0, r5
 8002094:	f7fe fdf8 	bl	8000c88 <MEM_PoolFree>
		return CMD_DEC_ERROR;
 8002098:	2003      	movs	r0, #3
 800209a:	e7f9      	b.n	8002090 <CMD_flashw+0x40>
		return CMD_DEC_INVPARAM;
 800209c:	2006      	movs	r0, #6
 800209e:	e7f7      	b.n	8002090 <CMD_flashw+0x40>
		return CMD_DEC_OOMEM;
 80020a0:	2005      	movs	r0, #5
 80020a2:	e7f5      	b.n	8002090 <CMD_flashw+0x40>

080020a4 <CMD_rawspi>:
	if (res->num < 2)
 80020a4:	6943      	ldr	r3, [r0, #20]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d96a      	bls.n	8002180 <CMD_rawspi+0xdc>
{
 80020aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020ae:	4604      	mov	r4, r0
 80020b0:	460d      	mov	r5, r1
	spiTx = (unsigned char *)MEM_PoolAlloc(MEM_POOL_SEG_SIZE);
 80020b2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80020b6:	f7fe fd49 	bl	8000b4c <MEM_PoolAlloc>
	if ( ! spiTx )
 80020ba:	4606      	mov	r6, r0
 80020bc:	2800      	cmp	r0, #0
 80020be:	d061      	beq.n	8002184 <CMD_rawspi+0xe0>
	for (i = 0; i < res->num; i++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	e005      	b.n	80020d0 <CMD_rawspi+0x2c>
		spiTx[i] = (unsigned char)res->val[i];
 80020c4:	1d9a      	adds	r2, r3, #6
 80020c6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80020ca:	7912      	ldrb	r2, [r2, #4]
 80020cc:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < res->num; i++)
 80020ce:	3301      	adds	r3, #1
 80020d0:	6961      	ldr	r1, [r4, #20]
 80020d2:	4299      	cmp	r1, r3
 80020d4:	d8f6      	bhi.n	80020c4 <CMD_rawspi+0x20>
	err = OSPI_SPITransaction(spiTx, res->num);
 80020d6:	4630      	mov	r0, r6
 80020d8:	f7ff f8b2 	bl	8001240 <OSPI_SPITransaction>
	if ( ! err)
 80020dc:	b378      	cbz	r0, 800213e <CMD_rawspi+0x9a>
	MEM_PoolFree(spiTx);
 80020de:	4630      	mov	r0, r6
 80020e0:	f7fe fdd2 	bl	8000c88 <MEM_PoolFree>
	return CMD_DEC_OK;
 80020e4:	2000      	movs	r0, #0
}
 80020e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			print_log(out, "%02x ", spiTx[i]);
 80020ea:	2d01      	cmp	r5, #1
 80020ec:	d016      	beq.n	800211c <CMD_rawspi+0x78>
		for (i = 0; i < res->num; i++)
 80020ee:	3701      	adds	r7, #1
 80020f0:	6963      	ldr	r3, [r4, #20]
 80020f2:	42bb      	cmp	r3, r7
 80020f4:	d925      	bls.n	8002142 <CMD_rawspi+0x9e>
			print_log(out, "%02x ", spiTx[i]);
 80020f6:	2d00      	cmp	r5, #0
 80020f8:	d1f7      	bne.n	80020ea <CMD_rawspi+0x46>
 80020fa:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8002194 <CMD_rawspi+0xf0>
 80020fe:	5df3      	ldrb	r3, [r6, r7]
 8002100:	4a21      	ldr	r2, [pc, #132]	@ (8002188 <CMD_rawspi+0xe4>)
 8002102:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002106:	4640      	mov	r0, r8
 8002108:	f013 fcee 	bl	8015ae8 <sniprintf>
 800210c:	4640      	mov	r0, r8
 800210e:	f7fe fa9a 	bl	8000646 <strlen>
 8002112:	4601      	mov	r1, r0
 8002114:	4640      	mov	r0, r8
 8002116:	f012 ff3b 	bl	8014f90 <UART_Send>
 800211a:	e7e6      	b.n	80020ea <CMD_rawspi+0x46>
 800211c:	f8df 806c 	ldr.w	r8, [pc, #108]	@ 800218c <CMD_rawspi+0xe8>
 8002120:	5df3      	ldrb	r3, [r6, r7]
 8002122:	4a19      	ldr	r2, [pc, #100]	@ (8002188 <CMD_rawspi+0xe4>)
 8002124:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002128:	4640      	mov	r0, r8
 800212a:	f013 fcdd 	bl	8015ae8 <sniprintf>
 800212e:	4640      	mov	r0, r8
 8002130:	f7fe fa89 	bl	8000646 <strlen>
 8002134:	4601      	mov	r1, r0
 8002136:	4640      	mov	r0, r8
 8002138:	f012 ff1c 	bl	8014f74 <VCP_UART_Send>
 800213c:	e7d7      	b.n	80020ee <CMD_rawspi+0x4a>
		for (i = 0; i < res->num; i++)
 800213e:	2700      	movs	r7, #0
 8002140:	e7d6      	b.n	80020f0 <CMD_rawspi+0x4c>
		print_log(out, "\r\n");
 8002142:	b17d      	cbz	r5, 8002164 <CMD_rawspi+0xc0>
 8002144:	2d01      	cmp	r5, #1
 8002146:	d1ca      	bne.n	80020de <CMD_rawspi+0x3a>
 8002148:	4c10      	ldr	r4, [pc, #64]	@ (800218c <CMD_rawspi+0xe8>)
 800214a:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <CMD_rawspi+0xec>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	8023      	strh	r3, [r4, #0]
 8002150:	0c1b      	lsrs	r3, r3, #16
 8002152:	70a3      	strb	r3, [r4, #2]
 8002154:	4620      	mov	r0, r4
 8002156:	f7fe fa76 	bl	8000646 <strlen>
 800215a:	4601      	mov	r1, r0
 800215c:	4620      	mov	r0, r4
 800215e:	f012 ff09 	bl	8014f74 <VCP_UART_Send>
 8002162:	e7bc      	b.n	80020de <CMD_rawspi+0x3a>
 8002164:	4c0b      	ldr	r4, [pc, #44]	@ (8002194 <CMD_rawspi+0xf0>)
 8002166:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <CMD_rawspi+0xec>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	8023      	strh	r3, [r4, #0]
 800216c:	0c1b      	lsrs	r3, r3, #16
 800216e:	70a3      	strb	r3, [r4, #2]
 8002170:	4620      	mov	r0, r4
 8002172:	f7fe fa68 	bl	8000646 <strlen>
 8002176:	4601      	mov	r1, r0
 8002178:	4620      	mov	r0, r4
 800217a:	f012 ff09 	bl	8014f90 <UART_Send>
 800217e:	e7e1      	b.n	8002144 <CMD_rawspi+0xa0>
		return CMD_DEC_INVPARAM;
 8002180:	2006      	movs	r0, #6
}
 8002182:	4770      	bx	lr
		return CMD_DEC_OOMEM;
 8002184:	2005      	movs	r0, #5
 8002186:	e7ae      	b.n	80020e6 <CMD_rawspi+0x42>
 8002188:	08017040 	.word	0x08017040
 800218c:	2000f60c 	.word	0x2000f60c
 8002190:	08016db4 	.word	0x08016db4
 8002194:	2000f20c 	.word	0x2000f20c

08002198 <Generic_Send>:
	if ( ! l)
 8002198:	b179      	cbz	r1, 80021ba <Generic_Send+0x22>
{
 800219a:	b570      	push	{r4, r5, r6, lr}
 800219c:	4605      	mov	r5, r0
 800219e:	4614      	mov	r4, r2
 80021a0:	460e      	mov	r6, r1
	if (out == UART_OUT)
 80021a2:	b112      	cbz	r2, 80021aa <Generic_Send+0x12>
	if (out == VCP_OUT)
 80021a4:	2c01      	cmp	r4, #1
 80021a6:	d003      	beq.n	80021b0 <Generic_Send+0x18>
}
 80021a8:	bd70      	pop	{r4, r5, r6, pc}
		UART_Send(s, l);
 80021aa:	f012 fef1 	bl	8014f90 <UART_Send>
 80021ae:	e7f9      	b.n	80021a4 <Generic_Send+0xc>
		VCP_UART_Send(s, l);
 80021b0:	4631      	mov	r1, r6
 80021b2:	4628      	mov	r0, r5
 80021b4:	f012 fede 	bl	8014f74 <VCP_UART_Send>
 80021b8:	e7f6      	b.n	80021a8 <Generic_Send+0x10>
 80021ba:	4770      	bx	lr

080021bc <CMD_help>:
{
 80021bc:	b570      	push	{r4, r5, r6, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	460d      	mov	r5, r1
	if (res->str)
 80021c2:	6884      	ldr	r4, [r0, #8]
 80021c4:	2c00      	cmp	r4, #0
 80021c6:	d07e      	beq.n	80022c6 <CMD_help+0x10a>
		idx = CMD_DEC_findCmd(res->str, CMD_keywordLen(res->str));
 80021c8:	4620      	mov	r0, r4
 80021ca:	f7ff fd0f 	bl	8001bec <CMD_keywordLen>
 80021ce:	4601      	mov	r1, r0
 80021d0:	4620      	mov	r0, r4
 80021d2:	f7ff fe11 	bl	8001df8 <CMD_DEC_findCmd>
 80021d6:	4604      	mov	r4, r0
		if (idx != (unsigned int)-1)
 80021d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80021dc:	d035      	beq.n	800224a <CMD_help+0x8e>
			print_log(out, (const char *)"%-10s: %s\r\n", Commands[idx].cmd, Commands[idx].help);
 80021de:	b11d      	cbz	r5, 80021e8 <CMD_help+0x2c>
 80021e0:	2d01      	cmp	r5, #1
 80021e2:	d019      	beq.n	8002218 <CMD_help+0x5c>
	return CMD_DEC_OK;
 80021e4:	2000      	movs	r0, #0
 80021e6:	e071      	b.n	80022cc <CMD_help+0x110>
			print_log(out, (const char *)"%-10s: %s\r\n", Commands[idx].cmd, Commands[idx].help);
 80021e8:	4b39      	ldr	r3, [pc, #228]	@ (80022d0 <CMD_help+0x114>)
 80021ea:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80021ee:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 80021f2:	6849      	ldr	r1, [r1, #4]
 80021f4:	4e37      	ldr	r6, [pc, #220]	@ (80022d4 <CMD_help+0x118>)
 80021f6:	9100      	str	r1, [sp, #0]
 80021f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fc:	4a36      	ldr	r2, [pc, #216]	@ (80022d8 <CMD_help+0x11c>)
 80021fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002202:	4630      	mov	r0, r6
 8002204:	f013 fc70 	bl	8015ae8 <sniprintf>
 8002208:	4630      	mov	r0, r6
 800220a:	f7fe fa1c 	bl	8000646 <strlen>
 800220e:	4601      	mov	r1, r0
 8002210:	4630      	mov	r0, r6
 8002212:	f012 febd 	bl	8014f90 <UART_Send>
 8002216:	e7e3      	b.n	80021e0 <CMD_help+0x24>
 8002218:	4a2d      	ldr	r2, [pc, #180]	@ (80022d0 <CMD_help+0x114>)
 800221a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800221e:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4c2d      	ldr	r4, [pc, #180]	@ (80022dc <CMD_help+0x120>)
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800222c:	4a2a      	ldr	r2, [pc, #168]	@ (80022d8 <CMD_help+0x11c>)
 800222e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002232:	4620      	mov	r0, r4
 8002234:	f013 fc58 	bl	8015ae8 <sniprintf>
 8002238:	4620      	mov	r0, r4
 800223a:	f7fe fa04 	bl	8000646 <strlen>
 800223e:	4601      	mov	r1, r0
 8002240:	4620      	mov	r0, r4
 8002242:	f012 fe97 	bl	8014f74 <VCP_UART_Send>
	return CMD_DEC_OK;
 8002246:	2000      	movs	r0, #0
 8002248:	e040      	b.n	80022cc <CMD_help+0x110>
			Generic_Send((const uint8_t *)"*E: unknown\r\n", 13, out);
 800224a:	462a      	mov	r2, r5
 800224c:	210d      	movs	r1, #13
 800224e:	4824      	ldr	r0, [pc, #144]	@ (80022e0 <CMD_help+0x124>)
 8002250:	f7ff ffa2 	bl	8002198 <Generic_Send>
			return CMD_DEC_UNKNOWN;
 8002254:	2001      	movs	r0, #1
 8002256:	e039      	b.n	80022cc <CMD_help+0x110>
			print_log(out, (const char *)"%-10s: %s\r\n", Commands[idx].cmd, Commands[idx].help);
 8002258:	2d01      	cmp	r5, #1
 800225a:	d01c      	beq.n	8002296 <CMD_help+0xda>
		for (idx = 0; (size_t)idx < (sizeof(Commands)/sizeof(TCMD_DEC_Command)); idx++)
 800225c:	3401      	adds	r4, #1
 800225e:	2c16      	cmp	r4, #22
 8002260:	d833      	bhi.n	80022ca <CMD_help+0x10e>
			print_log(out, (const char *)"%-10s: %s\r\n", Commands[idx].cmd, Commands[idx].help);
 8002262:	2d00      	cmp	r5, #0
 8002264:	d1f8      	bne.n	8002258 <CMD_help+0x9c>
 8002266:	4b1a      	ldr	r3, [pc, #104]	@ (80022d0 <CMD_help+0x114>)
 8002268:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800226c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8002270:	6849      	ldr	r1, [r1, #4]
 8002272:	4e18      	ldr	r6, [pc, #96]	@ (80022d4 <CMD_help+0x118>)
 8002274:	9100      	str	r1, [sp, #0]
 8002276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227a:	4a17      	ldr	r2, [pc, #92]	@ (80022d8 <CMD_help+0x11c>)
 800227c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002280:	4630      	mov	r0, r6
 8002282:	f013 fc31 	bl	8015ae8 <sniprintf>
 8002286:	4630      	mov	r0, r6
 8002288:	f7fe f9dd 	bl	8000646 <strlen>
 800228c:	4601      	mov	r1, r0
 800228e:	4630      	mov	r0, r6
 8002290:	f012 fe7e 	bl	8014f90 <UART_Send>
 8002294:	e7e0      	b.n	8002258 <CMD_help+0x9c>
 8002296:	4b0e      	ldr	r3, [pc, #56]	@ (80022d0 <CMD_help+0x114>)
 8002298:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800229c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 80022a0:	6849      	ldr	r1, [r1, #4]
 80022a2:	4e0e      	ldr	r6, [pc, #56]	@ (80022dc <CMD_help+0x120>)
 80022a4:	9100      	str	r1, [sp, #0]
 80022a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022aa:	4a0b      	ldr	r2, [pc, #44]	@ (80022d8 <CMD_help+0x11c>)
 80022ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022b0:	4630      	mov	r0, r6
 80022b2:	f013 fc19 	bl	8015ae8 <sniprintf>
 80022b6:	4630      	mov	r0, r6
 80022b8:	f7fe f9c5 	bl	8000646 <strlen>
 80022bc:	4601      	mov	r1, r0
 80022be:	4630      	mov	r0, r6
 80022c0:	f012 fe58 	bl	8014f74 <VCP_UART_Send>
 80022c4:	e7ca      	b.n	800225c <CMD_help+0xa0>
		for (idx = 0; (size_t)idx < (sizeof(Commands)/sizeof(TCMD_DEC_Command)); idx++)
 80022c6:	2400      	movs	r4, #0
 80022c8:	e7c9      	b.n	800225e <CMD_help+0xa2>
	return CMD_DEC_OK;
 80022ca:	2000      	movs	r0, #0
}
 80022cc:	b002      	add	sp, #8
 80022ce:	bd70      	pop	{r4, r5, r6, pc}
 80022d0:	080175cc 	.word	0x080175cc
 80022d4:	2000f20c 	.word	0x2000f20c
 80022d8:	08017048 	.word	0x08017048
 80022dc:	2000f60c 	.word	0x2000f60c
 80022e0:	08017054 	.word	0x08017054

080022e4 <CMD_print>:
{
 80022e4:	b570      	push	{r4, r5, r6, lr}
 80022e6:	4604      	mov	r4, r0
 80022e8:	460d      	mov	r5, r1
	if (res->str)
 80022ea:	6886      	ldr	r6, [r0, #8]
 80022ec:	b13e      	cbz	r6, 80022fe <CMD_print+0x1a>
		Generic_Send((const uint8_t *)res->str, CMD_lineLen(res->str), out);
 80022ee:	4630      	mov	r0, r6
 80022f0:	f7ff fc8e 	bl	8001c10 <CMD_lineLen>
 80022f4:	4601      	mov	r1, r0
 80022f6:	462a      	mov	r2, r5
 80022f8:	4630      	mov	r0, r6
 80022fa:	f7ff ff4d 	bl	8002198 <Generic_Send>
	if (res->opt)
 80022fe:	6860      	ldr	r0, [r4, #4]
 8002300:	b160      	cbz	r0, 800231c <CMD_print+0x38>
		if (strncmp(res->opt, "-n", 2) == 0)
 8002302:	2202      	movs	r2, #2
 8002304:	4908      	ldr	r1, [pc, #32]	@ (8002328 <CMD_print+0x44>)
 8002306:	f013 fc57 	bl	8015bb8 <strncmp>
 800230a:	b908      	cbnz	r0, 8002310 <CMD_print+0x2c>
}
 800230c:	2000      	movs	r0, #0
 800230e:	bd70      	pop	{r4, r5, r6, pc}
			Generic_Send((const uint8_t *)"\r\n", 2, out);
 8002310:	462a      	mov	r2, r5
 8002312:	2102      	movs	r1, #2
 8002314:	4805      	ldr	r0, [pc, #20]	@ (800232c <CMD_print+0x48>)
 8002316:	f7ff ff3f 	bl	8002198 <Generic_Send>
 800231a:	e7f7      	b.n	800230c <CMD_print+0x28>
		Generic_Send((const uint8_t *)"\r\n", 2, out);
 800231c:	462a      	mov	r2, r5
 800231e:	2102      	movs	r1, #2
 8002320:	4802      	ldr	r0, [pc, #8]	@ (800232c <CMD_print+0x48>)
 8002322:	f7ff ff39 	bl	8002198 <Generic_Send>
 8002326:	e7f1      	b.n	800230c <CMD_print+0x28>
 8002328:	08017064 	.word	0x08017064
 800232c:	08016db4 	.word	0x08016db4

08002330 <CMD_qspi>:
{
 8002330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002332:	b083      	sub	sp, #12
 8002334:	460d      	mov	r5, r1
	unsigned long numRead = 0;			//default is 0
 8002336:	2300      	movs	r3, #0
 8002338:	9301      	str	r3, [sp, #4]
	x = 1 + ((gCFGparams.QSPIaddr + 3) / 4) + ((gCFGparams.QSPIalt + 3) / 4);
 800233a:	49b1      	ldr	r1, [pc, #708]	@ (8002600 <CMD_qspi+0x2d0>)
 800233c:	68cb      	ldr	r3, [r1, #12]
 800233e:	1cda      	adds	r2, r3, #3
 8002340:	690b      	ldr	r3, [r1, #16]
 8002342:	3303      	adds	r3, #3
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	eb03 0392 	add.w	r3, r3, r2, lsr #2
 800234a:	3301      	adds	r3, #1
	if (res->num < x)
 800234c:	6942      	ldr	r2, [r0, #20]
 800234e:	429a      	cmp	r2, r3
 8002350:	f0c0 8315 	bcc.w	800297e <CMD_qspi+0x64e>
 8002354:	4606      	mov	r6, r0
	if (res->opt)
 8002356:	6840      	ldr	r0, [r0, #4]
 8002358:	b110      	cbz	r0, 8002360 <CMD_qspi+0x30>
		if (*res->opt == '-')
 800235a:	7803      	ldrb	r3, [r0, #0]
 800235c:	2b2d      	cmp	r3, #45	@ 0x2d
 800235e:	d011      	beq.n	8002384 <CMD_qspi+0x54>
	if (numRead)
 8002360:	9b01      	ldr	r3, [sp, #4]
 8002362:	b123      	cbz	r3, 800236e <CMD_qspi+0x3e>
		if (res->num > 3)
 8002364:	6973      	ldr	r3, [r6, #20]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d901      	bls.n	800236e <CMD_qspi+0x3e>
			res->num = 3;
 800236a:	2303      	movs	r3, #3
 800236c:	6173      	str	r3, [r6, #20]
	if (gCFGparams.Debug & DBG_VERBOSE)
 800236e:	4ba4      	ldr	r3, [pc, #656]	@ (8002600 <CMD_qspi+0x2d0>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f013 0f01 	tst.w	r3, #1
 8002376:	f000 8241 	beq.w	80027fc <CMD_qspi+0x4cc>
		print_log(out, "Write: %d\r\n", (int)res->num);
 800237a:	b14d      	cbz	r5, 8002390 <CMD_qspi+0x60>
 800237c:	2d01      	cmp	r5, #1
 800237e:	d017      	beq.n	80023b0 <CMD_qspi+0x80>
{
 8002380:	2400      	movs	r4, #0
 8002382:	e035      	b.n	80023f0 <CMD_qspi+0xc0>
			sscanf((res->opt + 1), (const char *)"%i", (int *)&numRead);
 8002384:	aa01      	add	r2, sp, #4
 8002386:	499f      	ldr	r1, [pc, #636]	@ (8002604 <CMD_qspi+0x2d4>)
 8002388:	3001      	adds	r0, #1
 800238a:	f013 fbe1 	bl	8015b50 <siscanf>
 800238e:	e7e7      	b.n	8002360 <CMD_qspi+0x30>
		print_log(out, "Write: %d\r\n", (int)res->num);
 8002390:	4c9d      	ldr	r4, [pc, #628]	@ (8002608 <CMD_qspi+0x2d8>)
 8002392:	6973      	ldr	r3, [r6, #20]
 8002394:	4a9d      	ldr	r2, [pc, #628]	@ (800260c <CMD_qspi+0x2dc>)
 8002396:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800239a:	4620      	mov	r0, r4
 800239c:	f013 fba4 	bl	8015ae8 <sniprintf>
 80023a0:	4620      	mov	r0, r4
 80023a2:	f7fe f950 	bl	8000646 <strlen>
 80023a6:	4601      	mov	r1, r0
 80023a8:	4620      	mov	r0, r4
 80023aa:	f012 fdf1 	bl	8014f90 <UART_Send>
 80023ae:	e7e5      	b.n	800237c <CMD_qspi+0x4c>
 80023b0:	4c97      	ldr	r4, [pc, #604]	@ (8002610 <CMD_qspi+0x2e0>)
 80023b2:	6973      	ldr	r3, [r6, #20]
 80023b4:	4a95      	ldr	r2, [pc, #596]	@ (800260c <CMD_qspi+0x2dc>)
 80023b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80023ba:	4620      	mov	r0, r4
 80023bc:	f013 fb94 	bl	8015ae8 <sniprintf>
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7fe f940 	bl	8000646 <strlen>
 80023c6:	4601      	mov	r1, r0
 80023c8:	4620      	mov	r0, r4
 80023ca:	f012 fdd3 	bl	8014f74 <VCP_UART_Send>
 80023ce:	e7d7      	b.n	8002380 <CMD_qspi+0x50>
				print_log(out, " CMD : %02lx\r\n", res->val[i]);
 80023d0:	2d01      	cmp	r5, #1
 80023d2:	d028      	beq.n	8002426 <CMD_qspi+0xf6>
			if (i == 1)
 80023d4:	2c01      	cmp	r4, #1
 80023d6:	d039      	beq.n	800244c <CMD_qspi+0x11c>
			if (i == 2)
 80023d8:	2c02      	cmp	r4, #2
 80023da:	f000 80ec 	beq.w	80025b6 <CMD_qspi+0x286>
			if (i > 2)
 80023de:	2c02      	cmp	r4, #2
 80023e0:	d905      	bls.n	80023ee <CMD_qspi+0xbe>
				print_log(out, "%08lx ", res->val[i]);
 80023e2:	2d00      	cmp	r5, #0
 80023e4:	f000 81d2 	beq.w	800278c <CMD_qspi+0x45c>
 80023e8:	2d01      	cmp	r5, #1
 80023ea:	f000 81e2 	beq.w	80027b2 <CMD_qspi+0x482>
		for (i = 0; i < res->num; i++)
 80023ee:	3401      	adds	r4, #1
 80023f0:	6973      	ldr	r3, [r6, #20]
 80023f2:	42a3      	cmp	r3, r4
 80023f4:	f240 81f0 	bls.w	80027d8 <CMD_qspi+0x4a8>
			if (i == 0)
 80023f8:	2c00      	cmp	r4, #0
 80023fa:	d1eb      	bne.n	80023d4 <CMD_qspi+0xa4>
				print_log(out, " CMD : %02lx\r\n", res->val[i]);
 80023fc:	2d00      	cmp	r5, #0
 80023fe:	d1e7      	bne.n	80023d0 <CMD_qspi+0xa0>
 8002400:	1da3      	adds	r3, r4, #6
 8002402:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002406:	4f80      	ldr	r7, [pc, #512]	@ (8002608 <CMD_qspi+0x2d8>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4a82      	ldr	r2, [pc, #520]	@ (8002614 <CMD_qspi+0x2e4>)
 800240c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002410:	4638      	mov	r0, r7
 8002412:	f013 fb69 	bl	8015ae8 <sniprintf>
 8002416:	4638      	mov	r0, r7
 8002418:	f7fe f915 	bl	8000646 <strlen>
 800241c:	4601      	mov	r1, r0
 800241e:	4638      	mov	r0, r7
 8002420:	f012 fdb6 	bl	8014f90 <UART_Send>
 8002424:	e7d4      	b.n	80023d0 <CMD_qspi+0xa0>
 8002426:	1da3      	adds	r3, r4, #6
 8002428:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800242c:	4f78      	ldr	r7, [pc, #480]	@ (8002610 <CMD_qspi+0x2e0>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a78      	ldr	r2, [pc, #480]	@ (8002614 <CMD_qspi+0x2e4>)
 8002432:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002436:	4638      	mov	r0, r7
 8002438:	f013 fb56 	bl	8015ae8 <sniprintf>
 800243c:	4638      	mov	r0, r7
 800243e:	f7fe f902 	bl	8000646 <strlen>
 8002442:	4601      	mov	r1, r0
 8002444:	4638      	mov	r0, r7
 8002446:	f012 fd95 	bl	8014f74 <VCP_UART_Send>
 800244a:	e7c3      	b.n	80023d4 <CMD_qspi+0xa4>
				switch (gCFGparams.QSPIaddr)
 800244c:	4b6c      	ldr	r3, [pc, #432]	@ (8002600 <CMD_qspi+0x2d0>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b03      	cmp	r3, #3
 8002452:	f200 8087 	bhi.w	8002564 <CMD_qspi+0x234>
 8002456:	a201      	add	r2, pc, #4	@ (adr r2, 800245c <CMD_qspi+0x12c>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	080023d9 	.word	0x080023d9
 8002460:	0800246d 	.word	0x0800246d
 8002464:	080024bf 	.word	0x080024bf
 8002468:	08002511 	.word	0x08002511
				case 1 : print_log(out, " ADDR: %02lx\r\n", res->val[i]); break;
 800246c:	b1a5      	cbz	r5, 8002498 <CMD_qspi+0x168>
 800246e:	2d01      	cmp	r5, #1
 8002470:	d1b2      	bne.n	80023d8 <CMD_qspi+0xa8>
 8002472:	1da3      	adds	r3, r4, #6
 8002474:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002478:	4f65      	ldr	r7, [pc, #404]	@ (8002610 <CMD_qspi+0x2e0>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4a66      	ldr	r2, [pc, #408]	@ (8002618 <CMD_qspi+0x2e8>)
 800247e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002482:	4638      	mov	r0, r7
 8002484:	f013 fb30 	bl	8015ae8 <sniprintf>
 8002488:	4638      	mov	r0, r7
 800248a:	f7fe f8dc 	bl	8000646 <strlen>
 800248e:	4601      	mov	r1, r0
 8002490:	4638      	mov	r0, r7
 8002492:	f012 fd6f 	bl	8014f74 <VCP_UART_Send>
 8002496:	e79f      	b.n	80023d8 <CMD_qspi+0xa8>
 8002498:	1da3      	adds	r3, r4, #6
 800249a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800249e:	4f5a      	ldr	r7, [pc, #360]	@ (8002608 <CMD_qspi+0x2d8>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002618 <CMD_qspi+0x2e8>)
 80024a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024a8:	4638      	mov	r0, r7
 80024aa:	f013 fb1d 	bl	8015ae8 <sniprintf>
 80024ae:	4638      	mov	r0, r7
 80024b0:	f7fe f8c9 	bl	8000646 <strlen>
 80024b4:	4601      	mov	r1, r0
 80024b6:	4638      	mov	r0, r7
 80024b8:	f012 fd6a 	bl	8014f90 <UART_Send>
 80024bc:	e7d7      	b.n	800246e <CMD_qspi+0x13e>
				case 2 : print_log(out, " ADDR: %04lx\r\n", res->val[i]); break;
 80024be:	b1a5      	cbz	r5, 80024ea <CMD_qspi+0x1ba>
 80024c0:	2d01      	cmp	r5, #1
 80024c2:	d189      	bne.n	80023d8 <CMD_qspi+0xa8>
 80024c4:	1da3      	adds	r3, r4, #6
 80024c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80024ca:	4f51      	ldr	r7, [pc, #324]	@ (8002610 <CMD_qspi+0x2e0>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a53      	ldr	r2, [pc, #332]	@ (800261c <CMD_qspi+0x2ec>)
 80024d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024d4:	4638      	mov	r0, r7
 80024d6:	f013 fb07 	bl	8015ae8 <sniprintf>
 80024da:	4638      	mov	r0, r7
 80024dc:	f7fe f8b3 	bl	8000646 <strlen>
 80024e0:	4601      	mov	r1, r0
 80024e2:	4638      	mov	r0, r7
 80024e4:	f012 fd46 	bl	8014f74 <VCP_UART_Send>
 80024e8:	e776      	b.n	80023d8 <CMD_qspi+0xa8>
 80024ea:	1da3      	adds	r3, r4, #6
 80024ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80024f0:	4f45      	ldr	r7, [pc, #276]	@ (8002608 <CMD_qspi+0x2d8>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a49      	ldr	r2, [pc, #292]	@ (800261c <CMD_qspi+0x2ec>)
 80024f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024fa:	4638      	mov	r0, r7
 80024fc:	f013 faf4 	bl	8015ae8 <sniprintf>
 8002500:	4638      	mov	r0, r7
 8002502:	f7fe f8a0 	bl	8000646 <strlen>
 8002506:	4601      	mov	r1, r0
 8002508:	4638      	mov	r0, r7
 800250a:	f012 fd41 	bl	8014f90 <UART_Send>
 800250e:	e7d7      	b.n	80024c0 <CMD_qspi+0x190>
				case 3 : print_log(out, " ADDR: %06lx\r\n", res->val[i]); break;
 8002510:	b1ad      	cbz	r5, 800253e <CMD_qspi+0x20e>
 8002512:	2d01      	cmp	r5, #1
 8002514:	f47f af60 	bne.w	80023d8 <CMD_qspi+0xa8>
 8002518:	1da3      	adds	r3, r4, #6
 800251a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800251e:	4f3c      	ldr	r7, [pc, #240]	@ (8002610 <CMD_qspi+0x2e0>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4a3f      	ldr	r2, [pc, #252]	@ (8002620 <CMD_qspi+0x2f0>)
 8002524:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002528:	4638      	mov	r0, r7
 800252a:	f013 fadd 	bl	8015ae8 <sniprintf>
 800252e:	4638      	mov	r0, r7
 8002530:	f7fe f889 	bl	8000646 <strlen>
 8002534:	4601      	mov	r1, r0
 8002536:	4638      	mov	r0, r7
 8002538:	f012 fd1c 	bl	8014f74 <VCP_UART_Send>
 800253c:	e74c      	b.n	80023d8 <CMD_qspi+0xa8>
 800253e:	1da3      	adds	r3, r4, #6
 8002540:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002544:	4f30      	ldr	r7, [pc, #192]	@ (8002608 <CMD_qspi+0x2d8>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4a35      	ldr	r2, [pc, #212]	@ (8002620 <CMD_qspi+0x2f0>)
 800254a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800254e:	4638      	mov	r0, r7
 8002550:	f013 faca 	bl	8015ae8 <sniprintf>
 8002554:	4638      	mov	r0, r7
 8002556:	f7fe f876 	bl	8000646 <strlen>
 800255a:	4601      	mov	r1, r0
 800255c:	4638      	mov	r0, r7
 800255e:	f012 fd17 	bl	8014f90 <UART_Send>
 8002562:	e7d6      	b.n	8002512 <CMD_qspi+0x1e2>
				default: print_log(out, " ADDR: %08lx\r\n", res->val[i]); break;
 8002564:	b98d      	cbnz	r5, 800258a <CMD_qspi+0x25a>
 8002566:	1da3      	adds	r3, r4, #6
 8002568:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800256c:	4f26      	ldr	r7, [pc, #152]	@ (8002608 <CMD_qspi+0x2d8>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a2c      	ldr	r2, [pc, #176]	@ (8002624 <CMD_qspi+0x2f4>)
 8002572:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002576:	4638      	mov	r0, r7
 8002578:	f013 fab6 	bl	8015ae8 <sniprintf>
 800257c:	4638      	mov	r0, r7
 800257e:	f7fe f862 	bl	8000646 <strlen>
 8002582:	4601      	mov	r1, r0
 8002584:	4638      	mov	r0, r7
 8002586:	f012 fd03 	bl	8014f90 <UART_Send>
 800258a:	2d01      	cmp	r5, #1
 800258c:	f47f af24 	bne.w	80023d8 <CMD_qspi+0xa8>
 8002590:	1da3      	adds	r3, r4, #6
 8002592:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002596:	4f1e      	ldr	r7, [pc, #120]	@ (8002610 <CMD_qspi+0x2e0>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4a22      	ldr	r2, [pc, #136]	@ (8002624 <CMD_qspi+0x2f4>)
 800259c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025a0:	4638      	mov	r0, r7
 80025a2:	f013 faa1 	bl	8015ae8 <sniprintf>
 80025a6:	4638      	mov	r0, r7
 80025a8:	f7fe f84d 	bl	8000646 <strlen>
 80025ac:	4601      	mov	r1, r0
 80025ae:	4638      	mov	r0, r7
 80025b0:	f012 fce0 	bl	8014f74 <VCP_UART_Send>
 80025b4:	e710      	b.n	80023d8 <CMD_qspi+0xa8>
				switch (gCFGparams.QSPIalt)
 80025b6:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <CMD_qspi+0x2d0>)
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	f200 80af 	bhi.w	800271e <CMD_qspi+0x3ee>
 80025c0:	e8df f003 	tbb	[pc, r3]
 80025c4:	835a0205 	.word	0x835a0205
				case 1 : print_log(out, " ALT : %02lx", res->val[i]); break;
 80025c8:	b385      	cbz	r5, 800262c <CMD_qspi+0x2fc>
 80025ca:	2d01      	cmp	r5, #1
 80025cc:	d041      	beq.n	8002652 <CMD_qspi+0x322>
				if (res->num > 3)
 80025ce:	6973      	ldr	r3, [r6, #20]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	f67f af04 	bls.w	80023de <CMD_qspi+0xae>
					print_log(out, "\r\n wr  : ");
 80025d6:	2d00      	cmp	r5, #0
 80025d8:	f000 80ca 	beq.w	8002770 <CMD_qspi+0x440>
 80025dc:	2d01      	cmp	r5, #1
 80025de:	f47f aefe 	bne.w	80023de <CMD_qspi+0xae>
 80025e2:	4f0b      	ldr	r7, [pc, #44]	@ (8002610 <CMD_qspi+0x2e0>)
 80025e4:	4a10      	ldr	r2, [pc, #64]	@ (8002628 <CMD_qspi+0x2f8>)
 80025e6:	463b      	mov	r3, r7
 80025e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80025ea:	c303      	stmia	r3!, {r0, r1}
 80025ec:	801a      	strh	r2, [r3, #0]
 80025ee:	4638      	mov	r0, r7
 80025f0:	f7fe f829 	bl	8000646 <strlen>
 80025f4:	4601      	mov	r1, r0
 80025f6:	4638      	mov	r0, r7
 80025f8:	f012 fcbc 	bl	8014f74 <VCP_UART_Send>
 80025fc:	e6ef      	b.n	80023de <CMD_qspi+0xae>
 80025fe:	bf00      	nop
 8002600:	2000c1d4 	.word	0x2000c1d4
 8002604:	08017068 	.word	0x08017068
 8002608:	2000f20c 	.word	0x2000f20c
 800260c:	0801706c 	.word	0x0801706c
 8002610:	2000f60c 	.word	0x2000f60c
 8002614:	08017078 	.word	0x08017078
 8002618:	08017088 	.word	0x08017088
 800261c:	08017098 	.word	0x08017098
 8002620:	080170a8 	.word	0x080170a8
 8002624:	080170b8 	.word	0x080170b8
 8002628:	08017108 	.word	0x08017108
				case 1 : print_log(out, " ALT : %02lx", res->val[i]); break;
 800262c:	1da3      	adds	r3, r4, #6
 800262e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002632:	4fc0      	ldr	r7, [pc, #768]	@ (8002934 <CMD_qspi+0x604>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4ac0      	ldr	r2, [pc, #768]	@ (8002938 <CMD_qspi+0x608>)
 8002638:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800263c:	4638      	mov	r0, r7
 800263e:	f013 fa53 	bl	8015ae8 <sniprintf>
 8002642:	4638      	mov	r0, r7
 8002644:	f7fd ffff 	bl	8000646 <strlen>
 8002648:	4601      	mov	r1, r0
 800264a:	4638      	mov	r0, r7
 800264c:	f012 fca0 	bl	8014f90 <UART_Send>
 8002650:	e7bb      	b.n	80025ca <CMD_qspi+0x29a>
 8002652:	1da3      	adds	r3, r4, #6
 8002654:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002658:	4fb8      	ldr	r7, [pc, #736]	@ (800293c <CMD_qspi+0x60c>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4ab6      	ldr	r2, [pc, #728]	@ (8002938 <CMD_qspi+0x608>)
 800265e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002662:	4638      	mov	r0, r7
 8002664:	f013 fa40 	bl	8015ae8 <sniprintf>
 8002668:	4638      	mov	r0, r7
 800266a:	f7fd ffec 	bl	8000646 <strlen>
 800266e:	4601      	mov	r1, r0
 8002670:	4638      	mov	r0, r7
 8002672:	f012 fc7f 	bl	8014f74 <VCP_UART_Send>
 8002676:	e7aa      	b.n	80025ce <CMD_qspi+0x29e>
				case 2 : print_log(out, " ALT : %04lx", res->val[i]); break;
 8002678:	b1a5      	cbz	r5, 80026a4 <CMD_qspi+0x374>
 800267a:	2d01      	cmp	r5, #1
 800267c:	d1a7      	bne.n	80025ce <CMD_qspi+0x29e>
 800267e:	1da3      	adds	r3, r4, #6
 8002680:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002684:	4fad      	ldr	r7, [pc, #692]	@ (800293c <CMD_qspi+0x60c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4aad      	ldr	r2, [pc, #692]	@ (8002940 <CMD_qspi+0x610>)
 800268a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800268e:	4638      	mov	r0, r7
 8002690:	f013 fa2a 	bl	8015ae8 <sniprintf>
 8002694:	4638      	mov	r0, r7
 8002696:	f7fd ffd6 	bl	8000646 <strlen>
 800269a:	4601      	mov	r1, r0
 800269c:	4638      	mov	r0, r7
 800269e:	f012 fc69 	bl	8014f74 <VCP_UART_Send>
 80026a2:	e794      	b.n	80025ce <CMD_qspi+0x29e>
 80026a4:	1da3      	adds	r3, r4, #6
 80026a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80026aa:	4fa2      	ldr	r7, [pc, #648]	@ (8002934 <CMD_qspi+0x604>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4aa4      	ldr	r2, [pc, #656]	@ (8002940 <CMD_qspi+0x610>)
 80026b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026b4:	4638      	mov	r0, r7
 80026b6:	f013 fa17 	bl	8015ae8 <sniprintf>
 80026ba:	4638      	mov	r0, r7
 80026bc:	f7fd ffc3 	bl	8000646 <strlen>
 80026c0:	4601      	mov	r1, r0
 80026c2:	4638      	mov	r0, r7
 80026c4:	f012 fc64 	bl	8014f90 <UART_Send>
 80026c8:	e7d7      	b.n	800267a <CMD_qspi+0x34a>
				case 3 : print_log(out, " ALT : %06lx", res->val[i]); break;
 80026ca:	b1ad      	cbz	r5, 80026f8 <CMD_qspi+0x3c8>
 80026cc:	2d01      	cmp	r5, #1
 80026ce:	f47f af7e 	bne.w	80025ce <CMD_qspi+0x29e>
 80026d2:	1da3      	adds	r3, r4, #6
 80026d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80026d8:	4f98      	ldr	r7, [pc, #608]	@ (800293c <CMD_qspi+0x60c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a99      	ldr	r2, [pc, #612]	@ (8002944 <CMD_qspi+0x614>)
 80026de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026e2:	4638      	mov	r0, r7
 80026e4:	f013 fa00 	bl	8015ae8 <sniprintf>
 80026e8:	4638      	mov	r0, r7
 80026ea:	f7fd ffac 	bl	8000646 <strlen>
 80026ee:	4601      	mov	r1, r0
 80026f0:	4638      	mov	r0, r7
 80026f2:	f012 fc3f 	bl	8014f74 <VCP_UART_Send>
 80026f6:	e76a      	b.n	80025ce <CMD_qspi+0x29e>
 80026f8:	1da3      	adds	r3, r4, #6
 80026fa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80026fe:	4f8d      	ldr	r7, [pc, #564]	@ (8002934 <CMD_qspi+0x604>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4a90      	ldr	r2, [pc, #576]	@ (8002944 <CMD_qspi+0x614>)
 8002704:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002708:	4638      	mov	r0, r7
 800270a:	f013 f9ed 	bl	8015ae8 <sniprintf>
 800270e:	4638      	mov	r0, r7
 8002710:	f7fd ff99 	bl	8000646 <strlen>
 8002714:	4601      	mov	r1, r0
 8002716:	4638      	mov	r0, r7
 8002718:	f012 fc3a 	bl	8014f90 <UART_Send>
 800271c:	e7d6      	b.n	80026cc <CMD_qspi+0x39c>
				default: print_log(out, " ALT : %08lx", res->val[i]); break;
 800271e:	b98d      	cbnz	r5, 8002744 <CMD_qspi+0x414>
 8002720:	1da3      	adds	r3, r4, #6
 8002722:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002726:	4f83      	ldr	r7, [pc, #524]	@ (8002934 <CMD_qspi+0x604>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4a87      	ldr	r2, [pc, #540]	@ (8002948 <CMD_qspi+0x618>)
 800272c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002730:	4638      	mov	r0, r7
 8002732:	f013 f9d9 	bl	8015ae8 <sniprintf>
 8002736:	4638      	mov	r0, r7
 8002738:	f7fd ff85 	bl	8000646 <strlen>
 800273c:	4601      	mov	r1, r0
 800273e:	4638      	mov	r0, r7
 8002740:	f012 fc26 	bl	8014f90 <UART_Send>
 8002744:	2d01      	cmp	r5, #1
 8002746:	f47f af42 	bne.w	80025ce <CMD_qspi+0x29e>
 800274a:	1da3      	adds	r3, r4, #6
 800274c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002750:	4f7a      	ldr	r7, [pc, #488]	@ (800293c <CMD_qspi+0x60c>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a7c      	ldr	r2, [pc, #496]	@ (8002948 <CMD_qspi+0x618>)
 8002756:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800275a:	4638      	mov	r0, r7
 800275c:	f013 f9c4 	bl	8015ae8 <sniprintf>
 8002760:	4638      	mov	r0, r7
 8002762:	f7fd ff70 	bl	8000646 <strlen>
 8002766:	4601      	mov	r1, r0
 8002768:	4638      	mov	r0, r7
 800276a:	f012 fc03 	bl	8014f74 <VCP_UART_Send>
 800276e:	e72e      	b.n	80025ce <CMD_qspi+0x29e>
					print_log(out, "\r\n wr  : ");
 8002770:	4f70      	ldr	r7, [pc, #448]	@ (8002934 <CMD_qspi+0x604>)
 8002772:	4a76      	ldr	r2, [pc, #472]	@ (800294c <CMD_qspi+0x61c>)
 8002774:	463b      	mov	r3, r7
 8002776:	ca07      	ldmia	r2, {r0, r1, r2}
 8002778:	c303      	stmia	r3!, {r0, r1}
 800277a:	801a      	strh	r2, [r3, #0]
 800277c:	4638      	mov	r0, r7
 800277e:	f7fd ff62 	bl	8000646 <strlen>
 8002782:	4601      	mov	r1, r0
 8002784:	4638      	mov	r0, r7
 8002786:	f012 fc03 	bl	8014f90 <UART_Send>
 800278a:	e727      	b.n	80025dc <CMD_qspi+0x2ac>
				print_log(out, "%08lx ", res->val[i]);
 800278c:	1da3      	adds	r3, r4, #6
 800278e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002792:	4f68      	ldr	r7, [pc, #416]	@ (8002934 <CMD_qspi+0x604>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4a6e      	ldr	r2, [pc, #440]	@ (8002950 <CMD_qspi+0x620>)
 8002798:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800279c:	4638      	mov	r0, r7
 800279e:	f013 f9a3 	bl	8015ae8 <sniprintf>
 80027a2:	4638      	mov	r0, r7
 80027a4:	f7fd ff4f 	bl	8000646 <strlen>
 80027a8:	4601      	mov	r1, r0
 80027aa:	4638      	mov	r0, r7
 80027ac:	f012 fbf0 	bl	8014f90 <UART_Send>
 80027b0:	e61a      	b.n	80023e8 <CMD_qspi+0xb8>
 80027b2:	1da3      	adds	r3, r4, #6
 80027b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80027b8:	4f60      	ldr	r7, [pc, #384]	@ (800293c <CMD_qspi+0x60c>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a64      	ldr	r2, [pc, #400]	@ (8002950 <CMD_qspi+0x620>)
 80027be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027c2:	4638      	mov	r0, r7
 80027c4:	f013 f990 	bl	8015ae8 <sniprintf>
 80027c8:	4638      	mov	r0, r7
 80027ca:	f7fd ff3c 	bl	8000646 <strlen>
 80027ce:	4601      	mov	r1, r0
 80027d0:	4638      	mov	r0, r7
 80027d2:	f012 fbcf 	bl	8014f74 <VCP_UART_Send>
 80027d6:	e60a      	b.n	80023ee <CMD_qspi+0xbe>
		if (numRead)
 80027d8:	9b01      	ldr	r3, [sp, #4]
 80027da:	b153      	cbz	r3, 80027f2 <CMD_qspi+0x4c2>
			print_log(out, "\r\nRead: %d\r\n", (int)numRead);
 80027dc:	b1dd      	cbz	r5, 8002816 <CMD_qspi+0x4e6>
 80027de:	2d01      	cmp	r5, #1
 80027e0:	d028      	beq.n	8002834 <CMD_qspi+0x504>
			print_log(out, " turn: %d\r\n", (int)gCFGparams.QSPIturn);
 80027e2:	2d00      	cmp	r5, #0
 80027e4:	d036      	beq.n	8002854 <CMD_qspi+0x524>
 80027e6:	2d01      	cmp	r5, #1
 80027e8:	d045      	beq.n	8002876 <CMD_qspi+0x546>
			print_log(out, " num : %d", (int)numRead);
 80027ea:	2d00      	cmp	r5, #0
 80027ec:	d054      	beq.n	8002898 <CMD_qspi+0x568>
 80027ee:	2d01      	cmp	r5, #1
 80027f0:	d062      	beq.n	80028b8 <CMD_qspi+0x588>
		Generic_Send((uint8_t *)"\r\n", 2, out);
 80027f2:	462a      	mov	r2, r5
 80027f4:	2102      	movs	r1, #2
 80027f6:	4857      	ldr	r0, [pc, #348]	@ (8002954 <CMD_qspi+0x624>)
 80027f8:	f7ff fcce 	bl	8002198 <Generic_Send>
	QSPI_Transaction(res->val, res->num, numRead);
 80027fc:	9a01      	ldr	r2, [sp, #4]
 80027fe:	6971      	ldr	r1, [r6, #20]
 8002800:	f106 001c 	add.w	r0, r6, #28
 8002804:	f7fe fbec 	bl	8000fe0 <QSPI_Transaction>
		if (numRead)
 8002808:	9b01      	ldr	r3, [sp, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f040 80ae 	bne.w	800296c <CMD_qspi+0x63c>
	return CMD_DEC_OK;
 8002810:	2000      	movs	r0, #0
}
 8002812:	b003      	add	sp, #12
 8002814:	bdf0      	pop	{r4, r5, r6, r7, pc}
			print_log(out, "\r\nRead: %d\r\n", (int)numRead);
 8002816:	4c47      	ldr	r4, [pc, #284]	@ (8002934 <CMD_qspi+0x604>)
 8002818:	4a4f      	ldr	r2, [pc, #316]	@ (8002958 <CMD_qspi+0x628>)
 800281a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800281e:	4620      	mov	r0, r4
 8002820:	f013 f962 	bl	8015ae8 <sniprintf>
 8002824:	4620      	mov	r0, r4
 8002826:	f7fd ff0e 	bl	8000646 <strlen>
 800282a:	4601      	mov	r1, r0
 800282c:	4620      	mov	r0, r4
 800282e:	f012 fbaf 	bl	8014f90 <UART_Send>
 8002832:	e7d4      	b.n	80027de <CMD_qspi+0x4ae>
 8002834:	4c41      	ldr	r4, [pc, #260]	@ (800293c <CMD_qspi+0x60c>)
 8002836:	9b01      	ldr	r3, [sp, #4]
 8002838:	4a47      	ldr	r2, [pc, #284]	@ (8002958 <CMD_qspi+0x628>)
 800283a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800283e:	4620      	mov	r0, r4
 8002840:	f013 f952 	bl	8015ae8 <sniprintf>
 8002844:	4620      	mov	r0, r4
 8002846:	f7fd fefe 	bl	8000646 <strlen>
 800284a:	4601      	mov	r1, r0
 800284c:	4620      	mov	r0, r4
 800284e:	f012 fb91 	bl	8014f74 <VCP_UART_Send>
 8002852:	e7c6      	b.n	80027e2 <CMD_qspi+0x4b2>
			print_log(out, " turn: %d\r\n", (int)gCFGparams.QSPIturn);
 8002854:	4c37      	ldr	r4, [pc, #220]	@ (8002934 <CMD_qspi+0x604>)
 8002856:	4b41      	ldr	r3, [pc, #260]	@ (800295c <CMD_qspi+0x62c>)
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	4a41      	ldr	r2, [pc, #260]	@ (8002960 <CMD_qspi+0x630>)
 800285c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002860:	4620      	mov	r0, r4
 8002862:	f013 f941 	bl	8015ae8 <sniprintf>
 8002866:	4620      	mov	r0, r4
 8002868:	f7fd feed 	bl	8000646 <strlen>
 800286c:	4601      	mov	r1, r0
 800286e:	4620      	mov	r0, r4
 8002870:	f012 fb8e 	bl	8014f90 <UART_Send>
 8002874:	e7b7      	b.n	80027e6 <CMD_qspi+0x4b6>
 8002876:	4c31      	ldr	r4, [pc, #196]	@ (800293c <CMD_qspi+0x60c>)
 8002878:	4b38      	ldr	r3, [pc, #224]	@ (800295c <CMD_qspi+0x62c>)
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	4a38      	ldr	r2, [pc, #224]	@ (8002960 <CMD_qspi+0x630>)
 800287e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002882:	4620      	mov	r0, r4
 8002884:	f013 f930 	bl	8015ae8 <sniprintf>
 8002888:	4620      	mov	r0, r4
 800288a:	f7fd fedc 	bl	8000646 <strlen>
 800288e:	4601      	mov	r1, r0
 8002890:	4620      	mov	r0, r4
 8002892:	f012 fb6f 	bl	8014f74 <VCP_UART_Send>
 8002896:	e7a8      	b.n	80027ea <CMD_qspi+0x4ba>
			print_log(out, " num : %d", (int)numRead);
 8002898:	4c26      	ldr	r4, [pc, #152]	@ (8002934 <CMD_qspi+0x604>)
 800289a:	9b01      	ldr	r3, [sp, #4]
 800289c:	4a31      	ldr	r2, [pc, #196]	@ (8002964 <CMD_qspi+0x634>)
 800289e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80028a2:	4620      	mov	r0, r4
 80028a4:	f013 f920 	bl	8015ae8 <sniprintf>
 80028a8:	4620      	mov	r0, r4
 80028aa:	f7fd fecc 	bl	8000646 <strlen>
 80028ae:	4601      	mov	r1, r0
 80028b0:	4620      	mov	r0, r4
 80028b2:	f012 fb6d 	bl	8014f90 <UART_Send>
 80028b6:	e79a      	b.n	80027ee <CMD_qspi+0x4be>
 80028b8:	4c20      	ldr	r4, [pc, #128]	@ (800293c <CMD_qspi+0x60c>)
 80028ba:	9b01      	ldr	r3, [sp, #4]
 80028bc:	4a29      	ldr	r2, [pc, #164]	@ (8002964 <CMD_qspi+0x634>)
 80028be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80028c2:	4620      	mov	r0, r4
 80028c4:	f013 f910 	bl	8015ae8 <sniprintf>
 80028c8:	4620      	mov	r0, r4
 80028ca:	f7fd febc 	bl	8000646 <strlen>
 80028ce:	4601      	mov	r1, r0
 80028d0:	4620      	mov	r0, r4
 80028d2:	f012 fb4f 	bl	8014f74 <VCP_UART_Send>
 80028d6:	e78c      	b.n	80027f2 <CMD_qspi+0x4c2>
				print_log(out, " %08lx", res->val[i]);
 80028d8:	2d01      	cmp	r5, #1
 80028da:	d018      	beq.n	800290e <CMD_qspi+0x5de>
			for (i = 0; i < numRead; i++)
 80028dc:	3401      	adds	r4, #1
 80028de:	9b01      	ldr	r3, [sp, #4]
 80028e0:	42a3      	cmp	r3, r4
 80028e2:	d945      	bls.n	8002970 <CMD_qspi+0x640>
				print_log(out, " %08lx", res->val[i]);
 80028e4:	2d00      	cmp	r5, #0
 80028e6:	d1f7      	bne.n	80028d8 <CMD_qspi+0x5a8>
 80028e8:	1da3      	adds	r3, r4, #6
 80028ea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80028ee:	4f11      	ldr	r7, [pc, #68]	@ (8002934 <CMD_qspi+0x604>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002968 <CMD_qspi+0x638>)
 80028f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80028f8:	4638      	mov	r0, r7
 80028fa:	f013 f8f5 	bl	8015ae8 <sniprintf>
 80028fe:	4638      	mov	r0, r7
 8002900:	f7fd fea1 	bl	8000646 <strlen>
 8002904:	4601      	mov	r1, r0
 8002906:	4638      	mov	r0, r7
 8002908:	f012 fb42 	bl	8014f90 <UART_Send>
 800290c:	e7e4      	b.n	80028d8 <CMD_qspi+0x5a8>
 800290e:	1da3      	adds	r3, r4, #6
 8002910:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002914:	4f09      	ldr	r7, [pc, #36]	@ (800293c <CMD_qspi+0x60c>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a13      	ldr	r2, [pc, #76]	@ (8002968 <CMD_qspi+0x638>)
 800291a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800291e:	4638      	mov	r0, r7
 8002920:	f013 f8e2 	bl	8015ae8 <sniprintf>
 8002924:	4638      	mov	r0, r7
 8002926:	f7fd fe8e 	bl	8000646 <strlen>
 800292a:	4601      	mov	r1, r0
 800292c:	4638      	mov	r0, r7
 800292e:	f012 fb21 	bl	8014f74 <VCP_UART_Send>
 8002932:	e7d3      	b.n	80028dc <CMD_qspi+0x5ac>
 8002934:	2000f20c 	.word	0x2000f20c
 8002938:	080170c8 	.word	0x080170c8
 800293c:	2000f60c 	.word	0x2000f60c
 8002940:	080170d8 	.word	0x080170d8
 8002944:	080170e8 	.word	0x080170e8
 8002948:	080170f8 	.word	0x080170f8
 800294c:	08017108 	.word	0x08017108
 8002950:	08017114 	.word	0x08017114
 8002954:	08016db4 	.word	0x08016db4
 8002958:	0801711c 	.word	0x0801711c
 800295c:	2000c1d4 	.word	0x2000c1d4
 8002960:	0801712c 	.word	0x0801712c
 8002964:	08017138 	.word	0x08017138
 8002968:	08016d20 	.word	0x08016d20
			for (i = 0; i < numRead; i++)
 800296c:	2400      	movs	r4, #0
 800296e:	e7b6      	b.n	80028de <CMD_qspi+0x5ae>
			Generic_Send((uint8_t *)"\r\n", 2, out);
 8002970:	462a      	mov	r2, r5
 8002972:	2102      	movs	r1, #2
 8002974:	4803      	ldr	r0, [pc, #12]	@ (8002984 <CMD_qspi+0x654>)
 8002976:	f7ff fc0f 	bl	8002198 <Generic_Send>
	return CMD_DEC_OK;
 800297a:	2000      	movs	r0, #0
 800297c:	e749      	b.n	8002812 <CMD_qspi+0x4e2>
		return CMD_DEC_INVPARAM;
 800297e:	2006      	movs	r0, #6
 8002980:	e747      	b.n	8002812 <CMD_qspi+0x4e2>
 8002982:	bf00      	nop
 8002984:	08016db4 	.word	0x08016db4

08002988 <Gerneric_ClrRxFlag>:
	if (out == UART_OUT)
 8002988:	b918      	cbnz	r0, 8002992 <Gerneric_ClrRxFlag+0xa>
		rxFlag[1] = 0;
 800298a:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <Gerneric_ClrRxFlag+0x18>)
 800298c:	2200      	movs	r2, #0
 800298e:	605a      	str	r2, [r3, #4]
	if (out == VCP_OUT)
 8002990:	4770      	bx	lr
 8002992:	2801      	cmp	r0, #1
 8002994:	d000      	beq.n	8002998 <Gerneric_ClrRxFlag+0x10>
}
 8002996:	4770      	bx	lr
		rxFlag[0] = 0;
 8002998:	4b01      	ldr	r3, [pc, #4]	@ (80029a0 <Gerneric_ClrRxFlag+0x18>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
}
 800299e:	e7fa      	b.n	8002996 <Gerneric_ClrRxFlag+0xe>
 80029a0:	2000fe0c 	.word	0x2000fe0c

080029a4 <Generic_GetRxFlag>:
	if (out == UART_OUT)
 80029a4:	b118      	cbz	r0, 80029ae <Generic_GetRxFlag+0xa>
	if (out == VCP_OUT)
 80029a6:	2801      	cmp	r0, #1
 80029a8:	d004      	beq.n	80029b4 <Generic_GetRxFlag+0x10>
	return 0;
 80029aa:	2000      	movs	r0, #0
}
 80029ac:	4770      	bx	lr
		return rxFlag[1];
 80029ae:	4b03      	ldr	r3, [pc, #12]	@ (80029bc <Generic_GetRxFlag+0x18>)
 80029b0:	6858      	ldr	r0, [r3, #4]
 80029b2:	4770      	bx	lr
		return rxFlag[0];
 80029b4:	4b01      	ldr	r3, [pc, #4]	@ (80029bc <Generic_GetRxFlag+0x18>)
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	2000fe0c 	.word	0x2000fe0c

080029c0 <Generic_SetRxFlag>:
	if (out == UART_OUT)
 80029c0:	4603      	mov	r3, r0
 80029c2:	b918      	cbnz	r0, 80029cc <Generic_SetRxFlag+0xc>
		rxFlag[1] = 1;
 80029c4:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <Generic_SetRxFlag+0x1c>)
 80029c6:	2101      	movs	r1, #1
 80029c8:	6051      	str	r1, [r2, #4]
		rxFlag[0] = 1;		/* USB VCP cannot be stopped - stop it from UART - works */
 80029ca:	6011      	str	r1, [r2, #0]
	if (out == VCP_OUT)
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d000      	beq.n	80029d2 <Generic_SetRxFlag+0x12>
}
 80029d0:	4770      	bx	lr
		rxFlag[0] = 1;
 80029d2:	4b02      	ldr	r3, [pc, #8]	@ (80029dc <Generic_SetRxFlag+0x1c>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
}
 80029d8:	e7fa      	b.n	80029d0 <Generic_SetRxFlag+0x10>
 80029da:	bf00      	nop
 80029dc:	2000fe0c 	.word	0x2000fe0c

080029e0 <CMD_DEC_execute>:
{
 80029e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029e4:	4607      	mov	r7, r0
 80029e6:	4688      	mov	r8, r1
	cmdRes = MEM_PoolAlloc(sizeof(TCMD_DEC_Results));
 80029e8:	f640 001c 	movw	r0, #2076	@ 0x81c
 80029ec:	f7fe f8ae 	bl	8000b4c <MEM_PoolAlloc>
	if ( ! cmdRes)
 80029f0:	2800      	cmp	r0, #0
 80029f2:	d04e      	beq.n	8002a92 <CMD_DEC_execute+0xb2>
 80029f4:	4605      	mov	r5, r0
	offset = 0;
 80029f6:	2600      	movs	r6, #0
 80029f8:	e01a      	b.n	8002a30 <CMD_DEC_execute+0x50>
					Generic_Send((const uint8_t *)"*E: unknown >", 13, out);
 80029fa:	4642      	mov	r2, r8
 80029fc:	210d      	movs	r1, #13
 80029fe:	4826      	ldr	r0, [pc, #152]	@ (8002a98 <CMD_DEC_execute+0xb8>)
 8002a00:	f7ff fbca 	bl	8002198 <Generic_Send>
					Generic_Send((const uint8_t *)cmdRes->cmd, cmdRes->cmdLen, out);
 8002a04:	4642      	mov	r2, r8
 8002a06:	68e9      	ldr	r1, [r5, #12]
 8002a08:	6828      	ldr	r0, [r5, #0]
 8002a0a:	f7ff fbc5 	bl	8002198 <Generic_Send>
					Generic_Send((const uint8_t *)"<\r\n", 3, out);
 8002a0e:	4642      	mov	r2, r8
 8002a10:	2103      	movs	r1, #3
 8002a12:	4822      	ldr	r0, [pc, #136]	@ (8002a9c <CMD_DEC_execute+0xbc>)
 8002a14:	f7ff fbc0 	bl	8002198 <Generic_Send>
					SYS_SetError(SYS_ERR_INVALID_CMD);
 8002a18:	2004      	movs	r0, #4
 8002a1a:	f001 fb0d 	bl	8004038 <SYS_SetError>
					MEM_PoolFree(cmdRes);
 8002a1e:	4628      	mov	r0, r5
 8002a20:	f7fe f932 	bl	8000c88 <MEM_PoolFree>
					return CMD_DEC_INVALID;
 8002a24:	2002      	movs	r0, #2
 8002a26:	e02c      	b.n	8002a82 <CMD_DEC_execute+0xa2>
		if (cmdRes->ctl == 1)
 8002a28:	69ab      	ldr	r3, [r5, #24]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d01c      	beq.n	8002a68 <CMD_DEC_execute+0x88>
	} while (res);
 8002a2e:	b1dc      	cbz	r4, 8002a68 <CMD_DEC_execute+0x88>
		res = CMD_DEC_decode(cmd + offset, cmdRes);
 8002a30:	4629      	mov	r1, r5
 8002a32:	19b8      	adds	r0, r7, r6
 8002a34:	f7ff f91a 	bl	8001c6c <CMD_DEC_decode>
 8002a38:	4604      	mov	r4, r0
		offset += res;
 8002a3a:	4406      	add	r6, r0
		if (cmdRes->cmd)
 8002a3c:	6828      	ldr	r0, [r5, #0]
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	d0f2      	beq.n	8002a28 <CMD_DEC_execute+0x48>
			if (*cmdRes->cmd != '\0')	/* ignore empty line, just spaces */
 8002a42:	7803      	ldrb	r3, [r0, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ef      	beq.n	8002a28 <CMD_DEC_execute+0x48>
				idx = CMD_DEC_findCmd(cmdRes->cmd, cmdRes->cmdLen);
 8002a48:	68e9      	ldr	r1, [r5, #12]
 8002a4a:	f7ff f9d5 	bl	8001df8 <CMD_DEC_findCmd>
				if (idx != (unsigned int)-1)
 8002a4e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a52:	d0d2      	beq.n	80029fa <CMD_DEC_execute+0x1a>
					err = Commands[idx].func(cmdRes, out);
 8002a54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a58:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <CMD_DEC_execute+0xc0>)
 8002a5a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4641      	mov	r1, r8
 8002a62:	4628      	mov	r0, r5
 8002a64:	4798      	blx	r3
					numCmdsDone++;
 8002a66:	e7df      	b.n	8002a28 <CMD_DEC_execute+0x48>
	MEM_PoolFree(cmdRes);
 8002a68:	4628      	mov	r0, r5
 8002a6a:	f7fe f90d 	bl	8000c88 <MEM_PoolFree>
	if (*cmd)
 8002a6e:	7838      	ldrb	r0, [r7, #0]
 8002a70:	b138      	cbz	r0, 8002a82 <CMD_DEC_execute+0xa2>
		if (out == VCP_OUT)
 8002a72:	f1b8 0f01 	cmp.w	r8, #1
 8002a76:	d006      	beq.n	8002a86 <CMD_DEC_execute+0xa6>
			strcpy((char *)LastCmdLine[1], cmd);
 8002a78:	4639      	mov	r1, r7
 8002a7a:	480a      	ldr	r0, [pc, #40]	@ (8002aa4 <CMD_DEC_execute+0xc4>)
 8002a7c:	f013 f8fe 	bl	8015c7c <strcpy>
	return CMD_DEC_OK;
 8002a80:	2000      	movs	r0, #0
}
 8002a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			strcpy((char *)LastCmdLine[0], cmd);
 8002a86:	4639      	mov	r1, r7
 8002a88:	4807      	ldr	r0, [pc, #28]	@ (8002aa8 <CMD_DEC_execute+0xc8>)
 8002a8a:	f013 f8f7 	bl	8015c7c <strcpy>
	return CMD_DEC_OK;
 8002a8e:	2000      	movs	r0, #0
 8002a90:	e7f7      	b.n	8002a82 <CMD_DEC_execute+0xa2>
		return CMD_DEC_OOMEM;
 8002a92:	2005      	movs	r0, #5
 8002a94:	e7f5      	b.n	8002a82 <CMD_DEC_execute+0xa2>
 8002a96:	bf00      	nop
 8002a98:	08017144 	.word	0x08017144
 8002a9c:	08017154 	.word	0x08017154
 8002aa0:	080175cc 	.word	0x080175cc
 8002aa4:	2000da0c 	.word	0x2000da0c
 8002aa8:	2000c20c 	.word	0x2000c20c

08002aac <CMD_repeat>:
{
 8002aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	4606      	mov	r6, r0
 8002ab2:	460c      	mov	r4, r1
	int numRepeat = 1;			//default is 1
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	9301      	str	r3, [sp, #4]
	if (res->opt)
 8002ab8:	6840      	ldr	r0, [r0, #4]
 8002aba:	b110      	cbz	r0, 8002ac2 <CMD_repeat+0x16>
		if (*res->opt == '-')
 8002abc:	7803      	ldrb	r3, [r0, #0]
 8002abe:	2b2d      	cmp	r3, #45	@ 0x2d
 8002ac0:	d008      	beq.n	8002ad4 <CMD_repeat+0x28>
	if (numRepeat == 0)
 8002ac2:	9b01      	ldr	r3, [sp, #4]
 8002ac4:	b963      	cbnz	r3, 8002ae0 <CMD_repeat+0x34>
		numRepeat = 1;
 8002ac6:	2501      	movs	r5, #1
 8002ac8:	9501      	str	r5, [sp, #4]
	keepStr = res->str;			//remember the rest of string as commands(s)
 8002aca:	68b7      	ldr	r7, [r6, #8]
	Gerneric_ClrRxFlag(out);			//prepare to break endless loop with any UART Rx */
 8002acc:	4620      	mov	r0, r4
 8002ace:	f7ff ff5b 	bl	8002988 <Gerneric_ClrRxFlag>
 8002ad2:	e009      	b.n	8002ae8 <CMD_repeat+0x3c>
			sscanf((res->opt + 1), (const char *)"%i", &numRepeat);
 8002ad4:	aa01      	add	r2, sp, #4
 8002ad6:	490e      	ldr	r1, [pc, #56]	@ (8002b10 <CMD_repeat+0x64>)
 8002ad8:	3001      	adds	r0, #1
 8002ada:	f013 f839 	bl	8015b50 <siscanf>
 8002ade:	e7f0      	b.n	8002ac2 <CMD_repeat+0x16>
	int endLess = 0;
 8002ae0:	2500      	movs	r5, #0
 8002ae2:	e7f2      	b.n	8002aca <CMD_repeat+0x1e>
	} while (numRepeat);
 8002ae4:	9b01      	ldr	r3, [sp, #4]
 8002ae6:	b16b      	cbz	r3, 8002b04 <CMD_repeat+0x58>
		if (Generic_GetRxFlag(out))
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f7ff ff5b 	bl	80029a4 <Generic_GetRxFlag>
 8002aee:	b948      	cbnz	r0, 8002b04 <CMD_repeat+0x58>
		CMD_DEC_execute(keepStr, out);
 8002af0:	4621      	mov	r1, r4
 8002af2:	4638      	mov	r0, r7
 8002af4:	f7ff ff74 	bl	80029e0 <CMD_DEC_execute>
		if (endLess)
 8002af8:	2d00      	cmp	r5, #0
 8002afa:	d1f3      	bne.n	8002ae4 <CMD_repeat+0x38>
			numRepeat--;
 8002afc:	9b01      	ldr	r3, [sp, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	e7ef      	b.n	8002ae4 <CMD_repeat+0x38>
	res->ctl = 1;			//break the outer command interpreter, we can have ';', done here
 8002b04:	2301      	movs	r3, #1
 8002b06:	61b3      	str	r3, [r6, #24]
}
 8002b08:	2000      	movs	r0, #0
 8002b0a:	b003      	add	sp, #12
 8002b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	08017068 	.word	0x08017068

08002b14 <CMD_usr>:
{
 8002b14:	b570      	push	{r4, r5, r6, lr}
 8002b16:	460e      	mov	r6, r1
	if (res->opt)
 8002b18:	6845      	ldr	r5, [r0, #4]
 8002b1a:	b165      	cbz	r5, 8002b36 <CMD_usr+0x22>
 8002b1c:	4604      	mov	r4, r0
		if (strncmp(res->opt, "-d", 2) == 0)
 8002b1e:	2202      	movs	r2, #2
 8002b20:	4919      	ldr	r1, [pc, #100]	@ (8002b88 <CMD_usr+0x74>)
 8002b22:	4628      	mov	r0, r5
 8002b24:	f013 f848 	bl	8015bb8 <strncmp>
 8002b28:	b148      	cbz	r0, 8002b3e <CMD_usr+0x2a>
		if (strncmp(res->opt, "-p", 2) == 0)
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	4917      	ldr	r1, [pc, #92]	@ (8002b8c <CMD_usr+0x78>)
 8002b2e:	4628      	mov	r0, r5
 8002b30:	f013 f842 	bl	8015bb8 <strncmp>
 8002b34:	b190      	cbz	r0, 8002b5c <CMD_usr+0x48>
	if (usrCmdBuf[0] != '\0')
 8002b36:	4b16      	ldr	r3, [pc, #88]	@ (8002b90 <CMD_usr+0x7c>)
 8002b38:	7818      	ldrb	r0, [r3, #0]
 8002b3a:	b9f8      	cbnz	r0, 8002b7c <CMD_usr+0x68>
}
 8002b3c:	bd70      	pop	{r4, r5, r6, pc}
			if (res->str)
 8002b3e:	68a1      	ldr	r1, [r4, #8]
 8002b40:	b141      	cbz	r1, 8002b54 <CMD_usr+0x40>
				strncpy(usrCmdBuf, res->str, sizeof(usrCmdBuf)-1);
 8002b42:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8002b46:	4812      	ldr	r0, [pc, #72]	@ (8002b90 <CMD_usr+0x7c>)
 8002b48:	f013 f848 	bl	8015bdc <strncpy>
			res->ctl = 1;			//break the outer command interpreter, we can have ';', done here
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	61a3      	str	r3, [r4, #24]
			return CMD_DEC_OK;
 8002b50:	2000      	movs	r0, #0
 8002b52:	e7f3      	b.n	8002b3c <CMD_usr+0x28>
				usrCmdBuf[0] = '\0';
 8002b54:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <CMD_usr+0x7c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	e7f7      	b.n	8002b4c <CMD_usr+0x38>
			Generic_Send((const uint8_t *)usrCmdBuf, (int)strlen(usrCmdBuf), out);
 8002b5c:	4c0c      	ldr	r4, [pc, #48]	@ (8002b90 <CMD_usr+0x7c>)
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f7fd fd71 	bl	8000646 <strlen>
 8002b64:	4601      	mov	r1, r0
 8002b66:	4632      	mov	r2, r6
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f7ff fb15 	bl	8002198 <Generic_Send>
			Generic_Send((const uint8_t *)"\r\n", 2, out);
 8002b6e:	4632      	mov	r2, r6
 8002b70:	2102      	movs	r1, #2
 8002b72:	4808      	ldr	r0, [pc, #32]	@ (8002b94 <CMD_usr+0x80>)
 8002b74:	f7ff fb10 	bl	8002198 <Generic_Send>
			return CMD_DEC_OK;
 8002b78:	2000      	movs	r0, #0
 8002b7a:	e7df      	b.n	8002b3c <CMD_usr+0x28>
		return CMD_DEC_execute(usrCmdBuf, out);
 8002b7c:	4631      	mov	r1, r6
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ff2e 	bl	80029e0 <CMD_DEC_execute>
 8002b84:	e7da      	b.n	8002b3c <CMD_usr+0x28>
 8002b86:	bf00      	nop
 8002b88:	08017000 	.word	0x08017000
 8002b8c:	08017158 	.word	0x08017158
 8002b90:	2000fa0c 	.word	0x2000fa0c
 8002b94:	08016db4 	.word	0x08016db4

08002b98 <hex_dump>:
	if (len == 0)
 8002b98:	2900      	cmp	r1, #0
 8002b9a:	f000 8158 	beq.w	8002e4e <hex_dump+0x2b6>
{
 8002b9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba2:	b091      	sub	sp, #68	@ 0x44
 8002ba4:	4604      	mov	r4, r0
 8002ba6:	460d      	mov	r5, r1
	int i = 0;
 8002ba8:	2600      	movs	r6, #0
 8002baa:	4690      	mov	r8, r2
 8002bac:	4699      	mov	r9, r3
 8002bae:	e00c      	b.n	8002bca <hex_dump+0x32>
				print_log(out, (const char *)"%02X ", (int)*ptr);
 8002bb0:	f1b9 0f00 	cmp.w	r9, #0
 8002bb4:	d02e      	beq.n	8002c14 <hex_dump+0x7c>
 8002bb6:	f1b9 0f01 	cmp.w	r9, #1
 8002bba:	d03b      	beq.n	8002c34 <hex_dump+0x9c>
				ptr++;
 8002bbc:	3401      	adds	r4, #1
				xLen--;
 8002bbe:	3d01      	subs	r5, #1
				i++;
 8002bc0:	3601      	adds	r6, #1
			if ((i % 16) == 0)
 8002bc2:	f016 0f0f 	tst.w	r6, #15
 8002bc6:	f000 812d 	beq.w	8002e24 <hex_dump+0x28c>
		while (xLen > 0)
 8002bca:	2d00      	cmp	r5, #0
 8002bcc:	f340 8130 	ble.w	8002e30 <hex_dump+0x298>
			if ((mode == 1) || (mode == 0))
 8002bd0:	f1b8 0f0c 	cmp.w	r8, #12
 8002bd4:	f200 812e 	bhi.w	8002e34 <hex_dump+0x29c>
 8002bd8:	a301      	add	r3, pc, #4	@ (adr r3, 8002be0 <hex_dump+0x48>)
 8002bda:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
 8002bde:	bf00      	nop
 8002be0:	08002bb1 	.word	0x08002bb1
 8002be4:	08002bb1 	.word	0x08002bb1
 8002be8:	08002c55 	.word	0x08002c55
 8002bec:	08002e35 	.word	0x08002e35
 8002bf0:	08002cb5 	.word	0x08002cb5
 8002bf4:	08002e35 	.word	0x08002e35
 8002bf8:	08002e35 	.word	0x08002e35
 8002bfc:	08002e35 	.word	0x08002e35
 8002c00:	08002e35 	.word	0x08002e35
 8002c04:	08002e35 	.word	0x08002e35
 8002c08:	08002e35 	.word	0x08002e35
 8002c0c:	08002e35 	.word	0x08002e35
 8002c10:	08002d2d 	.word	0x08002d2d
				print_log(out, (const char *)"%02X ", (int)*ptr);
 8002c14:	4f8e      	ldr	r7, [pc, #568]	@ (8002e50 <hex_dump+0x2b8>)
 8002c16:	7823      	ldrb	r3, [r4, #0]
 8002c18:	4a8e      	ldr	r2, [pc, #568]	@ (8002e54 <hex_dump+0x2bc>)
 8002c1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c1e:	4638      	mov	r0, r7
 8002c20:	f012 ff62 	bl	8015ae8 <sniprintf>
 8002c24:	4638      	mov	r0, r7
 8002c26:	f7fd fd0e 	bl	8000646 <strlen>
 8002c2a:	4601      	mov	r1, r0
 8002c2c:	4638      	mov	r0, r7
 8002c2e:	f012 f9af 	bl	8014f90 <UART_Send>
 8002c32:	e7c0      	b.n	8002bb6 <hex_dump+0x1e>
 8002c34:	4f88      	ldr	r7, [pc, #544]	@ (8002e58 <hex_dump+0x2c0>)
 8002c36:	7823      	ldrb	r3, [r4, #0]
 8002c38:	4a86      	ldr	r2, [pc, #536]	@ (8002e54 <hex_dump+0x2bc>)
 8002c3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c3e:	4638      	mov	r0, r7
 8002c40:	f012 ff52 	bl	8015ae8 <sniprintf>
 8002c44:	4638      	mov	r0, r7
 8002c46:	f7fd fcfe 	bl	8000646 <strlen>
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	4638      	mov	r0, r7
 8002c4e:	f012 f991 	bl	8014f74 <VCP_UART_Send>
 8002c52:	e7b3      	b.n	8002bbc <hex_dump+0x24>
				print_log(out, (const char *)"%04X ", (int)(*ptr | (*(ptr + 1) << 8)));
 8002c54:	f1b9 0f00 	cmp.w	r9, #0
 8002c58:	d006      	beq.n	8002c68 <hex_dump+0xd0>
 8002c5a:	f1b9 0f01 	cmp.w	r9, #1
 8002c5e:	d016      	beq.n	8002c8e <hex_dump+0xf6>
				ptr += 2;
 8002c60:	3402      	adds	r4, #2
				xLen -= 2;
 8002c62:	3d02      	subs	r5, #2
				i += 2;
 8002c64:	3602      	adds	r6, #2
 8002c66:	e7ac      	b.n	8002bc2 <hex_dump+0x2a>
				print_log(out, (const char *)"%04X ", (int)(*ptr | (*(ptr + 1) << 8)));
 8002c68:	7823      	ldrb	r3, [r4, #0]
 8002c6a:	7862      	ldrb	r2, [r4, #1]
 8002c6c:	4f78      	ldr	r7, [pc, #480]	@ (8002e50 <hex_dump+0x2b8>)
 8002c6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c72:	4a7a      	ldr	r2, [pc, #488]	@ (8002e5c <hex_dump+0x2c4>)
 8002c74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c78:	4638      	mov	r0, r7
 8002c7a:	f012 ff35 	bl	8015ae8 <sniprintf>
 8002c7e:	4638      	mov	r0, r7
 8002c80:	f7fd fce1 	bl	8000646 <strlen>
 8002c84:	4601      	mov	r1, r0
 8002c86:	4638      	mov	r0, r7
 8002c88:	f012 f982 	bl	8014f90 <UART_Send>
 8002c8c:	e7e5      	b.n	8002c5a <hex_dump+0xc2>
 8002c8e:	7823      	ldrb	r3, [r4, #0]
 8002c90:	7862      	ldrb	r2, [r4, #1]
 8002c92:	4f71      	ldr	r7, [pc, #452]	@ (8002e58 <hex_dump+0x2c0>)
 8002c94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c98:	4a70      	ldr	r2, [pc, #448]	@ (8002e5c <hex_dump+0x2c4>)
 8002c9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c9e:	4638      	mov	r0, r7
 8002ca0:	f012 ff22 	bl	8015ae8 <sniprintf>
 8002ca4:	4638      	mov	r0, r7
 8002ca6:	f7fd fcce 	bl	8000646 <strlen>
 8002caa:	4601      	mov	r1, r0
 8002cac:	4638      	mov	r0, r7
 8002cae:	f012 f961 	bl	8014f74 <VCP_UART_Send>
 8002cb2:	e7d5      	b.n	8002c60 <hex_dump+0xc8>
				print_log(out, (const char *)"%08lX ", (unsigned long)(*ptr |
 8002cb4:	f1b9 0f00 	cmp.w	r9, #0
 8002cb8:	d006      	beq.n	8002cc8 <hex_dump+0x130>
 8002cba:	f1b9 0f01 	cmp.w	r9, #1
 8002cbe:	d01c      	beq.n	8002cfa <hex_dump+0x162>
				ptr += 4;
 8002cc0:	3404      	adds	r4, #4
				xLen -= 4;
 8002cc2:	3d04      	subs	r5, #4
				i += 4;
 8002cc4:	3604      	adds	r6, #4
 8002cc6:	e77c      	b.n	8002bc2 <hex_dump+0x2a>
				print_log(out, (const char *)"%08lX ", (unsigned long)(*ptr |
 8002cc8:	7823      	ldrb	r3, [r4, #0]
 8002cca:	7862      	ldrb	r2, [r4, #1]
 8002ccc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002cd0:	78a2      	ldrb	r2, [r4, #2]
 8002cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002cd6:	78e2      	ldrb	r2, [r4, #3]
 8002cd8:	4f5d      	ldr	r7, [pc, #372]	@ (8002e50 <hex_dump+0x2b8>)
 8002cda:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002cde:	4a60      	ldr	r2, [pc, #384]	@ (8002e60 <hex_dump+0x2c8>)
 8002ce0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ce4:	4638      	mov	r0, r7
 8002ce6:	f012 feff 	bl	8015ae8 <sniprintf>
 8002cea:	4638      	mov	r0, r7
 8002cec:	f7fd fcab 	bl	8000646 <strlen>
 8002cf0:	4601      	mov	r1, r0
 8002cf2:	4638      	mov	r0, r7
 8002cf4:	f012 f94c 	bl	8014f90 <UART_Send>
 8002cf8:	e7df      	b.n	8002cba <hex_dump+0x122>
 8002cfa:	7823      	ldrb	r3, [r4, #0]
 8002cfc:	7862      	ldrb	r2, [r4, #1]
 8002cfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d02:	78a2      	ldrb	r2, [r4, #2]
 8002d04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d08:	78e2      	ldrb	r2, [r4, #3]
 8002d0a:	4f53      	ldr	r7, [pc, #332]	@ (8002e58 <hex_dump+0x2c0>)
 8002d0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d10:	4a53      	ldr	r2, [pc, #332]	@ (8002e60 <hex_dump+0x2c8>)
 8002d12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d16:	4638      	mov	r0, r7
 8002d18:	f012 fee6 	bl	8015ae8 <sniprintf>
 8002d1c:	4638      	mov	r0, r7
 8002d1e:	f7fd fc92 	bl	8000646 <strlen>
 8002d22:	4601      	mov	r1, r0
 8002d24:	4638      	mov	r0, r7
 8002d26:	f012 f925 	bl	8014f74 <VCP_UART_Send>
 8002d2a:	e7c9      	b.n	8002cc0 <hex_dump+0x128>
				if ((*(ptr + 11) & 0x80) == 0x80)
 8002d2c:	7ae3      	ldrb	r3, [r4, #11]
 8002d2e:	f994 200b 	ldrsb.w	r2, [r4, #11]
 8002d32:	2a00      	cmp	r2, #0
 8002d34:	db07      	blt.n	8002d46 <hex_dump+0x1ae>
				i = 1;
 8002d36:	2601      	movs	r6, #1
				ptr += 12;
 8002d38:	340c      	adds	r4, #12
				xLen -= 12;
 8002d3a:	3d0c      	subs	r5, #12
				if (xLen < 12)
 8002d3c:	2d0b      	cmp	r5, #11
 8002d3e:	f73f af40 	bgt.w	8002bc2 <hex_dump+0x2a>
					xLen = 0;			//break the loop
 8002d42:	2500      	movs	r5, #0
 8002d44:	e73d      	b.n	8002bc2 <hex_dump+0x2a>
					print_log(out, (const char *)"0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",
 8002d46:	f1b9 0f00 	cmp.w	r9, #0
 8002d4a:	d004      	beq.n	8002d56 <hex_dump+0x1be>
 8002d4c:	f1b9 0f01 	cmp.w	r9, #1
 8002d50:	d034      	beq.n	8002dbc <hex_dump+0x224>
					i = 16;	//force a newline
 8002d52:	2610      	movs	r6, #16
 8002d54:	e7f0      	b.n	8002d38 <hex_dump+0x1a0>
					print_log(out, (const char *)"0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",
 8002d56:	7aa2      	ldrb	r2, [r4, #10]
 8002d58:	920d      	str	r2, [sp, #52]	@ 0x34
 8002d5a:	7a61      	ldrb	r1, [r4, #9]
 8002d5c:	7a20      	ldrb	r0, [r4, #8]
 8002d5e:	79e6      	ldrb	r6, [r4, #7]
 8002d60:	960e      	str	r6, [sp, #56]	@ 0x38
 8002d62:	79a7      	ldrb	r7, [r4, #6]
 8002d64:	f894 c005 	ldrb.w	ip, [r4, #5]
 8002d68:	f894 e004 	ldrb.w	lr, [r4, #4]
 8002d6c:	78e2      	ldrb	r2, [r4, #3]
 8002d6e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8002d70:	78a2      	ldrb	r2, [r4, #2]
 8002d72:	f894 a001 	ldrb.w	sl, [r4, #1]
 8002d76:	f894 b000 	ldrb.w	fp, [r4]
 8002d7a:	4e35      	ldr	r6, [pc, #212]	@ (8002e50 <hex_dump+0x2b8>)
 8002d7c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8002d80:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8002d84:	9208      	str	r2, [sp, #32]
 8002d86:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8002d88:	9207      	str	r2, [sp, #28]
 8002d8a:	f8cd e018 	str.w	lr, [sp, #24]
 8002d8e:	f8cd c014 	str.w	ip, [sp, #20]
 8002d92:	9704      	str	r7, [sp, #16]
 8002d94:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8002d96:	9703      	str	r7, [sp, #12]
 8002d98:	9002      	str	r0, [sp, #8]
 8002d9a:	9101      	str	r1, [sp, #4]
 8002d9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8002d9e:	9200      	str	r2, [sp, #0]
 8002da0:	4a30      	ldr	r2, [pc, #192]	@ (8002e64 <hex_dump+0x2cc>)
 8002da2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002da6:	4630      	mov	r0, r6
 8002da8:	f012 fe9e 	bl	8015ae8 <sniprintf>
 8002dac:	4630      	mov	r0, r6
 8002dae:	f7fd fc4a 	bl	8000646 <strlen>
 8002db2:	4601      	mov	r1, r0
 8002db4:	4630      	mov	r0, r6
 8002db6:	f012 f8eb 	bl	8014f90 <UART_Send>
 8002dba:	e7c7      	b.n	8002d4c <hex_dump+0x1b4>
 8002dbc:	7aa3      	ldrb	r3, [r4, #10]
 8002dbe:	930d      	str	r3, [sp, #52]	@ 0x34
 8002dc0:	7a62      	ldrb	r2, [r4, #9]
 8002dc2:	7a21      	ldrb	r1, [r4, #8]
 8002dc4:	79e0      	ldrb	r0, [r4, #7]
 8002dc6:	79a6      	ldrb	r6, [r4, #6]
 8002dc8:	7967      	ldrb	r7, [r4, #5]
 8002dca:	f894 c004 	ldrb.w	ip, [r4, #4]
 8002dce:	f894 e003 	ldrb.w	lr, [r4, #3]
 8002dd2:	78a3      	ldrb	r3, [r4, #2]
 8002dd4:	930e      	str	r3, [sp, #56]	@ 0x38
 8002dd6:	f894 a001 	ldrb.w	sl, [r4, #1]
 8002dda:	4653      	mov	r3, sl
 8002ddc:	f894 a000 	ldrb.w	sl, [r4]
 8002de0:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8002e58 <hex_dump+0x2c0>
 8002de4:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8002de8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002dec:	9308      	str	r3, [sp, #32]
 8002dee:	f8cd e01c 	str.w	lr, [sp, #28]
 8002df2:	f8cd c018 	str.w	ip, [sp, #24]
 8002df6:	9705      	str	r7, [sp, #20]
 8002df8:	9604      	str	r6, [sp, #16]
 8002dfa:	9003      	str	r0, [sp, #12]
 8002dfc:	9102      	str	r1, [sp, #8]
 8002dfe:	9201      	str	r2, [sp, #4]
 8002e00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	7ae3      	ldrb	r3, [r4, #11]
 8002e06:	4a17      	ldr	r2, [pc, #92]	@ (8002e64 <hex_dump+0x2cc>)
 8002e08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e0c:	4658      	mov	r0, fp
 8002e0e:	f012 fe6b 	bl	8015ae8 <sniprintf>
 8002e12:	4658      	mov	r0, fp
 8002e14:	f7fd fc17 	bl	8000646 <strlen>
 8002e18:	4601      	mov	r1, r0
 8002e1a:	4658      	mov	r0, fp
 8002e1c:	f012 f8aa 	bl	8014f74 <VCP_UART_Send>
					i = 16;	//force a newline
 8002e20:	2610      	movs	r6, #16
 8002e22:	e789      	b.n	8002d38 <hex_dump+0x1a0>
				Generic_Send((const uint8_t *)"\r\n", 2, out);
 8002e24:	464a      	mov	r2, r9
 8002e26:	2102      	movs	r1, #2
 8002e28:	480f      	ldr	r0, [pc, #60]	@ (8002e68 <hex_dump+0x2d0>)
 8002e2a:	f7ff f9b5 	bl	8002198 <Generic_Send>
 8002e2e:	e6cc      	b.n	8002bca <hex_dump+0x32>
 8002e30:	46c8      	mov	r8, r9
 8002e32:	e000      	b.n	8002e36 <hex_dump+0x29e>
 8002e34:	46c8      	mov	r8, r9
		if ((i % 16) != 0)
 8002e36:	f016 0f0f 	tst.w	r6, #15
 8002e3a:	d102      	bne.n	8002e42 <hex_dump+0x2aa>
}
 8002e3c:	b011      	add	sp, #68	@ 0x44
 8002e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			Generic_Send((const uint8_t *)"\r\n", 2, out);
 8002e42:	4642      	mov	r2, r8
 8002e44:	2102      	movs	r1, #2
 8002e46:	4808      	ldr	r0, [pc, #32]	@ (8002e68 <hex_dump+0x2d0>)
 8002e48:	f7ff f9a6 	bl	8002198 <Generic_Send>
 8002e4c:	e7f6      	b.n	8002e3c <hex_dump+0x2a4>
 8002e4e:	4770      	bx	lr
 8002e50:	2000f20c 	.word	0x2000f20c
 8002e54:	0801715c 	.word	0x0801715c
 8002e58:	2000f60c 	.word	0x2000f60c
 8002e5c:	08017164 	.word	0x08017164
 8002e60:	0801716c 	.word	0x0801716c
 8002e64:	08017174 	.word	0x08017174
 8002e68:	08016db4 	.word	0x08016db4

08002e6c <CMD_flashr>:
	if (res->val[1] == 0)
 8002e6c:	6a03      	ldr	r3, [r0, #32]
 8002e6e:	b1d3      	cbz	r3, 8002ea6 <CMD_flashr+0x3a>
{
 8002e70:	b570      	push	{r4, r5, r6, lr}
 8002e72:	4604      	mov	r4, r0
 8002e74:	460d      	mov	r5, r1
	b = (unsigned char *)MEM_PoolAlloc(MEM_POOL_SEG_SIZE);
 8002e76:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002e7a:	f7fd fe67 	bl	8000b4c <MEM_PoolAlloc>
	if ( !b )
 8002e7e:	4606      	mov	r6, r0
 8002e80:	b198      	cbz	r0, 8002eaa <CMD_flashr+0x3e>
	if (FLASH_Read(res->val[0], b, res->val[1]) == 0)
 8002e82:	6a22      	ldr	r2, [r4, #32]
 8002e84:	4601      	mov	r1, r0
 8002e86:	69e0      	ldr	r0, [r4, #28]
 8002e88:	f7fd fe04 	bl	8000a94 <FLASH_Read>
 8002e8c:	b120      	cbz	r0, 8002e98 <CMD_flashr+0x2c>
	MEM_PoolFree(b);
 8002e8e:	4630      	mov	r0, r6
 8002e90:	f7fd fefa 	bl	8000c88 <MEM_PoolFree>
	return CMD_DEC_OK;
 8002e94:	2000      	movs	r0, #0
}
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
		hex_dump(b, res->val[1], 1, out);
 8002e98:	462b      	mov	r3, r5
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	8c21      	ldrh	r1, [r4, #32]
 8002e9e:	4630      	mov	r0, r6
 8002ea0:	f7ff fe7a 	bl	8002b98 <hex_dump>
 8002ea4:	e7f3      	b.n	8002e8e <CMD_flashr+0x22>
		return CMD_DEC_INVPARAM;
 8002ea6:	2006      	movs	r0, #6
}
 8002ea8:	4770      	bx	lr
		return CMD_DEC_OOMEM;
 8002eaa:	2005      	movs	r0, #5
 8002eac:	e7f3      	b.n	8002e96 <CMD_flashr+0x2a>

08002eae <CMD_dumpm>:
{
 8002eae:	b508      	push	{r3, lr}
 8002eb0:	460b      	mov	r3, r1
	hex_dump((uint8_t *)res->val[0], (uint16_t)res->val[1], res->val[2], out);
 8002eb2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8002eb4:	8c01      	ldrh	r1, [r0, #32]
 8002eb6:	69c0      	ldr	r0, [r0, #28]
 8002eb8:	f7ff fe6e 	bl	8002b98 <hex_dump>
}
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	bd08      	pop	{r3, pc}

08002ec0 <CMD_memt>:
{
	unsigned long *p;
	unsigned long i;
	unsigned long tick1, tick2;

	if ( !res->val[1] )
 8002ec0:	6a03      	ldr	r3, [r0, #32]
 8002ec2:	b90b      	cbnz	r3, 8002ec8 <CMD_memt+0x8>
	tick2 = HAL_GetTick() - tick2;

	print_log(out, "WR: %d [ms] | RD: %d [ms]\r\n", (int)tick1, (int)tick2);

	return CMD_DEC_OK;
}
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	4770      	bx	lr
{
 8002ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	4605      	mov	r5, r0
 8002ed0:	460e      	mov	r6, r1
	p = (unsigned long *)res->val[0];
 8002ed2:	69c4      	ldr	r4, [r0, #28]
	tick1 = HAL_GetTick();
 8002ed4:	f001 fc06 	bl	80046e4 <HAL_GetTick>
 8002ed8:	4680      	mov	r8, r0
	for (i = 0; i < res->val[1]; i++)
 8002eda:	2200      	movs	r2, #0
 8002edc:	e002      	b.n	8002ee4 <CMD_memt+0x24>
		*p = (unsigned long)p;
 8002ede:	6024      	str	r4, [r4, #0]
		p++;
 8002ee0:	3404      	adds	r4, #4
	for (i = 0; i < res->val[1]; i++)
 8002ee2:	3201      	adds	r2, #1
 8002ee4:	6a2b      	ldr	r3, [r5, #32]
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d8f9      	bhi.n	8002ede <CMD_memt+0x1e>
	tick1 = HAL_GetTick() - tick1;
 8002eea:	f001 fbfb 	bl	80046e4 <HAL_GetTick>
 8002eee:	eba0 0808 	sub.w	r8, r0, r8
	tick2 = HAL_GetTick();
 8002ef2:	f001 fbf7 	bl	80046e4 <HAL_GetTick>
 8002ef6:	4607      	mov	r7, r0
	p = (unsigned long *)res->val[0];
 8002ef8:	69e8      	ldr	r0, [r5, #28]
	for (i = 0; i < res->val[1]; i++)
 8002efa:	2200      	movs	r2, #0
 8002efc:	6a2c      	ldr	r4, [r5, #32]
 8002efe:	4294      	cmp	r4, r2
 8002f00:	d90a      	bls.n	8002f18 <CMD_memt+0x58>
		if (*p != (unsigned long)p)
 8002f02:	6803      	ldr	r3, [r0, #0]
 8002f04:	4283      	cmp	r3, r0
 8002f06:	d102      	bne.n	8002f0e <CMD_memt+0x4e>
		p++;
 8002f08:	3004      	adds	r0, #4
	for (i = 0; i < res->val[1]; i++)
 8002f0a:	3201      	adds	r2, #1
 8002f0c:	e7f6      	b.n	8002efc <CMD_memt+0x3c>
			hex_dump((uint8_t *)p, 16, 4, out);
 8002f0e:	4633      	mov	r3, r6
 8002f10:	2204      	movs	r2, #4
 8002f12:	2110      	movs	r1, #16
 8002f14:	f7ff fe40 	bl	8002b98 <hex_dump>
	tick2 = HAL_GetTick() - tick2;
 8002f18:	f001 fbe4 	bl	80046e4 <HAL_GetTick>
 8002f1c:	1bc7      	subs	r7, r0, r7
	print_log(out, "WR: %d [ms] | RD: %d [ms]\r\n", (int)tick1, (int)tick2);
 8002f1e:	b12e      	cbz	r6, 8002f2c <CMD_memt+0x6c>
 8002f20:	2e01      	cmp	r6, #1
 8002f22:	d014      	beq.n	8002f4e <CMD_memt+0x8e>
}
 8002f24:	2000      	movs	r0, #0
 8002f26:	b002      	add	sp, #8
 8002f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	print_log(out, "WR: %d [ms] | RD: %d [ms]\r\n", (int)tick1, (int)tick2);
 8002f2c:	4d10      	ldr	r5, [pc, #64]	@ (8002f70 <CMD_memt+0xb0>)
 8002f2e:	9700      	str	r7, [sp, #0]
 8002f30:	4643      	mov	r3, r8
 8002f32:	4a10      	ldr	r2, [pc, #64]	@ (8002f74 <CMD_memt+0xb4>)
 8002f34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f38:	4628      	mov	r0, r5
 8002f3a:	f012 fdd5 	bl	8015ae8 <sniprintf>
 8002f3e:	4628      	mov	r0, r5
 8002f40:	f7fd fb81 	bl	8000646 <strlen>
 8002f44:	4601      	mov	r1, r0
 8002f46:	4628      	mov	r0, r5
 8002f48:	f012 f822 	bl	8014f90 <UART_Send>
 8002f4c:	e7e8      	b.n	8002f20 <CMD_memt+0x60>
 8002f4e:	4d0a      	ldr	r5, [pc, #40]	@ (8002f78 <CMD_memt+0xb8>)
 8002f50:	9700      	str	r7, [sp, #0]
 8002f52:	4643      	mov	r3, r8
 8002f54:	4a07      	ldr	r2, [pc, #28]	@ (8002f74 <CMD_memt+0xb4>)
 8002f56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f5a:	4628      	mov	r0, r5
 8002f5c:	f012 fdc4 	bl	8015ae8 <sniprintf>
 8002f60:	4628      	mov	r0, r5
 8002f62:	f7fd fb70 	bl	8000646 <strlen>
 8002f66:	4601      	mov	r1, r0
 8002f68:	4628      	mov	r0, r5
 8002f6a:	f012 f803 	bl	8014f74 <VCP_UART_Send>
 8002f6e:	e7d9      	b.n	8002f24 <CMD_memt+0x64>
 8002f70:	2000f20c 	.word	0x2000f20c
 8002f74:	080171a8 	.word	0x080171a8
 8002f78:	2000f60c 	.word	0x2000f60c

08002f7c <MX_Queue_rx_Config>:
  * @brief  DMA Linked-list Queue_rx configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_Queue_rx_Config(void)
{
 8002f7c:	b530      	push	{r4, r5, lr}
 8002f7e:	b09d      	sub	sp, #116	@ 0x74
  HAL_StatusTypeDef ret = HAL_OK;
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002f80:	2321      	movs	r3, #33	@ 0x21
 8002f82:	9301      	str	r3, [sp, #4]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_SPI3_RX;
 8002f84:	230a      	movs	r3, #10
 8002f86:	9302      	str	r3, [sp, #8]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	9303      	str	r3, [sp, #12]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f8c:	9304      	str	r3, [sp, #16]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002f8e:	9305      	str	r3, [sp, #20]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002f90:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002f94:	9206      	str	r2, [sp, #24]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002f96:	9307      	str	r3, [sp, #28]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002f98:	9308      	str	r3, [sp, #32]
  pNodeConfig.Init.SrcBurstLength = 1;
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	920a      	str	r2, [sp, #40]	@ 0x28
  pNodeConfig.Init.DestBurstLength = 1;
 8002f9e:	920b      	str	r2, [sp, #44]	@ 0x2c
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002fa0:	930c      	str	r3, [sp, #48]	@ 0x30
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002fa2:	930d      	str	r3, [sp, #52]	@ 0x34
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002fa4:	9312      	str	r3, [sp, #72]	@ 0x48
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002fa6:	930f      	str	r3, [sp, #60]	@ 0x3c
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002fa8:	9310      	str	r3, [sp, #64]	@ 0x40
  pNodeConfig.SrcAddress = 0;
 8002faa:	9319      	str	r3, [sp, #100]	@ 0x64
  pNodeConfig.DstAddress = 0;
 8002fac:	931a      	str	r3, [sp, #104]	@ 0x68
  pNodeConfig.DataSize = 0;
 8002fae:	931b      	str	r3, [sp, #108]	@ 0x6c

  /* Build Node_rx Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &Node_rx);
 8002fb0:	4d06      	ldr	r5, [pc, #24]	@ (8002fcc <MX_Queue_rx_Config+0x50>)
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	a801      	add	r0, sp, #4
 8002fb6:	f003 fe43 	bl	8006c40 <HAL_DMAEx_List_BuildNode>
 8002fba:	4604      	mov	r4, r0

  /* Insert Node_rx to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&Queue_rx, &Node_rx);
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	4804      	ldr	r0, [pc, #16]	@ (8002fd0 <MX_Queue_rx_Config+0x54>)
 8002fc0:	f003 fe49 	bl	8006c56 <HAL_DMAEx_List_InsertNode_Tail>
 8002fc4:	4320      	orrs	r0, r4

   return ret;
}
 8002fc6:	b2c0      	uxtb	r0, r0
 8002fc8:	b01d      	add	sp, #116	@ 0x74
 8002fca:	bd30      	pop	{r4, r5, pc}
 8002fcc:	2000fe2c 	.word	0x2000fe2c
 8002fd0:	2000fe14 	.word	0x2000fe14

08002fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fd8:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fda:	2400      	movs	r4, #0
 8002fdc:	9409      	str	r4, [sp, #36]	@ 0x24
 8002fde:	940a      	str	r4, [sp, #40]	@ 0x28
 8002fe0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002fe2:	940c      	str	r4, [sp, #48]	@ 0x30
 8002fe4:	940d      	str	r4, [sp, #52]	@ 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe6:	4b48      	ldr	r3, [pc, #288]	@ (8003108 <MX_GPIO_Init+0x134>)
 8002fe8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8002ff4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002ff8:	f002 0201 	and.w	r2, r2, #1
 8002ffc:	9201      	str	r2, [sp, #4]
 8002ffe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003000:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003004:	f042 0202 	orr.w	r2, r2, #2
 8003008:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800300c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003010:	f002 0202 	and.w	r2, r2, #2
 8003014:	9202      	str	r2, [sp, #8]
 8003016:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003018:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800301c:	f042 0204 	orr.w	r2, r2, #4
 8003020:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8003024:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003028:	f002 0204 	and.w	r2, r2, #4
 800302c:	9203      	str	r2, [sp, #12]
 800302e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003030:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003034:	f042 0208 	orr.w	r2, r2, #8
 8003038:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800303c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003040:	f002 0208 	and.w	r2, r2, #8
 8003044:	9204      	str	r2, [sp, #16]
 8003046:	9a04      	ldr	r2, [sp, #16]
#ifndef PDM_CMU
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003048:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800304c:	f042 0210 	orr.w	r2, r2, #16
 8003050:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8003054:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003058:	f002 0210 	and.w	r2, r2, #16
 800305c:	9205      	str	r2, [sp, #20]
 800305e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003060:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003064:	f042 0220 	orr.w	r2, r2, #32
 8003068:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800306c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003070:	f002 0220 	and.w	r2, r2, #32
 8003074:	9206      	str	r2, [sp, #24]
 8003076:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003078:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800307c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003080:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8003084:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003088:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800308c:	9207      	str	r2, [sp, #28]
 800308e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003090:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003094:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003098:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800309c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a4:	9308      	str	r3, [sp, #32]
 80030a6:	9b08      	ldr	r3, [sp, #32]
#endif

#ifdef NUCLEO_BOARD
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1_PIN, GPIO_PIN_RESET);
 80030a8:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 8003114 <MX_GPIO_Init+0x140>
 80030ac:	4622      	mov	r2, r4
 80030ae:	2180      	movs	r1, #128	@ 0x80
 80030b0:	4640      	mov	r0, r8
 80030b2:	f004 f81b 	bl	80070ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET);
 80030b6:	4f15      	ldr	r7, [pc, #84]	@ (800310c <MX_GPIO_Init+0x138>)
 80030b8:	4622      	mov	r2, r4
 80030ba:	2180      	movs	r1, #128	@ 0x80
 80030bc:	4638      	mov	r0, r7
 80030be:	f004 f815 	bl	80070ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3_PIN, GPIO_PIN_RESET);
 80030c2:	4d13      	ldr	r5, [pc, #76]	@ (8003110 <MX_GPIO_Init+0x13c>)
 80030c4:	4622      	mov	r2, r4
 80030c6:	2104      	movs	r1, #4
 80030c8:	4628      	mov	r0, r5
 80030ca:	f004 f80f 	bl	80070ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED3_PIN;
 80030ce:	2604      	movs	r6, #4
 80030d0:	9609      	str	r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d2:	2301      	movs	r3, #1
 80030d4:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(LED3_GPIO_PORT, &GPIO_InitStruct);
 80030da:	a909      	add	r1, sp, #36	@ 0x24
 80030dc:	4628      	mov	r0, r5
 80030de:	f003 fe75 	bl	8006dcc <HAL_GPIO_Init>

  /* -1- Enable GPIO Clock (to be able to program the configuration registers) */
  //LED1_GPIO_CLK_ENABLE();
  //LED2_GPIO_CLK_ENABLE();

  GPIO_InitStruct.Pin = LED1_PIN;
 80030e2:	2480      	movs	r4, #128	@ 0x80
 80030e4:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LED1_GPIO_PORT, &GPIO_InitStruct);
 80030e6:	a909      	add	r1, sp, #36	@ 0x24
 80030e8:	4640      	mov	r0, r8
 80030ea:	f003 fe6f 	bl	8006dcc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED2_PIN;
 80030ee:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStruct);
 80030f0:	a909      	add	r1, sp, #36	@ 0x24
 80030f2:	4638      	mov	r0, r7
 80030f4:	f003 fe6a 	bl	8006dcc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_PIN;
 80030f8:	9609      	str	r6, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LED3_GPIO_PORT, &GPIO_InitStruct);
 80030fa:	a909      	add	r1, sp, #36	@ 0x24
 80030fc:	4628      	mov	r0, r5
 80030fe:	f003 fe65 	bl	8006dcc <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#endif
#endif
}
 8003102:	b00e      	add	sp, #56	@ 0x38
 8003104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003108:	46020c00 	.word	0x46020c00
 800310c:	42020400 	.word	0x42020400
 8003110:	42021800 	.word	0x42021800
 8003114:	42020800 	.word	0x42020800

08003118 <LED_Status>:
#endif

int GBothLEDs = 0;

void LED_Status(int val)
{
 8003118:	b508      	push	{r3, lr}
#ifndef NUCLEO_BOARD
	GPIO_InitTypeDef GPIO_InitStruct = {0};
#endif
	GBothLEDs = 0;
 800311a:	4b16      	ldr	r3, [pc, #88]	@ (8003174 <LED_Status+0x5c>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

#ifdef NUCLEO_BOARD
	if ( !val)
 8003120:	b130      	cbz	r0, 8003130 <LED_Status+0x18>
		  HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3_PIN, GPIO_PIN_RESET);
	}
	else
	{
		switch(val)
 8003122:	2802      	cmp	r0, #2
 8003124:	d019      	beq.n	800315a <LED_Status+0x42>
 8003126:	2803      	cmp	r0, #3
 8003128:	d01d      	beq.n	8003166 <LED_Status+0x4e>
 800312a:	2801      	cmp	r0, #1
 800312c:	d00f      	beq.n	800314e <LED_Status+0x36>

		if (val == 3)
			GBothLEDs = 1;
	}
#endif
}
 800312e:	bd08      	pop	{r3, pc}
		  HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1_PIN, GPIO_PIN_RESET);
 8003130:	2180      	movs	r1, #128	@ 0x80
 8003132:	4811      	ldr	r0, [pc, #68]	@ (8003178 <LED_Status+0x60>)
 8003134:	f003 ffda 	bl	80070ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET);
 8003138:	2200      	movs	r2, #0
 800313a:	2180      	movs	r1, #128	@ 0x80
 800313c:	480f      	ldr	r0, [pc, #60]	@ (800317c <LED_Status+0x64>)
 800313e:	f003 ffd5 	bl	80070ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3_PIN, GPIO_PIN_RESET);
 8003142:	2200      	movs	r2, #0
 8003144:	2104      	movs	r1, #4
 8003146:	480e      	ldr	r0, [pc, #56]	@ (8003180 <LED_Status+0x68>)
 8003148:	f003 ffd0 	bl	80070ec <HAL_GPIO_WritePin>
 800314c:	e7ef      	b.n	800312e <LED_Status+0x16>
		case 1 : HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1_PIN, GPIO_PIN_SET); break;
 800314e:	2201      	movs	r2, #1
 8003150:	2180      	movs	r1, #128	@ 0x80
 8003152:	4809      	ldr	r0, [pc, #36]	@ (8003178 <LED_Status+0x60>)
 8003154:	f003 ffca 	bl	80070ec <HAL_GPIO_WritePin>
 8003158:	e7e9      	b.n	800312e <LED_Status+0x16>
		case 2 : HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_SET); break;
 800315a:	2201      	movs	r2, #1
 800315c:	2180      	movs	r1, #128	@ 0x80
 800315e:	4807      	ldr	r0, [pc, #28]	@ (800317c <LED_Status+0x64>)
 8003160:	f003 ffc4 	bl	80070ec <HAL_GPIO_WritePin>
 8003164:	e7e3      	b.n	800312e <LED_Status+0x16>
		case 3 : HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3_PIN, GPIO_PIN_SET); break;
 8003166:	2201      	movs	r2, #1
 8003168:	2104      	movs	r1, #4
 800316a:	4805      	ldr	r0, [pc, #20]	@ (8003180 <LED_Status+0x68>)
 800316c:	f003 ffbe 	bl	80070ec <HAL_GPIO_WritePin>
}
 8003170:	e7dd      	b.n	800312e <LED_Status+0x16>
 8003172:	bf00      	nop
 8003174:	2000fe50 	.word	0x2000fe50
 8003178:	42020800 	.word	0x42020800
 800317c:	42020400 	.word	0x42020400
 8003180:	42021800 	.word	0x42021800

08003184 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003184:	b508      	push	{r3, lr}
  if (htim->Instance == TIM6) {
 8003186:	6802      	ldr	r2, [r0, #0]
 8003188:	4b03      	ldr	r3, [pc, #12]	@ (8003198 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800318a:	429a      	cmp	r2, r3
 800318c:	d000      	beq.n	8003190 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
}
 800318e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8003190:	f001 fa9c 	bl	80046cc <HAL_IncTick>
}
 8003194:	e7fb      	b.n	800318e <HAL_TIM_PeriodElapsedCallback+0xa>
 8003196:	bf00      	nop
 8003198:	40001000 	.word	0x40001000

0800319c <HAL_SPI_RxHalfCpltCallback>:
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	(void)hspi;
	////extern volatile int GSPI_DMA_RxComplete;

	hspi->State = HAL_SPI_STATE_READY;
 800319c:	2301      	movs	r3, #1
 800319e:	f880 3089 	strb.w	r3, [r0, #137]	@ 0x89
	////GSPI_DMA_RxComplete = 1;
}
 80031a2:	4770      	bx	lr

080031a4 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
	(void)hspi;
	////extern volatile int GSPI_DMA_RxComplete;

	hspi->State = HAL_SPI_STATE_READY;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f880 3089 	strb.w	r3, [r0, #137]	@ 0x89
	////GSPI_DMA_RxComplete = 1;
}
 80031aa:	4770      	bx	lr

080031ac <HAL_SPI_ErrorCallback>:
#endif

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
	(void)hspi;
}
 80031ac:	4770      	bx	lr

080031ae <HAL_OSPI_CmdCpltCallback>:
  * @retval None
  */
void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
	(void)hospi;
}
 80031ae:	4770      	bx	lr

080031b0 <HAL_OSPI_TxHalfCpltCallback>:
{
	 (void)hospi;
	 ////extern volatile int GQSPI_DMA_TxComplete;

	 ////GQSPI_DMA_TxComplete = 1;
}
 80031b0:	4770      	bx	lr

080031b2 <HAL_OSPI_RxHalfCpltCallback>:
{
	 (void)hospi;
	 ////extern volatile int GQSPI_DMA_TxComplete;

	 ////GQSPI_DMA_TxComplete = 1;
}
 80031b2:	4770      	bx	lr

080031b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031b4:	b508      	push	{r3, lr}
  /* User can add his own implementation to report the HAL error return state */
  while (1)
  {
    HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80031b6:	2104      	movs	r1, #4
 80031b8:	4803      	ldr	r0, [pc, #12]	@ (80031c8 <Error_Handler+0x14>)
 80031ba:	f003 ff9c 	bl	80070f6 <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 80031be:	20c8      	movs	r0, #200	@ 0xc8
 80031c0:	f001 fa96 	bl	80046f0 <HAL_Delay>
  while (1)
 80031c4:	e7f7      	b.n	80031b6 <Error_Handler+0x2>
 80031c6:	bf00      	nop
 80031c8:	42021800 	.word	0x42021800

080031cc <SystemPower_Config>:
{
 80031cc:	b500      	push	{lr}
 80031ce:	b083      	sub	sp, #12
  PWR_PVDTypeDef sConfigPVD = {0};
 80031d0:	2300      	movs	r3, #0
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	9301      	str	r3, [sp, #4]
  HAL_PWREx_EnableVddIO2();
 80031d6:	f006 fc79 	bl	8009acc <HAL_PWREx_EnableVddIO2>
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80031da:	2002      	movs	r0, #2
 80031dc:	f006 fc38 	bl	8009a50 <HAL_PWREx_ConfigSupply>
 80031e0:	b9a8      	cbnz	r0, 800320e <SystemPower_Config+0x42>
  *         voltage ranges from 1.71 to 3.6 V
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableVddCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN1);
 80031e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003214 <SystemPower_Config+0x48>)
 80031e4:	69d3      	ldr	r3, [r2, #28]
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	61d3      	str	r3, [r2, #28]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ec:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80031f0:	f006 fbd6 	bl	80099a0 <HAL_PWREx_ControlVoltageScaling>
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	9300      	str	r3, [sp, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80031f8:	9301      	str	r3, [sp, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80031fa:	4668      	mov	r0, sp
 80031fc:	f006 fb76 	bl	80098ec <HAL_PWR_ConfigPVD>
  HAL_PWR_EnablePVD();
 8003200:	f006 fbc6 	bl	8009990 <HAL_PWR_EnablePVD>
  HAL_PWREx_DisableUCPDDeadBattery();
 8003204:	f006 fc86 	bl	8009b14 <HAL_PWREx_DisableUCPDDeadBattery>
}
 8003208:	b003      	add	sp, #12
 800320a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800320e:	f7ff ffd1 	bl	80031b4 <Error_Handler>
 8003212:	bf00      	nop
 8003214:	46000400 	.word	0x46000400

08003218 <MX_GPDMA1_Init>:
{
 8003218:	b500      	push	{lr}
 800321a:	b083      	sub	sp, #12
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800321c:	4b29      	ldr	r3, [pc, #164]	@ (80032c4 <MX_GPDMA1_Init+0xac>)
 800321e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8003236:	2200      	movs	r2, #0
 8003238:	4611      	mov	r1, r2
 800323a:	201d      	movs	r0, #29
 800323c:	f002 fd7c 	bl	8005d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8003240:	201d      	movs	r0, #29
 8003242:	f002 fd89 	bl	8005d58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel6_IRQn, 0, 0);
 8003246:	2200      	movs	r2, #0
 8003248:	4611      	mov	r1, r2
 800324a:	2023      	movs	r0, #35	@ 0x23
 800324c:	f002 fd74 	bl	8005d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel6_IRQn);
 8003250:	2023      	movs	r0, #35	@ 0x23
 8003252:	f002 fd81 	bl	8005d58 <HAL_NVIC_EnableIRQ>
    handle_GPDMA1_Channel6.Instance = GPDMA1_Channel6;
 8003256:	481c      	ldr	r0, [pc, #112]	@ (80032c8 <MX_GPDMA1_Init+0xb0>)
 8003258:	4b1c      	ldr	r3, [pc, #112]	@ (80032cc <MX_GPDMA1_Init+0xb4>)
 800325a:	6003      	str	r3, [r0, #0]
    handle_GPDMA1_Channel6.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800325c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003260:	6383      	str	r3, [r0, #56]	@ 0x38
    handle_GPDMA1_Channel6.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8003262:	2300      	movs	r3, #0
 8003264:	63c3      	str	r3, [r0, #60]	@ 0x3c
    handle_GPDMA1_Channel6.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 8003266:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800326a:	6403      	str	r3, [r0, #64]	@ 0x40
    handle_GPDMA1_Channel6.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 800326c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8003270:	6443      	str	r3, [r0, #68]	@ 0x44
    handle_GPDMA1_Channel6.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_NORMAL;
 8003272:	2380      	movs	r3, #128	@ 0x80
 8003274:	6483      	str	r3, [r0, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel6) != HAL_OK)
 8003276:	f003 fc4d 	bl	8006b14 <HAL_DMAEx_List_Init>
 800327a:	b9f8      	cbnz	r0, 80032bc <MX_GPDMA1_Init+0xa4>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel6, DMA_CHANNEL_NPRIV) != HAL_OK)
 800327c:	2110      	movs	r1, #16
 800327e:	4812      	ldr	r0, [pc, #72]	@ (80032c8 <MX_GPDMA1_Init+0xb0>)
 8003280:	f003 f9c5 	bl	800660e <HAL_DMA_ConfigChannelAttributes>
 8003284:	b9e0      	cbnz	r0, 80032c0 <MX_GPDMA1_Init+0xa8>
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 8003286:	2200      	movs	r2, #0
 8003288:	4611      	mov	r1, r2
 800328a:	2054      	movs	r0, #84	@ 0x54
 800328c:	f002 fd54 	bl	8005d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8003290:	2054      	movs	r0, #84	@ 0x54
 8003292:	f002 fd61 	bl	8005d58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 8003296:	2200      	movs	r2, #0
 8003298:	4611      	mov	r1, r2
 800329a:	2021      	movs	r0, #33	@ 0x21
 800329c:	f002 fd4c 	bl	8005d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 80032a0:	2021      	movs	r0, #33	@ 0x21
 80032a2:	f002 fd59 	bl	8005d58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 80032a6:	2200      	movs	r2, #0
 80032a8:	4611      	mov	r1, r2
 80032aa:	2022      	movs	r0, #34	@ 0x22
 80032ac:	f002 fd44 	bl	8005d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 80032b0:	2022      	movs	r0, #34	@ 0x22
 80032b2:	f002 fd51 	bl	8005d58 <HAL_NVIC_EnableIRQ>
}
 80032b6:	b003      	add	sp, #12
 80032b8:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 80032bc:	f7ff ff7a 	bl	80031b4 <Error_Handler>
        Error_Handler();
 80032c0:	f7ff ff78 	bl	80031b4 <Error_Handler>
 80032c4:	46020c00 	.word	0x46020c00
 80032c8:	2001051c 	.word	0x2001051c
 80032cc:	40020350 	.word	0x40020350

080032d0 <MX_ICACHE_Init>:
{
 80032d0:	b508      	push	{r3, lr}
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80032d2:	2000      	movs	r0, #0
 80032d4:	f004 fb7c 	bl	80079d0 <HAL_ICACHE_ConfigAssociativityMode>
 80032d8:	b918      	cbnz	r0, 80032e2 <MX_ICACHE_Init+0x12>
  if (HAL_ICACHE_Enable() != HAL_OK)
 80032da:	f004 fb8b 	bl	80079f4 <HAL_ICACHE_Enable>
 80032de:	b910      	cbnz	r0, 80032e6 <MX_ICACHE_Init+0x16>
}
 80032e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80032e2:	f7ff ff67 	bl	80031b4 <Error_Handler>
    Error_Handler();
 80032e6:	f7ff ff65 	bl	80031b4 <Error_Handler>
	...

080032ec <MX_DCACHE1_Init>:
{
 80032ec:	b508      	push	{r3, lr}
  hdcache1.Instance = DCACHE1;
 80032ee:	4805      	ldr	r0, [pc, #20]	@ (8003304 <MX_DCACHE1_Init+0x18>)
 80032f0:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <MX_DCACHE1_Init+0x1c>)
 80032f2:	6003      	str	r3, [r0, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80032f4:	2300      	movs	r3, #0
 80032f6:	6043      	str	r3, [r0, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 80032f8:	f002 fd4e 	bl	8005d98 <HAL_DCACHE_Init>
 80032fc:	b900      	cbnz	r0, 8003300 <MX_DCACHE1_Init+0x14>
}
 80032fe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003300:	f7ff ff58 	bl	80031b4 <Error_Handler>
 8003304:	2001078c 	.word	0x2001078c
 8003308:	40031400 	.word	0x40031400

0800330c <MX_I2C2_Init>:
{
 800330c:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 800330e:	4815      	ldr	r0, [pc, #84]	@ (8003364 <MX_I2C2_Init+0x58>)
 8003310:	4b15      	ldr	r3, [pc, #84]	@ (8003368 <MX_I2C2_Init+0x5c>)
 8003312:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00C01F67;			//800 KHz
 8003314:	4b15      	ldr	r3, [pc, #84]	@ (800336c <MX_I2C2_Init+0x60>)
 8003316:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0xA0;			//we are not slave, any should be fine
 8003318:	23a0      	movs	r3, #160	@ 0xa0
 800331a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800331c:	2301      	movs	r3, #1
 800331e:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003320:	2300      	movs	r3, #0
 8003322:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003324:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003326:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003328:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800332a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800332c:	f004 f8b3 	bl	8007496 <HAL_I2C_Init>
 8003330:	b978      	cbnz	r0, 8003352 <MX_I2C2_Init+0x46>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003332:	2100      	movs	r1, #0
 8003334:	480b      	ldr	r0, [pc, #44]	@ (8003364 <MX_I2C2_Init+0x58>)
 8003336:	f004 fabf 	bl	80078b8 <HAL_I2CEx_ConfigAnalogFilter>
 800333a:	b960      	cbnz	r0, 8003356 <MX_I2C2_Init+0x4a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800333c:	2100      	movs	r1, #0
 800333e:	4809      	ldr	r0, [pc, #36]	@ (8003364 <MX_I2C2_Init+0x58>)
 8003340:	f004 fae8 	bl	8007914 <HAL_I2CEx_ConfigDigitalFilter>
 8003344:	b948      	cbnz	r0, 800335a <MX_I2C2_Init+0x4e>
  if (HAL_I2CEx_ConfigFastModePlus(&hi2c2, I2C_FASTMODEPLUS_ENABLE) != HAL_OK)
 8003346:	2100      	movs	r1, #0
 8003348:	4806      	ldr	r0, [pc, #24]	@ (8003364 <MX_I2C2_Init+0x58>)
 800334a:	f004 fb0f 	bl	800796c <HAL_I2CEx_ConfigFastModePlus>
 800334e:	b930      	cbnz	r0, 800335e <MX_I2C2_Init+0x52>
}
 8003350:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003352:	f7ff ff2f 	bl	80031b4 <Error_Handler>
    Error_Handler();
 8003356:	f7ff ff2d 	bl	80031b4 <Error_Handler>
    Error_Handler();
 800335a:	f7ff ff2b 	bl	80031b4 <Error_Handler>
    Error_Handler();
 800335e:	f7ff ff29 	bl	80031b4 <Error_Handler>
 8003362:	bf00      	nop
 8003364:	2000fe54 	.word	0x2000fe54
 8003368:	40005800 	.word	0x40005800
 800336c:	00c01f67 	.word	0x00c01f67

08003370 <SystemClock_Config>:
{
 8003370:	b500      	push	{lr}
 8003372:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003374:	2260      	movs	r2, #96	@ 0x60
 8003376:	2100      	movs	r1, #0
 8003378:	a806      	add	r0, sp, #24
 800337a:	f012 fc15 	bl	8015ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800337e:	2300      	movs	r3, #0
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	9302      	str	r3, [sp, #8]
 8003386:	9303      	str	r3, [sp, #12]
 8003388:	9304      	str	r3, [sp, #16]
 800338a:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800338c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8003390:	f006 fb06 	bl	80099a0 <HAL_PWREx_ControlVoltageScaling>
 8003394:	2800      	cmp	r0, #0
 8003396:	d130      	bne.n	80033fa <SystemClock_Config+0x8a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003398:	2203      	movs	r2, #3
 800339a:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800339c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033a0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033a6:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033a8:	2310      	movs	r3, #16
 80033aa:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033ac:	2302      	movs	r3, #2
 80033ae:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033b0:	9215      	str	r2, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80033b2:	2200      	movs	r2, #0
 80033b4:	9217      	str	r2, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80033b6:	2101      	movs	r1, #1
 80033b8:	9116      	str	r1, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 20;	//over-clocking MCU
 80033ba:	2114      	movs	r1, #20
 80033bc:	9118      	str	r1, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 10; 	//32 MHz needed here - for USB OTG!
 80033be:	210a      	movs	r1, #10
 80033c0:	9119      	str	r1, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;	//max. 200 MHz, for QSPI only! with 2 = 160 MHz
 80033c2:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;	//160 MHz SYS clock
 80033c4:	931b      	str	r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80033c6:	230c      	movs	r3, #12
 80033c8:	931c      	str	r3, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80033ca:	921d      	str	r2, [sp, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033cc:	a806      	add	r0, sp, #24
 80033ce:	f006 fe63 	bl	800a098 <HAL_RCC_OscConfig>
 80033d2:	b9a0      	cbnz	r0, 80033fe <SystemClock_Config+0x8e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033d4:	231f      	movs	r3, #31
 80033d6:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033d8:	2303      	movs	r3, #3
 80033da:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033dc:	2300      	movs	r3, #0
 80033de:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033e0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033e2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80033e4:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80033e6:	2104      	movs	r1, #4
 80033e8:	4668      	mov	r0, sp
 80033ea:	f006 fcbb 	bl	8009d64 <HAL_RCC_ClockConfig>
 80033ee:	b940      	cbnz	r0, 8003402 <SystemClock_Config+0x92>
  HAL_RCC_EnableCSS();
 80033f0:	f007 fbf4 	bl	800abdc <HAL_RCC_EnableCSS>
}
 80033f4:	b01f      	add	sp, #124	@ 0x7c
 80033f6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80033fa:	f7ff fedb 	bl	80031b4 <Error_Handler>
    Error_Handler();
 80033fe:	f7ff fed9 	bl	80031b4 <Error_Handler>
    Error_Handler();
 8003402:	f7ff fed7 	bl	80031b4 <Error_Handler>
	...

08003408 <MX_OCTOSPI1_Init>:
{
 8003408:	b500      	push	{lr}
 800340a:	b089      	sub	sp, #36	@ 0x24
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800340c:	2300      	movs	r3, #0
 800340e:	9302      	str	r3, [sp, #8]
 8003410:	9303      	str	r3, [sp, #12]
 8003412:	9304      	str	r3, [sp, #16]
 8003414:	9305      	str	r3, [sp, #20]
 8003416:	9306      	str	r3, [sp, #24]
 8003418:	9307      	str	r3, [sp, #28]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	9301      	str	r3, [sp, #4]
  hospi1.Instance = OCTOSPI1;
 800341e:	4a33      	ldr	r2, [pc, #204]	@ (80034ec <MX_OCTOSPI1_Init+0xe4>)
 8003420:	4933      	ldr	r1, [pc, #204]	@ (80034f0 <MX_OCTOSPI1_Init+0xe8>)
 8003422:	6011      	str	r1, [r2, #0]
  hospi1.Init.FifoThreshold = 4;			//was 1 - use max. FIFO size - 32BYTES! max. as 32-4
 8003424:	2104      	movs	r1, #4
 8003426:	6051      	str	r1, [r2, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8003428:	6093      	str	r3, [r2, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 800342a:	60d3      	str	r3, [r2, #12]
  hospi1.Init.DeviceSize = 32;		//number of address bits!
 800342c:	2120      	movs	r1, #32
 800342e:	6111      	str	r1, [r2, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8003430:	2101      	movs	r1, #1
 8003432:	6151      	str	r1, [r2, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;	//HAL_OSPI_FREERUNCLK_DISABLE;
 8003434:	6193      	str	r3, [r2, #24]
  hospi1.Init.ClockMode = gCFGparams.QSPImode;
 8003436:	492f      	ldr	r1, [pc, #188]	@ (80034f4 <MX_OCTOSPI1_Init+0xec>)
 8003438:	6888      	ldr	r0, [r1, #8]
 800343a:	61d0      	str	r0, [r2, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800343c:	6213      	str	r3, [r2, #32]
  hospi1.Init.ClockPrescaler = gCFGparams.QSPIdiv;
 800343e:	684b      	ldr	r3, [r1, #4]
 8003440:	6253      	str	r3, [r2, #36]	@ 0x24
  if (gCFGparams.QSPIshift)
 8003442:	698b      	ldr	r3, [r1, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d03a      	beq.n	80034be <MX_OCTOSPI1_Init+0xb6>
	  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003448:	4613      	mov	r3, r2
 800344a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800344e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (gCFGparams.QSPIqCycle)
 8003450:	4b28      	ldr	r3, [pc, #160]	@ (80034f4 <MX_OCTOSPI1_Init+0xec>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d036      	beq.n	80034c6 <MX_OCTOSPI1_Init+0xbe>
	  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8003458:	4b24      	ldr	r3, [pc, #144]	@ (80034ec <MX_OCTOSPI1_Init+0xe4>)
 800345a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800345e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8003460:	4b22      	ldr	r3, [pc, #136]	@ (80034ec <MX_OCTOSPI1_Init+0xe4>)
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	@ 0x30
  if (gCFGparams.QSPIdlyb)
 8003466:	4b23      	ldr	r3, [pc, #140]	@ (80034f4 <MX_OCTOSPI1_Init+0xec>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d02f      	beq.n	80034ce <MX_OCTOSPI1_Init+0xc6>
	  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 800346e:	4b1f      	ldr	r3, [pc, #124]	@ (80034ec <MX_OCTOSPI1_Init+0xe4>)
 8003470:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8003472:	481e      	ldr	r0, [pc, #120]	@ (80034ec <MX_OCTOSPI1_Init+0xe4>)
 8003474:	2300      	movs	r3, #0
 8003476:	6383      	str	r3, [r0, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8003478:	63c3      	str	r3, [r0, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800347a:	f005 fa21 	bl	80088c0 <HAL_OSPI_Init>
 800347e:	bb50      	cbnz	r0, 80034d6 <MX_OCTOSPI1_Init+0xce>
  sOspiManagerCfg.ClkPort = 1;
 8003480:	2301      	movs	r3, #1
 8003482:	9302      	str	r3, [sp, #8]
  sOspiManagerCfg.NCSPort = 1;
 8003484:	9304      	str	r3, [sp, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8003486:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800348a:	9305      	str	r3, [sp, #20]
  sOspiManagerCfg.DQSPort = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	9303      	str	r3, [sp, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003494:	a902      	add	r1, sp, #8
 8003496:	4815      	ldr	r0, [pc, #84]	@ (80034ec <MX_OCTOSPI1_Init+0xe4>)
 8003498:	f004 ff34 	bl	8008304 <HAL_OSPIM_Config>
 800349c:	b9e8      	cbnz	r0, 80034da <MX_OCTOSPI1_Init+0xd2>
  if (gCFGparams.QSPIdlyb)
 800349e:	4b15      	ldr	r3, [pc, #84]	@ (80034f4 <MX_OCTOSPI1_Init+0xec>)
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	b1e3      	cbz	r3, 80034de <MX_OCTOSPI1_Init+0xd6>
	  HAL_OSPI_DLYB_Cfg_Struct.Units = gCFGparams.DLYBunit;
 80034a4:	4b13      	ldr	r3, [pc, #76]	@ (80034f4 <MX_OCTOSPI1_Init+0xec>)
 80034a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034a8:	9200      	str	r2, [sp, #0]
	  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = gCFGparams.DLYBphase;
 80034aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ac:	9301      	str	r3, [sp, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 80034ae:	4669      	mov	r1, sp
 80034b0:	480e      	ldr	r0, [pc, #56]	@ (80034ec <MX_OCTOSPI1_Init+0xe4>)
 80034b2:	f005 fb2f 	bl	8008b14 <HAL_OSPI_DLYB_SetConfig>
 80034b6:	b9b0      	cbnz	r0, 80034e6 <MX_OCTOSPI1_Init+0xde>
}
 80034b8:	b009      	add	sp, #36	@ 0x24
 80034ba:	f85d fb04 	ldr.w	pc, [sp], #4
	  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80034be:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <MX_OCTOSPI1_Init+0xe4>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80034c4:	e7c4      	b.n	8003450 <MX_OCTOSPI1_Init+0x48>
	  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80034c6:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <MX_OCTOSPI1_Init+0xe4>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80034cc:	e7c8      	b.n	8003460 <MX_OCTOSPI1_Init+0x58>
	  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80034ce:	4b07      	ldr	r3, [pc, #28]	@ (80034ec <MX_OCTOSPI1_Init+0xe4>)
 80034d0:	2208      	movs	r2, #8
 80034d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80034d4:	e7cd      	b.n	8003472 <MX_OCTOSPI1_Init+0x6a>
    Error_Handler();
 80034d6:	f7ff fe6d 	bl	80031b4 <Error_Handler>
    Error_Handler();
 80034da:	f7ff fe6b 	bl	80031b4 <Error_Handler>
	  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	9300      	str	r3, [sp, #0]
	  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80034e2:	9301      	str	r3, [sp, #4]
 80034e4:	e7e3      	b.n	80034ae <MX_OCTOSPI1_Init+0xa6>
    Error_Handler();
 80034e6:	f7ff fe65 	bl	80031b4 <Error_Handler>
 80034ea:	bf00      	nop
 80034ec:	20010730 	.word	0x20010730
 80034f0:	420d1400 	.word	0x420d1400
 80034f4:	2000c1d4 	.word	0x2000c1d4

080034f8 <MX_USART1_UART_Init>:
{
 80034f8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80034fa:	4815      	ldr	r0, [pc, #84]	@ (8003550 <MX_USART1_UART_Init+0x58>)
 80034fc:	4b15      	ldr	r3, [pc, #84]	@ (8003554 <MX_USART1_UART_Init+0x5c>)
 80034fe:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 1843200;	//1843200;	//115200;
 8003500:	f44f 13e1 	mov.w	r3, #1843200	@ 0x1c2000
 8003504:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003506:	2300      	movs	r3, #0
 8003508:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800350a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800350c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800350e:	220c      	movs	r2, #12
 8003510:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003512:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003514:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003516:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003518:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800351a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800351c:	f00b fa35 	bl	800e98a <HAL_UART_Init>
 8003520:	b970      	cbnz	r0, 8003540 <MX_USART1_UART_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003522:	2100      	movs	r1, #0
 8003524:	480a      	ldr	r0, [pc, #40]	@ (8003550 <MX_USART1_UART_Init+0x58>)
 8003526:	f00b fb72 	bl	800ec0e <HAL_UARTEx_SetTxFifoThreshold>
 800352a:	b958      	cbnz	r0, 8003544 <MX_USART1_UART_Init+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800352c:	2100      	movs	r1, #0
 800352e:	4808      	ldr	r0, [pc, #32]	@ (8003550 <MX_USART1_UART_Init+0x58>)
 8003530:	f00b fb92 	bl	800ec58 <HAL_UARTEx_SetRxFifoThreshold>
 8003534:	b940      	cbnz	r0, 8003548 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003536:	4806      	ldr	r0, [pc, #24]	@ (8003550 <MX_USART1_UART_Init+0x58>)
 8003538:	f00b fb4a 	bl	800ebd0 <HAL_UARTEx_DisableFifoMode>
 800353c:	b930      	cbnz	r0, 800354c <MX_USART1_UART_Init+0x54>
}
 800353e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003540:	f7ff fe38 	bl	80031b4 <Error_Handler>
    Error_Handler();
 8003544:	f7ff fe36 	bl	80031b4 <Error_Handler>
    Error_Handler();
 8003548:	f7ff fe34 	bl	80031b4 <Error_Handler>
    Error_Handler();
 800354c:	f7ff fe32 	bl	80031b4 <Error_Handler>
 8003550:	2001060c 	.word	0x2001060c
 8003554:	40013800 	.word	0x40013800

08003558 <MX_USB_OTG_HS_PCD_Init>:
{
 8003558:	b508      	push	{r3, lr}
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800355a:	480a      	ldr	r0, [pc, #40]	@ (8003584 <MX_USB_OTG_HS_PCD_Init+0x2c>)
 800355c:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <MX_USB_OTG_HS_PCD_Init+0x30>)
 800355e:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8003560:	2309      	movs	r3, #9
 8003562:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;		//PCD_SPEED_FULL;	//PCD_SPEED_HIGH;
 8003564:	2300      	movs	r3, #0
 8003566:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8003568:	2203      	movs	r2, #3
 800356a:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800356c:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800356e:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8003570:	6243      	str	r3, [r0, #36]	@ 0x24
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8003572:	6303      	str	r3, [r0, #48]	@ 0x30
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8003574:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;	//ENABLE;	//DISABLE;
 8003576:	60c3      	str	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8003578:	f005 fb6a 	bl	8008c50 <HAL_PCD_Init>
 800357c:	b900      	cbnz	r0, 8003580 <MX_USB_OTG_HS_PCD_Init+0x28>
}
 800357e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003580:	f7ff fe18 	bl	80031b4 <Error_Handler>
 8003584:	2000fea8 	.word	0x2000fea8
 8003588:	42040000 	.word	0x42040000

0800358c <MX_SPI3_Init>:
{
 800358c:	b510      	push	{r4, lr}
 800358e:	b084      	sub	sp, #16
  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8003590:	2200      	movs	r2, #0
 8003592:	9201      	str	r2, [sp, #4]
 8003594:	9202      	str	r2, [sp, #8]
 8003596:	9203      	str	r2, [sp, #12]
  hspi3.Instance = SPI3;
 8003598:	4b30      	ldr	r3, [pc, #192]	@ (800365c <MX_SPI3_Init+0xd0>)
 800359a:	4931      	ldr	r1, [pc, #196]	@ (8003660 <MX_SPI3_Init+0xd4>)
 800359c:	6019      	str	r1, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800359e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;	//SPI_DIRECTION_2LINES;
 80035a0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80035a4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;				//SPI3 only 8 or 16bit !!
 80035a6:	2207      	movs	r2, #7
 80035a8:	60da      	str	r2, [r3, #12]
  switch (gCFGparams.QSPImode)
 80035aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003664 <MX_SPI3_Init+0xd8>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d041      	beq.n	8003636 <MX_SPI3_Init+0xaa>
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d046      	beq.n	8003644 <MX_SPI3_Init+0xb8>
 80035b6:	b13b      	cbz	r3, 80035c8 <MX_SPI3_Init+0x3c>
	  	  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80035b8:	4b28      	ldr	r3, [pc, #160]	@ (800365c <MX_SPI3_Init+0xd0>)
 80035ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035be:	611a      	str	r2, [r3, #16]
  	  	  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80035c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035c4:	615a      	str	r2, [r3, #20]
  	  	  break;
 80035c6:	e003      	b.n	80035d0 <MX_SPI3_Init+0x44>
  case 0: hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035c8:	4b24      	ldr	r3, [pc, #144]	@ (800365c <MX_SPI3_Init+0xd0>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	611a      	str	r2, [r3, #16]
  	  	  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035ce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80035d0:	4822      	ldr	r0, [pc, #136]	@ (800365c <MX_SPI3_Init+0xd0>)
 80035d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80035d6:	6183      	str	r3, [r0, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035d8:	2300      	movs	r3, #0
 80035da:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80035dc:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035de:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 80035e0:	2207      	movs	r2, #7
 80035e2:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80035e4:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_HIGH;	//SPI_NSS_POLARITY_LOW;
 80035e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035ea:	6382      	str	r2, [r0, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80035ec:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80035ee:	6483      	str	r3, [r0, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80035f0:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80035f2:	6503      	str	r3, [r0, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80035f4:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_ENABLE;	//SPI_IO_SWAP_DISABLE; //WE NEED BECAUSE OF SCHEMATICS!
 80035f6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80035fa:	6582      	str	r2, [r0, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80035fc:	65c3      	str	r3, [r0, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80035fe:	6603      	str	r3, [r0, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003600:	f009 fc52 	bl	800cea8 <HAL_SPI_Init>
 8003604:	bb28      	cbnz	r0, 8003652 <MX_SPI3_Init+0xc6>
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8003606:	2300      	movs	r3, #0
 8003608:	9301      	str	r3, [sp, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800360a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800360e:	9202      	str	r2, [sp, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8003610:	9303      	str	r3, [sp, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8003612:	a901      	add	r1, sp, #4
 8003614:	4811      	ldr	r0, [pc, #68]	@ (800365c <MX_SPI3_Init+0xd0>)
 8003616:	f009 ffab 	bl	800d570 <HAL_SPIEx_SetConfigAutonomousMode>
 800361a:	b9e0      	cbnz	r0, 8003656 <MX_SPI3_Init+0xca>
  MX_Queue_rx_Config();
 800361c:	f7ff fcae 	bl	8002f7c <MX_Queue_rx_Config>
  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel6, &Queue_rx);
 8003620:	4c11      	ldr	r4, [pc, #68]	@ (8003668 <MX_SPI3_Init+0xdc>)
 8003622:	4912      	ldr	r1, [pc, #72]	@ (800366c <MX_SPI3_Init+0xe0>)
 8003624:	4620      	mov	r0, r4
 8003626:	f003 fb6d 	bl	8006d04 <HAL_DMAEx_List_LinkQ>
  __HAL_LINKDMA(&hspi3, hdmarx, handle_GPDMA1_Channel6);
 800362a:	4b0c      	ldr	r3, [pc, #48]	@ (800365c <MX_SPI3_Init+0xd0>)
 800362c:	f8c3 4084 	str.w	r4, [r3, #132]	@ 0x84
 8003630:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8003632:	b004      	add	sp, #16
 8003634:	bd10      	pop	{r4, pc}
  case 1: hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003636:	4b09      	ldr	r3, [pc, #36]	@ (800365c <MX_SPI3_Init+0xd0>)
 8003638:	2200      	movs	r2, #0
 800363a:	611a      	str	r2, [r3, #16]
  	  	  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800363c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003640:	615a      	str	r2, [r3, #20]
  	  	  break;
 8003642:	e7c5      	b.n	80035d0 <MX_SPI3_Init+0x44>
  case 2: hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003644:	4b05      	ldr	r3, [pc, #20]	@ (800365c <MX_SPI3_Init+0xd0>)
 8003646:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800364a:	611a      	str	r2, [r3, #16]
  	  	  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800364c:	2200      	movs	r2, #0
 800364e:	615a      	str	r2, [r3, #20]
  	  	  break;
 8003650:	e7be      	b.n	80035d0 <MX_SPI3_Init+0x44>
    Error_Handler();
 8003652:	f7ff fdaf 	bl	80031b4 <Error_Handler>
    Error_Handler();
 8003656:	f7ff fdad 	bl	80031b4 <Error_Handler>
 800365a:	bf00      	nop
 800365c:	200106a0 	.word	0x200106a0
 8003660:	46002000 	.word	0x46002000
 8003664:	2000c1d4 	.word	0x2000c1d4
 8003668:	2001051c 	.word	0x2001051c
 800366c:	2000fe14 	.word	0x2000fe14

08003670 <main>:
{
 8003670:	b508      	push	{r3, lr}
  HAL_Init();
 8003672:	f001 f803 	bl	800467c <HAL_Init>
  SystemClock_Config();
 8003676:	f7ff fe7b 	bl	8003370 <SystemClock_Config>
  SystemCoreClockUpdate();
 800367a:	f000 fd2b 	bl	80040d4 <SystemCoreClockUpdate>
  SystemPower_Config();
 800367e:	f7ff fda5 	bl	80031cc <SystemPower_Config>
  HAL_PWREx_DisableUCPDDeadBattery();
 8003682:	f006 fa47 	bl	8009b14 <HAL_PWREx_DisableUCPDDeadBattery>
  MX_GPDMA1_Init();
 8003686:	f7ff fdc7 	bl	8003218 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 800368a:	f7ff fe21 	bl	80032d0 <MX_ICACHE_Init>
  MX_DCACHE1_Init();	/* just for external memory */
 800368e:	f7ff fe2d 	bl	80032ec <MX_DCACHE1_Init>
  MX_I2C2_Init();
 8003692:	f7ff fe3b 	bl	800330c <MX_I2C2_Init>
  CFG_Read();
 8003696:	f7fd fe49 	bl	800132c <CFG_Read>
  MX_GPIO_Init();
 800369a:	f7ff fc9b 	bl	8002fd4 <MX_GPIO_Init>
  MX_USART1_UART_Init();	/* it conflicts with SAI1 for CODEC! */
 800369e:	f7ff ff2b 	bl	80034f8 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 80036a2:	f7ff feb1 	bl	8003408 <MX_OCTOSPI1_Init>
  MX_SPI3_Init();
 80036a6:	f7ff ff71 	bl	800358c <MX_SPI3_Init>
  MEM_PoolInit();
 80036aa:	f7fd fa2b 	bl	8000b04 <MEM_PoolInit>
  USBPD_PreInitOs();
 80036ae:	f011 f927 	bl	8014900 <USBPD_PreInitOs>
  MX_ThreadX_Init();
 80036b2:	f7fe fa85 	bl	8001bc0 <MX_ThreadX_Init>
  while (1)
 80036b6:	e7fe      	b.n	80036b6 <main+0x46>

080036b8 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036b8:	b500      	push	{lr}
 80036ba:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 80036bc:	4b08      	ldr	r3, [pc, #32]	@ (80036e0 <HAL_MspInit+0x28>)
 80036be:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80036c2:	f042 0204 	orr.w	r2, r2, #4
 80036c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80036ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_EnableVddA();
 80036d6:	f006 fa01 	bl	8009adc <HAL_PWREx_EnableVddA>
}
 80036da:	b003      	add	sp, #12
 80036dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80036e0:	46020c00 	.word	0x46020c00

080036e4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80036e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036e8:	b0c3      	sub	sp, #268	@ 0x10c
 80036ea:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	2100      	movs	r1, #0
 80036ee:	913d      	str	r1, [sp, #244]	@ 0xf4
 80036f0:	913e      	str	r1, [sp, #248]	@ 0xf8
 80036f2:	913f      	str	r1, [sp, #252]	@ 0xfc
 80036f4:	9140      	str	r1, [sp, #256]	@ 0x100
 80036f6:	9141      	str	r1, [sp, #260]	@ 0x104
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036f8:	22d8      	movs	r2, #216	@ 0xd8
 80036fa:	a806      	add	r0, sp, #24
 80036fc:	f012 fa54 	bl	8015ba8 <memset>
  if(hospi->Instance==OCTOSPI1)
 8003700:	6822      	ldr	r2, [r4, #0]
 8003702:	4b89      	ldr	r3, [pc, #548]	@ (8003928 <HAL_OSPI_MspInit+0x244>)
 8003704:	429a      	cmp	r2, r3
 8003706:	d002      	beq.n	800370e <HAL_OSPI_MspInit+0x2a>
    /* OCTOSPI2 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
#endif
  }
}
 8003708:	b043      	add	sp, #268	@ 0x10c
 800370a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI|RCC_PERIPHCLK_SAI1;
 800370e:	4a87      	ldr	r2, [pc, #540]	@ (800392c <HAL_OSPI_MspInit+0x248>)
 8003710:	2300      	movs	r3, #0
 8003712:	e9cd 2306 	strd	r2, r3, [sp, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8003716:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800371a:	9335      	str	r3, [sp, #212]	@ 0xd4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 800371c:	2303      	movs	r3, #3
 800371e:	9308      	str	r3, [sp, #32]
    PeriphClkInit.PLL2.PLL2M = 2;		//we have 16 MHz XTAL
 8003720:	2302      	movs	r3, #2
 8003722:	9309      	str	r3, [sp, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2N = 50;		//40 = 160 MHz, 50 = 200 MHz - the max. for QSPI
 8003724:	2232      	movs	r2, #50	@ 0x32
 8003726:	920a      	str	r2, [sp, #40]	@ 0x28
    PeriphClkInit.PLL2.PLL2P = 2;		//SAI1, 50 MHz
 8003728:	930b      	str	r3, [sp, #44]	@ 0x2c
    PeriphClkInit.PLL2.PLL2Q = 2;		//QSPI: 160 MHz or 200 MHz
 800372a:	930c      	str	r3, [sp, #48]	@ 0x30
    PeriphClkInit.PLL2.PLL2R = 2;		//not used
 800372c:	930d      	str	r3, [sp, #52]	@ 0x34
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 800372e:	230c      	movs	r3, #12
 8003730:	930e      	str	r3, [sp, #56]	@ 0x38
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8003732:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003736:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003738:	a806      	add	r0, sp, #24
 800373a:	f007 fb3b 	bl	800adb4 <HAL_RCCEx_PeriphCLKConfig>
 800373e:	2800      	cmp	r0, #0
 8003740:	f040 80e6 	bne.w	8003910 <HAL_OSPI_MspInit+0x22c>
    memset(&PeriphClkInit, 0, sizeof(PeriphClkInit));
 8003744:	22d8      	movs	r2, #216	@ 0xd8
 8003746:	2100      	movs	r1, #0
 8003748:	a806      	add	r0, sp, #24
 800374a:	f012 fa2d 	bl	8015ba8 <memset>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800374e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003752:	2300      	movs	r3, #0
 8003754:	e9cd 2306 	strd	r2, r3, [sp, #24]
    PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL3;
 8003758:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800375c:	932e      	str	r3, [sp, #184]	@ 0xb8
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 800375e:	2303      	movs	r3, #3
 8003760:	9311      	str	r3, [sp, #68]	@ 0x44
    PeriphClkInit.PLL3.PLL3M = 1;
 8003762:	2301      	movs	r3, #1
 8003764:	9312      	str	r3, [sp, #72]	@ 0x48
    PeriphClkInit.PLL3.PLL3N = 36;					//36;			36;
 8003766:	2324      	movs	r3, #36	@ 0x24
 8003768:	9313      	str	r3, [sp, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3P = 24;					//96; 			24;		//SAI2
 800376a:	2318      	movs	r3, #24
 800376c:	9314      	str	r3, [sp, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3Q = 24;											//ADF1
 800376e:	9315      	str	r3, [sp, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3R = 2;
 8003770:	2302      	movs	r3, #2
 8003772:	9316      	str	r3, [sp, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_1;
 8003774:	230c      	movs	r3, #12
 8003776:	9317      	str	r3, [sp, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3FRACN = 7080;			//7080			7078; -->
 8003778:	f641 33a8 	movw	r3, #7080	@ 0x1ba8
 800377c:	9318      	str	r3, [sp, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVP;
 800377e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003782:	9319      	str	r3, [sp, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003784:	a806      	add	r0, sp, #24
 8003786:	f007 fb15 	bl	800adb4 <HAL_RCCEx_PeriphCLKConfig>
 800378a:	2800      	cmp	r0, #0
 800378c:	f040 80c3 	bne.w	8003916 <HAL_OSPI_MspInit+0x232>
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8003790:	4b67      	ldr	r3, [pc, #412]	@ (8003930 <HAL_OSPI_MspInit+0x24c>)
 8003792:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003796:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800379a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800379e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80037a2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80037a6:	9201      	str	r2, [sp, #4]
 80037a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80037aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80037ae:	f042 0210 	orr.w	r2, r2, #16
 80037b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80037b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80037ba:	f002 0210 	and.w	r2, r2, #16
 80037be:	9202      	str	r2, [sp, #8]
 80037c0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80037ce:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80037d2:	f002 0201 	and.w	r2, r2, #1
 80037d6:	9203      	str	r2, [sp, #12]
 80037d8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037da:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80037de:	f042 0202 	orr.w	r2, r2, #2
 80037e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80037e6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80037ea:	f002 0202 	and.w	r2, r2, #2
 80037ee:	9204      	str	r2, [sp, #16]
 80037f0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037f2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80037f6:	f042 0210 	orr.w	r2, r2, #16
 80037fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80037fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	9305      	str	r3, [sp, #20]
 8003808:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800380a:	4f4a      	ldr	r7, [pc, #296]	@ (8003934 <HAL_OSPI_MspInit+0x250>)
 800380c:	2201      	movs	r2, #1
 800380e:	2104      	movs	r1, #4
 8003810:	4638      	mov	r0, r7
 8003812:	f003 fc6b 	bl	80070ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8003816:	2201      	movs	r2, #1
 8003818:	4611      	mov	r1, r2
 800381a:	4638      	mov	r0, r7
 800381c:	f003 fc66 	bl	80070ec <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2;
 8003820:	2305      	movs	r3, #5
 8003822:	933d      	str	r3, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003824:	f04f 0801 	mov.w	r8, #1
 8003828:	f8cd 80f8 	str.w	r8, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382c:	2500      	movs	r5, #0
 800382e:	953f      	str	r5, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Speed = gCFGparams.QSPIspeed;		//GPIO_SPEED_FREQ_LOW;
 8003830:	4e41      	ldr	r6, [pc, #260]	@ (8003938 <HAL_OSPI_MspInit+0x254>)
 8003832:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003834:	9340      	str	r3, [sp, #256]	@ 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003836:	a93d      	add	r1, sp, #244	@ 0xf4
 8003838:	4638      	mov	r0, r7
 800383a:	f003 fac7 	bl	8006dcc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800383e:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8003842:	4642      	mov	r2, r8
 8003844:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003848:	4638      	mov	r0, r7
 800384a:	f003 fc4f 	bl	80070ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800384e:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 8003948 <HAL_OSPI_MspInit+0x264>
 8003852:	4642      	mov	r2, r8
 8003854:	2140      	movs	r1, #64	@ 0x40
 8003856:	4648      	mov	r0, r9
 8003858:	f003 fc48 	bl	80070ec <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800385c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003860:	933d      	str	r3, [sp, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003862:	a93d      	add	r1, sp, #244	@ 0xf4
 8003864:	4638      	mov	r0, r7
 8003866:	f003 fab1 	bl	8006dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800386a:	2340      	movs	r3, #64	@ 0x40
 800386c:	933d      	str	r3, [sp, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800386e:	a93d      	add	r1, sp, #244	@ 0xf4
 8003870:	4648      	mov	r0, r9
 8003872:	f003 faab 	bl	8006dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8003876:	f240 4301 	movw	r3, #1025	@ 0x401
 800387a:	933d      	str	r3, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387c:	f04f 0902 	mov.w	r9, #2
 8003880:	f8cd 90f8 	str.w	r9, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003884:	953f      	str	r5, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Speed = gCFGparams.QSPIspeed;		//GPIO_SPEED_FREQ_VERY_HIGH;
 8003886:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003888:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800388a:	f04f 080a 	mov.w	r8, #10
 800388e:	f8cd 8104 	str.w	r8, [sp, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003892:	a93d      	add	r1, sp, #244	@ 0xf4
 8003894:	4638      	mov	r0, r7
 8003896:	f003 fa99 	bl	8006dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800389a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800389e:	933d      	str	r3, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a0:	f8cd 90f8 	str.w	r9, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a4:	953f      	str	r5, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Speed = gCFGparams.QSPIspeed;		//GPIO_SPEED_FREQ_VERY_HIGH;
 80038a6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80038a8:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80038aa:	f8cd 8104 	str.w	r8, [sp, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038ae:	a93d      	add	r1, sp, #244	@ 0xf4
 80038b0:	4822      	ldr	r0, [pc, #136]	@ (800393c <HAL_OSPI_MspInit+0x258>)
 80038b2:	f003 fa8b 	bl	8006dcc <HAL_GPIO_Init>
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 80038b6:	4822      	ldr	r0, [pc, #136]	@ (8003940 <HAL_OSPI_MspInit+0x25c>)
 80038b8:	4b22      	ldr	r3, [pc, #136]	@ (8003944 <HAL_OSPI_MspInit+0x260>)
 80038ba:	6003      	str	r3, [r0, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_OCTOSPI1;
 80038bc:	2328      	movs	r3, #40	@ 0x28
 80038be:	6043      	str	r3, [r0, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80038c0:	6085      	str	r5, [r0, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_MEMORY_TO_PERIPH;			//DMA_PERIPH_TO_MEMORY;
 80038c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038c6:	60c3      	str	r3, [r0, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_DINC_INCREMENTED;				//DMA_SINC_FIXED;
 80038c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80038cc:	6103      	str	r3, [r0, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_SINC_FIXED;					//DMA_DINC_INCREMENTED;
 80038ce:	6145      	str	r5, [r0, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;		//DMA_SRC_DATAWIDTH_WORD;
 80038d0:	6185      	str	r5, [r0, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_SRC_DATAWIDTH_BYTE;	//DMA_DEST_DATAWIDTH_WORD;
 80038d2:	61c5      	str	r5, [r0, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_HIGH_PRIORITY;
 80038d4:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 80038d8:	6203      	str	r3, [r0, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 4;
 80038da:	2304      	movs	r3, #4
 80038dc:	6243      	str	r3, [r0, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 4;
 80038de:	6283      	str	r3, [r0, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80038e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80038e4:	62c3      	str	r3, [r0, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80038e6:	6305      	str	r5, [r0, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 80038e8:	6345      	str	r5, [r0, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 80038ea:	f002 fc43 	bl	8006174 <HAL_DMA_Init>
 80038ee:	b9a8      	cbnz	r0, 800391c <HAL_OSPI_MspInit+0x238>
    __HAL_LINKDMA(hospi, hdma, handle_GPDMA1_Channel12);
 80038f0:	4813      	ldr	r0, [pc, #76]	@ (8003940 <HAL_OSPI_MspInit+0x25c>)
 80038f2:	64e0      	str	r0, [r4, #76]	@ 0x4c
 80038f4:	65c4      	str	r4, [r0, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 80038f6:	2110      	movs	r1, #16
 80038f8:	f002 fe89 	bl	800660e <HAL_DMA_ConfigChannelAttributes>
 80038fc:	b988      	cbnz	r0, 8003922 <HAL_OSPI_MspInit+0x23e>
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 80038fe:	2200      	movs	r2, #0
 8003900:	4611      	mov	r1, r2
 8003902:	204c      	movs	r0, #76	@ 0x4c
 8003904:	f002 fa18 	bl	8005d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8003908:	204c      	movs	r0, #76	@ 0x4c
 800390a:	f002 fa25 	bl	8005d58 <HAL_NVIC_EnableIRQ>
}
 800390e:	e6fb      	b.n	8003708 <HAL_OSPI_MspInit+0x24>
       Error_Handler();
 8003910:	f7ff fc50 	bl	80031b4 <Error_Handler>
 8003914:	e716      	b.n	8003744 <HAL_OSPI_MspInit+0x60>
          Error_Handler();
 8003916:	f7ff fc4d 	bl	80031b4 <Error_Handler>
 800391a:	e739      	b.n	8003790 <HAL_OSPI_MspInit+0xac>
      Error_Handler();
 800391c:	f7ff fc4a 	bl	80031b4 <Error_Handler>
 8003920:	e7e6      	b.n	80038f0 <HAL_OSPI_MspInit+0x20c>
      Error_Handler();
 8003922:	f7ff fc47 	bl	80031b4 <Error_Handler>
 8003926:	e7ea      	b.n	80038fe <HAL_OSPI_MspInit+0x21a>
 8003928:	420d1400 	.word	0x420d1400
 800392c:	04002000 	.word	0x04002000
 8003930:	46020c00 	.word	0x46020c00
 8003934:	42020000 	.word	0x42020000
 8003938:	2000c1d4 	.word	0x2000c1d4
 800393c:	42021000 	.word	0x42021000
 8003940:	200104a4 	.word	0x200104a4
 8003944:	40020650 	.word	0x40020650
 8003948:	42020800 	.word	0x42020800

0800394c <HAL_OSPI_MspDeInit>:
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
  if(hospi->Instance==OCTOSPI1)
 800394c:	6802      	ldr	r2, [r0, #0]
 800394e:	4b14      	ldr	r3, [pc, #80]	@ (80039a0 <HAL_OSPI_MspDeInit+0x54>)
 8003950:	429a      	cmp	r2, r3
 8003952:	d000      	beq.n	8003956 <HAL_OSPI_MspDeInit+0xa>
 8003954:	4770      	bx	lr
{
 8003956:	b510      	push	{r4, lr}
 8003958:	4604      	mov	r4, r0
  {
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 800395a:	4b12      	ldr	r3, [pc, #72]	@ (80039a4 <HAL_OSPI_MspDeInit+0x58>)
 800395c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003960:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8003964:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8003968:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800396c:	f022 0210 	bic.w	r2, r2, #16
 8003970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    PE12     ------> OCTOSPIM_P1_IO0
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    PB10     ------> OCTOSPIM_P1_CLK
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8003974:	2104      	movs	r1, #4
 8003976:	480c      	ldr	r0, [pc, #48]	@ (80039a8 <HAL_OSPI_MspDeInit+0x5c>)
 8003978:	f003 fb36 	bl	8006fe8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_10);
 800397c:	f240 4101 	movw	r1, #1025	@ 0x401
 8003980:	480a      	ldr	r0, [pc, #40]	@ (80039ac <HAL_OSPI_MspDeInit+0x60>)
 8003982:	f003 fb31 	bl	8006fe8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15);
 8003986:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 800398a:	4809      	ldr	r0, [pc, #36]	@ (80039b0 <HAL_OSPI_MspDeInit+0x64>)
 800398c:	f003 fb2c 	bl	8006fe8 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(hospi->hdma);
 8003990:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003992:	f002 fc1f 	bl	80061d4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8003996:	204c      	movs	r0, #76	@ 0x4c
 8003998:	f002 f9e2 	bl	8005d60 <HAL_NVIC_DisableIRQ>
  }
}
 800399c:	bd10      	pop	{r4, pc}
 800399e:	bf00      	nop
 80039a0:	420d1400 	.word	0x420d1400
 80039a4:	46020c00 	.word	0x46020c00
 80039a8:	42020000 	.word	0x42020000
 80039ac:	42020400 	.word	0x42020400
 80039b0:	42021000 	.word	0x42021000

080039b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039b8:	b0be      	sub	sp, #248	@ 0xf8
 80039ba:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039bc:	2100      	movs	r1, #0
 80039be:	9139      	str	r1, [sp, #228]	@ 0xe4
 80039c0:	913a      	str	r1, [sp, #232]	@ 0xe8
 80039c2:	913b      	str	r1, [sp, #236]	@ 0xec
 80039c4:	913c      	str	r1, [sp, #240]	@ 0xf0
 80039c6:	913d      	str	r1, [sp, #244]	@ 0xf4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039c8:	22d8      	movs	r2, #216	@ 0xd8
 80039ca:	a802      	add	r0, sp, #8
 80039cc:	f012 f8ec 	bl	8015ba8 <memset>
  if(huart->Instance==USART1)
 80039d0:	6822      	ldr	r2, [r4, #0]
 80039d2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac0 <HAL_UART_MspInit+0x10c>)
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d002      	beq.n	80039de <HAL_UART_MspInit+0x2a>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  }
}
 80039d8:	b03e      	add	sp, #248	@ 0xf8
 80039da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80039de:	2201      	movs	r2, #1
 80039e0:	2300      	movs	r3, #0
 80039e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039e6:	a802      	add	r0, sp, #8
 80039e8:	f007 f9e4 	bl	800adb4 <HAL_RCCEx_PeriphCLKConfig>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d15e      	bne.n	8003aae <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART1_CLK_ENABLE();
 80039f0:	4b34      	ldr	r3, [pc, #208]	@ (8003ac4 <HAL_UART_MspInit+0x110>)
 80039f2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80039f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039fa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80039fe:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003a02:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003a06:	9200      	str	r2, [sp, #0]
 8003a08:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a0a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8003a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a22:	f44f 6880 	mov.w	r8, #1024	@ 0x400
 8003a26:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2a:	2602      	movs	r6, #2
 8003a2c:	963a      	str	r6, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;			//necessary: otherwise all hangs if UART1 Rx is floating!
 8003a2e:	2701      	movs	r7, #1
 8003a30:	973b      	str	r7, [sp, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a32:	963c      	str	r6, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a34:	f04f 0a07 	mov.w	sl, #7
 8003a38:	f8cd a0f4 	str.w	sl, [sp, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3c:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8003ad0 <HAL_UART_MspInit+0x11c>
 8003a40:	a939      	add	r1, sp, #228	@ 0xe4
 8003a42:	4648      	mov	r0, r9
 8003a44:	f003 f9c2 	bl	8006dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a4c:	9339      	str	r3, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;		//Tx has a level shifter
 8003a4e:	963a      	str	r6, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	2500      	movs	r5, #0
 8003a52:	953b      	str	r5, [sp, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a54:	963c      	str	r6, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a56:	f8cd a0f4 	str.w	sl, [sp, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5a:	a939      	add	r1, sp, #228	@ 0xe4
 8003a5c:	4648      	mov	r0, r9
 8003a5e:	f003 f9b5 	bl	8006dcc <HAL_GPIO_Init>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8003a62:	4819      	ldr	r0, [pc, #100]	@ (8003ac8 <HAL_UART_MspInit+0x114>)
 8003a64:	4b19      	ldr	r3, [pc, #100]	@ (8003acc <HAL_UART_MspInit+0x118>)
 8003a66:	6003      	str	r3, [r0, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8003a68:	2319      	movs	r3, #25
 8003a6a:	6043      	str	r3, [r0, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003a6c:	6085      	str	r5, [r0, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a6e:	f8c0 800c 	str.w	r8, [r0, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 8003a72:	2308      	movs	r3, #8
 8003a74:	6103      	str	r3, [r0, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8003a76:	6145      	str	r5, [r0, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8003a78:	6185      	str	r5, [r0, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8003a7a:	61c5      	str	r5, [r0, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8003a7c:	6205      	str	r5, [r0, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8003a7e:	6247      	str	r7, [r0, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8003a80:	6287      	str	r7, [r0, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8003a82:	62c5      	str	r5, [r0, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003a84:	6305      	str	r5, [r0, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8003a86:	6345      	str	r5, [r0, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8003a88:	f002 fb74 	bl	8006174 <HAL_DMA_Init>
 8003a8c:	b990      	cbnz	r0, 8003ab4 <HAL_UART_MspInit+0x100>
    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel0);
 8003a8e:	480e      	ldr	r0, [pc, #56]	@ (8003ac8 <HAL_UART_MspInit+0x114>)
 8003a90:	67e0      	str	r0, [r4, #124]	@ 0x7c
 8003a92:	65c4      	str	r4, [r0, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003a94:	2110      	movs	r1, #16
 8003a96:	f002 fdba 	bl	800660e <HAL_DMA_ConfigChannelAttributes>
 8003a9a:	b970      	cbnz	r0, 8003aba <HAL_UART_MspInit+0x106>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2106      	movs	r1, #6
 8003aa0:	203d      	movs	r0, #61	@ 0x3d
 8003aa2:	f002 f949 	bl	8005d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003aa6:	203d      	movs	r0, #61	@ 0x3d
 8003aa8:	f002 f956 	bl	8005d58 <HAL_NVIC_EnableIRQ>
}
 8003aac:	e794      	b.n	80039d8 <HAL_UART_MspInit+0x24>
      Error_Handler();
 8003aae:	f7ff fb81 	bl	80031b4 <Error_Handler>
 8003ab2:	e79d      	b.n	80039f0 <HAL_UART_MspInit+0x3c>
      Error_Handler();
 8003ab4:	f7ff fb7e 	bl	80031b4 <Error_Handler>
 8003ab8:	e7e9      	b.n	8003a8e <HAL_UART_MspInit+0xda>
      Error_Handler();
 8003aba:	f7ff fb7b 	bl	80031b4 <Error_Handler>
 8003abe:	e7ed      	b.n	8003a9c <HAL_UART_MspInit+0xe8>
 8003ac0:	40013800 	.word	0x40013800
 8003ac4:	46020c00 	.word	0x46020c00
 8003ac8:	20010594 	.word	0x20010594
 8003acc:	40020050 	.word	0x40020050
 8003ad0:	42020000 	.word	0x42020000

08003ad4 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART1)
 8003ad4:	6802      	ldr	r2, [r0, #0]
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b08 <HAL_UART_MspDeInit+0x34>)
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d000      	beq.n	8003ade <HAL_UART_MspDeInit+0xa>
 8003adc:	4770      	bx	lr
{
 8003ade:	b510      	push	{r4, lr}
 8003ae0:	4604      	mov	r4, r0
  {
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b0c <HAL_UART_MspDeInit+0x38>)
 8003ae4:	f8d2 30a4 	ldr.w	r3, [r2, #164]	@ 0xa4
 8003ae8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003aec:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003af0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003af4:	4806      	ldr	r0, [pc, #24]	@ (8003b10 <HAL_UART_MspDeInit+0x3c>)
 8003af6:	f003 fa77 	bl	8006fe8 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(huart->hdmatx);
 8003afa:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8003afc:	f002 fb6a 	bl	80061d4 <HAL_DMA_DeInit>

    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003b00:	203d      	movs	r0, #61	@ 0x3d
 8003b02:	f002 f92d 	bl	8005d60 <HAL_NVIC_DisableIRQ>
  }
}
 8003b06:	bd10      	pop	{r4, pc}
 8003b08:	40013800 	.word	0x40013800
 8003b0c:	46020c00 	.word	0x46020c00
 8003b10:	42020000 	.word	0x42020000

08003b14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b14:	b570      	push	{r4, r5, r6, lr}
 8003b16:	b0c2      	sub	sp, #264	@ 0x108
 8003b18:	4604      	mov	r4, r0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	913d      	str	r1, [sp, #244]	@ 0xf4
 8003b1e:	913e      	str	r1, [sp, #248]	@ 0xf8
 8003b20:	913f      	str	r1, [sp, #252]	@ 0xfc
 8003b22:	9140      	str	r1, [sp, #256]	@ 0x100
 8003b24:	9141      	str	r1, [sp, #260]	@ 0x104
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b26:	22d8      	movs	r2, #216	@ 0xd8
 8003b28:	a806      	add	r0, sp, #24
 8003b2a:	f012 f83d 	bl	8015ba8 <memset>

	if (hspi->Instance == SPI3)
 8003b2e:	6822      	ldr	r2, [r4, #0]
 8003b30:	4b45      	ldr	r3, [pc, #276]	@ (8003c48 <HAL_SPI_MspInit+0x134>)
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d005      	beq.n	8003b42 <HAL_SPI_MspInit+0x2e>
	    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
	    HAL_NVIC_EnableIRQ(SPI3_IRQn);
#endif
	}

	if (hspi->Instance == SPI1)
 8003b36:	6822      	ldr	r2, [r4, #0]
 8003b38:	4b44      	ldr	r3, [pc, #272]	@ (8003c4c <HAL_SPI_MspInit+0x138>)
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d035      	beq.n	8003baa <HAL_SPI_MspInit+0x96>
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;				//GPIO_SPEED_FREQ_LOW;
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	}
}
 8003b3e:	b042      	add	sp, #264	@ 0x108
 8003b40:	bd70      	pop	{r4, r5, r6, pc}
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003b42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b46:	2300      	movs	r3, #0
 8003b48:	e9cd 2306 	strd	r2, r3, [sp, #24]
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b4c:	a806      	add	r0, sp, #24
 8003b4e:	f007 f931 	bl	800adb4 <HAL_RCCEx_PeriphCLKConfig>
 8003b52:	bb38      	cbnz	r0, 8003ba4 <HAL_SPI_MspInit+0x90>
	    __HAL_RCC_SPI3_CLK_ENABLE();
 8003b54:	4b3e      	ldr	r3, [pc, #248]	@ (8003c50 <HAL_SPI_MspInit+0x13c>)
 8003b56:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8003b5a:	f042 0220 	orr.w	r2, r2, #32
 8003b5e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8003b62:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8003b66:	f002 0220 	and.w	r2, r2, #32
 8003b6a:	9201      	str	r2, [sp, #4]
 8003b6c:	9a01      	ldr	r2, [sp, #4]
	    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003b72:	f042 0204 	orr.w	r2, r2, #4
 8003b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8003b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	9302      	str	r3, [sp, #8]
 8003b84:	9b02      	ldr	r3, [sp, #8]
	    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003b86:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003b8a:	933d      	str	r3, [sp, #244]	@ 0xf4
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	933e      	str	r3, [sp, #248]	@ 0xf8
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2200      	movs	r2, #0
 8003b92:	923f      	str	r2, [sp, #252]	@ 0xfc
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b94:	9340      	str	r3, [sp, #256]	@ 0x100
	    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b96:	2306      	movs	r3, #6
 8003b98:	9341      	str	r3, [sp, #260]	@ 0x104
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b9a:	a93d      	add	r1, sp, #244	@ 0xf4
 8003b9c:	482d      	ldr	r0, [pc, #180]	@ (8003c54 <HAL_SPI_MspInit+0x140>)
 8003b9e:	f003 f915 	bl	8006dcc <HAL_GPIO_Init>
 8003ba2:	e7c8      	b.n	8003b36 <HAL_SPI_MspInit+0x22>
			Error_Handler();
 8003ba4:	f7ff fb06 	bl	80031b4 <Error_Handler>
 8003ba8:	e7d4      	b.n	8003b54 <HAL_SPI_MspInit+0x40>
	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003baa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
	    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8003bb4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003bb8:	9337      	str	r3, [sp, #220]	@ 0xdc
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bba:	a806      	add	r0, sp, #24
 8003bbc:	f007 f8fa 	bl	800adb4 <HAL_RCCEx_PeriphCLKConfig>
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	d13d      	bne.n	8003c40 <HAL_SPI_MspInit+0x12c>
	    __HAL_RCC_SPI1_CLK_ENABLE();
 8003bc4:	4b22      	ldr	r3, [pc, #136]	@ (8003c50 <HAL_SPI_MspInit+0x13c>)
 8003bc6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003bca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bce:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8003bd2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003bd6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003bda:	9203      	str	r2, [sp, #12]
 8003bdc:	9a03      	ldr	r2, [sp, #12]
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bde:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8003bea:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003bee:	f002 0201 	and.w	r2, r2, #1
 8003bf2:	9204      	str	r2, [sp, #16]
 8003bf4:	9a04      	ldr	r2, [sp, #16]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003bfa:	f042 0202 	orr.w	r2, r2, #2
 8003bfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8003c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	9305      	str	r3, [sp, #20]
 8003c0c:	9b05      	ldr	r3, [sp, #20]
	    GPIO_InitStruct.Pin = GPIO_PIN_15 /*| GPIO_PIN_7*/;			//plus PA7 as SPI1_MOSI works - PA15 just after USB working!
 8003c0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c12:	933d      	str	r3, [sp, #244]	@ 0xf4
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c14:	2402      	movs	r4, #2
 8003c16:	943e      	str	r4, [sp, #248]	@ 0xf8
	    GPIO_InitStruct.Pull = GPIO_NOPULL;	//GPIO_PULLUP;			//GPIO_NOPULL;	//WHY low if not used - even with pull-up enabled?
 8003c18:	2600      	movs	r6, #0
 8003c1a:	963f      	str	r6, [sp, #252]	@ 0xfc
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;				//GPIO_SPEED_FREQ_LOW;
 8003c1c:	9440      	str	r4, [sp, #256]	@ 0x100
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c1e:	2505      	movs	r5, #5
 8003c20:	9541      	str	r5, [sp, #260]	@ 0x104
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c22:	a93d      	add	r1, sp, #244	@ 0xf4
 8003c24:	480c      	ldr	r0, [pc, #48]	@ (8003c58 <HAL_SPI_MspInit+0x144>)
 8003c26:	f003 f8d1 	bl	8006dcc <HAL_GPIO_Init>
	    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;		//PB5 as SPI1_MOSI fails!
 8003c2a:	2338      	movs	r3, #56	@ 0x38
 8003c2c:	933d      	str	r3, [sp, #244]	@ 0xf4
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2e:	943e      	str	r4, [sp, #248]	@ 0xf8
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	963f      	str	r6, [sp, #252]	@ 0xfc
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;				//GPIO_SPEED_FREQ_LOW;
 8003c32:	9440      	str	r4, [sp, #256]	@ 0x100
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c34:	9541      	str	r5, [sp, #260]	@ 0x104
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c36:	a93d      	add	r1, sp, #244	@ 0xf4
 8003c38:	4808      	ldr	r0, [pc, #32]	@ (8003c5c <HAL_SPI_MspInit+0x148>)
 8003c3a:	f003 f8c7 	bl	8006dcc <HAL_GPIO_Init>
}
 8003c3e:	e77e      	b.n	8003b3e <HAL_SPI_MspInit+0x2a>
	      Error_Handler();
 8003c40:	f7ff fab8 	bl	80031b4 <Error_Handler>
 8003c44:	e7be      	b.n	8003bc4 <HAL_SPI_MspInit+0xb0>
 8003c46:	bf00      	nop
 8003c48:	46002000 	.word	0x46002000
 8003c4c:	40013000 	.word	0x40013000
 8003c50:	46020c00 	.word	0x46020c00
 8003c54:	42020800 	.word	0x42020800
 8003c58:	42020000 	.word	0x42020000
 8003c5c:	42020400 	.word	0x42020400

08003c60 <HAL_PCD_MspInit>:
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  }
}
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003c60:	b510      	push	{r4, lr}
 8003c62:	b0ba      	sub	sp, #232	@ 0xe8
 8003c64:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c66:	22d8      	movs	r2, #216	@ 0xd8
 8003c68:	2100      	movs	r1, #0
 8003c6a:	a804      	add	r0, sp, #16
 8003c6c:	f011 ff9c 	bl	8015ba8 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8003c70:	6822      	ldr	r2, [r4, #0]
 8003c72:	4b32      	ldr	r3, [pc, #200]	@ (8003d3c <HAL_PCD_MspInit+0xdc>)
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_PCD_MspInit+0x1c>
    HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 7, 0);
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  }
}
 8003c78:	b03a      	add	sp, #232	@ 0xe8
 8003c7a:	bd10      	pop	{r4, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c7c:	4b30      	ldr	r3, [pc, #192]	@ (8003d40 <HAL_PCD_MspInit+0xe0>)
 8003c7e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8003c82:	f042 0202 	orr.w	r2, r2, #2
 8003c86:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8003c8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	9b00      	ldr	r3, [sp, #0]
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8003c96:	2200      	movs	r2, #0
 8003c98:	2308      	movs	r3, #8
 8003c9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1_DIV2;	//RCC_USBPHYCLKSOURCE_PLL1;	//RCC_USBPHYCLKSOURCE_PLL1_DIV2;
 8003c9e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8003ca2:	9339      	str	r3, [sp, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ca4:	a804      	add	r0, sp, #16
 8003ca6:	f007 f885 	bl	800adb4 <HAL_RCCEx_PeriphCLKConfig>
 8003caa:	2800      	cmp	r0, #0
 8003cac:	d13d      	bne.n	8003d2a <HAL_PCD_MspInit+0xca>
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8003cae:	200c      	movs	r0, #12
 8003cb0:	f000 fd3c 	bl	800472c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8003cb4:	4b22      	ldr	r3, [pc, #136]	@ (8003d40 <HAL_PCD_MspInit+0xe0>)
 8003cb6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003cba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8003cc2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003cc6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003cca:	9201      	str	r2, [sp, #4]
 8003ccc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8003cce:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003cd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8003cda:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003cde:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8003ce2:	9202      	str	r2, [sp, #8]
 8003ce4:	9a02      	ldr	r2, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cea:	f013 0f04 	tst.w	r3, #4
 8003cee:	d11f      	bne.n	8003d30 <HAL_PCD_MspInit+0xd0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <HAL_PCD_MspInit+0xe0>)
 8003cf2:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003cf6:	f042 0204 	orr.w	r2, r2, #4
 8003cfa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8003cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	9303      	str	r3, [sp, #12]
 8003d08:	9b03      	ldr	r3, [sp, #12]
      HAL_PWREx_EnableVddUSB();
 8003d0a:	f005 fed7 	bl	8009abc <HAL_PWREx_EnableVddUSB>
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8003d0e:	f005 feed 	bl	8009aec <HAL_PWREx_EnableUSBHSTranceiverSupply>
    HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8003d12:	2001      	movs	r0, #1
 8003d14:	f000 fd00 	bl	8004718 <HAL_SYSCFG_EnableOTGPHY>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 7, 0);
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2107      	movs	r1, #7
 8003d1c:	2049      	movs	r0, #73	@ 0x49
 8003d1e:	f002 f80b 	bl	8005d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8003d22:	2049      	movs	r0, #73	@ 0x49
 8003d24:	f002 f818 	bl	8005d58 <HAL_NVIC_EnableIRQ>
}
 8003d28:	e7a6      	b.n	8003c78 <HAL_PCD_MspInit+0x18>
      Error_Handler();
 8003d2a:	f7ff fa43 	bl	80031b4 <Error_Handler>
 8003d2e:	e7be      	b.n	8003cae <HAL_PCD_MspInit+0x4e>
      HAL_PWREx_EnableVddUSB();
 8003d30:	f005 fec4 	bl	8009abc <HAL_PWREx_EnableVddUSB>
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8003d34:	f005 feda 	bl	8009aec <HAL_PWREx_EnableUSBHSTranceiverSupply>
 8003d38:	e7eb      	b.n	8003d12 <HAL_PCD_MspInit+0xb2>
 8003d3a:	bf00      	nop
 8003d3c:	42040000 	.word	0x42040000
 8003d40:	46020c00 	.word	0x46020c00

08003d44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d46:	b0c3      	sub	sp, #268	@ 0x10c
 8003d48:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	913d      	str	r1, [sp, #244]	@ 0xf4
 8003d4e:	913e      	str	r1, [sp, #248]	@ 0xf8
 8003d50:	913f      	str	r1, [sp, #252]	@ 0xfc
 8003d52:	9140      	str	r1, [sp, #256]	@ 0x100
 8003d54:	9141      	str	r1, [sp, #260]	@ 0x104
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d56:	22d8      	movs	r2, #216	@ 0xd8
 8003d58:	a806      	add	r0, sp, #24
 8003d5a:	f011 ff25 	bl	8015ba8 <memset>
  if(hi2c->Instance==I2C3)
 8003d5e:	6822      	ldr	r2, [r4, #0]
 8003d60:	4b5b      	ldr	r3, [pc, #364]	@ (8003ed0 <HAL_I2C_MspInit+0x18c>)
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d009      	beq.n	8003d7a <HAL_I2C_MspInit+0x36>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
  }
  if(hi2c->Instance==I2C2)
 8003d66:	6822      	ldr	r2, [r4, #0]
 8003d68:	4b5a      	ldr	r3, [pc, #360]	@ (8003ed4 <HAL_I2C_MspInit+0x190>)
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d038      	beq.n	8003de0 <HAL_I2C_MspInit+0x9c>
	    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

	    /* Peripheral clock enable */
	    __HAL_RCC_I2C2_CLK_ENABLE();
  }
  if(hi2c->Instance==I2C1)
 8003d6e:	6822      	ldr	r2, [r4, #0]
 8003d70:	4b59      	ldr	r3, [pc, #356]	@ (8003ed8 <HAL_I2C_MspInit+0x194>)
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d078      	beq.n	8003e68 <HAL_I2C_MspInit+0x124>
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

      /* Peripheral clock enable */
      __HAL_RCC_I2C1_CLK_ENABLE();
    }
}
 8003d76:	b043      	add	sp, #268	@ 0x10c
 8003d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003d7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d84:	a806      	add	r0, sp, #24
 8003d86:	f007 f815 	bl	800adb4 <HAL_RCCEx_PeriphCLKConfig>
 8003d8a:	bb30      	cbnz	r0, 8003dda <HAL_I2C_MspInit+0x96>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d8c:	4d53      	ldr	r5, [pc, #332]	@ (8003edc <HAL_I2C_MspInit+0x198>)
 8003d8e:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 8003d92:	f043 0304 	orr.w	r3, r3, #4
 8003d96:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
 8003d9a:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003da6:	2303      	movs	r3, #3
 8003da8:	933d      	str	r3, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003daa:	2312      	movs	r3, #18
 8003dac:	933e      	str	r3, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db2:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003db4:	2304      	movs	r3, #4
 8003db6:	9341      	str	r3, [sp, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003db8:	a93d      	add	r1, sp, #244	@ 0xf4
 8003dba:	4849      	ldr	r0, [pc, #292]	@ (8003ee0 <HAL_I2C_MspInit+0x19c>)
 8003dbc:	f003 f806 	bl	8006dcc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003dc0:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 8003dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dc8:	f8c5 30a8 	str.w	r3, [r5, #168]	@ 0xa8
 8003dcc:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 8003dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	9b01      	ldr	r3, [sp, #4]
 8003dd8:	e7c5      	b.n	8003d66 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8003dda:	f7ff f9eb 	bl	80031b4 <Error_Handler>
 8003dde:	e7d5      	b.n	8003d8c <HAL_I2C_MspInit+0x48>
	    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003de0:	4b3e      	ldr	r3, [pc, #248]	@ (8003edc <HAL_I2C_MspInit+0x198>)
 8003de2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003de6:	f042 0220 	orr.w	r2, r2, #32
 8003dea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8003dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	9302      	str	r3, [sp, #8]
 8003df8:	9b02      	ldr	r3, [sp, #8]
	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003dfa:	2280      	movs	r2, #128	@ 0x80
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e9cd 2306 	strd	r2, r3, [sp, #24]
	    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003e02:	2300      	movs	r3, #0
 8003e04:	9322      	str	r3, [sp, #136]	@ 0x88
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e06:	a806      	add	r0, sp, #24
 8003e08:	f006 ffd4 	bl	800adb4 <HAL_RCCEx_PeriphCLKConfig>
 8003e0c:	bb48      	cbnz	r0, 8003e62 <HAL_I2C_MspInit+0x11e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2104      	movs	r1, #4
 8003e12:	4834      	ldr	r0, [pc, #208]	@ (8003ee4 <HAL_I2C_MspInit+0x1a0>)
 8003e14:	f003 f96a 	bl	80070ec <HAL_GPIO_WritePin>
	    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e18:	2704      	movs	r7, #4
 8003e1a:	973d      	str	r7, [sp, #244]	@ 0xf4
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	933e      	str	r3, [sp, #248]	@ 0xf8
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	2500      	movs	r5, #0
 8003e22:	953f      	str	r5, [sp, #252]	@ 0xfc
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e24:	9540      	str	r5, [sp, #256]	@ 0x100
	    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e26:	4e30      	ldr	r6, [pc, #192]	@ (8003ee8 <HAL_I2C_MspInit+0x1a4>)
 8003e28:	a93d      	add	r1, sp, #244	@ 0xf4
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	f002 ffce 	bl	8006dcc <HAL_GPIO_Init>
	    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003e30:	2303      	movs	r3, #3
 8003e32:	933d      	str	r3, [sp, #244]	@ 0xf4
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e34:	2312      	movs	r3, #18
 8003e36:	933e      	str	r3, [sp, #248]	@ 0xf8
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	953f      	str	r5, [sp, #252]	@ 0xfc
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3a:	9540      	str	r5, [sp, #256]	@ 0x100
	    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003e3c:	9741      	str	r7, [sp, #260]	@ 0x104
	    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e3e:	a93d      	add	r1, sp, #244	@ 0xf4
 8003e40:	4630      	mov	r0, r6
 8003e42:	f002 ffc3 	bl	8006dcc <HAL_GPIO_Init>
	    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e46:	4b25      	ldr	r3, [pc, #148]	@ (8003edc <HAL_I2C_MspInit+0x198>)
 8003e48:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003e4c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003e50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8003e54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e5c:	9303      	str	r3, [sp, #12]
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	e785      	b.n	8003d6e <HAL_I2C_MspInit+0x2a>
	      Error_Handler();
 8003e62:	f7ff f9a7 	bl	80031b4 <Error_Handler>
 8003e66:	e7d2      	b.n	8003e0e <HAL_I2C_MspInit+0xca>
      PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003e68:	2240      	movs	r2, #64	@ 0x40
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
      PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003e70:	2300      	movs	r3, #0
 8003e72:	9321      	str	r3, [sp, #132]	@ 0x84
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e74:	a806      	add	r0, sp, #24
 8003e76:	f006 ff9d 	bl	800adb4 <HAL_RCCEx_PeriphCLKConfig>
 8003e7a:	bb30      	cbnz	r0, 8003eca <HAL_I2C_MspInit+0x186>
      __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e7c:	4c17      	ldr	r4, [pc, #92]	@ (8003edc <HAL_I2C_MspInit+0x198>)
 8003e7e:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8003e82:	f043 0302 	orr.w	r3, r3, #2
 8003e86:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8003e8a:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	9304      	str	r3, [sp, #16]
 8003e94:	9b04      	ldr	r3, [sp, #16]
      GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e96:	23c0      	movs	r3, #192	@ 0xc0
 8003e98:	933d      	str	r3, [sp, #244]	@ 0xf4
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e9a:	2312      	movs	r3, #18
 8003e9c:	933e      	str	r3, [sp, #248]	@ 0xf8
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	933f      	str	r3, [sp, #252]	@ 0xfc
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea2:	9340      	str	r3, [sp, #256]	@ 0x100
      GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	9341      	str	r3, [sp, #260]	@ 0x104
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ea8:	a93d      	add	r1, sp, #244	@ 0xf4
 8003eaa:	480e      	ldr	r0, [pc, #56]	@ (8003ee4 <HAL_I2C_MspInit+0x1a0>)
 8003eac:	f002 ff8e 	bl	8006dcc <HAL_GPIO_Init>
      __HAL_RCC_I2C1_CLK_ENABLE();
 8003eb0:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8003eb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003eb8:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8003ebc:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8003ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ec4:	9305      	str	r3, [sp, #20]
 8003ec6:	9b05      	ldr	r3, [sp, #20]
}
 8003ec8:	e755      	b.n	8003d76 <HAL_I2C_MspInit+0x32>
        Error_Handler();
 8003eca:	f7ff f973 	bl	80031b4 <Error_Handler>
 8003ece:	e7d5      	b.n	8003e7c <HAL_I2C_MspInit+0x138>
 8003ed0:	46002800 	.word	0x46002800
 8003ed4:	40005800 	.word	0x40005800
 8003ed8:	40005400 	.word	0x40005400
 8003edc:	46020c00 	.word	0x46020c00
 8003ee0:	42020800 	.word	0x42020800
 8003ee4:	42020400 	.word	0x42020400
 8003ee8:	42021400 	.word	0x42021400

08003eec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eec:	b530      	push	{r4, r5, lr}
 8003eee:	b089      	sub	sp, #36	@ 0x24
 8003ef0:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f70 <HAL_InitTick+0x84>)
 8003ef4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003ef8:	f042 0210 	orr.w	r2, r2, #16
 8003efc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8003f00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	9b00      	ldr	r3, [sp, #0]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f0c:	a901      	add	r1, sp, #4
 8003f0e:	a802      	add	r0, sp, #8
 8003f10:	f006 fe42 	bl	800ab98 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003f14:	f006 fe10 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f18:	4a16      	ldr	r2, [pc, #88]	@ (8003f74 <HAL_InitTick+0x88>)
 8003f1a:	fba2 2300 	umull	r2, r3, r2, r0
 8003f1e:	0c9b      	lsrs	r3, r3, #18
 8003f20:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003f22:	4815      	ldr	r0, [pc, #84]	@ (8003f78 <HAL_InitTick+0x8c>)
 8003f24:	4a15      	ldr	r2, [pc, #84]	@ (8003f7c <HAL_InitTick+0x90>)
 8003f26:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;	//XXXX
 8003f28:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003f2c:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;	//__HAL_TIM_CALC_PSC(160000000, 1000); //XXXX
 8003f2e:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f34:	6083      	str	r3, [r0, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8003f36:	f009 fd57 	bl	800d9e8 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8003f3a:	4605      	mov	r5, r0
 8003f3c:	b128      	cbz	r0, 8003f4a <HAL_InitTick+0x5e>
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003f3e:	2031      	movs	r0, #49	@ 0x31
 8003f40:	f001 ff0a 	bl	8005d58 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
}
 8003f44:	4628      	mov	r0, r5
 8003f46:	b009      	add	sp, #36	@ 0x24
 8003f48:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003f4a:	480b      	ldr	r0, [pc, #44]	@ (8003f78 <HAL_InitTick+0x8c>)
 8003f4c:	f009 fb3a 	bl	800d5c4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8003f50:	4605      	mov	r5, r0
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d1f3      	bne.n	8003f3e <HAL_InitTick+0x52>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f56:	2c0f      	cmp	r4, #15
 8003f58:	d901      	bls.n	8003f5e <HAL_InitTick+0x72>
        status = HAL_ERROR;
 8003f5a:	2501      	movs	r5, #1
 8003f5c:	e7ef      	b.n	8003f3e <HAL_InitTick+0x52>
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8003f5e:	2200      	movs	r2, #0
 8003f60:	4621      	mov	r1, r4
 8003f62:	2031      	movs	r0, #49	@ 0x31
 8003f64:	f001 fee8 	bl	8005d38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f68:	4b05      	ldr	r3, [pc, #20]	@ (8003f80 <HAL_InitTick+0x94>)
 8003f6a:	601c      	str	r4, [r3, #0]
 8003f6c:	e7e7      	b.n	8003f3e <HAL_InitTick+0x52>
 8003f6e:	bf00      	nop
 8003f70:	46020c00 	.word	0x46020c00
 8003f74:	431bde83 	.word	0x431bde83
 8003f78:	200107b8 	.word	0x200107b8
 8003f7c:	40001000 	.word	0x40001000
 8003f80:	20000010 	.word	0x20000010

08003f84 <NMI_Handler>:
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  while (1)
 8003f84:	e7fe      	b.n	8003f84 <NMI_Handler>

08003f86 <HardFault_Handler>:
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  while (1)
 8003f86:	e7fe      	b.n	8003f86 <HardFault_Handler>

08003f88 <MemManage_Handler>:
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  while (1)
 8003f88:	e7fe      	b.n	8003f88 <MemManage_Handler>

08003f8a <BusFault_Handler>:
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  while (1)
 8003f8a:	e7fe      	b.n	8003f8a <BusFault_Handler>

08003f8c <UsageFault_Handler>:
/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  while (1)
 8003f8c:	e7fe      	b.n	8003f8c <UsageFault_Handler>

08003f8e <DebugMon_Handler>:
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
}
 8003f8e:	4770      	bx	lr

08003f90 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8003f90:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8003f92:	4802      	ldr	r0, [pc, #8]	@ (8003f9c <GPDMA1_Channel0_IRQHandler+0xc>)
 8003f94:	f002 fa49 	bl	800642a <HAL_DMA_IRQHandler>
}
 8003f98:	bd08      	pop	{r3, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20010594 	.word	0x20010594

08003fa0 <GPDMA1_Channel6_IRQHandler>:
}
#endif

#ifdef SPI3_DMA
void GPDMA1_Channel6_IRQHandler(void)
{
 8003fa0:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel6);
 8003fa2:	4802      	ldr	r0, [pc, #8]	@ (8003fac <GPDMA1_Channel6_IRQHandler+0xc>)
 8003fa4:	f002 fa41 	bl	800642a <HAL_DMA_IRQHandler>
}
 8003fa8:	bd08      	pop	{r3, pc}
 8003faa:	bf00      	nop
 8003fac:	2001051c 	.word	0x2001051c

08003fb0 <GPDMA1_Channel4_IRQHandler>:
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel7);
}
#endif

void GPDMA1_Channel4_IRQHandler(void)
{
 8003fb0:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8003fb2:	4802      	ldr	r0, [pc, #8]	@ (8003fbc <GPDMA1_Channel4_IRQHandler+0xc>)
 8003fb4:	f002 fa39 	bl	800642a <HAL_DMA_IRQHandler>
}
 8003fb8:	bd08      	pop	{r3, pc}
 8003fba:	bf00      	nop
 8003fbc:	2001042c 	.word	0x2001042c

08003fc0 <GPDMA1_Channel5_IRQHandler>:

void GPDMA1_Channel5_IRQHandler(void)
{
 8003fc0:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8003fc2:	4802      	ldr	r0, [pc, #8]	@ (8003fcc <GPDMA1_Channel5_IRQHandler+0xc>)
 8003fc4:	f002 fa31 	bl	800642a <HAL_DMA_IRQHandler>
}
 8003fc8:	bd08      	pop	{r3, pc}
 8003fca:	bf00      	nop
 8003fcc:	200103b4 	.word	0x200103b4

08003fd0 <GPDMA1_Channel12_IRQHandler>:
#ifdef QSPI_DMA
/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt - QSPI1 DMA
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 8003fd0:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8003fd2:	4802      	ldr	r0, [pc, #8]	@ (8003fdc <GPDMA1_Channel12_IRQHandler+0xc>)
 8003fd4:	f002 fa29 	bl	800642a <HAL_DMA_IRQHandler>
}
 8003fd8:	bd08      	pop	{r3, pc}
 8003fda:	bf00      	nop
 8003fdc:	200104a4 	.word	0x200104a4

08003fe0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt - SPI3 DMA Rx
  */
void SPI3_IRQHandler(void)
{
 8003fe0:	b508      	push	{r3, lr}
  HAL_SPI_IRQHandler(&hspi3);
 8003fe2:	4802      	ldr	r0, [pc, #8]	@ (8003fec <SPI3_IRQHandler+0xc>)
 8003fe4:	f009 f9a0 	bl	800d328 <HAL_SPI_IRQHandler>
}
 8003fe8:	bd08      	pop	{r3, pc}
 8003fea:	bf00      	nop
 8003fec:	200106a0 	.word	0x200106a0

08003ff0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003ff0:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8003ff2:	4802      	ldr	r0, [pc, #8]	@ (8003ffc <TIM6_IRQHandler+0xc>)
 8003ff4:	f009 fb50 	bl	800d698 <HAL_TIM_IRQHandler>
#ifndef NUCLEO_BOARD
  if (GBothLEDs)
	  LED_Toggle(0);
#endif
}
 8003ff8:	bd08      	pop	{r3, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200107b8 	.word	0x200107b8

08004000 <USART1_IRQHandler>:
#ifndef CODEC_SAI
/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004000:	b508      	push	{r3, lr}
  HAL_UART_IRQHandler(&huart1);
 8004002:	4802      	ldr	r0, [pc, #8]	@ (800400c <USART1_IRQHandler+0xc>)
 8004004:	f009 fe74 	bl	800dcf0 <HAL_UART_IRQHandler>
}
 8004008:	bd08      	pop	{r3, pc}
 800400a:	bf00      	nop
 800400c:	2001060c 	.word	0x2001060c

08004010 <OTG_HS_IRQHandler>:
{
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
}
#else
void OTG_HS_IRQHandler(void)
{
 8004010:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8004012:	4802      	ldr	r0, [pc, #8]	@ (800401c <OTG_HS_IRQHandler+0xc>)
 8004014:	f005 f90c 	bl	8009230 <HAL_PCD_IRQHandler>
}
 8004018:	bd08      	pop	{r3, pc}
 800401a:	bf00      	nop
 800401c:	2000fea8 	.word	0x2000fea8

08004020 <UCPD1_IRQHandler>:
/* it is enabled and needed by the USB stack! */
/**
  * @brief This function handles UCPD1 global interrupt.
  */
void UCPD1_IRQHandler(void)
{
 8004020:	b508      	push	{r3, lr}
  USBPD_PORT0_IRQHandler();
 8004022:	f00b ffe5 	bl	800fff0 <USBPD_PORT0_IRQHandler>
}
 8004026:	bd08      	pop	{r3, pc}

08004028 <OCTOSPI1_IRQHandler>:

#ifdef QSPI_DMA
void OCTOSPI1_IRQHandler(void)
{
 8004028:	b508      	push	{r3, lr}
  HAL_OSPI_IRQHandler(&hospi1);
 800402a:	4802      	ldr	r0, [pc, #8]	@ (8004034 <OCTOSPI1_IRQHandler+0xc>)
 800402c:	f004 f83a 	bl	80080a4 <HAL_OSPI_IRQHandler>
}
 8004030:	bd08      	pop	{r3, pc}
 8004032:	bf00      	nop
 8004034:	20010730 	.word	0x20010730

08004038 <SYS_SetError>:

unsigned long GSysErr;

void SYS_SetError(unsigned long errCode)
{
	GSysErr |= errCode;
 8004038:	4a02      	ldr	r2, [pc, #8]	@ (8004044 <SYS_SetError+0xc>)
 800403a:	6813      	ldr	r3, [r2, #0]
 800403c:	4303      	orrs	r3, r0
 800403e:	6013      	str	r3, [r2, #0]
}
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	20010804 	.word	0x20010804

08004048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004048:	b510      	push	{r4, lr}
 800404a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800404c:	4a0c      	ldr	r2, [pc, #48]	@ (8004080 <_sbrk+0x38>)
 800404e:	490d      	ldr	r1, [pc, #52]	@ (8004084 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004050:	480d      	ldr	r0, [pc, #52]	@ (8004088 <_sbrk+0x40>)
 8004052:	6800      	ldr	r0, [r0, #0]
 8004054:	b140      	cbz	r0, 8004068 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004056:	480c      	ldr	r0, [pc, #48]	@ (8004088 <_sbrk+0x40>)
 8004058:	6800      	ldr	r0, [r0, #0]
 800405a:	4403      	add	r3, r0
 800405c:	1a52      	subs	r2, r2, r1
 800405e:	4293      	cmp	r3, r2
 8004060:	d806      	bhi.n	8004070 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004062:	4a09      	ldr	r2, [pc, #36]	@ (8004088 <_sbrk+0x40>)
 8004064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004066:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004068:	4807      	ldr	r0, [pc, #28]	@ (8004088 <_sbrk+0x40>)
 800406a:	4c08      	ldr	r4, [pc, #32]	@ (800408c <_sbrk+0x44>)
 800406c:	6004      	str	r4, [r0, #0]
 800406e:	e7f2      	b.n	8004056 <_sbrk+0xe>
    errno = ENOMEM;
 8004070:	f011 fdd8 	bl	8015c24 <__errno>
 8004074:	230c      	movs	r3, #12
 8004076:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004078:	f04f 30ff 	mov.w	r0, #4294967295
 800407c:	e7f3      	b.n	8004066 <_sbrk+0x1e>
 800407e:	bf00      	nop
 8004080:	20270000 	.word	0x20270000
 8004084:	00000400 	.word	0x00000400
 8004088:	20010808 	.word	0x20010808
 800408c:	20015930 	.word	0x20015930

08004090 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004090:	480e      	ldr	r0, [pc, #56]	@ (80040cc <SystemInit+0x3c>)
 8004092:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8004096:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800409a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800409e:	4b0c      	ldr	r3, [pc, #48]	@ (80040d0 <SystemInit+0x40>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80040a4:	2200      	movs	r2, #0
 80040a6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80040a8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80040aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80040ac:	6819      	ldr	r1, [r3, #0]
 80040ae:	f021 51a8 	bic.w	r1, r1, #352321536	@ 0x15000000
 80040b2:	f421 2110 	bic.w	r1, r1, #589824	@ 0x90000
 80040b6:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80040b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80040ba:	6819      	ldr	r1, [r3, #0]
 80040bc:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80040c0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80040c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80040c8:	6083      	str	r3, [r0, #8]
  #endif
}
 80040ca:	4770      	bx	lr
 80040cc:	e000ed00 	.word	0xe000ed00
 80040d0:	46020c00 	.word	0x46020c00

080040d4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80040d4:	b410      	push	{r4}
  uint32_t pllr, pllsource, pllm , tmp, pllfracen, msirange;
  float_t fracn1, pllvco;

  /* Get MSI Range frequency--------------------------------------------------*/
  if(READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80040d6:	4b49      	ldr	r3, [pc, #292]	@ (80041fc <SystemCoreClockUpdate+0x128>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80040de:	d116      	bne.n	800410e <SystemCoreClockUpdate+0x3a>
  {
    /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80040e0:	4b46      	ldr	r3, [pc, #280]	@ (80041fc <SystemCoreClockUpdate+0x128>)
 80040e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040e6:	f3c3 3303 	ubfx	r3, r3, #12, #4
    /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
  }

  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80040ea:	4a45      	ldr	r2, [pc, #276]	@ (8004200 <SystemCoreClockUpdate+0x12c>)
 80040ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 80040f0:	4b42      	ldr	r3, [pc, #264]	@ (80041fc <SystemCoreClockUpdate+0x128>)
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	f003 030c 	and.w	r3, r3, #12
 80040f8:	2b0c      	cmp	r3, #12
 80040fa:	d87c      	bhi.n	80041f6 <SystemCoreClockUpdate+0x122>
 80040fc:	e8df f003 	tbb	[pc, r3]
 8004100:	7b7b7b0b 	.word	0x7b7b7b0b
 8004104:	7b7b7b1a 	.word	0x7b7b7b1a
 8004108:	7b7b7b1e 	.word	0x7b7b7b1e
 800410c:	22          	.byte	0x22
 800410d:	00          	.byte	0x00
    msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800410e:	4b3b      	ldr	r3, [pc, #236]	@ (80041fc <SystemCoreClockUpdate+0x128>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	0f1b      	lsrs	r3, r3, #28
 8004114:	e7e9      	b.n	80040ea <SystemCoreClockUpdate+0x16>
  {
  case 0x00:  /* MSI used as system clock source */
    SystemCoreClock = msirange;
 8004116:	4b3b      	ldr	r3, [pc, #236]	@ (8004204 <SystemCoreClockUpdate+0x130>)
 8004118:	601a      	str	r2, [r3, #0]
    SystemCoreClock = msirange;
    break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 800411a:	4b38      	ldr	r3, [pc, #224]	@ (80041fc <SystemCoreClockUpdate+0x128>)
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	4a39      	ldr	r2, [pc, #228]	@ (8004208 <SystemCoreClockUpdate+0x134>)
 8004124:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8004126:	4a37      	ldr	r2, [pc, #220]	@ (8004204 <SystemCoreClockUpdate+0x130>)
 8004128:	6813      	ldr	r3, [r2, #0]
 800412a:	40cb      	lsrs	r3, r1
 800412c:	6013      	str	r3, [r2, #0]
}
 800412e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004132:	4770      	bx	lr
    SystemCoreClock = HSI_VALUE;
 8004134:	4b33      	ldr	r3, [pc, #204]	@ (8004204 <SystemCoreClockUpdate+0x130>)
 8004136:	4a35      	ldr	r2, [pc, #212]	@ (800420c <SystemCoreClockUpdate+0x138>)
 8004138:	601a      	str	r2, [r3, #0]
    break;
 800413a:	e7ee      	b.n	800411a <SystemCoreClockUpdate+0x46>
    SystemCoreClock = HSE_VALUE;
 800413c:	4b31      	ldr	r3, [pc, #196]	@ (8004204 <SystemCoreClockUpdate+0x130>)
 800413e:	4a33      	ldr	r2, [pc, #204]	@ (800420c <SystemCoreClockUpdate+0x138>)
 8004140:	601a      	str	r2, [r3, #0]
    break;
 8004142:	e7ea      	b.n	800411a <SystemCoreClockUpdate+0x46>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004144:	4c2d      	ldr	r4, [pc, #180]	@ (80041fc <SystemCoreClockUpdate+0x128>)
 8004146:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004148:	f000 0003 	and.w	r0, r0, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M)>> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800414c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800414e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004152:	1c59      	adds	r1, r3, #1
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN)>>RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004154:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004156:	f3c3 1c00 	ubfx	ip, r3, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN)>> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800415a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800415c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8004160:	fb0c f303 	mul.w	r3, ip, r3
 8004164:	ee07 3a10 	vmov	s14, r3
 8004168:	eeb8 7a47 	vcvt.f32.u32	s14, s14
      switch (pllsource)
 800416c:	2802      	cmp	r0, #2
 800416e:	d00d      	beq.n	800418c <SystemCoreClockUpdate+0xb8>
 8004170:	2803      	cmp	r0, #3
 8004172:	d014      	beq.n	800419e <SystemCoreClockUpdate+0xca>
 8004174:	b1e0      	cbz	r0, 80041b0 <SystemCoreClockUpdate+0xdc>
        pllvco = ((float_t)msirange / (float_t)pllm);
 8004176:	ee07 2a90 	vmov	s15, r2
 800417a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800417e:	ee07 1a90 	vmov	s15, r1
 8004182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004186:	eec6 6a27 	vdiv.f32	s13, s12, s15
        break;
 800418a:	e013      	b.n	80041b4 <SystemCoreClockUpdate+0xe0>
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm);
 800418c:	ee07 1a90 	vmov	s15, r1
 8004190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004194:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8004210 <SystemCoreClockUpdate+0x13c>
 8004198:	eec6 6a27 	vdiv.f32	s13, s12, s15
        break;
 800419c:	e00a      	b.n	80041b4 <SystemCoreClockUpdate+0xe0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm);
 800419e:	ee07 1a90 	vmov	s15, r1
 80041a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a6:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8004210 <SystemCoreClockUpdate+0x13c>
 80041aa:	eec6 6a27 	vdiv.f32	s13, s12, s15
        break;
 80041ae:	e001      	b.n	80041b4 <SystemCoreClockUpdate+0xe0>
 80041b0:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8004214 <SystemCoreClockUpdate+0x140>
      pllvco = pllvco * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + (fracn1/(float_t)0x2000) + (float_t)1U);
 80041b4:	4a11      	ldr	r2, [pc, #68]	@ (80041fc <SystemCoreClockUpdate+0x128>)
 80041b6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80041b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041bc:	ee07 3a90 	vmov	s15, r3
 80041c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c4:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8004218 <SystemCoreClockUpdate+0x144>
 80041c8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80041cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U );
 80041dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041de:	f3c2 6206 	ubfx	r2, r2, #24, #7
 80041e2:	3201      	adds	r2, #1
      SystemCoreClock = (uint32_t)((uint32_t)pllvco/pllr);
 80041e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e8:	ee17 3a90 	vmov	r3, s15
 80041ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80041f0:	4a04      	ldr	r2, [pc, #16]	@ (8004204 <SystemCoreClockUpdate+0x130>)
 80041f2:	6013      	str	r3, [r2, #0]
      break;
 80041f4:	e791      	b.n	800411a <SystemCoreClockUpdate+0x46>
    SystemCoreClock = msirange;
 80041f6:	4b03      	ldr	r3, [pc, #12]	@ (8004204 <SystemCoreClockUpdate+0x130>)
 80041f8:	601a      	str	r2, [r3, #0]
    break;
 80041fa:	e78e      	b.n	800411a <SystemCoreClockUpdate+0x46>
 80041fc:	46020c00 	.word	0x46020c00
 8004200:	080176e0 	.word	0x080176e0
 8004204:	20000008 	.word	0x20000008
 8004208:	08017728 	.word	0x08017728
 800420c:	00f42400 	.word	0x00f42400
 8004210:	4b742400 	.word	0x4b742400
 8004214:	00000000 	.word	0x00000000
 8004218:	39000000 	.word	0x39000000

0800421c <ADC_Init>:
 * but ADC2 does not exist on U575
 * ADC1 stuff has to be disabled in stm32u5xx_nucelo_usbpd_pwr.c ! (we fake the result voltage)
 */

void ADC_Init(void)
{
 800421c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800421e:	b0c1      	sub	sp, #260	@ 0x104
  ADC_ChannelConfTypeDef sConfig = {0};
 8004220:	2220      	movs	r2, #32
 8004222:	2100      	movs	r1, #0
 8004224:	a838      	add	r0, sp, #224	@ 0xe0
 8004226:	f011 fcbf 	bl	8015ba8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800422a:	22d8      	movs	r2, #216	@ 0xd8
 800422c:	2100      	movs	r1, #0
 800422e:	a802      	add	r0, sp, #8
 8004230:	f011 fcba 	bl	8015ba8 <memset>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8004234:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004238:	2300      	movs	r3, #0
 800423a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800423e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004242:	932f      	str	r3, [sp, #188]	@ 0xbc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004244:	a802      	add	r0, sp, #8
 8004246:	f006 fdb5 	bl	800adb4 <HAL_RCCEx_PeriphCLKConfig>
  {
    ////Error_Handler();
  }

  /* Peripheral clock enable */
  __HAL_RCC_ADC12_CLK_ENABLE();
 800424a:	4b28      	ldr	r3, [pc, #160]	@ (80042ec <ADC_Init+0xd0>)
 800424c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004250:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004254:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8004258:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800425c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	9b01      	ldr	r3, [sp, #4]

  /** Common config
  */
  hadc.Instance = ADC1;
 8004264:	4c22      	ldr	r4, [pc, #136]	@ (80042f0 <ADC_Init+0xd4>)
 8004266:	4b23      	ldr	r3, [pc, #140]	@ (80042f4 <ADC_Init+0xd8>)
 8004268:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;		//running with PLL2
 800426a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800426e:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_14B;
 8004270:	2500      	movs	r5, #0
 8004272:	60a5      	str	r5, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004274:	2301      	movs	r3, #1
 8004276:	6123      	str	r3, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004278:	2704      	movs	r7, #4
 800427a:	61a7      	str	r7, [r4, #24]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800427c:	7725      	strb	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 800427e:	f884 5024 	strb.w	r5, [r4, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 5;
 8004282:	2605      	movs	r6, #5
 8004284:	62a6      	str	r6, [r4, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004286:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800428a:	6365      	str	r5, [r4, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800428c:	63a5      	str	r5, [r4, #56]	@ 0x38
  hadc.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800428e:	63e5      	str	r5, [r4, #60]	@ 0x3c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004290:	6465      	str	r5, [r4, #68]	@ 0x44
  hadc.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8004292:	6525      	str	r5, [r4, #80]	@ 0x50
  hadc.Init.OversamplingMode = DISABLE;
 8004294:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004298:	4620      	mov	r0, r4
 800429a:	f000 fadb 	bl	8004854 <HAL_ADC_Init>
  {
    //Error_Handler();
  }

  /** Configure Regular Channel */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800429e:	4b16      	ldr	r3, [pc, #88]	@ (80042f8 <ADC_Init+0xdc>)
 80042a0:	9338      	str	r3, [sp, #224]	@ 0xe0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80042a2:	2306      	movs	r3, #6
 80042a4:	9339      	str	r3, [sp, #228]	@ 0xe4
  sConfig.SamplingTime = ADC_SAMPLETIME_68CYCLES;	//ADC_SAMPLETIME_1CYCLE_5;
 80042a6:	963a      	str	r6, [sp, #232]	@ 0xe8
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80042a8:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 80042ac:	963b      	str	r6, [sp, #236]	@ 0xec
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80042ae:	973c      	str	r7, [sp, #240]	@ 0xf0
  sConfig.Offset = 0;
 80042b0:	953d      	str	r5, [sp, #244]	@ 0xf4
  sConfig.OffsetSignedSaturation = DISABLE;
 80042b2:	f88d 50f9 	strb.w	r5, [sp, #249]	@ 0xf9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80042b6:	a938      	add	r1, sp, #224	@ 0xe0
 80042b8:	4620      	mov	r0, r4
 80042ba:	f000 fdc3 	bl	8004e44 <HAL_ADC_ConfigChannel>
  {
    //Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_VBAT;
 80042be:	4b0f      	ldr	r3, [pc, #60]	@ (80042fc <ADC_Init+0xe0>)
 80042c0:	9338      	str	r3, [sp, #224]	@ 0xe0
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80042c2:	230c      	movs	r3, #12
 80042c4:	9339      	str	r3, [sp, #228]	@ 0xe4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80042c6:	a938      	add	r1, sp, #224	@ 0xe0
 80042c8:	4620      	mov	r0, r4
 80042ca:	f000 fdbb 	bl	8004e44 <HAL_ADC_ConfigChannel>
  {
    //Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80042ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004300 <ADC_Init+0xe4>)
 80042d0:	9338      	str	r3, [sp, #224]	@ 0xe0
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80042d2:	2312      	movs	r3, #18
 80042d4:	9339      	str	r3, [sp, #228]	@ 0xe4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80042d6:	a938      	add	r1, sp, #224	@ 0xe0
 80042d8:	4620      	mov	r0, r4
 80042da:	f000 fdb3 	bl	8004e44 <HAL_ADC_ConfigChannel>
  {
    //Error_Handler();
  }

  HAL_ADCEx_Calibration_Start(&hadc, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80042de:	4632      	mov	r2, r6
 80042e0:	4629      	mov	r1, r5
 80042e2:	4620      	mov	r0, r4
 80042e4:	f001 fbc6 	bl	8005a74 <HAL_ADCEx_Calibration_Start>
}
 80042e8:	b041      	add	sp, #260	@ 0x104
 80042ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ec:	46020c00 	.word	0x46020c00
 80042f0:	20010824 	.word	0x20010824
 80042f4:	42028000 	.word	0x42028000
 80042f8:	80000001 	.word	0x80000001
 80042fc:	ca040000 	.word	0xca040000
 8004300:	ce080000 	.word	0xce080000

08004304 <ADC_RunOnce>:

/* ----------------------------------------------------------------- */

int ADC_RunOnce(EResultOut out, int flag)
{
 8004304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004306:	b085      	sub	sp, #20
 8004308:	4605      	mov	r5, r0
 800430a:	460e      	mov	r6, r1
	static int initDone = 0;

	if ( ! initDone)
 800430c:	4b50      	ldr	r3, [pc, #320]	@ (8004450 <ADC_RunOnce+0x14c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	b123      	cbz	r3, 800431c <ADC_RunOnce+0x18>
	{
		ADC_Init();
		initDone = 1;
	}

	HAL_ADC_Start(&hadc);
 8004312:	4850      	ldr	r0, [pc, #320]	@ (8004454 <ADC_RunOnce+0x150>)
 8004314:	f001 fa80 	bl	8005818 <HAL_ADC_Start>
	for (uint8_t i = 0; i < (sizeof(ADC_Val) / sizeof(ADC_Val[0])); i++)
 8004318:	2400      	movs	r4, #0
 800431a:	e013      	b.n	8004344 <ADC_RunOnce+0x40>
		ADC_Init();
 800431c:	f7ff ff7e 	bl	800421c <ADC_Init>
		initDone = 1;
 8004320:	4b4b      	ldr	r3, [pc, #300]	@ (8004450 <ADC_RunOnce+0x14c>)
 8004322:	2201      	movs	r2, #1
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	e7f4      	b.n	8004312 <ADC_RunOnce+0xe>
	{
		HAL_ADC_PollForConversion(&hadc, 1000);
 8004328:	4f4a      	ldr	r7, [pc, #296]	@ (8004454 <ADC_RunOnce+0x150>)
 800432a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800432e:	4638      	mov	r0, r7
 8004330:	f000 fc9c 	bl	8004c6c <HAL_ADC_PollForConversion>
		ADC_Val[i] = HAL_ADC_GetValue(&hadc);
 8004334:	4638      	mov	r0, r7
 8004336:	f000 fd81 	bl	8004e3c <HAL_ADC_GetValue>
 800433a:	4b47      	ldr	r3, [pc, #284]	@ (8004458 <ADC_RunOnce+0x154>)
 800433c:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
	for (uint8_t i = 0; i < (sizeof(ADC_Val) / sizeof(ADC_Val[0])); i++)
 8004340:	3401      	adds	r4, #1
 8004342:	b2e4      	uxtb	r4, r4
 8004344:	2c02      	cmp	r4, #2
 8004346:	d9ef      	bls.n	8004328 <ADC_RunOnce+0x24>
	}
	HAL_ADC_Stop(&hadc);
 8004348:	4c42      	ldr	r4, [pc, #264]	@ (8004454 <ADC_RunOnce+0x150>)
 800434a:	4620      	mov	r0, r4
 800434c:	f001 fb56 	bl	80059fc <HAL_ADC_Stop>

	VRefInt 	= __HAL_ADC_CALC_VREFANALOG_VOLTAGE(hadc, ADC_Val[0], hadc.Init.Resolution);
 8004350:	4f42      	ldr	r7, [pc, #264]	@ (800445c <ADC_RunOnce+0x158>)
 8004352:	f8b7 10a5 	ldrh.w	r1, [r7, #165]	@ 0xa5
 8004356:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800435a:	fb03 f101 	mul.w	r1, r3, r1
 800435e:	4a3e      	ldr	r2, [pc, #248]	@ (8004458 <ADC_RunOnce+0x154>)
 8004360:	8813      	ldrh	r3, [r2, #0]
 8004362:	68a0      	ldr	r0, [r4, #8]
 8004364:	0840      	lsrs	r0, r0, #1
 8004366:	4083      	lsls	r3, r0
 8004368:	fbb1 f1f3 	udiv	r1, r1, r3
 800436c:	4b3c      	ldr	r3, [pc, #240]	@ (8004460 <ADC_RunOnce+0x15c>)
 800436e:	6019      	str	r1, [r3, #0]
	VBat 		= __HAL_ADC_CALC_DATA_TO_VOLTAGE(hadc, VRefInt, ADC_Val[1], hadc.Init.Resolution);
 8004370:	8853      	ldrh	r3, [r2, #2]
 8004372:	fb01 f303 	mul.w	r3, r1, r3
 8004376:	f643 74ff 	movw	r4, #16383	@ 0x3fff
 800437a:	40c4      	lsrs	r4, r0
 800437c:	fb93 f3f4 	sdiv	r3, r3, r4
 8004380:	4c38      	ldr	r4, [pc, #224]	@ (8004464 <ADC_RunOnce+0x160>)
 8004382:	6023      	str	r3, [r4, #0]
	TSensor	    = __HAL_ADC_CALC_TEMPERATURE(hadc, VRefInt, ADC_Val[2], hadc.Init.Resolution);
 8004384:	8892      	ldrh	r2, [r2, #4]
 8004386:	4082      	lsls	r2, r0
 8004388:	fb01 f202 	mul.w	r2, r1, r2
 800438c:	4836      	ldr	r0, [pc, #216]	@ (8004468 <ADC_RunOnce+0x164>)
 800438e:	fba0 0202 	umull	r0, r2, r0, r2
 8004392:	f8b7 c010 	ldrh.w	ip, [r7, #16]
 8004396:	ebcc 1292 	rsb	r2, ip, r2, lsr #6
 800439a:	2064      	movs	r0, #100	@ 0x64
 800439c:	fb00 f202 	mul.w	r2, r0, r2
 80043a0:	f8b7 0042 	ldrh.w	r0, [r7, #66]	@ 0x42
 80043a4:	eba0 000c 	sub.w	r0, r0, ip
 80043a8:	fb92 f2f0 	sdiv	r2, r2, r0
 80043ac:	321e      	adds	r2, #30
 80043ae:	482f      	ldr	r0, [pc, #188]	@ (800446c <ADC_RunOnce+0x168>)
 80043b0:	6002      	str	r2, [r0, #0]

	//VBat value is 1/4 when read
	VBat *= 4;
 80043b2:	0098      	lsls	r0, r3, #2
 80043b4:	6020      	str	r0, [r4, #0]
	/* we have to compensate the temperature, formula:
	 * Temp (in C) = (100 - 30) / (TS_CAL2 - TS_CAL1) x (TS_DATA = TS_CAL1) + 30
	 * This is done by macro __HAL_ADC_CALC_TEMPERATURE
	 */

	if (flag)
 80043b6:	b116      	cbz	r6, 80043be <ADC_RunOnce+0xba>
		print_log(out, "MCU params : VRef: %ld.%ldV VBat: %ld.%ldV Temp: %ldC\r\n", VRefInt/1000, VRefInt%1000, VBat/1000, VBat%1000, TSensor);
 80043b8:	b125      	cbz	r5, 80043c4 <ADC_RunOnce+0xc0>
 80043ba:	2d01      	cmp	r5, #1
 80043bc:	d022      	beq.n	8004404 <ADC_RunOnce+0x100>
		LL_GPIO_EnableHighSPeedLowVoltage(GPIOE, LL_GPIO_PIN_12 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15);
	}
#endif

	return 1;
}
 80043be:	2001      	movs	r0, #1
 80043c0:	b005      	add	sp, #20
 80043c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_log(out, "MCU params : VRef: %ld.%ldV VBat: %ld.%ldV Temp: %ldC\r\n", VRefInt/1000, VRefInt%1000, VBat/1000, VBat%1000, TSensor);
 80043c4:	4e2a      	ldr	r6, [pc, #168]	@ (8004470 <ADC_RunOnce+0x16c>)
 80043c6:	fba6 4301 	umull	r4, r3, r6, r1
 80043ca:	099b      	lsrs	r3, r3, #6
 80043cc:	4c29      	ldr	r4, [pc, #164]	@ (8004474 <ADC_RunOnce+0x170>)
 80043ce:	9203      	str	r2, [sp, #12]
 80043d0:	fba6 6200 	umull	r6, r2, r6, r0
 80043d4:	0992      	lsrs	r2, r2, #6
 80043d6:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
 80043da:	fb06 0012 	mls	r0, r6, r2, r0
 80043de:	9002      	str	r0, [sp, #8]
 80043e0:	9201      	str	r2, [sp, #4]
 80043e2:	fb06 1113 	mls	r1, r6, r3, r1
 80043e6:	9100      	str	r1, [sp, #0]
 80043e8:	4a23      	ldr	r2, [pc, #140]	@ (8004478 <ADC_RunOnce+0x174>)
 80043ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80043ee:	4620      	mov	r0, r4
 80043f0:	f011 fb7a 	bl	8015ae8 <sniprintf>
 80043f4:	4620      	mov	r0, r4
 80043f6:	f7fc f926 	bl	8000646 <strlen>
 80043fa:	4601      	mov	r1, r0
 80043fc:	4620      	mov	r0, r4
 80043fe:	f010 fdc7 	bl	8014f90 <UART_Send>
 8004402:	e7da      	b.n	80043ba <ADC_RunOnce+0xb6>
 8004404:	4b16      	ldr	r3, [pc, #88]	@ (8004460 <ADC_RunOnce+0x15c>)
 8004406:	6819      	ldr	r1, [r3, #0]
 8004408:	4b16      	ldr	r3, [pc, #88]	@ (8004464 <ADC_RunOnce+0x160>)
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	4a18      	ldr	r2, [pc, #96]	@ (8004470 <ADC_RunOnce+0x16c>)
 800440e:	fba2 4301 	umull	r4, r3, r2, r1
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	4c19      	ldr	r4, [pc, #100]	@ (800447c <ADC_RunOnce+0x178>)
 8004416:	4d15      	ldr	r5, [pc, #84]	@ (800446c <ADC_RunOnce+0x168>)
 8004418:	682d      	ldr	r5, [r5, #0]
 800441a:	9503      	str	r5, [sp, #12]
 800441c:	fba2 5200 	umull	r5, r2, r2, r0
 8004420:	0992      	lsrs	r2, r2, #6
 8004422:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 8004426:	fb05 0012 	mls	r0, r5, r2, r0
 800442a:	9002      	str	r0, [sp, #8]
 800442c:	9201      	str	r2, [sp, #4]
 800442e:	fb05 1113 	mls	r1, r5, r3, r1
 8004432:	9100      	str	r1, [sp, #0]
 8004434:	4a10      	ldr	r2, [pc, #64]	@ (8004478 <ADC_RunOnce+0x174>)
 8004436:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800443a:	4620      	mov	r0, r4
 800443c:	f011 fb54 	bl	8015ae8 <sniprintf>
 8004440:	4620      	mov	r0, r4
 8004442:	f7fc f900 	bl	8000646 <strlen>
 8004446:	4601      	mov	r1, r0
 8004448:	4620      	mov	r0, r4
 800444a:	f010 fd93 	bl	8014f74 <VCP_UART_Send>
 800444e:	e7b6      	b.n	80043be <ADC_RunOnce+0xba>
 8004450:	2001080c 	.word	0x2001080c
 8004454:	20010824 	.word	0x20010824
 8004458:	2001081c 	.word	0x2001081c
 800445c:	0bfa0700 	.word	0x0bfa0700
 8004460:	20010818 	.word	0x20010818
 8004464:	20010814 	.word	0x20010814
 8004468:	057619f1 	.word	0x057619f1
 800446c:	20010810 	.word	0x20010810
 8004470:	10624dd3 	.word	0x10624dd3
 8004474:	2000f20c 	.word	0x2000f20c
 8004478:	08017738 	.word	0x08017738
 800447c:	2000f60c 	.word	0x2000f60c

08004480 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:


  ldr   sp, =_estack    /* set stack pointer */
 8004480:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80044bc <LoopForever+0x4>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004484:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004486:	e003      	b.n	8004490 <LoopCopyDataInit>

08004488 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004488:	4b0d      	ldr	r3, [pc, #52]	@ (80044c0 <LoopForever+0x8>)
	ldr	r3, [r3, r1]
 800448a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800448c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800448e:	3104      	adds	r1, #4

08004490 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004490:	480c      	ldr	r0, [pc, #48]	@ (80044c4 <LoopForever+0xc>)
	ldr	r3, =_edata
 8004492:	4b0d      	ldr	r3, [pc, #52]	@ (80044c8 <LoopForever+0x10>)
	adds	r2, r0, r1
 8004494:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004496:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004498:	d3f6      	bcc.n	8004488 <CopyDataInit>
	ldr	r2, =_sbss
 800449a:	4a0c      	ldr	r2, [pc, #48]	@ (80044cc <LoopForever+0x14>)
	b	LoopFillZerobss
 800449c:	e002      	b.n	80044a4 <LoopFillZerobss>

0800449e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800449e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80044a0:	f842 3b04 	str.w	r3, [r2], #4

080044a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80044a4:	4b0a      	ldr	r3, [pc, #40]	@ (80044d0 <LoopForever+0x18>)
	cmp	r2, r3
 80044a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80044a8:	d3f9      	bcc.n	800449e <FillZerobss>

/* Call the clock system initialization function.*/
  	bl  SystemInit
 80044aa:	f7ff fdf1 	bl	8004090 <SystemInit>

/* Call static constructors */
    bl __libc_init_array
 80044ae:	f011 fbbf 	bl	8015c30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044b2:	f7ff f8dd 	bl	8003670 <main>
	bx	lr
 80044b6:	4770      	bx	lr

080044b8 <LoopForever>:

LoopForever:
    b LoopForever
 80044b8:	e7fe      	b.n	80044b8 <LoopForever>
 80044ba:	0000      	.short	0x0000
  ldr   sp, =_estack    /* set stack pointer */
 80044bc:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 80044c0:	08017b40 	.word	0x08017b40
	ldr	r0, =_sdata
 80044c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80044c8:	200000d4 	.word	0x200000d4
	ldr	r2, =_sbss
 80044cc:	200000d4 	.word	0x200000d4
	ldr	r3, = _ebss
 80044d0:	20015929 	.word	0x20015929

080044d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80044d4:	e7fe      	b.n	80044d4 <ADC1_2_IRQHandler>

080044d6 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80044d6:	b410      	push	{r4}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80044d8:	6804      	ldr	r4, [r0, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044da:	fa91 f3a1 	rbit	r3, r1
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80044de:	b1a3      	cbz	r3, 800450a <LL_GPIO_SetPinMode+0x34>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80044e0:	fab3 f383 	clz	r3, r3
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	f04f 0c03 	mov.w	ip, #3
 80044ea:	fa0c f303 	lsl.w	r3, ip, r3
 80044ee:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 80044f6:	b151      	cbz	r1, 800450e <LL_GPIO_SetPinMode+0x38>
  return __builtin_clz(value);
 80044f8:	fab1 f181 	clz	r1, r1
 80044fc:	0049      	lsls	r1, r1, #1
 80044fe:	408a      	lsls	r2, r1
 8004500:	4313      	orrs	r3, r2
 8004502:	6003      	str	r3, [r0, #0]
}
 8004504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004508:	4770      	bx	lr
    return 32U;
 800450a:	2320      	movs	r3, #32
 800450c:	e7ea      	b.n	80044e4 <LL_GPIO_SetPinMode+0xe>
 800450e:	2120      	movs	r1, #32
 8004510:	e7f4      	b.n	80044fc <LL_GPIO_SetPinMode+0x26>

08004512 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004512:	b410      	push	{r4}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004514:	6884      	ldr	r4, [r0, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004516:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 800451a:	b1a3      	cbz	r3, 8004546 <LL_GPIO_SetPinSpeed+0x34>
  return __builtin_clz(value);
 800451c:	fab3 f383 	clz	r3, r3
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	f04f 0c03 	mov.w	ip, #3
 8004526:	fa0c f303 	lsl.w	r3, ip, r3
 800452a:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8004532:	b151      	cbz	r1, 800454a <LL_GPIO_SetPinSpeed+0x38>
  return __builtin_clz(value);
 8004534:	fab1 f181 	clz	r1, r1
 8004538:	0049      	lsls	r1, r1, #1
 800453a:	408a      	lsls	r2, r1
 800453c:	4313      	orrs	r3, r2
 800453e:	6083      	str	r3, [r0, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004544:	4770      	bx	lr
    return 32U;
 8004546:	2320      	movs	r3, #32
 8004548:	e7ea      	b.n	8004520 <LL_GPIO_SetPinSpeed+0xe>
 800454a:	2120      	movs	r1, #32
 800454c:	e7f4      	b.n	8004538 <LL_GPIO_SetPinSpeed+0x26>

0800454e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800454e:	b410      	push	{r4}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004550:	68c4      	ldr	r4, [r0, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 8004556:	b1a3      	cbz	r3, 8004582 <LL_GPIO_SetPinPull+0x34>
  return __builtin_clz(value);
 8004558:	fab3 f383 	clz	r3, r3
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	f04f 0c03 	mov.w	ip, #3
 8004562:	fa0c f303 	lsl.w	r3, ip, r3
 8004566:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456a:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 800456e:	b151      	cbz	r1, 8004586 <LL_GPIO_SetPinPull+0x38>
  return __builtin_clz(value);
 8004570:	fab1 f181 	clz	r1, r1
 8004574:	0049      	lsls	r1, r1, #1
 8004576:	408a      	lsls	r2, r1
 8004578:	4313      	orrs	r3, r2
 800457a:	60c3      	str	r3, [r0, #12]
}
 800457c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004580:	4770      	bx	lr
    return 32U;
 8004582:	2320      	movs	r3, #32
 8004584:	e7ea      	b.n	800455c <LL_GPIO_SetPinPull+0xe>
 8004586:	2120      	movs	r1, #32
 8004588:	e7f4      	b.n	8004574 <LL_GPIO_SetPinPull+0x26>
	...

0800458c <BSP_USBPD_PWR_Init>:
int32_t BSP_USBPD_PWR_Init(uint32_t PortNum)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800458c:	bb38      	cbnz	r0, 80045de <BSP_USBPD_PWR_Init+0x52>
{
 800458e:	b510      	push	{r4, lr}
 8004590:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8004592:	4b14      	ldr	r3, [pc, #80]	@ (80045e4 <BSP_USBPD_PWR_Init+0x58>)
 8004594:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004598:	f042 0202 	orr.w	r2, r2, #2
 800459c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80045a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80045aa:	9b01      	ldr	r3, [sp, #4]
  }
  else
  {
    /* Disable DB management on TCPP01 */
    GPIO_TCPP01_DB_CLK_ENABLE();
    LL_GPIO_SetPinMode(GPIO_TCPP01_DB_PORT, GPIO_TCPP01_DB_PIN, LL_GPIO_MODE_OUTPUT);
 80045ac:	4c0e      	ldr	r4, [pc, #56]	@ (80045e8 <BSP_USBPD_PWR_Init+0x5c>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	2120      	movs	r1, #32
 80045b2:	4620      	mov	r0, r4
 80045b4:	f7ff ff8f 	bl	80044d6 <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinSpeed(GPIO_TCPP01_DB_PORT, GPIO_TCPP01_DB_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 80045b8:	2202      	movs	r2, #2
 80045ba:	2120      	movs	r1, #32
 80045bc:	4620      	mov	r0, r4
 80045be:	f7ff ffa8 	bl	8004512 <LL_GPIO_SetPinSpeed>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80045c2:	6863      	ldr	r3, [r4, #4]
 80045c4:	f023 0320 	bic.w	r3, r3, #32
 80045c8:	6063      	str	r3, [r4, #4]
    LL_GPIO_SetPinOutputType(GPIO_TCPP01_DB_PORT, GPIO_TCPP01_DB_PIN, LL_GPIO_OUTPUT_PUSHPULL);
    LL_GPIO_SetPinPull(GPIO_TCPP01_DB_PORT, GPIO_TCPP01_DB_PIN, LL_GPIO_PULL_UP);
 80045ca:	2201      	movs	r2, #1
 80045cc:	2120      	movs	r1, #32
 80045ce:	4620      	mov	r0, r4
 80045d0:	f7ff ffbd 	bl	800454e <LL_GPIO_SetPinPull>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80045d4:	2320      	movs	r3, #32
 80045d6:	61a3      	str	r3, [r4, #24]
  int32_t ret = BSP_ERROR_NONE;
 80045d8:	2000      	movs	r0, #0
    LL_GPIO_SetOutputPin(GPIO_TCPP01_DB_PORT, GPIO_TCPP01_DB_PIN);
  }
  return ret;
}
 80045da:	b002      	add	sp, #8
 80045dc:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80045de:	f06f 0001 	mvn.w	r0, #1
}
 80045e2:	4770      	bx	lr
 80045e4:	46020c00 	.word	0x46020c00
 80045e8:	42020400 	.word	0x42020400

080045ec <BSP_USBPD_PWR_VBUSInit>:
int32_t BSP_USBPD_PWR_VBUSInit(uint32_t PortNum)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 80045ec:	b900      	cbnz	r0, 80045f0 <BSP_USBPD_PWR_VBUSInit+0x4>

    LL_ADC_REG_StartConversion(VSENSE_ADC_INSTANCE);
#endif
  }
  return ret;
}
 80045ee:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80045f0:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80045f4:	e7fb      	b.n	80045ee <BSP_USBPD_PWR_VBUSInit+0x2>
	...

080045f8 <BSP_USBPD_PWR_VBUSDeInit>:
int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t PortNum)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 80045f8:	bb60      	cbnz	r0, 8004654 <BSP_USBPD_PWR_VBUSDeInit+0x5c>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045fa:	4b18      	ldr	r3, [pc, #96]	@ (800465c <BSP_USBPD_PWR_VBUSDeInit+0x64>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f013 0f04 	tst.w	r3, #4
 8004602:	d008      	beq.n	8004616 <BSP_USBPD_PWR_VBUSDeInit+0x1e>
  MODIFY_REG(ADCx->CR,
 8004604:	4a15      	ldr	r2, [pc, #84]	@ (800465c <BSP_USBPD_PWR_VBUSDeInit+0x64>)
 8004606:	6893      	ldr	r3, [r2, #8]
 8004608:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800460c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004610:	f043 0310 	orr.w	r3, r3, #16
 8004614:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004616:	4b11      	ldr	r3, [pc, #68]	@ (800465c <BSP_USBPD_PWR_VBUSDeInit+0x64>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f013 0f01 	tst.w	r3, #1
 800461e:	d008      	beq.n	8004632 <BSP_USBPD_PWR_VBUSDeInit+0x3a>
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8004620:	4a0e      	ldr	r2, [pc, #56]	@ (800465c <BSP_USBPD_PWR_VBUSDeInit+0x64>)
 8004622:	6893      	ldr	r3, [r2, #8]
 8004624:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004628:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800462c:	f043 0302 	orr.w	r3, r3, #2
 8004630:	6093      	str	r3, [r2, #8]
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_ForceReset(uint32_t Periphs)
{
  SET_BIT(RCC->AHB2RSTR1, Periphs);
 8004632:	4b0b      	ldr	r3, [pc, #44]	@ (8004660 <BSP_USBPD_PWR_VBUSDeInit+0x68>)
 8004634:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004636:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800463a:	665a      	str	r2, [r3, #100]	@ 0x64
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_ReleaseReset(uint32_t Periphs)
{
  CLEAR_BIT(RCC->AHB2RSTR1, Periphs);
 800463c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800463e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004642:	665a      	str	r2, [r3, #100]	@ 0x64
  CLEAR_BIT(RCC->AHB2ENR1, Periphs);
 8004644:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004648:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800464c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  int32_t ret = BSP_ERROR_NONE;
 8004650:	2000      	movs	r0, #0
}
 8004652:	4770      	bx	lr
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004654:	f06f 0001 	mvn.w	r0, #1

    /* Reset ADC configuration */
    VSENSE_ADC_DISABLE_CLOCK();
  }
  return ret;
}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	42028000 	.word	0x42028000
 8004660:	46020c00 	.word	0x46020c00

08004664 <BSP_USBPD_PWR_VBUSGetVoltage>:
int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t PortNum, uint32_t *pVoltage)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Check if instance is valid */
  if ((PortNum >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 8004664:	b920      	cbnz	r0, 8004670 <BSP_USBPD_PWR_VBUSGetVoltage+0xc>
 8004666:	b131      	cbz	r1, 8004676 <BSP_USBPD_PWR_VBUSGetVoltage+0x12>
    val *= 761UL;
    val /= 100UL;
#else
    val = 9466;
#endif
    *pVoltage = val;
 8004668:	f242 43fa 	movw	r3, #9466	@ 0x24fa
 800466c:	600b      	str	r3, [r1, #0]
 800466e:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004670:	f06f 0001 	mvn.w	r0, #1
 8004674:	4770      	bx	lr
 8004676:	f06f 0001 	mvn.w	r0, #1
  }
  return ret;
}
 800467a:	4770      	bx	lr

0800467c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800467c:	b510      	push	{r4, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800467e:	4a0f      	ldr	r2, [pc, #60]	@ (80046bc <HAL_Init+0x40>)
 8004680:	6813      	ldr	r3, [r2, #0]
 8004682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004688:	2003      	movs	r0, #3
 800468a:	f001 fb43 	bl	8005d14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800468e:	f005 faab 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 8004692:	4b0b      	ldr	r3, [pc, #44]	@ (80046c0 <HAL_Init+0x44>)
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	4a0a      	ldr	r2, [pc, #40]	@ (80046c4 <HAL_Init+0x48>)
 800469c:	5cd3      	ldrb	r3, [r2, r3]
 800469e:	40d8      	lsrs	r0, r3
 80046a0:	4b09      	ldr	r3, [pc, #36]	@ (80046c8 <HAL_Init+0x4c>)
 80046a2:	6018      	str	r0, [r3, #0]

  //it is done again later
  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046a4:	200f      	movs	r0, #15
 80046a6:	f7ff fc21 	bl	8003eec <HAL_InitTick>
 80046aa:	b110      	cbz	r0, 80046b2 <HAL_Init+0x36>
  {
    return HAL_ERROR;
 80046ac:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 80046ae:	4620      	mov	r0, r4
 80046b0:	bd10      	pop	{r4, pc}
 80046b2:	4604      	mov	r4, r0
  HAL_MspInit();
 80046b4:	f7ff f800 	bl	80036b8 <HAL_MspInit>
  return HAL_OK;
 80046b8:	e7f9      	b.n	80046ae <HAL_Init+0x32>
 80046ba:	bf00      	nop
 80046bc:	40022000 	.word	0x40022000
 80046c0:	46020c00 	.word	0x46020c00
 80046c4:	08017728 	.word	0x08017728
 80046c8:	20000008 	.word	0x20000008

080046cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80046cc:	4b03      	ldr	r3, [pc, #12]	@ (80046dc <HAL_IncTick+0x10>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	4a03      	ldr	r2, [pc, #12]	@ (80046e0 <HAL_IncTick+0x14>)
 80046d2:	6811      	ldr	r1, [r2, #0]
 80046d4:	440b      	add	r3, r1
 80046d6:	6013      	str	r3, [r2, #0]
}
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	2000000c 	.word	0x2000000c
 80046e0:	200108b0 	.word	0x200108b0

080046e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80046e4:	4b01      	ldr	r3, [pc, #4]	@ (80046ec <HAL_GetTick+0x8>)
 80046e6:	6818      	ldr	r0, [r3, #0]
}
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	200108b0 	.word	0x200108b0

080046f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046f0:	b538      	push	{r3, r4, r5, lr}
 80046f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80046f4:	f7ff fff6 	bl	80046e4 <HAL_GetTick>
 80046f8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046fa:	f1b4 3fff 	cmp.w	r4, #4294967295
 80046fe:	d002      	beq.n	8004706 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004700:	4b04      	ldr	r3, [pc, #16]	@ (8004714 <HAL_Delay+0x24>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004706:	f7ff ffed 	bl	80046e4 <HAL_GetTick>
 800470a:	1b40      	subs	r0, r0, r5
 800470c:	42a0      	cmp	r0, r4
 800470e:	d3fa      	bcc.n	8004706 <HAL_Delay+0x16>
  {
  }
}
 8004710:	bd38      	pop	{r3, r4, r5, pc}
 8004712:	bf00      	nop
 8004714:	2000000c 	.word	0x2000000c

08004718 <HAL_SYSCFG_EnableOTGPHY>:
void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8004718:	4a03      	ldr	r2, [pc, #12]	@ (8004728 <HAL_SYSCFG_EnableOTGPHY+0x10>)
 800471a:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	4303      	orrs	r3, r0
 8004722:	6753      	str	r3, [r2, #116]	@ 0x74
}
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	46000400 	.word	0x46000400

0800472c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 800472c:	4a03      	ldr	r2, [pc, #12]	@ (800473c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x10>)
 800472e:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8004730:	f023 033c 	bic.w	r3, r3, #60	@ 0x3c
 8004734:	4303      	orrs	r3, r0
 8004736:	6753      	str	r3, [r2, #116]	@ 0x74
}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	46000400 	.word	0x46000400

08004740 <LL_ADC_REG_SetSequencerRanks>:
{
 8004740:	b410      	push	{r4}
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8004742:	4b19      	ldr	r3, [pc, #100]	@ (80047a8 <LL_ADC_REG_SetSequencerRanks+0x68>)
 8004744:	4298      	cmp	r0, r3
 8004746:	d016      	beq.n	8004776 <LL_ADC_REG_SetSequencerRanks+0x36>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8004748:	3030      	adds	r0, #48	@ 0x30
 800474a:	0a0b      	lsrs	r3, r1, #8
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	f003 030c 	and.w	r3, r3, #12
    MODIFY_REG(*preg,
 8004752:	58c4      	ldr	r4, [r0, r3]
 8004754:	f001 011f 	and.w	r1, r1, #31
 8004758:	f04f 0c1f 	mov.w	ip, #31
 800475c:	fa0c fc01 	lsl.w	ip, ip, r1
 8004760:	ea24 0c0c 	bic.w	ip, r4, ip
 8004764:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8004768:	408a      	lsls	r2, r1
 800476a:	ea4c 0202 	orr.w	r2, ip, r2
 800476e:	50c2      	str	r2, [r0, r3]
}
 8004770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004774:	4770      	bx	lr
    MODIFY_REG(ADCx->CHSELR,
 8004776:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004778:	f001 011f 	and.w	r1, r1, #31
 800477c:	240f      	movs	r4, #15
 800477e:	408c      	lsls	r4, r1
 8004780:	ea23 0304 	bic.w	r3, r3, r4
 8004784:	f032 447f 	bics.w	r4, r2, #4278190080	@ 0xff000000
 8004788:	d105      	bne.n	8004796 <LL_ADC_REG_SetSequencerRanks+0x56>
 800478a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800478e:	408a      	lsls	r2, r1
 8004790:	4313      	orrs	r3, r2
 8004792:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8004794:	e7ec      	b.n	8004770 <LL_ADC_REG_SetSequencerRanks+0x30>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004796:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800479a:	b112      	cbz	r2, 80047a2 <LL_ADC_REG_SetSequencerRanks+0x62>
  return __builtin_clz(value);
 800479c:	fab2 f282 	clz	r2, r2
 80047a0:	e7f5      	b.n	800478e <LL_ADC_REG_SetSequencerRanks+0x4e>
    return 32U;
 80047a2:	2220      	movs	r2, #32
 80047a4:	e7f3      	b.n	800478e <LL_ADC_REG_SetSequencerRanks+0x4e>
 80047a6:	bf00      	nop
 80047a8:	46021000 	.word	0x46021000

080047ac <LL_ADC_REG_SetSequencerChAdd>:
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 80047ac:	f031 437f 	bics.w	r3, r1, #4278190080	@ 0xff000000
 80047b0:	d107      	bne.n	80047c2 <LL_ADC_REG_SetSequencerChAdd+0x16>
 80047b2:	f3c1 6184 	ubfx	r1, r1, #26, #5
 80047b6:	2201      	movs	r2, #1
 80047b8:	408a      	lsls	r2, r1
 80047ba:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80047bc:	4313      	orrs	r3, r2
 80047be:	6283      	str	r3, [r0, #40]	@ 0x28
}
 80047c0:	4770      	bx	lr
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 80047c6:	b131      	cbz	r1, 80047d6 <LL_ADC_REG_SetSequencerChAdd+0x2a>
  return __builtin_clz(value);
 80047c8:	fab1 f181 	clz	r1, r1
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 80047cc:	f001 011f 	and.w	r1, r1, #31
 80047d0:	2201      	movs	r2, #1
 80047d2:	408a      	lsls	r2, r1
 80047d4:	e7f1      	b.n	80047ba <LL_ADC_REG_SetSequencerChAdd+0xe>
    return 32U;
 80047d6:	2120      	movs	r1, #32
 80047d8:	e7f8      	b.n	80047cc <LL_ADC_REG_SetSequencerChAdd+0x20>
	...

080047dc <LL_ADC_SetChannelSamplingTime>:
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80047dc:	4b1b      	ldr	r3, [pc, #108]	@ (800484c <LL_ADC_SetChannelSamplingTime+0x70>)
 80047de:	4298      	cmp	r0, r3
 80047e0:	d02b      	beq.n	800483a <LL_ADC_SetChannelSamplingTime+0x5e>
{
 80047e2:	b410      	push	{r4}
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80047e4:	f031 437f 	bics.w	r3, r1, #4278190080	@ 0xff000000
 80047e8:	d11f      	bne.n	800482a <LL_ADC_SetChannelSamplingTime+0x4e>
 80047ea:	f3c1 6384 	ubfx	r3, r1, #26, #5
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80047ee:	ea4f 6c51 	mov.w	ip, r1, lsr #25
 80047f2:	f3c1 6140 	ubfx	r1, r1, #25, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80047f6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80047fa:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80047fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8004802:	3014      	adds	r0, #20
 8004804:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8004808:	f001 0104 	and.w	r1, r1, #4
    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800480c:	5844      	ldr	r4, [r0, r1]
 800480e:	f04f 0c07 	mov.w	ip, #7
 8004812:	fa0c fc03 	lsl.w	ip, ip, r3
 8004816:	ea24 0c0c 	bic.w	ip, r4, ip
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	ea4c 0303 	orr.w	r3, ip, r3
 8004822:	5043      	str	r3, [r0, r1]
}
 8004824:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004828:	4770      	bx	lr
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482a:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 800482e:	b113      	cbz	r3, 8004836 <LL_ADC_SetChannelSamplingTime+0x5a>
  return __builtin_clz(value);
 8004830:	fab3 f383 	clz	r3, r3
 8004834:	e7db      	b.n	80047ee <LL_ADC_SetChannelSamplingTime+0x12>
    return 32U;
 8004836:	2320      	movs	r3, #32
 8004838:	e7d9      	b.n	80047ee <LL_ADC_SetChannelSamplingTime+0x12>
    MODIFY_REG(ADCx->SMPR1,
 800483a:	6943      	ldr	r3, [r0, #20]
 800483c:	ea23 2301 	bic.w	r3, r3, r1, lsl #8
 8004840:	ea02 2201 	and.w	r2, r2, r1, lsl #8
 8004844:	4313      	orrs	r3, r2
 8004846:	6143      	str	r3, [r0, #20]
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	46021000 	.word	0x46021000

08004850 <HAL_ADC_MspInit>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 8004850:	4770      	bx	lr
	...

08004854 <HAL_ADC_Init>:
  if (hadc == NULL)
 8004854:	2800      	cmp	r0, #0
 8004856:	f000 8200 	beq.w	8004c5a <HAL_ADC_Init+0x406>
{
 800485a:	b570      	push	{r4, r5, r6, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004860:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8004862:	b313      	cbz	r3, 80048aa <HAL_ADC_Init+0x56>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004864:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 800486c:	d005      	beq.n	800487a <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 8004874:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004878:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800487a:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800487c:	6893      	ldr	r3, [r2, #8]
 800487e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004882:	d11f      	bne.n	80048c4 <HAL_ADC_Init+0x70>
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8004884:	6893      	ldr	r3, [r2, #8]
 8004886:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800488a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800488e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004892:	6093      	str	r3, [r2, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004894:	4b8f      	ldr	r3, [pc, #572]	@ (8004ad4 <HAL_ADC_Init+0x280>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	099b      	lsrs	r3, r3, #6
 800489a:	4a8f      	ldr	r2, [pc, #572]	@ (8004ad8 <HAL_ADC_Init+0x284>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	099b      	lsrs	r3, r3, #6
 80048a2:	3301      	adds	r3, #1
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80048a8:	e009      	b.n	80048be <HAL_ADC_Init+0x6a>
    HAL_ADC_MspInit(hadc);
 80048aa:	f7ff ffd1 	bl	8004850 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80048ae:	2300      	movs	r3, #0
 80048b0:	67e3      	str	r3, [r4, #124]	@ 0x7c
    hadc->Lock = HAL_UNLOCKED;
 80048b2:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
 80048b6:	e7d5      	b.n	8004864 <HAL_ADC_Init+0x10>
      wait_loop_index--;
 80048b8:	9b01      	ldr	r3, [sp, #4]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80048be:	9b01      	ldr	r3, [sp, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f9      	bne.n	80048b8 <HAL_ADC_Init+0x64>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048c4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 80048cc:	d12f      	bne.n	800492e <HAL_ADC_Init+0xda>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ce:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80048d0:	f042 0210 	orr.w	r2, r2, #16
 80048d4:	67a2      	str	r2, [r4, #120]	@ 0x78
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048d6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80048d8:	f042 0201 	orr.w	r2, r2, #1
 80048dc:	67e2      	str	r2, [r4, #124]	@ 0x7c
    tmp_hal_status = HAL_ERROR;
 80048de:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	f012 0204 	ands.w	r2, r2, #4
 80048e6:	d000      	beq.n	80048ea <HAL_ADC_Init+0x96>
 80048e8:	2201      	movs	r2, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048ea:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80048ec:	f011 0f10 	tst.w	r1, #16
 80048f0:	f040 81ac 	bne.w	8004c4c <HAL_ADC_Init+0x3f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80048f4:	2a00      	cmp	r2, #0
 80048f6:	f040 81a9 	bne.w	8004c4c <HAL_ADC_Init+0x3f8>
    ADC_STATE_CLR_SET(hadc->State,
 80048fa:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80048fc:	f421 7181 	bic.w	r1, r1, #258	@ 0x102
 8004900:	f041 0102 	orr.w	r1, r1, #2
 8004904:	67a1      	str	r1, [r4, #120]	@ 0x78
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004906:	6899      	ldr	r1, [r3, #8]
 8004908:	f011 0f01 	tst.w	r1, #1
 800490c:	d12d      	bne.n	800496a <HAL_ADC_Init+0x116>
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800490e:	4973      	ldr	r1, [pc, #460]	@ (8004adc <HAL_ADC_Init+0x288>)
 8004910:	428b      	cmp	r3, r1
 8004912:	d074      	beq.n	80049fe <HAL_ADC_Init+0x1aa>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004914:	4972      	ldr	r1, [pc, #456]	@ (8004ae0 <HAL_ADC_Init+0x28c>)
 8004916:	428b      	cmp	r3, r1
 8004918:	d00b      	beq.n	8004932 <HAL_ADC_Init+0xde>
 800491a:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 800491e:	428b      	cmp	r3, r1
 8004920:	d007      	beq.n	8004932 <HAL_ADC_Init+0xde>
 8004922:	496e      	ldr	r1, [pc, #440]	@ (8004adc <HAL_ADC_Init+0x288>)
 8004924:	6889      	ldr	r1, [r1, #8]
 8004926:	f011 0f01 	tst.w	r1, #1
 800492a:	d11e      	bne.n	800496a <HAL_ADC_Init+0x116>
 800492c:	e00f      	b.n	800494e <HAL_ADC_Init+0xfa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800492e:	2000      	movs	r0, #0
 8004930:	e7d6      	b.n	80048e0 <HAL_ADC_Init+0x8c>
 8004932:	496b      	ldr	r1, [pc, #428]	@ (8004ae0 <HAL_ADC_Init+0x28c>)
 8004934:	688d      	ldr	r5, [r1, #8]
 8004936:	f015 0501 	ands.w	r5, r5, #1
 800493a:	d000      	beq.n	800493e <HAL_ADC_Init+0xea>
 800493c:	2501      	movs	r5, #1
 800493e:	4969      	ldr	r1, [pc, #420]	@ (8004ae4 <HAL_ADC_Init+0x290>)
 8004940:	6889      	ldr	r1, [r1, #8]
 8004942:	f011 0101 	ands.w	r1, r1, #1
 8004946:	d000      	beq.n	800494a <HAL_ADC_Init+0xf6>
 8004948:	2101      	movs	r1, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800494a:	4329      	orrs	r1, r5
 800494c:	d10d      	bne.n	800496a <HAL_ADC_Init+0x116>
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800494e:	4964      	ldr	r1, [pc, #400]	@ (8004ae0 <HAL_ADC_Init+0x28c>)
 8004950:	428b      	cmp	r3, r1
 8004952:	d052      	beq.n	80049fa <HAL_ADC_Init+0x1a6>
 8004954:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8004958:	428b      	cmp	r3, r1
 800495a:	d04c      	beq.n	80049f6 <HAL_ADC_Init+0x1a2>
 800495c:	4d62      	ldr	r5, [pc, #392]	@ (8004ae8 <HAL_ADC_Init+0x294>)
 800495e:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8004960:	68a9      	ldr	r1, [r5, #8]
 8004962:	f421 1170 	bic.w	r1, r1, #3932160	@ 0x3c0000
 8004966:	430b      	orrs	r3, r1
 8004968:	60ab      	str	r3, [r5, #8]
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800496a:	6825      	ldr	r5, [r4, #0]
 800496c:	4b5b      	ldr	r3, [pc, #364]	@ (8004adc <HAL_ADC_Init+0x288>)
 800496e:	429d      	cmp	r5, r3
 8004970:	d058      	beq.n	8004a24 <HAL_ADC_Init+0x1d0>
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004972:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                    hadc->Init.Overrun                                                    |
 8004976:	6c63      	ldr	r3, [r4, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004978:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
                    hadc->Init.Resolution                                                 |
 800497c:	68a1      	ldr	r1, [r4, #8]
                    hadc->Init.Overrun                                                    |
 800497e:	430b      	orrs	r3, r1
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004980:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8004984:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004988:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800498c:	2901      	cmp	r1, #1
 800498e:	d06e      	beq.n	8004a6e <HAL_ADC_Init+0x21a>
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004990:	4952      	ldr	r1, [pc, #328]	@ (8004adc <HAL_ADC_Init+0x288>)
 8004992:	428d      	cmp	r5, r1
 8004994:	f000 8082 	beq.w	8004a9c <HAL_ADC_Init+0x248>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800499a:	b121      	cbz	r1, 80049a6 <HAL_ADC_Init+0x152>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800499c:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
 80049a0:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80049a2:	4331      	orrs	r1, r6
 80049a4:	430b      	orrs	r3, r1
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80049a6:	68ee      	ldr	r6, [r5, #12]
 80049a8:	4950      	ldr	r1, [pc, #320]	@ (8004aec <HAL_ADC_Init+0x298>)
 80049aa:	4031      	ands	r1, r6
 80049ac:	4319      	orrs	r1, r3
 80049ae:	60e9      	str	r1, [r5, #12]
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80049b0:	6821      	ldr	r1, [r4, #0]
 80049b2:	4d4a      	ldr	r5, [pc, #296]	@ (8004adc <HAL_ADC_Init+0x288>)
 80049b4:	42a9      	cmp	r1, r5
 80049b6:	f000 80f2 	beq.w	8004b9e <HAL_ADC_Init+0x34a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049ba:	688b      	ldr	r3, [r1, #8]
 80049bc:	f013 0304 	ands.w	r3, r3, #4
 80049c0:	d000      	beq.n	80049c4 <HAL_ADC_Init+0x170>
 80049c2:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049c4:	688a      	ldr	r2, [r1, #8]
 80049c6:	f012 0208 	ands.w	r2, r2, #8
 80049ca:	d000      	beq.n	80049ce <HAL_ADC_Init+0x17a>
 80049cc:	2201      	movs	r2, #1
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f040 80b9 	bne.w	8004b46 <HAL_ADC_Init+0x2f2>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049d4:	2a00      	cmp	r2, #0
 80049d6:	f040 80b6 	bne.w	8004b46 <HAL_ADC_Init+0x2f2>
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049da:	7f22      	ldrb	r2, [r4, #28]
 80049dc:	0392      	lsls	r2, r2, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80049de:	4b40      	ldr	r3, [pc, #256]	@ (8004ae0 <HAL_ADC_Init+0x28c>)
 80049e0:	4299      	cmp	r1, r3
 80049e2:	f000 8089 	beq.w	8004af8 <HAL_ADC_Init+0x2a4>
 80049e6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049ea:	4299      	cmp	r1, r3
 80049ec:	f000 8084 	beq.w	8004af8 <HAL_ADC_Init+0x2a4>
 80049f0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	e081      	b.n	8004afa <HAL_ADC_Init+0x2a6>
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80049f6:	4d3e      	ldr	r5, [pc, #248]	@ (8004af0 <HAL_ADC_Init+0x29c>)
 80049f8:	e7b1      	b.n	800495e <HAL_ADC_Init+0x10a>
 80049fa:	4d3d      	ldr	r5, [pc, #244]	@ (8004af0 <HAL_ADC_Init+0x29c>)
 80049fc:	e7af      	b.n	800495e <HAL_ADC_Init+0x10a>
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80049fe:	68a1      	ldr	r1, [r4, #8]
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8004a00:	3901      	subs	r1, #1
 8004a02:	f001 010c 	and.w	r1, r1, #12
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8004a06:	68dd      	ldr	r5, [r3, #12]
 8004a08:	f025 050c 	bic.w	r5, r5, #12
 8004a0c:	4329      	orrs	r1, r5
 8004a0e:	60d9      	str	r1, [r3, #12]
        MODIFY_REG(ADC4_COMMON->CCR,
 8004a10:	4d35      	ldr	r5, [pc, #212]	@ (8004ae8 <HAL_ADC_Init+0x294>)
 8004a12:	68ab      	ldr	r3, [r5, #8]
 8004a14:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8004a18:	6861      	ldr	r1, [r4, #4]
 8004a1a:	f401 1170 	and.w	r1, r1, #3932160	@ 0x3c0000
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	60ab      	str	r3, [r5, #8]
 8004a22:	e7a2      	b.n	800496a <HAL_ADC_Init+0x116>
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a24:	7f21      	ldrb	r1, [r4, #28]
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004a26:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8004a2a:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a2c:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8004a30:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004a32:	b109      	cbz	r1, 8004a38 <HAL_ADC_Init+0x1e4>
 8004a34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004a38:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                            |
 8004a3a:	6961      	ldr	r1, [r4, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8004a3c:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8004a3e:	6921      	ldr	r1, [r4, #16]
 8004a40:	2900      	cmp	r1, #0
 8004a42:	db0d      	blt.n	8004a60 <HAL_ADC_Init+0x20c>
 8004a44:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8004a48:	430b      	orrs	r3, r1
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8004a4a:	4925      	ldr	r1, [pc, #148]	@ (8004ae0 <HAL_ADC_Init+0x28c>)
 8004a4c:	428d      	cmp	r5, r1
 8004a4e:	d00a      	beq.n	8004a66 <HAL_ADC_Init+0x212>
 8004a50:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8004a54:	428d      	cmp	r5, r1
 8004a56:	d006      	beq.n	8004a66 <HAL_ADC_Init+0x212>
 8004a58:	f894 1040 	ldrb.w	r1, [r4, #64]	@ 0x40
 8004a5c:	0049      	lsls	r1, r1, #1
 8004a5e:	e004      	b.n	8004a6a <HAL_ADC_Init+0x216>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8004a60:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004a64:	e7f0      	b.n	8004a48 <HAL_ADC_Init+0x1f4>
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8004a66:	f894 1040 	ldrb.w	r1, [r4, #64]	@ 0x40
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	e78c      	b.n	8004988 <HAL_ADC_Init+0x134>
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004a6e:	491b      	ldr	r1, [pc, #108]	@ (8004adc <HAL_ADC_Init+0x288>)
 8004a70:	428d      	cmp	r5, r1
 8004a72:	d004      	beq.n	8004a7e <HAL_ADC_Init+0x22a>
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a74:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004a76:	3901      	subs	r1, #1
 8004a78:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8004a7c:	e788      	b.n	8004990 <HAL_ADC_Init+0x13c>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004a7e:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
 8004a82:	b911      	cbnz	r1, 8004a8a <HAL_ADC_Init+0x236>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a88:	e782      	b.n	8004990 <HAL_ADC_Init+0x13c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a8a:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8004a8c:	f041 0120 	orr.w	r1, r1, #32
 8004a90:	67a1      	str	r1, [r4, #120]	@ 0x78
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a92:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8004a94:	f041 0101 	orr.w	r1, r1, #1
 8004a98:	67e1      	str	r1, [r4, #124]	@ 0x7c
 8004a9a:	e779      	b.n	8004990 <HAL_ADC_Init+0x13c>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a9e:	b121      	cbz	r1, 8004aaa <HAL_ADC_Init+0x256>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8004aa0:	f401 71e0 	and.w	r1, r1, #448	@ 0x1c0
 8004aa4:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8004aa6:	4331      	orrs	r1, r6
 8004aa8:	430b      	orrs	r3, r1
      MODIFY_REG(hadc->Instance->CFGR1,
 8004aaa:	68ee      	ldr	r6, [r5, #12]
 8004aac:	4911      	ldr	r1, [pc, #68]	@ (8004af4 <HAL_ADC_Init+0x2a0>)
 8004aae:	4031      	ands	r1, r6
 8004ab0:	4319      	orrs	r1, r3
 8004ab2:	60e9      	str	r1, [r5, #12]
      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8004ab4:	6a21      	ldr	r1, [r4, #32]
 8004ab6:	b119      	cbz	r1, 8004ac0 <HAL_ADC_Init+0x26c>
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8004ab8:	6825      	ldr	r5, [r4, #0]
 8004aba:	6c6e      	ldr	r6, [r5, #68]	@ 0x44
 8004abc:	4331      	orrs	r1, r6
 8004abe:	6469      	str	r1, [r5, #68]	@ 0x44
      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8004ac0:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8004ac2:	2900      	cmp	r1, #0
 8004ac4:	f43f af74 	beq.w	80049b0 <HAL_ADC_Init+0x15c>
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8004ac8:	6825      	ldr	r5, [r4, #0]
 8004aca:	6c6e      	ldr	r6, [r5, #68]	@ 0x44
 8004acc:	4331      	orrs	r1, r6
 8004ace:	6469      	str	r1, [r5, #68]	@ 0x44
 8004ad0:	e76e      	b.n	80049b0 <HAL_ADC_Init+0x15c>
 8004ad2:	bf00      	nop
 8004ad4:	20000008 	.word	0x20000008
 8004ad8:	053e2d63 	.word	0x053e2d63
 8004adc:	46021000 	.word	0x46021000
 8004ae0:	42028000 	.word	0x42028000
 8004ae4:	42028100 	.word	0x42028100
 8004ae8:	46021300 	.word	0x46021300
 8004aec:	fff0c013 	.word	0xfff0c013
 8004af0:	42028300 	.word	0x42028300
 8004af4:	ffde800d 	.word	0xffde800d
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8004af8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004afa:	431a      	orrs	r2, r3
        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8004afc:	68cb      	ldr	r3, [r1, #12]
 8004afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60cb      	str	r3, [r1, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8004b0a:	68e3      	ldr	r3, [r4, #12]
 8004b0c:	b15b      	cbz	r3, 8004b26 <HAL_ADC_Init+0x2d2>
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8004b0e:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8004b10:	6f0a      	ldr	r2, [r1, #112]	@ 0x70
 8004b12:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 8004b16:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	670b      	str	r3, [r1, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8004b1e:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8004b20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b24:	670b      	str	r3, [r1, #112]	@ 0x70
        if (hadc->Init.OversamplingMode == ENABLE)
 8004b26:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d01a      	beq.n	8004b64 <HAL_ADC_Init+0x310>
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b2e:	6822      	ldr	r2, [r4, #0]
 8004b30:	6913      	ldr	r3, [r2, #16]
 8004b32:	f023 0301 	bic.w	r3, r3, #1
 8004b36:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004b38:	6822      	ldr	r2, [r4, #0]
 8004b3a:	6913      	ldr	r3, [r2, #16]
 8004b3c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004b40:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004b42:	430b      	orrs	r3, r1
 8004b44:	6113      	str	r3, [r2, #16]
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b46:	6923      	ldr	r3, [r4, #16]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d01f      	beq.n	8004b8c <HAL_ADC_Init+0x338>
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b4c:	6822      	ldr	r2, [r4, #0]
 8004b4e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004b50:	f023 030f 	bic.w	r3, r3, #15
 8004b54:	6313      	str	r3, [r2, #48]	@ 0x30
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b56:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004b58:	f023 0303 	bic.w	r3, r3, #3
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	67a3      	str	r3, [r4, #120]	@ 0x78
 8004b62:	e078      	b.n	8004c56 <HAL_ADC_Init+0x402>
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004b64:	6821      	ldr	r1, [r4, #0]
 8004b66:	690b      	ldr	r3, [r1, #16]
 8004b68:	4a3d      	ldr	r2, [pc, #244]	@ (8004c60 <HAL_ADC_Init+0x40c>)
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8004b6e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004b70:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004b74:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8004b76:	432b      	orrs	r3, r5
 8004b78:	6e65      	ldr	r5, [r4, #100]	@ 0x64
 8004b7a:	432b      	orrs	r3, r5
 8004b7c:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 8004b7e:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	610b      	str	r3, [r1, #16]
 8004b8a:	e7d5      	b.n	8004b38 <HAL_ADC_Init+0x2e4>
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b8c:	6821      	ldr	r1, [r4, #0]
 8004b8e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8004b90:	f023 030f 	bic.w	r3, r3, #15
 8004b94:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004b96:	3a01      	subs	r2, #1
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	630b      	str	r3, [r1, #48]	@ 0x30
 8004b9c:	e7db      	b.n	8004b56 <HAL_ADC_Init+0x302>
      if (hadc->Init.OversamplingMode == ENABLE)
 8004b9e:	f894 5054 	ldrb.w	r5, [r4, #84]	@ 0x54
 8004ba2:	2d01      	cmp	r5, #1
 8004ba4:	d02c      	beq.n	8004c00 <HAL_ADC_Init+0x3ac>
      MODIFY_REG(hadc->Instance->CFGR2,
 8004ba6:	690e      	ldr	r6, [r1, #16]
 8004ba8:	4d2e      	ldr	r5, [pc, #184]	@ (8004c64 <HAL_ADC_Init+0x410>)
 8004baa:	4035      	ands	r5, r6
 8004bac:	4315      	orrs	r5, r2
 8004bae:	610d      	str	r5, [r1, #16]
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8004bb0:	6825      	ldr	r5, [r4, #0]
 8004bb2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
  MODIFY_REG(ADCx->SMPR1,
 8004bb4:	6969      	ldr	r1, [r5, #20]
 8004bb6:	f021 0107 	bic.w	r1, r1, #7
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	616a      	str	r2, [r5, #20]
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8004bbe:	6821      	ldr	r1, [r4, #0]
 8004bc0:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 8004bc2:	694a      	ldr	r2, [r1, #20]
 8004bc4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004bc8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8004bcc:	614a      	str	r2, [r1, #20]
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8004bce:	6922      	ldr	r2, [r4, #16]
 8004bd0:	bb02      	cbnz	r2, 8004c14 <HAL_ADC_Init+0x3c0>
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8004bd2:	6821      	ldr	r1, [r4, #0]
 8004bd4:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8004bd6:	f062 020f 	orn	r2, r2, #15
 8004bda:	628a      	str	r2, [r1, #40]	@ 0x28
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8004bdc:	6822      	ldr	r2, [r4, #0]
 8004bde:	68d1      	ldr	r1, [r2, #12]
 8004be0:	4a21      	ldr	r2, [pc, #132]	@ (8004c68 <HAL_ADC_Init+0x414>)
 8004be2:	400a      	ands	r2, r1
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d028      	beq.n	8004c3a <HAL_ADC_Init+0x3e6>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8004be8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004bea:	f023 0312 	bic.w	r3, r3, #18
 8004bee:	f043 0310 	orr.w	r3, r3, #16
 8004bf2:	67a3      	str	r3, [r4, #120]	@ 0x78
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bf4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	67e3      	str	r3, [r4, #124]	@ 0x7c
        tmp_hal_status = HAL_ERROR;
 8004bfc:	2001      	movs	r0, #1
 8004bfe:	e02a      	b.n	8004c56 <HAL_ADC_Init+0x402>
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8004c00:	6da2      	ldr	r2, [r4, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8004c02:	6de5      	ldr	r5, [r4, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8004c04:	432a      	orrs	r2, r5
                     hadc->Init.Oversampling.TriggeredMode |
 8004c06:	6e25      	ldr	r5, [r4, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8004c08:	432a      	orrs	r2, r5
                     hadc->Init.TriggerFrequencyMode
 8004c0a:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8004c0c:	432a      	orrs	r2, r5
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	e7c8      	b.n	8004ba6 <HAL_ADC_Init+0x352>
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8004c14:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8004c18:	d1e0      	bne.n	8004bdc <HAL_ADC_Init+0x388>
        MODIFY_REG(hadc->Instance->CHSELR,
 8004c1a:	6825      	ldr	r5, [r4, #0]
 8004c1c:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8004c1e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004c20:	3a01      	subs	r2, #1
 8004c22:	0092      	lsls	r2, r2, #2
 8004c24:	f002 021c 	and.w	r2, r2, #28
 8004c28:	f06f 010f 	mvn.w	r1, #15
 8004c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c30:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8004c34:	430a      	orrs	r2, r1
 8004c36:	62aa      	str	r2, [r5, #40]	@ 0x28
 8004c38:	e7d0      	b.n	8004bdc <HAL_ADC_Init+0x388>
        ADC_CLEAR_ERRORCODE(hadc);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	67e3      	str	r3, [r4, #124]	@ 0x7c
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004c3e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004c40:	f023 0303 	bic.w	r3, r3, #3
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	67a3      	str	r3, [r4, #120]	@ 0x78
 8004c4a:	e004      	b.n	8004c56 <HAL_ADC_Init+0x402>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c4c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004c4e:	f043 0310 	orr.w	r3, r3, #16
 8004c52:	67a3      	str	r3, [r4, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004c54:	2001      	movs	r0, #1
}
 8004c56:	b002      	add	sp, #8
 8004c58:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004c5a:	2001      	movs	r0, #1
}
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	fc00f81e 	.word	0xfc00f81e
 8004c64:	f7fffc02 	.word	0xf7fffc02
 8004c68:	833ffff3 	.word	0x833ffff3

08004c6c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c70:	4604      	mov	r4, r0
 8004c72:	460d      	mov	r5, r1
  uint32_t tickstart;
  uint32_t tmp_flag_end;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c74:	6803      	ldr	r3, [r0, #0]
 8004c76:	4a6c      	ldr	r2, [pc, #432]	@ (8004e28 <HAL_ADC_PollForConversion+0x1bc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d026      	beq.n	8004cca <HAL_ADC_PollForConversion+0x5e>
 8004c7c:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d01f      	beq.n	8004cc4 <HAL_ADC_PollForConversion+0x58>
 8004c84:	4a69      	ldr	r2, [pc, #420]	@ (8004e2c <HAL_ADC_PollForConversion+0x1c0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004c86:	6897      	ldr	r7, [r2, #8]
 8004c88:	f007 071f 	and.w	r7, r7, #31

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004c8c:	69a6      	ldr	r6, [r4, #24]
 8004c8e:	2e08      	cmp	r6, #8
 8004c90:	d022      	beq.n	8004cd8 <HAL_ADC_PollForConversion+0x6c>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004c92:	4a67      	ldr	r2, [pc, #412]	@ (8004e30 <HAL_ADC_PollForConversion+0x1c4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d04e      	beq.n	8004d36 <HAL_ADC_PollForConversion+0xca>
    {
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c98:	2f09      	cmp	r7, #9
 8004c9a:	d805      	bhi.n	8004ca8 <HAL_ADC_PollForConversion+0x3c>
 8004c9c:	f240 2221 	movw	r2, #545	@ 0x221
 8004ca0:	40fa      	lsrs	r2, r7
 8004ca2:	f012 0f01 	tst.w	r2, #1
 8004ca6:	d112      	bne.n	8004cce <HAL_ADC_PollForConversion+0x62>
        }
      }
      else
      {
        /* Check ADC DMA mode in multimode */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004ca8:	4a5f      	ldr	r2, [pc, #380]	@ (8004e28 <HAL_ADC_PollForConversion+0x1bc>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d03b      	beq.n	8004d26 <HAL_ADC_PollForConversion+0xba>
 8004cae:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d035      	beq.n	8004d22 <HAL_ADC_PollForConversion+0xb6>
 8004cb6:	4b5d      	ldr	r3, [pc, #372]	@ (8004e2c <HAL_ADC_PollForConversion+0x1c0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8004cbe:	d134      	bne.n	8004d2a <HAL_ADC_PollForConversion+0xbe>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
          return HAL_ERROR;
        }
        else
        {
          tmp_flag_end = (ADC_FLAG_EOC);
 8004cc0:	2604      	movs	r6, #4
 8004cc2:	e009      	b.n	8004cd8 <HAL_ADC_PollForConversion+0x6c>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cc4:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8004cc8:	e7dd      	b.n	8004c86 <HAL_ADC_PollForConversion+0x1a>
 8004cca:	4a5a      	ldr	r2, [pc, #360]	@ (8004e34 <HAL_ADC_PollForConversion+0x1c8>)
 8004ccc:	e7db      	b.n	8004c86 <HAL_ADC_PollForConversion+0x1a>
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f013 0f01 	tst.w	r3, #1
 8004cd4:	d11f      	bne.n	8004d16 <HAL_ADC_PollForConversion+0xaa>
          tmp_flag_end = (ADC_FLAG_EOC);
 8004cd6:	2604      	movs	r6, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004cd8:	f7ff fd04 	bl	80046e4 <HAL_GetTick>
 8004cdc:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4232      	tst	r2, r6
 8004ce4:	d133      	bne.n	8004d4e <HAL_ADC_PollForConversion+0xe2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004ce6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004cea:	d0f8      	beq.n	8004cde <HAL_ADC_PollForConversion+0x72>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004cec:	f7ff fcfa 	bl	80046e4 <HAL_GetTick>
 8004cf0:	eba0 0008 	sub.w	r0, r0, r8
 8004cf4:	42a8      	cmp	r0, r5
 8004cf6:	d801      	bhi.n	8004cfc <HAL_ADC_PollForConversion+0x90>
 8004cf8:	2d00      	cmp	r5, #0
 8004cfa:	d1f0      	bne.n	8004cde <HAL_ADC_PollForConversion+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4233      	tst	r3, r6
 8004d02:	d1ec      	bne.n	8004cde <HAL_ADC_PollForConversion+0x72>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004d04:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004d06:	f043 0304 	orr.w	r3, r3, #4
 8004d0a:	67a3      	str	r3, [r4, #120]	@ 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74

          return HAL_TIMEOUT;
 8004d12:	2003      	movs	r0, #3
 8004d14:	e083      	b.n	8004e1e <HAL_ADC_PollForConversion+0x1b2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d16:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004d18:	f043 0320 	orr.w	r3, r3, #32
 8004d1c:	67a3      	str	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 8004d1e:	2001      	movs	r0, #1
 8004d20:	e07d      	b.n	8004e1e <HAL_ADC_PollForConversion+0x1b2>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004d22:	4b44      	ldr	r3, [pc, #272]	@ (8004e34 <HAL_ADC_PollForConversion+0x1c8>)
 8004d24:	e7c8      	b.n	8004cb8 <HAL_ADC_PollForConversion+0x4c>
 8004d26:	4b43      	ldr	r3, [pc, #268]	@ (8004e34 <HAL_ADC_PollForConversion+0x1c8>)
 8004d28:	e7c6      	b.n	8004cb8 <HAL_ADC_PollForConversion+0x4c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d2a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004d2c:	f043 0320 	orr.w	r3, r3, #32
 8004d30:	67a3      	str	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 8004d32:	2001      	movs	r0, #1
 8004d34:	e073      	b.n	8004e1e <HAL_ADC_PollForConversion+0x1b2>
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f013 0f01 	tst.w	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <HAL_ADC_PollForConversion+0xd6>
        tmp_flag_end = (ADC_FLAG_EOC);
 8004d3e:	2604      	movs	r6, #4
 8004d40:	e7ca      	b.n	8004cd8 <HAL_ADC_PollForConversion+0x6c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d42:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004d44:	f043 0320 	orr.w	r3, r3, #32
 8004d48:	67a3      	str	r3, [r4, #120]	@ 0x78
        return HAL_ERROR;
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	e067      	b.n	8004e1e <HAL_ADC_PollForConversion+0x1b2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d4e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8004d50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d54:	67a2      	str	r2, [r4, #120]	@ 0x78
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8004d5c:	d15e      	bne.n	8004e1c <HAL_ADC_PollForConversion+0x1b0>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004d5e:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d15d      	bne.n	8004e22 <HAL_ADC_PollForConversion+0x1b6>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004d66:	4a32      	ldr	r2, [pc, #200]	@ (8004e30 <HAL_ADC_PollForConversion+0x1c4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d033      	beq.n	8004dd4 <HAL_ADC_PollForConversion+0x168>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	f012 0f08 	tst.w	r2, #8
 8004d72:	d00b      	beq.n	8004d8c <HAL_ADC_PollForConversion+0x120>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d74:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8004d76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d7a:	67a2      	str	r2, [r4, #120]	@ 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d7c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8004d7e:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8004d82:	d103      	bne.n	8004d8c <HAL_ADC_PollForConversion+0x120>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d84:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8004d86:	f042 0201 	orr.w	r2, r2, #1
 8004d8a:	67a2      	str	r2, [r4, #120]	@ 0x78

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Get relevant register CFGR in ADC instance of ADC master or slave        */
      /* in function of multimode state (for devices with multimode               */
      /* available).                                                              */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8004e38 <HAL_ADC_PollForConversion+0x1cc>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00f      	beq.n	8004db2 <HAL_ADC_PollForConversion+0x146>
 8004d92:	461a      	mov	r2, r3
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00f      	beq.n	8004db8 <HAL_ADC_PollForConversion+0x14c>
 8004d98:	2f09      	cmp	r7, #9
 8004d9a:	d805      	bhi.n	8004da8 <HAL_ADC_PollForConversion+0x13c>
 8004d9c:	f240 2221 	movw	r2, #545	@ 0x221
 8004da0:	40fa      	lsrs	r2, r7
 8004da2:	f012 0f01 	tst.w	r2, #1
 8004da6:	d107      	bne.n	8004db8 <HAL_ADC_PollForConversion+0x14c>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
      }
      else
      {
        /* Retrieve Master ADC CFGR register */
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
 8004da8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e28 <HAL_ADC_PollForConversion+0x1bc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00d      	beq.n	8004dca <HAL_ADC_PollForConversion+0x15e>
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8004dae:	68d2      	ldr	r2, [r2, #12]
 8004db0:	e003      	b.n	8004dba <HAL_ADC_PollForConversion+0x14e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004db2:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8004db6:	e7ed      	b.n	8004d94 <HAL_ADC_PollForConversion+0x128>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8004db8:	68da      	ldr	r2, [r3, #12]
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 8004dba:	2e08      	cmp	r6, #8
 8004dbc:	d007      	beq.n	8004dce <HAL_ADC_PollForConversion+0x162>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8004dbe:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8004dc2:	d12c      	bne.n	8004e1e <HAL_ADC_PollForConversion+0x1b2>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004dc4:	220c      	movs	r2, #12
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	e029      	b.n	8004e1e <HAL_ADC_PollForConversion+0x1b2>
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
 8004dca:	461a      	mov	r2, r3
 8004dcc:	e7ef      	b.n	8004dae <HAL_ADC_PollForConversion+0x142>
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004dce:	2208      	movs	r2, #8
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	e024      	b.n	8004e1e <HAL_ADC_PollForConversion+0x1b2>
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	f012 0f08 	tst.w	r2, #8
 8004dda:	d00f      	beq.n	8004dfc <HAL_ADC_PollForConversion+0x190>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	f012 0f04 	tst.w	r2, #4
 8004de2:	d112      	bne.n	8004e0a <HAL_ADC_PollForConversion+0x19e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	f022 020c 	bic.w	r2, r2, #12
 8004dea:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004dec:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004dee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	67a3      	str	r3, [r4, #120]	@ 0x78
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004dfc:	7f23      	ldrb	r3, [r4, #28]
 8004dfe:	b973      	cbnz	r3, 8004e1e <HAL_ADC_PollForConversion+0x1b2>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004e00:	6822      	ldr	r2, [r4, #0]
 8004e02:	210c      	movs	r1, #12
 8004e04:	6011      	str	r1, [r2, #0]
      }

    }
  }

  return HAL_OK;
 8004e06:	4618      	mov	r0, r3
 8004e08:	e009      	b.n	8004e1e <HAL_ADC_PollForConversion+0x1b2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e0a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004e0c:	f043 0320 	orr.w	r3, r3, #32
 8004e10:	67a3      	str	r3, [r4, #120]	@ 0x78
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e12:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8004e14:	f043 0301 	orr.w	r3, r3, #1
 8004e18:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8004e1a:	e7ef      	b.n	8004dfc <HAL_ADC_PollForConversion+0x190>
  return HAL_OK;
 8004e1c:	2000      	movs	r0, #0
}
 8004e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8004e22:	2000      	movs	r0, #0
 8004e24:	e7fb      	b.n	8004e1e <HAL_ADC_PollForConversion+0x1b2>
 8004e26:	bf00      	nop
 8004e28:	42028000 	.word	0x42028000
 8004e2c:	46021300 	.word	0x46021300
 8004e30:	46021000 	.word	0x46021000
 8004e34:	42028300 	.word	0x42028300
 8004e38:	42028100 	.word	0x42028100

08004e3c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004e3c:	6803      	ldr	r3, [r0, #0]
 8004e3e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8004e40:	4770      	bx	lr
	...

08004e44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e46:	b083      	sub	sp, #12
 8004e48:	4604      	mov	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	9301      	str	r3, [sp, #4]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004e4e:	6800      	ldr	r0, [r0, #0]

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8004e50:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	f000 83cb 	beq.w	80055f0 <HAL_ADC_ConfigChannel+0x7ac>
 8004e5a:	460d      	mov	r5, r1
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
 8004e62:	6883      	ldr	r3, [r0, #8]
 8004e64:	f013 0f04 	tst.w	r3, #4
 8004e68:	d009      	beq.n	8004e7e <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e6a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004e6c:	f043 0320 	orr.w	r3, r3, #32
 8004e70:	67a3      	str	r3, [r4, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004e72:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8004e74:	2300      	movs	r3, #0
 8004e76:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74

  return tmp_hal_status;
}
 8004e7a:	b003      	add	sp, #12
 8004e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004e7e:	4bac      	ldr	r3, [pc, #688]	@ (8005130 <HAL_ADC_ConfigChannel+0x2ec>)
 8004e80:	4298      	cmp	r0, r3
 8004e82:	f000 8258 	beq.w	8005336 <HAL_ADC_ConfigChannel+0x4f2>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8004e86:	680b      	ldr	r3, [r1, #0]
 8004e88:	f033 427f 	bics.w	r2, r3, #4278190080	@ 0xff000000
 8004e8c:	d13b      	bne.n	8004f06 <HAL_ADC_ConfigChannel+0xc2>
 8004e8e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8004e92:	2201      	movs	r2, #1
 8004e94:	409a      	lsls	r2, r3
 8004e96:	69c3      	ldr	r3, [r0, #28]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61c3      	str	r3, [r0, #28]
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004e9c:	682a      	ldr	r2, [r5, #0]
 8004e9e:	6869      	ldr	r1, [r5, #4]
 8004ea0:	6820      	ldr	r0, [r4, #0]
 8004ea2:	f7ff fc4d 	bl	8004740 <LL_ADC_REG_SetSequencerRanks>
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ea6:	6820      	ldr	r0, [r4, #0]
 8004ea8:	6883      	ldr	r3, [r0, #8]
 8004eaa:	f013 0304 	ands.w	r3, r3, #4
 8004eae:	d000      	beq.n	8004eb2 <HAL_ADC_ConfigChannel+0x6e>
 8004eb0:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004eb2:	6886      	ldr	r6, [r0, #8]
 8004eb4:	f016 0608 	ands.w	r6, r6, #8
 8004eb8:	d000      	beq.n	8004ebc <HAL_ADC_ConfigChannel+0x78>
 8004eba:	2601      	movs	r6, #1
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ebc:	b903      	cbnz	r3, 8004ec0 <HAL_ADC_ConfigChannel+0x7c>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ebe:	b376      	cbz	r6, 8004f1e <HAL_ADC_ConfigChannel+0xda>
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ec0:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ec2:	688b      	ldr	r3, [r1, #8]
 8004ec4:	f013 0f01 	tst.w	r3, #1
 8004ec8:	f040 838a 	bne.w	80055e0 <HAL_ADC_ConfigChannel+0x79c>
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8004ed0:	f8d1 20c0 	ldr.w	r2, [r1, #192]	@ 0xc0
 8004ed4:	f023 467f 	bic.w	r6, r3, #4278190080	@ 0xff000000
 8004ed8:	ea22 0206 	bic.w	r2, r2, r6
 8004edc:	f000 0618 	and.w	r6, r0, #24
 8004ee0:	4894      	ldr	r0, [pc, #592]	@ (8005134 <HAL_ADC_ConfigChannel+0x2f0>)
 8004ee2:	40f0      	lsrs	r0, r6
 8004ee4:	4003      	ands	r3, r0
 8004ee6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 30c0 	str.w	r3, [r1, #192]	@ 0xc0
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ef0:	68eb      	ldr	r3, [r5, #12]
 8004ef2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ef6:	f000 80eb 	beq.w	80050d0 <HAL_ADC_ConfigChannel+0x28c>
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004efa:	682b      	ldr	r3, [r5, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f2c0 8160 	blt.w	80051c2 <HAL_ADC_ConfigChannel+0x37e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f02:	2000      	movs	r0, #0
 8004f04:	e7b6      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f06:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8004f0a:	b133      	cbz	r3, 8004f1a <HAL_ADC_ConfigChannel+0xd6>
  return __builtin_clz(value);
 8004f0c:	fab3 f383 	clz	r3, r3
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	2201      	movs	r2, #1
 8004f16:	409a      	lsls	r2, r3
 8004f18:	e7bd      	b.n	8004e96 <HAL_ADC_ConfigChannel+0x52>
    return 32U;
 8004f1a:	2320      	movs	r3, #32
 8004f1c:	e7f8      	b.n	8004f10 <HAL_ADC_ConfigChannel+0xcc>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004f1e:	68aa      	ldr	r2, [r5, #8]
 8004f20:	6829      	ldr	r1, [r5, #0]
 8004f22:	f7ff fc5b 	bl	80047dc <LL_ADC_SetChannelSamplingTime>
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004f26:	6969      	ldr	r1, [r5, #20]
 8004f28:	6822      	ldr	r2, [r4, #0]
 8004f2a:	68d3      	ldr	r3, [r2, #12]
 8004f2c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	4099      	lsls	r1, r3
        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f34:	692f      	ldr	r7, [r5, #16]
 8004f36:	2f04      	cmp	r7, #4
 8004f38:	d04e      	beq.n	8004fd8 <HAL_ADC_ConfigChannel+0x194>
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004f3a:	6828      	ldr	r0, [r5, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f3c:	3260      	adds	r2, #96	@ 0x60
  MODIFY_REG(*preg,
 8004f3e:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8004f42:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004f46:	0040      	lsls	r0, r0, #1
 8004f48:	f000 4078 	and.w	r0, r0, #4160749568	@ 0xf8000000
 8004f4c:	4301      	orrs	r1, r0
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	6928      	ldr	r0, [r5, #16]
 8004f58:	69ea      	ldr	r2, [r5, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f5a:	3360      	adds	r3, #96	@ 0x60
  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8004f5c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8004f60:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8004f64:	430a      	orrs	r2, r1
 8004f66:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
          if (pConfig->OffsetSaturation == ENABLE)
 8004f6a:	7eab      	ldrb	r3, [r5, #26]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d012      	beq.n	8004f96 <HAL_ADC_ConfigChannel+0x152>
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	6929      	ldr	r1, [r5, #16]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f74:	3360      	adds	r3, #96	@ 0x60
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8004f76:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8004f7a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004f7e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	6929      	ldr	r1, [r5, #16]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f86:	3360      	adds	r3, #96	@ 0x60
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8004f88:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8004f8c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8004f90:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8004f94:	e794      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x7c>
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	6928      	ldr	r0, [r5, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004f9a:	7e6a      	ldrb	r2, [r5, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004f9c:	b9ba      	cbnz	r2, 8004fce <HAL_ADC_ConfigChannel+0x18a>
 8004f9e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fa2:	3360      	adds	r3, #96	@ 0x60
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8004fa4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8004fa8:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004fac:	430a      	orrs	r2, r1
 8004fae:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	6929      	ldr	r1, [r5, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8004fb6:	7e6a      	ldrb	r2, [r5, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fb8:	2a01      	cmp	r2, #1
 8004fba:	d00a      	beq.n	8004fd2 <HAL_ADC_ConfigChannel+0x18e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fbc:	3360      	adds	r3, #96	@ 0x60
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8004fbe:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8004fc2:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8004fc6:	4332      	orrs	r2, r6
 8004fc8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8004fcc:	e778      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x7c>
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fce:	4631      	mov	r1, r6
 8004fd0:	e7e7      	b.n	8004fa2 <HAL_ADC_ConfigChannel+0x15e>
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fd2:	f04f 6680 	mov.w	r6, #67108864	@ 0x4000000
 8004fd6:	e7f1      	b.n	8004fbc <HAL_ADC_ConfigChannel+0x178>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fd8:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8004fda:	6e13      	ldr	r3, [r2, #96]	@ 0x60
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fdc:	0e9b      	lsrs	r3, r3, #26
 8004fde:	f003 031e 	and.w	r3, r3, #30
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004fe2:	6829      	ldr	r1, [r5, #0]
 8004fe4:	f031 407f 	bics.w	r0, r1, #4278190080	@ 0xff000000
 8004fe8:	d137      	bne.n	800505a <HAL_ADC_ConfigChannel+0x216>
 8004fea:	f3c1 6084 	ubfx	r0, r1, #26, #5
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fee:	4298      	cmp	r0, r3
 8004ff0:	d03b      	beq.n	800506a <HAL_ADC_ConfigChannel+0x226>
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ff2:	6820      	ldr	r0, [r4, #0]
 8004ff4:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8004ff6:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8004ff8:	0e9b      	lsrs	r3, r3, #26
 8004ffa:	f003 031e 	and.w	r3, r3, #30
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ffe:	682a      	ldr	r2, [r5, #0]
 8005000:	f032 417f 	bics.w	r1, r2, #4278190080	@ 0xff000000
 8005004:	d13a      	bne.n	800507c <HAL_ADC_ConfigChannel+0x238>
 8005006:	f3c2 6184 	ubfx	r1, r2, #26, #5
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800500a:	4299      	cmp	r1, r3
 800500c:	d03e      	beq.n	800508c <HAL_ADC_ConfigChannel+0x248>
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800500e:	6820      	ldr	r0, [r4, #0]
 8005010:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8005012:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8005014:	0e9b      	lsrs	r3, r3, #26
 8005016:	f003 031e 	and.w	r3, r3, #30
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800501a:	682a      	ldr	r2, [r5, #0]
 800501c:	f032 417f 	bics.w	r1, r2, #4278190080	@ 0xff000000
 8005020:	d13d      	bne.n	800509e <HAL_ADC_ConfigChannel+0x25a>
 8005022:	f3c2 6184 	ubfx	r1, r2, #26, #5
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005026:	4299      	cmp	r1, r3
 8005028:	d041      	beq.n	80050ae <HAL_ADC_ConfigChannel+0x26a>
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800502a:	6820      	ldr	r0, [r4, #0]
 800502c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800502e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005030:	0e9b      	lsrs	r3, r3, #26
 8005032:	f003 031e 	and.w	r3, r3, #30
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005036:	682a      	ldr	r2, [r5, #0]
 8005038:	f032 417f 	bics.w	r1, r2, #4278190080	@ 0xff000000
 800503c:	d140      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x27c>
 800503e:	f3c2 6184 	ubfx	r1, r2, #26, #5
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005042:	4299      	cmp	r1, r3
 8005044:	f47f af3c 	bne.w	8004ec0 <HAL_ADC_ConfigChannel+0x7c>
  MODIFY_REG(*preg,
 8005048:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 800504a:	f001 61e0 	and.w	r1, r1, #117440512	@ 0x7000000
 800504e:	0053      	lsls	r3, r2, #1
 8005050:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
 8005054:	430b      	orrs	r3, r1
 8005056:	66c3      	str	r3, [r0, #108]	@ 0x6c
}
 8005058:	e732      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x7c>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505a:	fa91 f0a1 	rbit	r0, r1
  if (value == 0U)
 800505e:	b110      	cbz	r0, 8005066 <HAL_ADC_ConfigChannel+0x222>
  return __builtin_clz(value);
 8005060:	fab0 f080 	clz	r0, r0
 8005064:	e7c3      	b.n	8004fee <HAL_ADC_ConfigChannel+0x1aa>
    return 32U;
 8005066:	2020      	movs	r0, #32
 8005068:	e7c1      	b.n	8004fee <HAL_ADC_ConfigChannel+0x1aa>
  MODIFY_REG(*preg,
 800506a:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 800506c:	f000 60e0 	and.w	r0, r0, #117440512	@ 0x7000000
 8005070:	004b      	lsls	r3, r1, #1
 8005072:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
 8005076:	4303      	orrs	r3, r0
 8005078:	6613      	str	r3, [r2, #96]	@ 0x60
}
 800507a:	e7ba      	b.n	8004ff2 <HAL_ADC_ConfigChannel+0x1ae>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507c:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8005080:	b111      	cbz	r1, 8005088 <HAL_ADC_ConfigChannel+0x244>
  return __builtin_clz(value);
 8005082:	fab1 f181 	clz	r1, r1
 8005086:	e7c0      	b.n	800500a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8005088:	2120      	movs	r1, #32
 800508a:	e7be      	b.n	800500a <HAL_ADC_ConfigChannel+0x1c6>
  MODIFY_REG(*preg,
 800508c:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 800508e:	f001 61e0 	and.w	r1, r1, #117440512	@ 0x7000000
 8005092:	0053      	lsls	r3, r2, #1
 8005094:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
 8005098:	430b      	orrs	r3, r1
 800509a:	6643      	str	r3, [r0, #100]	@ 0x64
}
 800509c:	e7b7      	b.n	800500e <HAL_ADC_ConfigChannel+0x1ca>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509e:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 80050a2:	b111      	cbz	r1, 80050aa <HAL_ADC_ConfigChannel+0x266>
  return __builtin_clz(value);
 80050a4:	fab1 f181 	clz	r1, r1
 80050a8:	e7bd      	b.n	8005026 <HAL_ADC_ConfigChannel+0x1e2>
    return 32U;
 80050aa:	2120      	movs	r1, #32
 80050ac:	e7bb      	b.n	8005026 <HAL_ADC_ConfigChannel+0x1e2>
  MODIFY_REG(*preg,
 80050ae:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80050b0:	f001 61e0 	and.w	r1, r1, #117440512	@ 0x7000000
 80050b4:	0053      	lsls	r3, r2, #1
 80050b6:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
 80050ba:	430b      	orrs	r3, r1
 80050bc:	6683      	str	r3, [r0, #104]	@ 0x68
}
 80050be:	e7b4      	b.n	800502a <HAL_ADC_ConfigChannel+0x1e6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c0:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 80050c4:	b111      	cbz	r1, 80050cc <HAL_ADC_ConfigChannel+0x288>
  return __builtin_clz(value);
 80050c6:	fab1 f181 	clz	r1, r1
 80050ca:	e7ba      	b.n	8005042 <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 80050cc:	2120      	movs	r1, #32
 80050ce:	e7b8      	b.n	8005042 <HAL_ADC_ConfigChannel+0x1fe>
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	f033 407f 	bics.w	r0, r3, #4278190080	@ 0xff000000
 80050d6:	d11c      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x2ce>
 80050d8:	0e9a      	lsrs	r2, r3, #26
 80050da:	3201      	adds	r2, #1
 80050dc:	f002 021f 	and.w	r2, r2, #31
 80050e0:	2a09      	cmp	r2, #9
 80050e2:	bf8c      	ite	hi
 80050e4:	2200      	movhi	r2, #0
 80050e6:	2201      	movls	r2, #1
 80050e8:	2a00      	cmp	r2, #0
 80050ea:	d03f      	beq.n	800516c <HAL_ADC_ConfigChannel+0x328>
 80050ec:	bb20      	cbnz	r0, 8005138 <HAL_ADC_ConfigChannel+0x2f4>
 80050ee:	0e99      	lsrs	r1, r3, #26
 80050f0:	3101      	adds	r1, #1
 80050f2:	0689      	lsls	r1, r1, #26
 80050f4:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80050f8:	bb50      	cbnz	r0, 8005150 <HAL_ADC_ConfigChannel+0x30c>
 80050fa:	0e9a      	lsrs	r2, r3, #26
 80050fc:	3201      	adds	r2, #1
 80050fe:	f002 021f 	and.w	r2, r2, #31
 8005102:	2301      	movs	r3, #1
 8005104:	4093      	lsls	r3, r2
 8005106:	4319      	orrs	r1, r3
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8005108:	68aa      	ldr	r2, [r5, #8]
 800510a:	6820      	ldr	r0, [r4, #0]
 800510c:	f7ff fb66 	bl	80047dc <LL_ADC_SetChannelSamplingTime>
 8005110:	e6f3      	b.n	8004efa <HAL_ADC_ConfigChannel+0xb6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005112:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8005116:	b14a      	cbz	r2, 800512c <HAL_ADC_ConfigChannel+0x2e8>
  return __builtin_clz(value);
 8005118:	fab2 f282 	clz	r2, r2
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800511c:	3201      	adds	r2, #1
 800511e:	f002 021f 	and.w	r2, r2, #31
 8005122:	2a09      	cmp	r2, #9
 8005124:	bf8c      	ite	hi
 8005126:	2200      	movhi	r2, #0
 8005128:	2201      	movls	r2, #1
 800512a:	e7dd      	b.n	80050e8 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800512c:	2220      	movs	r2, #32
 800512e:	e7f5      	b.n	800511c <HAL_ADC_ConfigChannel+0x2d8>
 8005130:	46021000 	.word	0x46021000
 8005134:	000fffff 	.word	0x000fffff
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005138:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800513c:	b131      	cbz	r1, 800514c <HAL_ADC_ConfigChannel+0x308>
  return __builtin_clz(value);
 800513e:	fab1 f181 	clz	r1, r1
 8005142:	3101      	adds	r1, #1
 8005144:	0689      	lsls	r1, r1, #26
 8005146:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800514a:	e7d5      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800514c:	2120      	movs	r1, #32
 800514e:	e7f8      	b.n	8005142 <HAL_ADC_ConfigChannel+0x2fe>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005150:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005154:	b143      	cbz	r3, 8005168 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005156:	fab3 f383 	clz	r3, r3
 800515a:	3301      	adds	r3, #1
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	2201      	movs	r2, #1
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	e7ce      	b.n	8005106 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8005168:	2320      	movs	r3, #32
 800516a:	e7f6      	b.n	800515a <HAL_ADC_ConfigChannel+0x316>
 800516c:	b978      	cbnz	r0, 800518e <HAL_ADC_ConfigChannel+0x34a>
 800516e:	0e99      	lsrs	r1, r3, #26
 8005170:	3101      	adds	r1, #1
 8005172:	0689      	lsls	r1, r1, #26
 8005174:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8005178:	b9a8      	cbnz	r0, 80051a6 <HAL_ADC_ConfigChannel+0x362>
 800517a:	0e9a      	lsrs	r2, r3, #26
 800517c:	3201      	adds	r2, #1
 800517e:	f002 021f 	and.w	r2, r2, #31
 8005182:	2301      	movs	r3, #1
 8005184:	4093      	lsls	r3, r2
 8005186:	4319      	orrs	r1, r3
 8005188:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 800518c:	e7bc      	b.n	8005108 <HAL_ADC_ConfigChannel+0x2c4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518e:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 8005192:	b131      	cbz	r1, 80051a2 <HAL_ADC_ConfigChannel+0x35e>
  return __builtin_clz(value);
 8005194:	fab1 f181 	clz	r1, r1
 8005198:	3101      	adds	r1, #1
 800519a:	0689      	lsls	r1, r1, #26
 800519c:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80051a0:	e7ea      	b.n	8005178 <HAL_ADC_ConfigChannel+0x334>
    return 32U;
 80051a2:	2120      	movs	r1, #32
 80051a4:	e7f8      	b.n	8005198 <HAL_ADC_ConfigChannel+0x354>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80051aa:	b143      	cbz	r3, 80051be <HAL_ADC_ConfigChannel+0x37a>
  return __builtin_clz(value);
 80051ac:	fab3 f383 	clz	r3, r3
 80051b0:	3301      	adds	r3, #1
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	2201      	movs	r2, #1
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	e7e3      	b.n	8005186 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80051be:	2320      	movs	r3, #32
 80051c0:	e7f6      	b.n	80051b0 <HAL_ADC_ConfigChannel+0x36c>
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051c2:	6822      	ldr	r2, [r4, #0]
 80051c4:	499a      	ldr	r1, [pc, #616]	@ (8005430 <HAL_ADC_ConfigChannel+0x5ec>)
 80051c6:	428a      	cmp	r2, r1
 80051c8:	d021      	beq.n	800520e <HAL_ADC_ConfigChannel+0x3ca>
 80051ca:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 80051ce:	428a      	cmp	r2, r1
 80051d0:	d01a      	beq.n	8005208 <HAL_ADC_ConfigChannel+0x3c4>
 80051d2:	4998      	ldr	r1, [pc, #608]	@ (8005434 <HAL_ADC_ConfigChannel+0x5f0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80051d4:	688d      	ldr	r5, [r1, #8]
 80051d6:	f005 76e0 	and.w	r6, r5, #29360128	@ 0x1c00000
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051da:	4995      	ldr	r1, [pc, #596]	@ (8005430 <HAL_ADC_ConfigChannel+0x5ec>)
 80051dc:	428a      	cmp	r2, r1
 80051de:	d018      	beq.n	8005212 <HAL_ADC_ConfigChannel+0x3ce>
 80051e0:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 80051e4:	428a      	cmp	r2, r1
 80051e6:	d014      	beq.n	8005212 <HAL_ADC_ConfigChannel+0x3ce>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051e8:	4993      	ldr	r1, [pc, #588]	@ (8005438 <HAL_ADC_ConfigChannel+0x5f4>)
 80051ea:	6889      	ldr	r1, [r1, #8]
 80051ec:	f011 0f01 	tst.w	r1, #1
 80051f0:	d11d      	bne.n	800522e <HAL_ADC_ConfigChannel+0x3ea>
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051f2:	4992      	ldr	r1, [pc, #584]	@ (800543c <HAL_ADC_ConfigChannel+0x5f8>)
 80051f4:	428b      	cmp	r3, r1
 80051f6:	d020      	beq.n	800523a <HAL_ADC_ConfigChannel+0x3f6>
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80051f8:	4991      	ldr	r1, [pc, #580]	@ (8005440 <HAL_ADC_ConfigChannel+0x5fc>)
 80051fa:	428b      	cmp	r3, r1
 80051fc:	d052      	beq.n	80052a4 <HAL_ADC_ConfigChannel+0x460>
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80051fe:	4991      	ldr	r1, [pc, #580]	@ (8005444 <HAL_ADC_ConfigChannel+0x600>)
 8005200:	428b      	cmp	r3, r1
 8005202:	d073      	beq.n	80052ec <HAL_ADC_ConfigChannel+0x4a8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005204:	2000      	movs	r0, #0
 8005206:	e635      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005208:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 800520c:	e7e2      	b.n	80051d4 <HAL_ADC_ConfigChannel+0x390>
 800520e:	498e      	ldr	r1, [pc, #568]	@ (8005448 <HAL_ADC_ConfigChannel+0x604>)
 8005210:	e7e0      	b.n	80051d4 <HAL_ADC_ConfigChannel+0x390>
 8005212:	4987      	ldr	r1, [pc, #540]	@ (8005430 <HAL_ADC_ConfigChannel+0x5ec>)
 8005214:	6888      	ldr	r0, [r1, #8]
 8005216:	f010 0001 	ands.w	r0, r0, #1
 800521a:	d000      	beq.n	800521e <HAL_ADC_ConfigChannel+0x3da>
 800521c:	2001      	movs	r0, #1
 800521e:	498b      	ldr	r1, [pc, #556]	@ (800544c <HAL_ADC_ConfigChannel+0x608>)
 8005220:	6889      	ldr	r1, [r1, #8]
 8005222:	f011 0101 	ands.w	r1, r1, #1
 8005226:	d000      	beq.n	800522a <HAL_ADC_ConfigChannel+0x3e6>
 8005228:	2101      	movs	r1, #1
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800522a:	4301      	orrs	r1, r0
 800522c:	d0e1      	beq.n	80051f2 <HAL_ADC_ConfigChannel+0x3ae>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800522e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8005230:	f043 0320 	orr.w	r3, r3, #32
 8005234:	67a3      	str	r3, [r4, #120]	@ 0x78
            tmp_hal_status = HAL_ERROR;
 8005236:	2001      	movs	r0, #1
 8005238:	e61c      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800523a:	f415 0f00 	tst.w	r5, #8388608	@ 0x800000
 800523e:	d1db      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0x3b4>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005240:	4b7b      	ldr	r3, [pc, #492]	@ (8005430 <HAL_ADC_ConfigChannel+0x5ec>)
 8005242:	429a      	cmp	r2, r3
 8005244:	d008      	beq.n	8005258 <HAL_ADC_ConfigChannel+0x414>
 8005246:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800524a:	429a      	cmp	r2, r3
 800524c:	d004      	beq.n	8005258 <HAL_ADC_ConfigChannel+0x414>
 800524e:	4b7a      	ldr	r3, [pc, #488]	@ (8005438 <HAL_ADC_ConfigChannel+0x5f4>)
 8005250:	429a      	cmp	r2, r3
 8005252:	d001      	beq.n	8005258 <HAL_ADC_ConfigChannel+0x414>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005254:	2000      	movs	r0, #0
 8005256:	e60d      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005258:	4b75      	ldr	r3, [pc, #468]	@ (8005430 <HAL_ADC_ConfigChannel+0x5ec>)
 800525a:	429a      	cmp	r2, r3
 800525c:	d018      	beq.n	8005290 <HAL_ADC_ConfigChannel+0x44c>
 800525e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005262:	429a      	cmp	r2, r3
 8005264:	d012      	beq.n	800528c <HAL_ADC_ConfigChannel+0x448>
 8005266:	4973      	ldr	r1, [pc, #460]	@ (8005434 <HAL_ADC_ConfigChannel+0x5f0>)
 8005268:	f446 0300 	orr.w	r3, r6, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800526c:	688a      	ldr	r2, [r1, #8]
 800526e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005272:	4313      	orrs	r3, r2
 8005274:	608b      	str	r3, [r1, #8]
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005276:	4b76      	ldr	r3, [pc, #472]	@ (8005450 <HAL_ADC_ConfigChannel+0x60c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	099b      	lsrs	r3, r3, #6
 800527c:	4a75      	ldr	r2, [pc, #468]	@ (8005454 <HAL_ADC_ConfigChannel+0x610>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	099b      	lsrs	r3, r3, #6
 8005284:	3301      	adds	r3, #1
 8005286:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8005288:	9301      	str	r3, [sp, #4]
                while (wait_loop_index != 0UL)
 800528a:	e006      	b.n	800529a <HAL_ADC_ConfigChannel+0x456>
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800528c:	496e      	ldr	r1, [pc, #440]	@ (8005448 <HAL_ADC_ConfigChannel+0x604>)
 800528e:	e7eb      	b.n	8005268 <HAL_ADC_ConfigChannel+0x424>
 8005290:	496d      	ldr	r1, [pc, #436]	@ (8005448 <HAL_ADC_ConfigChannel+0x604>)
 8005292:	e7e9      	b.n	8005268 <HAL_ADC_ConfigChannel+0x424>
                  wait_loop_index--;
 8005294:	9b01      	ldr	r3, [sp, #4]
 8005296:	3b01      	subs	r3, #1
 8005298:	9301      	str	r3, [sp, #4]
                while (wait_loop_index != 0UL)
 800529a:	9b01      	ldr	r3, [sp, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f9      	bne.n	8005294 <HAL_ADC_ConfigChannel+0x450>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052a0:	2000      	movs	r0, #0
 80052a2:	e5e7      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80052a4:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 80052a8:	d1a9      	bne.n	80051fe <HAL_ADC_ConfigChannel+0x3ba>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052aa:	4b61      	ldr	r3, [pc, #388]	@ (8005430 <HAL_ADC_ConfigChannel+0x5ec>)
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d008      	beq.n	80052c2 <HAL_ADC_ConfigChannel+0x47e>
 80052b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d004      	beq.n	80052c2 <HAL_ADC_ConfigChannel+0x47e>
 80052b8:	4b5f      	ldr	r3, [pc, #380]	@ (8005438 <HAL_ADC_ConfigChannel+0x5f4>)
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d001      	beq.n	80052c2 <HAL_ADC_ConfigChannel+0x47e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052be:	2000      	movs	r0, #0
 80052c0:	e5d8      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005430 <HAL_ADC_ConfigChannel+0x5ec>)
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d00f      	beq.n	80052e8 <HAL_ADC_ConfigChannel+0x4a4>
 80052c8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d009      	beq.n	80052e4 <HAL_ADC_ConfigChannel+0x4a0>
 80052d0:	4958      	ldr	r1, [pc, #352]	@ (8005434 <HAL_ADC_ConfigChannel+0x5f0>)
 80052d2:	f046 7380 	orr.w	r3, r6, #16777216	@ 0x1000000
 80052d6:	688a      	ldr	r2, [r1, #8]
 80052d8:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80052dc:	4313      	orrs	r3, r2
 80052de:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052e0:	2000      	movs	r0, #0
}
 80052e2:	e5c7      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052e4:	4958      	ldr	r1, [pc, #352]	@ (8005448 <HAL_ADC_ConfigChannel+0x604>)
 80052e6:	e7f4      	b.n	80052d2 <HAL_ADC_ConfigChannel+0x48e>
 80052e8:	4957      	ldr	r1, [pc, #348]	@ (8005448 <HAL_ADC_ConfigChannel+0x604>)
 80052ea:	e7f2      	b.n	80052d2 <HAL_ADC_ConfigChannel+0x48e>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80052ec:	f415 0f80 	tst.w	r5, #4194304	@ 0x400000
 80052f0:	f040 8178 	bne.w	80055e4 <HAL_ADC_ConfigChannel+0x7a0>
              if (ADC_VREFINT_INSTANCE(hadc))
 80052f4:	4b4e      	ldr	r3, [pc, #312]	@ (8005430 <HAL_ADC_ConfigChannel+0x5ec>)
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d008      	beq.n	800530c <HAL_ADC_ConfigChannel+0x4c8>
 80052fa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80052fe:	429a      	cmp	r2, r3
 8005300:	d004      	beq.n	800530c <HAL_ADC_ConfigChannel+0x4c8>
 8005302:	4b4d      	ldr	r3, [pc, #308]	@ (8005438 <HAL_ADC_ConfigChannel+0x5f4>)
 8005304:	429a      	cmp	r2, r3
 8005306:	d001      	beq.n	800530c <HAL_ADC_ConfigChannel+0x4c8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005308:	2000      	movs	r0, #0
 800530a:	e5b3      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800530c:	4b48      	ldr	r3, [pc, #288]	@ (8005430 <HAL_ADC_ConfigChannel+0x5ec>)
 800530e:	429a      	cmp	r2, r3
 8005310:	d00f      	beq.n	8005332 <HAL_ADC_ConfigChannel+0x4ee>
 8005312:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005316:	429a      	cmp	r2, r3
 8005318:	d009      	beq.n	800532e <HAL_ADC_ConfigChannel+0x4ea>
 800531a:	4946      	ldr	r1, [pc, #280]	@ (8005434 <HAL_ADC_ConfigChannel+0x5f0>)
 800531c:	f446 0380 	orr.w	r3, r6, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8005320:	688a      	ldr	r2, [r1, #8]
 8005322:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005326:	4313      	orrs	r3, r2
 8005328:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800532a:	2000      	movs	r0, #0
}
 800532c:	e5a2      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800532e:	4946      	ldr	r1, [pc, #280]	@ (8005448 <HAL_ADC_ConfigChannel+0x604>)
 8005330:	e7f4      	b.n	800531c <HAL_ADC_ConfigChannel+0x4d8>
 8005332:	4945      	ldr	r1, [pc, #276]	@ (8005448 <HAL_ADC_ConfigChannel+0x604>)
 8005334:	e7f2      	b.n	800531c <HAL_ADC_ConfigChannel+0x4d8>
      tmp_channel = pConfig->Channel;
 8005336:	680e      	ldr	r6, [r1, #0]
      if (pConfig->Rank != ADC4_RANK_NONE)
 8005338:	684b      	ldr	r3, [r1, #4]
 800533a:	2b02      	cmp	r3, #2
 800533c:	f000 80d6 	beq.w	80054ec <HAL_ADC_ConfigChannel+0x6a8>
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8005340:	6922      	ldr	r2, [r4, #16]
 8005342:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8005346:	d01e      	beq.n	8005386 <HAL_ADC_ConfigChannel+0x542>
 8005348:	4943      	ldr	r1, [pc, #268]	@ (8005458 <HAL_ADC_ConfigChannel+0x614>)
 800534a:	428a      	cmp	r2, r1
 800534c:	d01b      	beq.n	8005386 <HAL_ADC_ConfigChannel+0x542>
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800534e:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	220f      	movs	r2, #15
 8005358:	409a      	lsls	r2, r3
 800535a:	ea21 0102 	bic.w	r1, r1, r2
 800535e:	f036 427f 	bics.w	r2, r6, #4278190080	@ 0xff000000
 8005362:	d11d      	bne.n	80053a0 <HAL_ADC_ConfigChannel+0x55c>
 8005364:	f3c6 6284 	ubfx	r2, r6, #26, #5
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	430b      	orrs	r3, r1
 800536e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005372:	6869      	ldr	r1, [r5, #4]
 8005374:	088b      	lsrs	r3, r1, #2
 8005376:	3301      	adds	r3, #1
 8005378:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800537a:	4293      	cmp	r3, r2
 800537c:	d806      	bhi.n	800538c <HAL_ADC_ConfigChannel+0x548>
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800537e:	4632      	mov	r2, r6
 8005380:	f7ff f9de 	bl	8004740 <LL_ADC_REG_SetSequencerRanks>
 8005384:	e002      	b.n	800538c <HAL_ADC_ConfigChannel+0x548>
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8005386:	4631      	mov	r1, r6
 8005388:	f7ff fa10 	bl	80047ac <LL_ADC_REG_SetSequencerChAdd>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800538c:	68aa      	ldr	r2, [r5, #8]
 800538e:	4631      	mov	r1, r6
 8005390:	6820      	ldr	r0, [r4, #0]
 8005392:	f7ff fa23 	bl	80047dc <LL_ADC_SetChannelSamplingTime>
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005396:	682b      	ldr	r3, [r5, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	db09      	blt.n	80053b0 <HAL_ADC_ConfigChannel+0x56c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800539c:	2000      	movs	r0, #0
 800539e:	e569      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a0:	fa96 f2a6 	rbit	r2, r6
  if (value == 0U)
 80053a4:	b112      	cbz	r2, 80053ac <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80053a6:	fab2 f282 	clz	r2, r2
 80053aa:	e7dd      	b.n	8005368 <HAL_ADC_ConfigChannel+0x524>
    return 32U;
 80053ac:	2220      	movs	r2, #32
 80053ae:	e7db      	b.n	8005368 <HAL_ADC_ConfigChannel+0x524>
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053b0:	6822      	ldr	r2, [r4, #0]
 80053b2:	491f      	ldr	r1, [pc, #124]	@ (8005430 <HAL_ADC_ConfigChannel+0x5ec>)
 80053b4:	428a      	cmp	r2, r1
 80053b6:	d019      	beq.n	80053ec <HAL_ADC_ConfigChannel+0x5a8>
 80053b8:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 80053bc:	428a      	cmp	r2, r1
 80053be:	d012      	beq.n	80053e6 <HAL_ADC_ConfigChannel+0x5a2>
 80053c0:	491c      	ldr	r1, [pc, #112]	@ (8005434 <HAL_ADC_ConfigChannel+0x5f0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80053c2:	6889      	ldr	r1, [r1, #8]
 80053c4:	f001 70e0 	and.w	r0, r1, #29360128	@ 0x1c00000
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80053c8:	4e24      	ldr	r6, [pc, #144]	@ (800545c <HAL_ADC_ConfigChannel+0x618>)
 80053ca:	42b3      	cmp	r3, r6
 80053cc:	d010      	beq.n	80053f0 <HAL_ADC_ConfigChannel+0x5ac>
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80053ce:	4e24      	ldr	r6, [pc, #144]	@ (8005460 <HAL_ADC_ConfigChannel+0x61c>)
 80053d0:	42b3      	cmp	r3, r6
 80053d2:	d050      	beq.n	8005476 <HAL_ADC_ConfigChannel+0x632>
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80053d4:	4e1b      	ldr	r6, [pc, #108]	@ (8005444 <HAL_ADC_ConfigChannel+0x600>)
 80053d6:	42b3      	cmp	r3, r6
 80053d8:	d064      	beq.n	80054a4 <HAL_ADC_ConfigChannel+0x660>
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80053da:	682a      	ldr	r2, [r5, #0]
 80053dc:	4b21      	ldr	r3, [pc, #132]	@ (8005464 <HAL_ADC_ConfigChannel+0x620>)
 80053de:	429a      	cmp	r2, r3
 80053e0:	d077      	beq.n	80054d2 <HAL_ADC_ConfigChannel+0x68e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053e2:	2000      	movs	r0, #0
 80053e4:	e546      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053e6:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 80053ea:	e7ea      	b.n	80053c2 <HAL_ADC_ConfigChannel+0x57e>
 80053ec:	4916      	ldr	r1, [pc, #88]	@ (8005448 <HAL_ADC_ConfigChannel+0x604>)
 80053ee:	e7e8      	b.n	80053c2 <HAL_ADC_ConfigChannel+0x57e>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80053f0:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 80053f4:	d1eb      	bne.n	80053ce <HAL_ADC_ConfigChannel+0x58a>
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005430 <HAL_ADC_ConfigChannel+0x5ec>)
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d017      	beq.n	800542c <HAL_ADC_ConfigChannel+0x5e8>
 80053fc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005400:	429a      	cmp	r2, r3
 8005402:	d011      	beq.n	8005428 <HAL_ADC_ConfigChannel+0x5e4>
 8005404:	4e0b      	ldr	r6, [pc, #44]	@ (8005434 <HAL_ADC_ConfigChannel+0x5f0>)
 8005406:	f440 0300 	orr.w	r3, r0, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800540a:	68b2      	ldr	r2, [r6, #8]
 800540c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005410:	4313      	orrs	r3, r2
 8005412:	60b3      	str	r3, [r6, #8]
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005414:	4b0e      	ldr	r3, [pc, #56]	@ (8005450 <HAL_ADC_ConfigChannel+0x60c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	099b      	lsrs	r3, r3, #6
 800541a:	4a0e      	ldr	r2, [pc, #56]	@ (8005454 <HAL_ADC_ConfigChannel+0x610>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	099b      	lsrs	r3, r3, #6
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	9301      	str	r3, [sp, #4]
            while (wait_loop_index != 0UL)
 8005426:	e022      	b.n	800546e <HAL_ADC_ConfigChannel+0x62a>
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005428:	4e07      	ldr	r6, [pc, #28]	@ (8005448 <HAL_ADC_ConfigChannel+0x604>)
 800542a:	e7ec      	b.n	8005406 <HAL_ADC_ConfigChannel+0x5c2>
 800542c:	4e06      	ldr	r6, [pc, #24]	@ (8005448 <HAL_ADC_ConfigChannel+0x604>)
 800542e:	e7ea      	b.n	8005406 <HAL_ADC_ConfigChannel+0x5c2>
 8005430:	42028000 	.word	0x42028000
 8005434:	46021300 	.word	0x46021300
 8005438:	46021000 	.word	0x46021000
 800543c:	ce080000 	.word	0xce080000
 8005440:	ca040000 	.word	0xca040000
 8005444:	80000001 	.word	0x80000001
 8005448:	42028300 	.word	0x42028300
 800544c:	42028100 	.word	0x42028100
 8005450:	20000008 	.word	0x20000008
 8005454:	053e2d63 	.word	0x053e2d63
 8005458:	80000010 	.word	0x80000010
 800545c:	b6002000 	.word	0xb6002000
 8005460:	ba004000 	.word	0xba004000
 8005464:	d7200000 	.word	0xd7200000
              wait_loop_index--;
 8005468:	9b01      	ldr	r3, [sp, #4]
 800546a:	3b01      	subs	r3, #1
 800546c:	9301      	str	r3, [sp, #4]
            while (wait_loop_index != 0UL)
 800546e:	9b01      	ldr	r3, [sp, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1f9      	bne.n	8005468 <HAL_ADC_ConfigChannel+0x624>
 8005474:	e7b1      	b.n	80053da <HAL_ADC_ConfigChannel+0x596>
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8005476:	f011 7f80 	tst.w	r1, #16777216	@ 0x1000000
 800547a:	d1ab      	bne.n	80053d4 <HAL_ADC_ConfigChannel+0x590>
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800547c:	4b5d      	ldr	r3, [pc, #372]	@ (80055f4 <HAL_ADC_ConfigChannel+0x7b0>)
 800547e:	429a      	cmp	r2, r3
 8005480:	d00e      	beq.n	80054a0 <HAL_ADC_ConfigChannel+0x65c>
 8005482:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005486:	429a      	cmp	r2, r3
 8005488:	d008      	beq.n	800549c <HAL_ADC_ConfigChannel+0x658>
 800548a:	4e5b      	ldr	r6, [pc, #364]	@ (80055f8 <HAL_ADC_ConfigChannel+0x7b4>)
 800548c:	f040 7380 	orr.w	r3, r0, #16777216	@ 0x1000000
 8005490:	68b2      	ldr	r2, [r6, #8]
 8005492:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005496:	4313      	orrs	r3, r2
 8005498:	60b3      	str	r3, [r6, #8]
}
 800549a:	e79e      	b.n	80053da <HAL_ADC_ConfigChannel+0x596>
 800549c:	4e57      	ldr	r6, [pc, #348]	@ (80055fc <HAL_ADC_ConfigChannel+0x7b8>)
 800549e:	e7f5      	b.n	800548c <HAL_ADC_ConfigChannel+0x648>
 80054a0:	4e56      	ldr	r6, [pc, #344]	@ (80055fc <HAL_ADC_ConfigChannel+0x7b8>)
 80054a2:	e7f3      	b.n	800548c <HAL_ADC_ConfigChannel+0x648>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80054a4:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 80054a8:	d197      	bne.n	80053da <HAL_ADC_ConfigChannel+0x596>
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054aa:	4b52      	ldr	r3, [pc, #328]	@ (80055f4 <HAL_ADC_ConfigChannel+0x7b0>)
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d00e      	beq.n	80054ce <HAL_ADC_ConfigChannel+0x68a>
 80054b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d008      	beq.n	80054ca <HAL_ADC_ConfigChannel+0x686>
 80054b8:	4e4f      	ldr	r6, [pc, #316]	@ (80055f8 <HAL_ADC_ConfigChannel+0x7b4>)
 80054ba:	f440 0380 	orr.w	r3, r0, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80054be:	68b2      	ldr	r2, [r6, #8]
 80054c0:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60b3      	str	r3, [r6, #8]
}
 80054c8:	e787      	b.n	80053da <HAL_ADC_ConfigChannel+0x596>
 80054ca:	4e4c      	ldr	r6, [pc, #304]	@ (80055fc <HAL_ADC_ConfigChannel+0x7b8>)
 80054cc:	e7f5      	b.n	80054ba <HAL_ADC_ConfigChannel+0x676>
 80054ce:	4e4b      	ldr	r6, [pc, #300]	@ (80055fc <HAL_ADC_ConfigChannel+0x7b8>)
 80054d0:	e7f3      	b.n	80054ba <HAL_ADC_ConfigChannel+0x676>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80054d2:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 80054d6:	f040 8087 	bne.w	80055e8 <HAL_ADC_ConfigChannel+0x7a4>
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80054da:	6822      	ldr	r2, [r4, #0]
 80054dc:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
 80054e0:	f043 0301 	orr.w	r3, r3, #1
 80054e4:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054e8:	2000      	movs	r0, #0
 80054ea:	e4c3      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80054ec:	6923      	ldr	r3, [r4, #16]
 80054ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054f2:	d002      	beq.n	80054fa <HAL_ADC_ConfigChannel+0x6b6>
 80054f4:	4a42      	ldr	r2, [pc, #264]	@ (8005600 <HAL_ADC_ConfigChannel+0x7bc>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d108      	bne.n	800550c <HAL_ADC_ConfigChannel+0x6c8>
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 80054fa:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80054fc:	f3c6 6384 	ubfx	r3, r6, #26, #5
 8005500:	2101      	movs	r1, #1
 8005502:	fa01 f303 	lsl.w	r3, r1, r3
 8005506:	ea22 0303 	bic.w	r3, r2, r3
 800550a:	6283      	str	r3, [r0, #40]	@ 0x28
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	db01      	blt.n	8005516 <HAL_ADC_ConfigChannel+0x6d2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005512:	2000      	movs	r0, #0
 8005514:	e4ae      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005516:	6822      	ldr	r2, [r4, #0]
 8005518:	4936      	ldr	r1, [pc, #216]	@ (80055f4 <HAL_ADC_ConfigChannel+0x7b0>)
 800551a:	428a      	cmp	r2, r1
 800551c:	d021      	beq.n	8005562 <HAL_ADC_ConfigChannel+0x71e>
 800551e:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8005522:	428a      	cmp	r2, r1
 8005524:	d01a      	beq.n	800555c <HAL_ADC_ConfigChannel+0x718>
 8005526:	4934      	ldr	r1, [pc, #208]	@ (80055f8 <HAL_ADC_ConfigChannel+0x7b4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8005528:	6889      	ldr	r1, [r1, #8]
          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800552a:	4836      	ldr	r0, [pc, #216]	@ (8005604 <HAL_ADC_ConfigChannel+0x7c0>)
 800552c:	4283      	cmp	r3, r0
 800552e:	d01a      	beq.n	8005566 <HAL_ADC_ConfigChannel+0x722>
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005530:	4835      	ldr	r0, [pc, #212]	@ (8005608 <HAL_ADC_ConfigChannel+0x7c4>)
 8005532:	4283      	cmp	r3, r0
 8005534:	d030      	beq.n	8005598 <HAL_ADC_ConfigChannel+0x754>
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005536:	4835      	ldr	r0, [pc, #212]	@ (800560c <HAL_ADC_ConfigChannel+0x7c8>)
 8005538:	4283      	cmp	r3, r0
 800553a:	d123      	bne.n	8005584 <HAL_ADC_ConfigChannel+0x740>
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800553c:	4b2d      	ldr	r3, [pc, #180]	@ (80055f4 <HAL_ADC_ConfigChannel+0x7b0>)
 800553e:	429a      	cmp	r2, r3
 8005540:	d040      	beq.n	80055c4 <HAL_ADC_ConfigChannel+0x780>
 8005542:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005546:	429a      	cmp	r2, r3
 8005548:	d03a      	beq.n	80055c0 <HAL_ADC_ConfigChannel+0x77c>
 800554a:	482b      	ldr	r0, [pc, #172]	@ (80055f8 <HAL_ADC_ConfigChannel+0x7b4>)
 800554c:	f001 73c0 	and.w	r3, r1, #25165824	@ 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8005550:	6882      	ldr	r2, [r0, #8]
 8005552:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005556:	4313      	orrs	r3, r2
 8005558:	6083      	str	r3, [r0, #8]
}
 800555a:	e013      	b.n	8005584 <HAL_ADC_ConfigChannel+0x740>
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800555c:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8005560:	e7e2      	b.n	8005528 <HAL_ADC_ConfigChannel+0x6e4>
 8005562:	4926      	ldr	r1, [pc, #152]	@ (80055fc <HAL_ADC_ConfigChannel+0x7b8>)
 8005564:	e7e0      	b.n	8005528 <HAL_ADC_ConfigChannel+0x6e4>
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005566:	4b23      	ldr	r3, [pc, #140]	@ (80055f4 <HAL_ADC_ConfigChannel+0x7b0>)
 8005568:	429a      	cmp	r2, r3
 800556a:	d013      	beq.n	8005594 <HAL_ADC_ConfigChannel+0x750>
 800556c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005570:	429a      	cmp	r2, r3
 8005572:	d00d      	beq.n	8005590 <HAL_ADC_ConfigChannel+0x74c>
 8005574:	4820      	ldr	r0, [pc, #128]	@ (80055f8 <HAL_ADC_ConfigChannel+0x7b4>)
 8005576:	f001 73a0 	and.w	r3, r1, #20971520	@ 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800557a:	6882      	ldr	r2, [r0, #8]
 800557c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005580:	4313      	orrs	r3, r2
 8005582:	6083      	str	r3, [r0, #8]
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8005584:	682a      	ldr	r2, [r5, #0]
 8005586:	4b22      	ldr	r3, [pc, #136]	@ (8005610 <HAL_ADC_ConfigChannel+0x7cc>)
 8005588:	429a      	cmp	r2, r3
 800558a:	d01d      	beq.n	80055c8 <HAL_ADC_ConfigChannel+0x784>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800558c:	2000      	movs	r0, #0
 800558e:	e471      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005590:	481a      	ldr	r0, [pc, #104]	@ (80055fc <HAL_ADC_ConfigChannel+0x7b8>)
 8005592:	e7f0      	b.n	8005576 <HAL_ADC_ConfigChannel+0x732>
 8005594:	4819      	ldr	r0, [pc, #100]	@ (80055fc <HAL_ADC_ConfigChannel+0x7b8>)
 8005596:	e7ee      	b.n	8005576 <HAL_ADC_ConfigChannel+0x732>
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005598:	4b16      	ldr	r3, [pc, #88]	@ (80055f4 <HAL_ADC_ConfigChannel+0x7b0>)
 800559a:	429a      	cmp	r2, r3
 800559c:	d00e      	beq.n	80055bc <HAL_ADC_ConfigChannel+0x778>
 800559e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d008      	beq.n	80055b8 <HAL_ADC_ConfigChannel+0x774>
 80055a6:	4814      	ldr	r0, [pc, #80]	@ (80055f8 <HAL_ADC_ConfigChannel+0x7b4>)
 80055a8:	f401 0340 	and.w	r3, r1, #12582912	@ 0xc00000
 80055ac:	6882      	ldr	r2, [r0, #8]
 80055ae:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80055b2:	4313      	orrs	r3, r2
 80055b4:	6083      	str	r3, [r0, #8]
}
 80055b6:	e7e5      	b.n	8005584 <HAL_ADC_ConfigChannel+0x740>
 80055b8:	4810      	ldr	r0, [pc, #64]	@ (80055fc <HAL_ADC_ConfigChannel+0x7b8>)
 80055ba:	e7f5      	b.n	80055a8 <HAL_ADC_ConfigChannel+0x764>
 80055bc:	480f      	ldr	r0, [pc, #60]	@ (80055fc <HAL_ADC_ConfigChannel+0x7b8>)
 80055be:	e7f3      	b.n	80055a8 <HAL_ADC_ConfigChannel+0x764>
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055c0:	480e      	ldr	r0, [pc, #56]	@ (80055fc <HAL_ADC_ConfigChannel+0x7b8>)
 80055c2:	e7c3      	b.n	800554c <HAL_ADC_ConfigChannel+0x708>
 80055c4:	480d      	ldr	r0, [pc, #52]	@ (80055fc <HAL_ADC_ConfigChannel+0x7b8>)
 80055c6:	e7c1      	b.n	800554c <HAL_ADC_ConfigChannel+0x708>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055c8:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 80055cc:	d10e      	bne.n	80055ec <HAL_ADC_ConfigChannel+0x7a8>
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80055ce:	6822      	ldr	r2, [r4, #0]
 80055d0:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
 80055d4:	f043 0301 	orr.w	r3, r3, #1
 80055d8:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055dc:	2000      	movs	r0, #0
 80055de:	e449      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
 80055e0:	2000      	movs	r0, #0
 80055e2:	e447      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
 80055e4:	2000      	movs	r0, #0
 80055e6:	e445      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
 80055e8:	2000      	movs	r0, #0
 80055ea:	e443      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
 80055ec:	2000      	movs	r0, #0
 80055ee:	e441      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80055f0:	2002      	movs	r0, #2
 80055f2:	e442      	b.n	8004e7a <HAL_ADC_ConfigChannel+0x36>
 80055f4:	42028000 	.word	0x42028000
 80055f8:	46021300 	.word	0x46021300
 80055fc:	42028300 	.word	0x42028300
 8005600:	80000010 	.word	0x80000010
 8005604:	ce080000 	.word	0xce080000
 8005608:	ca040000 	.word	0xca040000
 800560c:	80000001 	.word	0x80000001
 8005610:	d7200000 	.word	0xd7200000

08005614 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005618:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800561a:	68ab      	ldr	r3, [r5, #8]
 800561c:	f013 0304 	ands.w	r3, r3, #4
 8005620:	d000      	beq.n	8005624 <ADC_ConversionStop+0x10>
 8005622:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005624:	68aa      	ldr	r2, [r5, #8]
 8005626:	f012 0208 	ands.w	r2, r2, #8
 800562a:	d000      	beq.n	800562e <ADC_ConversionStop+0x1a>
 800562c:	2201      	movs	r2, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
  if ((tmp_adc_is_conversion_on_going_regular != 0UL) || (tmp_adc_is_conversion_on_going_injected != 0UL))
 800562e:	b90b      	cbnz	r3, 8005634 <ADC_ConversionStop+0x20>
 8005630:	2a00      	cmp	r2, #0
 8005632:	d06e      	beq.n	8005712 <ADC_ConversionStop+0xfe>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 8005634:	68eb      	ldr	r3, [r5, #12]
 8005636:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800563a:	d003      	beq.n	8005644 <ADC_ConversionStop+0x30>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800563c:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8005640:	2b01      	cmp	r3, #1
 8005642:	d044      	beq.n	80056ce <ADC_ConversionStop+0xba>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005644:	2902      	cmp	r1, #2
 8005646:	d012      	beq.n	800566e <ADC_ConversionStop+0x5a>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005648:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	f012 0f04 	tst.w	r2, #4
 8005650:	d00b      	beq.n	800566a <ADC_ConversionStop+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	f012 0f02 	tst.w	r2, #2
 8005658:	d107      	bne.n	800566a <ADC_ConversionStop+0x56>
  MODIFY_REG(ADCx->CR,
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005660:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8005664:	f042 0210 	orr.w	r2, r2, #16
 8005668:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800566a:	2901      	cmp	r1, #1
 800566c:	d049      	beq.n	8005702 <ADC_ConversionStop+0xee>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800566e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	f012 0f08 	tst.w	r2, #8
 8005676:	d00b      	beq.n	8005690 <ADC_ConversionStop+0x7c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	f012 0f02 	tst.w	r2, #2
 800567e:	d107      	bne.n	8005690 <ADC_ConversionStop+0x7c>
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_JADSTP);
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005686:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800568a:	f042 0220 	orr.w	r2, r2, #32
 800568e:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005690:	2902      	cmp	r1, #2
 8005692:	d038      	beq.n	8005706 <ADC_ConversionStop+0xf2>
 8005694:	2903      	cmp	r1, #3
 8005696:	d138      	bne.n	800570a <ADC_ConversionStop+0xf6>
 8005698:	250c      	movs	r5, #12
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800569a:	f7ff f823 	bl	80046e4 <HAL_GetTick>
 800569e:	4606      	mov	r6, r0

    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	422b      	tst	r3, r5
 80056a6:	d032      	beq.n	800570e <ADC_ConversionStop+0xfa>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80056a8:	f7ff f81c 	bl	80046e4 <HAL_GetTick>
 80056ac:	1b80      	subs	r0, r0, r6
 80056ae:	2805      	cmp	r0, #5
 80056b0:	d9f6      	bls.n	80056a0 <ADC_ConversionStop+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	422b      	tst	r3, r5
 80056b8:	d0f2      	beq.n	80056a0 <ADC_ConversionStop+0x8c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056ba:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80056bc:	f043 0310 	orr.w	r3, r3, #16
 80056c0:	67a3      	str	r3, [r4, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056c2:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80056c4:	f043 0301 	orr.w	r3, r3, #1
 80056c8:	67e3      	str	r3, [r4, #124]	@ 0x7c

          return HAL_ERROR;
 80056ca:	2001      	movs	r0, #1
 80056cc:	e020      	b.n	8005710 <ADC_ConversionStop+0xfc>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80056ce:	7f20      	ldrb	r0, [r4, #28]
 80056d0:	2801      	cmp	r0, #1
 80056d2:	d1b7      	bne.n	8005644 <ADC_ConversionStop+0x30>
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 80056d4:	2300      	movs	r3, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80056d6:	682a      	ldr	r2, [r5, #0]
 80056d8:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80056dc:	d10d      	bne.n	80056fa <ADC_ConversionStop+0xe6>
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80056de:	4a0e      	ldr	r2, [pc, #56]	@ (8005718 <ADC_ConversionStop+0x104>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d801      	bhi.n	80056e8 <ADC_ConversionStop+0xd4>
        conversion_timeout_cpu_cycles++;
 80056e4:	3301      	adds	r3, #1
 80056e6:	e7f6      	b.n	80056d6 <ADC_ConversionStop+0xc2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056e8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80056ea:	f043 0310 	orr.w	r3, r3, #16
 80056ee:	67a3      	str	r3, [r4, #120]	@ 0x78
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056f0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	67e3      	str	r3, [r4, #124]	@ 0x7c
          return HAL_ERROR;
 80056f8:	e00a      	b.n	8005710 <ADC_ConversionStop+0xfc>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80056fa:	2340      	movs	r3, #64	@ 0x40
 80056fc:	602b      	str	r3, [r5, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80056fe:	2101      	movs	r1, #1
 8005700:	e7a2      	b.n	8005648 <ADC_ConversionStop+0x34>
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 8005702:	2504      	movs	r5, #4
 8005704:	e7c9      	b.n	800569a <ADC_ConversionStop+0x86>
        tmp_adc_cr_adstart_jadstart = ADC_CR_JADSTART;
 8005706:	2508      	movs	r5, #8
 8005708:	e7c7      	b.n	800569a <ADC_ConversionStop+0x86>
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 800570a:	2504      	movs	r5, #4
 800570c:	e7c5      	b.n	800569a <ADC_ConversionStop+0x86>
        }
      }
    }
  }

  return HAL_OK;
 800570e:	2000      	movs	r0, #0
}
 8005710:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005712:	2000      	movs	r0, #0
 8005714:	e7fc      	b.n	8005710 <ADC_ConversionStop+0xfc>
 8005716:	bf00      	nop
 8005718:	000cdbff 	.word	0x000cdbff

0800571c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800571c:	b538      	push	{r3, r4, r5, lr}

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800571e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	f012 0f01 	tst.w	r2, #1
 8005726:	d166      	bne.n	80057f6 <ADC_Enable+0xda>
 8005728:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800572a:	6899      	ldr	r1, [r3, #8]
 800572c:	4a34      	ldr	r2, [pc, #208]	@ (8005800 <ADC_Enable+0xe4>)
 800572e:	4211      	tst	r1, r2
 8005730:	d128      	bne.n	8005784 <ADC_Enable+0x68>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);

      return HAL_ERROR;
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8005732:	2201      	movs	r2, #1
 8005734:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8005736:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8005738:	6893      	ldr	r3, [r2, #8]
 800573a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800573e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005742:	f043 0301 	orr.w	r3, r3, #1
 8005746:	6093      	str	r3, [r2, #8]

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8005748:	6a03      	ldr	r3, [r0, #32]
 800574a:	b11b      	cbz	r3, 8005754 <ADC_Enable+0x38>
 800574c:	6802      	ldr	r2, [r0, #0]
 800574e:	4b2d      	ldr	r3, [pc, #180]	@ (8005804 <ADC_Enable+0xe8>)
 8005750:	429a      	cmp	r2, r3
 8005752:	d052      	beq.n	80057fa <ADC_Enable+0xde>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005754:	f7fe ffc6 	bl	80046e4 <HAL_GetTick>
 8005758:	4605      	mov	r5, r0
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	4a2a      	ldr	r2, [pc, #168]	@ (8005808 <ADC_Enable+0xec>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d01d      	beq.n	800579e <ADC_Enable+0x82>
 8005762:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8005766:	4293      	cmp	r3, r2
 8005768:	d016      	beq.n	8005798 <ADC_Enable+0x7c>
 800576a:	4a28      	ldr	r2, [pc, #160]	@ (800580c <ADC_Enable+0xf0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800576c:	6892      	ldr	r2, [r2, #8]
 800576e:	f002 021f 	and.w	r2, r2, #31
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005772:	4927      	ldr	r1, [pc, #156]	@ (8005810 <ADC_Enable+0xf4>)
 8005774:	428b      	cmp	r3, r1
 8005776:	d014      	beq.n	80057a2 <ADC_Enable+0x86>
 8005778:	4619      	mov	r1, r3
 800577a:	428b      	cmp	r3, r1
 800577c:	d014      	beq.n	80057a8 <ADC_Enable+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800577e:	b19a      	cbz	r2, 80057a8 <ADC_Enable+0x8c>
        }
      }
    }
  }

  return HAL_OK;
 8005780:	2000      	movs	r0, #0
 8005782:	e039      	b.n	80057f8 <ADC_Enable+0xdc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005784:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8005786:	f043 0310 	orr.w	r3, r3, #16
 800578a:	6783      	str	r3, [r0, #120]	@ 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800578c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800578e:	f043 0301 	orr.w	r3, r3, #1
 8005792:	67c3      	str	r3, [r0, #124]	@ 0x7c
      return HAL_ERROR;
 8005794:	2001      	movs	r0, #1
 8005796:	e02f      	b.n	80057f8 <ADC_Enable+0xdc>
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005798:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800579c:	e7e6      	b.n	800576c <ADC_Enable+0x50>
 800579e:	4a1d      	ldr	r2, [pc, #116]	@ (8005814 <ADC_Enable+0xf8>)
 80057a0:	e7e4      	b.n	800576c <ADC_Enable+0x50>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80057a2:	f5a1 7180 	sub.w	r1, r1, #256	@ 0x100
 80057a6:	e7e8      	b.n	800577a <ADC_Enable+0x5e>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	f012 0f01 	tst.w	r2, #1
 80057b0:	d11f      	bne.n	80057f2 <ADC_Enable+0xd6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	f012 0f01 	tst.w	r2, #1
 80057b8:	d107      	bne.n	80057ca <ADC_Enable+0xae>
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80057c0:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80057c4:	f042 0201 	orr.w	r2, r2, #1
 80057c8:	609a      	str	r2, [r3, #8]
          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80057ca:	f7fe ff8b 	bl	80046e4 <HAL_GetTick>
 80057ce:	1b40      	subs	r0, r0, r5
 80057d0:	2802      	cmp	r0, #2
 80057d2:	d9e9      	bls.n	80057a8 <ADC_Enable+0x8c>
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f013 0f01 	tst.w	r3, #1
 80057dc:	d1e4      	bne.n	80057a8 <ADC_Enable+0x8c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057de:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80057e0:	f043 0310 	orr.w	r3, r3, #16
 80057e4:	67a3      	str	r3, [r4, #120]	@ 0x78
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057e6:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80057e8:	f043 0301 	orr.w	r3, r3, #1
 80057ec:	67e3      	str	r3, [r4, #124]	@ 0x7c
              return HAL_ERROR;
 80057ee:	2001      	movs	r0, #1
 80057f0:	e002      	b.n	80057f8 <ADC_Enable+0xdc>
  return HAL_OK;
 80057f2:	2000      	movs	r0, #0
 80057f4:	e000      	b.n	80057f8 <ADC_Enable+0xdc>
 80057f6:	2000      	movs	r0, #0
}
 80057f8:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80057fa:	2000      	movs	r0, #0
 80057fc:	e7fc      	b.n	80057f8 <ADC_Enable+0xdc>
 80057fe:	bf00      	nop
 8005800:	8000003f 	.word	0x8000003f
 8005804:	46021000 	.word	0x46021000
 8005808:	42028000 	.word	0x42028000
 800580c:	46021300 	.word	0x46021300
 8005810:	42028100 	.word	0x42028100
 8005814:	42028300 	.word	0x42028300

08005818 <HAL_ADC_Start>:
{
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800581c:	6803      	ldr	r3, [r0, #0]
 800581e:	4a4e      	ldr	r2, [pc, #312]	@ (8005958 <HAL_ADC_Start+0x140>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d067      	beq.n	80058f4 <HAL_ADC_Start+0xdc>
 8005824:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8005828:	4293      	cmp	r3, r2
 800582a:	d060      	beq.n	80058ee <HAL_ADC_Start+0xd6>
 800582c:	4a4b      	ldr	r2, [pc, #300]	@ (800595c <HAL_ADC_Start+0x144>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800582e:	6895      	ldr	r5, [r2, #8]
 8005830:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f013 0f04 	tst.w	r3, #4
 800583a:	f040 8089 	bne.w	8005950 <HAL_ADC_Start+0x138>
    __HAL_LOCK(hadc);
 800583e:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 8005842:	2b01      	cmp	r3, #1
 8005844:	f000 8086 	beq.w	8005954 <HAL_ADC_Start+0x13c>
 8005848:	2301      	movs	r3, #1
 800584a:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
    tmp_hal_status = ADC_Enable(hadc);
 800584e:	4620      	mov	r0, r4
 8005850:	f7ff ff64 	bl	800571c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005854:	2800      	cmp	r0, #0
 8005856:	d177      	bne.n	8005948 <HAL_ADC_Start+0x130>
      ADC_STATE_CLR_SET(hadc->State,
 8005858:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800585a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800585e:	f023 0301 	bic.w	r3, r3, #1
 8005862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005866:	67a3      	str	r3, [r4, #120]	@ 0x78
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	4a3d      	ldr	r2, [pc, #244]	@ (8005960 <HAL_ADC_Start+0x148>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d049      	beq.n	8005904 <HAL_ADC_Start+0xec>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005870:	f102 427c 	add.w	r2, r2, #4227858432	@ 0xfc000000
 8005874:	f502 42e2 	add.w	r2, r2, #28928	@ 0x7100
 8005878:	4293      	cmp	r3, r2
 800587a:	d03d      	beq.n	80058f8 <HAL_ADC_Start+0xe0>
 800587c:	461a      	mov	r2, r3
 800587e:	4293      	cmp	r3, r2
 8005880:	d000      	beq.n	8005884 <HAL_ADC_Start+0x6c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005882:	b91d      	cbnz	r5, 800588c <HAL_ADC_Start+0x74>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005884:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8005886:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800588a:	67a2      	str	r2, [r4, #120]	@ 0x78
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800588c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800588e:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8005892:	d034      	beq.n	80058fe <HAL_ADC_Start+0xe6>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005894:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8005896:	f022 0206 	bic.w	r2, r2, #6
 800589a:	67e2      	str	r2, [r4, #124]	@ 0x7c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800589c:	221c      	movs	r2, #28
 800589e:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 80058a0:	2300      	movs	r3, #0
 80058a2:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005960 <HAL_ADC_Start+0x148>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d042      	beq.n	8005934 <HAL_ADC_Start+0x11c>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058ae:	f102 427c 	add.w	r2, r2, #4227858432	@ 0xfc000000
 80058b2:	f502 42e2 	add.w	r2, r2, #28928	@ 0x7100
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d027      	beq.n	800590a <HAL_ADC_Start+0xf2>
 80058ba:	461a      	mov	r2, r3
 80058bc:	4293      	cmp	r3, r2
 80058be:	d027      	beq.n	8005910 <HAL_ADC_Start+0xf8>
 80058c0:	2d09      	cmp	r5, #9
 80058c2:	d805      	bhi.n	80058d0 <HAL_ADC_Start+0xb8>
 80058c4:	f240 2121 	movw	r1, #545	@ 0x221
 80058c8:	40e9      	lsrs	r1, r5
 80058ca:	f011 0f01 	tst.w	r1, #1
 80058ce:	d11f      	bne.n	8005910 <HAL_ADC_Start+0xf8>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80058d0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80058d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058d6:	67a3      	str	r3, [r4, #120]	@ 0x78
          if (READ_BIT(tmp_adc_master->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 80058d8:	68d3      	ldr	r3, [r2, #12]
 80058da:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80058de:	d029      	beq.n	8005934 <HAL_ADC_Start+0x11c>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80058e0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80058e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80058e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80058ea:	67a3      	str	r3, [r4, #120]	@ 0x78
 80058ec:	e022      	b.n	8005934 <HAL_ADC_Start+0x11c>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058ee:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 80058f2:	e79c      	b.n	800582e <HAL_ADC_Start+0x16>
 80058f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005964 <HAL_ADC_Start+0x14c>)
 80058f6:	e79a      	b.n	800582e <HAL_ADC_Start+0x16>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058f8:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 80058fc:	e7bf      	b.n	800587e <HAL_ADC_Start+0x66>
          ADC_CLEAR_ERRORCODE(hadc);
 80058fe:	2200      	movs	r2, #0
 8005900:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8005902:	e7cb      	b.n	800589c <HAL_ADC_Start+0x84>
        ADC_CLEAR_ERRORCODE(hadc);
 8005904:	2200      	movs	r2, #0
 8005906:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8005908:	e7c8      	b.n	800589c <HAL_ADC_Start+0x84>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800590a:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800590e:	e7d5      	b.n	80058bc <HAL_ADC_Start+0xa4>
          if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8005916:	d005      	beq.n	8005924 <HAL_ADC_Start+0x10c>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005918:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800591a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800591e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005922:	67a2      	str	r2, [r4, #120]	@ 0x78
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800592a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800592e:	f042 0204 	orr.w	r2, r2, #4
 8005932:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005934:	6822      	ldr	r2, [r4, #0]
 8005936:	6893      	ldr	r3, [r2, #8]
 8005938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800593c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005940:	f043 0304 	orr.w	r3, r3, #4
 8005944:	6093      	str	r3, [r2, #8]
}
 8005946:	e004      	b.n	8005952 <HAL_ADC_Start+0x13a>
      __HAL_UNLOCK(hadc);
 8005948:	2300      	movs	r3, #0
 800594a:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
 800594e:	e000      	b.n	8005952 <HAL_ADC_Start+0x13a>
    tmp_hal_status = HAL_BUSY;
 8005950:	2002      	movs	r0, #2
}
 8005952:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8005954:	2002      	movs	r0, #2
 8005956:	e7fc      	b.n	8005952 <HAL_ADC_Start+0x13a>
 8005958:	42028000 	.word	0x42028000
 800595c:	46021300 	.word	0x46021300
 8005960:	46021000 	.word	0x46021000
 8005964:	42028300 	.word	0x42028300

08005968 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800596c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800596e:	6893      	ldr	r3, [r2, #8]
 8005970:	f013 0302 	ands.w	r3, r3, #2
 8005974:	d000      	beq.n	8005978 <ADC_Disable+0x10>
 8005976:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005978:	6891      	ldr	r1, [r2, #8]
 800597a:	f011 0f01 	tst.w	r1, #1
 800597e:	d039      	beq.n	80059f4 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8005980:	2b00      	cmp	r3, #0
 8005982:	d139      	bne.n	80059f8 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005984:	6893      	ldr	r3, [r2, #8]
 8005986:	f003 030d 	and.w	r3, r3, #13
 800598a:	2b01      	cmp	r3, #1
 800598c:	d009      	beq.n	80059a2 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800598e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8005990:	f043 0310 	orr.w	r3, r3, #16
 8005994:	67a3      	str	r3, [r4, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005996:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8005998:	f043 0301 	orr.w	r3, r3, #1
 800599c:	67e3      	str	r3, [r4, #124]	@ 0x7c

      return HAL_ERROR;
 800599e:	2001      	movs	r0, #1
 80059a0:	e029      	b.n	80059f6 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 80059a2:	6893      	ldr	r3, [r2, #8]
 80059a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80059ac:	f043 0302 	orr.w	r3, r3, #2
 80059b0:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	2203      	movs	r2, #3
 80059b6:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80059b8:	f7fe fe94 	bl	80046e4 <HAL_GetTick>
 80059bc:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f013 0f01 	tst.w	r3, #1
 80059c6:	d013      	beq.n	80059f0 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80059c8:	f7fe fe8c 	bl	80046e4 <HAL_GetTick>
 80059cc:	1b40      	subs	r0, r0, r5
 80059ce:	2802      	cmp	r0, #2
 80059d0:	d9f5      	bls.n	80059be <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f013 0f01 	tst.w	r3, #1
 80059da:	d0f0      	beq.n	80059be <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059dc:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80059de:	f043 0310 	orr.w	r3, r3, #16
 80059e2:	67a3      	str	r3, [r4, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059e4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80059e6:	f043 0301 	orr.w	r3, r3, #1
 80059ea:	67e3      	str	r3, [r4, #124]	@ 0x7c

          return HAL_ERROR;
 80059ec:	2001      	movs	r0, #1
 80059ee:	e002      	b.n	80059f6 <ADC_Disable+0x8e>
        }
      }
    }
  }

  return HAL_OK;
 80059f0:	2000      	movs	r0, #0
 80059f2:	e000      	b.n	80059f6 <ADC_Disable+0x8e>
 80059f4:	2000      	movs	r0, #0
}
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80059f8:	2000      	movs	r0, #0
 80059fa:	e7fc      	b.n	80059f6 <ADC_Disable+0x8e>

080059fc <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80059fc:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d01a      	beq.n	8005a3a <HAL_ADC_Stop+0x3e>
{
 8005a04:	b510      	push	{r4, lr}
 8005a06:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005a0e:	2103      	movs	r1, #3
 8005a10:	f7ff fe00 	bl	8005614 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8005a14:	b118      	cbz	r0, 8005a1e <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8005a16:	2300      	movs	r3, #0
 8005a18:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
}
 8005a1c:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f7ff ffa2 	bl	8005968 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d1f6      	bne.n	8005a16 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8005a28:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8005a2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a2e:	f023 0301 	bic.w	r3, r3, #1
 8005a32:	f043 0301 	orr.w	r3, r3, #1
 8005a36:	67a3      	str	r3, [r4, #120]	@ 0x78
 8005a38:	e7ed      	b.n	8005a16 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8005a3a:	2002      	movs	r0, #2
}
 8005a3c:	4770      	bx	lr
	...

08005a40 <LL_ADC_StartCalibration>:
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8005a40:	4b0a      	ldr	r3, [pc, #40]	@ (8005a6c <LL_ADC_StartCalibration+0x2c>)
 8005a42:	4298      	cmp	r0, r3
 8005a44:	d009      	beq.n	8005a5a <LL_ADC_StartCalibration+0x1a>
    MODIFY_REG(ADCx->CR,
 8005a46:	6882      	ldr	r2, [r0, #8]
 8005a48:	4b09      	ldr	r3, [pc, #36]	@ (8005a70 <LL_ADC_StartCalibration+0x30>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 8005a50:	430b      	orrs	r3, r1
 8005a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a56:	6083      	str	r3, [r0, #8]
 8005a58:	4770      	bx	lr
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8005a5a:	6883      	ldr	r3, [r0, #8]
 8005a5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a68:	6083      	str	r3, [r0, #8]
}
 8005a6a:	4770      	bx	lr
 8005a6c:	46021000 	.word	0x46021000
 8005a70:	7ffeffc0 	.word	0x7ffeffc0

08005a74 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8005a7c:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	f000 80e7 	beq.w	8005c54 <HAL_ADCEx_Calibration_Start+0x1e0>
 8005a86:	4604      	mov	r4, r0
 8005a88:	460d      	mov	r5, r1
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005a90:	f7ff ff6a 	bl	8005968 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005a94:	4606      	mov	r6, r0
 8005a96:	2800      	cmp	r0, #0
 8005a98:	f040 80d2 	bne.w	8005c40 <HAL_ADCEx_Calibration_Start+0x1cc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8005a9c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8005a9e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005aa2:	f023 0302 	bic.w	r3, r3, #2
 8005aa6:	f043 0302 	orr.w	r3, r3, #2
 8005aaa:	67a3      	str	r3, [r4, #120]	@ 0x78

    if (hadc->Instance == ADC4)
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	4b6a      	ldr	r3, [pc, #424]	@ (8005c58 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8005ab0:	4298      	cmp	r0, r3
 8005ab2:	d023      	beq.n	8005afc <HAL_ADCEx_Calibration_Start+0x88>
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 8005ab4:	4a69      	ldr	r2, [pc, #420]	@ (8005c5c <HAL_ADCEx_Calibration_Start+0x1e8>)
 8005ab6:	6813      	ldr	r3, [r2, #0]
 8005ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 8005abc:	6812      	ldr	r2, [r2, #0]
 8005abe:	0c12      	lsrs	r2, r2, #16

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 8005ac0:	f240 4155 	movw	r1, #1109	@ 0x455
 8005ac4:	428b      	cmp	r3, r1
 8005ac6:	d00c      	beq.n	8005ae2 <HAL_ADCEx_Calibration_Start+0x6e>
 8005ac8:	f240 4176 	movw	r1, #1142	@ 0x476
 8005acc:	428b      	cmp	r3, r1
 8005ace:	d008      	beq.n	8005ae2 <HAL_ADCEx_Calibration_Start+0x6e>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 8005ad0:	f2a3 4381 	subw	r3, r3, #1153	@ 0x481
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	f200 8099 	bhi.w	8005c0c <HAL_ADCEx_Calibration_Start+0x198>
 8005ada:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8005ade:	f0c0 8095 	bcc.w	8005c0c <HAL_ADCEx_Calibration_Start+0x198>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f7ff fe1a 	bl	800571c <ADC_Enable>

        if (tmp_hal_status == HAL_OK)
 8005ae8:	4606      	mov	r6, r0
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d046      	beq.n	8005b7c <HAL_ADCEx_Calibration_Start+0x108>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005aee:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8005af0:	f023 0303 	bic.w	r3, r3, #3
 8005af4:	f043 0301 	orr.w	r3, r3, #1
 8005af8:	67a3      	str	r3, [r4, #120]	@ 0x78
 8005afa:	e0a5      	b.n	8005c48 <HAL_ADCEx_Calibration_Start+0x1d4>
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8005afc:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8005afe:	f001 0101 	and.w	r1, r1, #1
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8005b02:	68c5      	ldr	r5, [r0, #12]
 8005b04:	f005 0503 	and.w	r5, r5, #3
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8005b08:	68c3      	ldr	r3, [r0, #12]
 8005b0a:	f023 0303 	bic.w	r3, r3, #3
 8005b0e:	60c3      	str	r3, [r0, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8005b10:	6822      	ldr	r2, [r4, #0]
 8005b12:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8005b14:	f023 0301 	bic.w	r3, r3, #1
 8005b18:	6453      	str	r3, [r2, #68]	@ 0x44
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 8005b1a:	6822      	ldr	r2, [r4, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8005b1c:	4b4e      	ldr	r3, [pc, #312]	@ (8005c58 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d011      	beq.n	8005b46 <HAL_ADCEx_Calibration_Start+0xd2>
    MODIFY_REG(ADCx->CR,
 8005b22:	6890      	ldr	r0, [r2, #8]
 8005b24:	4b4e      	ldr	r3, [pc, #312]	@ (8005c60 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8005b26:	4003      	ands	r3, r0
 8005b28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b2c:	6093      	str	r3, [r2, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005b2e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	2a00      	cmp	r2, #0
 8005b34:	db10      	blt.n	8005b58 <HAL_ADCEx_Calibration_Start+0xe4>
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	432a      	orrs	r2, r5
 8005b3a:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 8005b3c:	6822      	ldr	r2, [r4, #0]
 8005b3e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8005b40:	430b      	orrs	r3, r1
 8005b42:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b44:	e7d3      	b.n	8005aee <HAL_ADCEx_Calibration_Start+0x7a>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8005b46:	6893      	ldr	r3, [r2, #8]
 8005b48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b54:	6093      	str	r3, [r2, #8]
 8005b56:	e7ea      	b.n	8005b2e <HAL_ADCEx_Calibration_Start+0xba>
        wait_loop_index++;
 8005b58:	9b01      	ldr	r3, [sp, #4]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005b5e:	9a01      	ldr	r2, [sp, #4]
 8005b60:	4b40      	ldr	r3, [pc, #256]	@ (8005c64 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d9e3      	bls.n	8005b2e <HAL_ADCEx_Calibration_Start+0xba>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b66:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8005b68:	f023 0312 	bic.w	r3, r3, #18
 8005b6c:	f043 0310 	orr.w	r3, r3, #16
 8005b70:	67a3      	str	r3, [r4, #120]	@ 0x78
          __HAL_UNLOCK(hadc);
 8005b72:	2300      	movs	r3, #0
 8005b74:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
          return HAL_ERROR;
 8005b78:	2601      	movs	r6, #1
 8005b7a:	e068      	b.n	8005c4e <HAL_ADCEx_Calibration_Start+0x1da>
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 8005b7c:	6822      	ldr	r2, [r4, #0]
 8005b7e:	6893      	ldr	r3, [r2, #8]
 8005b80:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8005b84:	f043 6310 	orr.w	r3, r3, #150994944	@ 0x9000000
 8005b88:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8005b8a:	f3bf 8f5f 	dmb	sy
          MODIFY_REG(hadc->Instance->CALFACT2, 0xFFFFFF00UL, 0x03021100UL);
 8005b8e:	6821      	ldr	r1, [r4, #0]
 8005b90:	f8d1 20c8 	ldr.w	r2, [r1, #200]	@ 0xc8
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	4b34      	ldr	r3, [pc, #208]	@ (8005c68 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
 8005b9e:	f3bf 8f5f 	dmb	sy
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8005ba2:	6822      	ldr	r2, [r4, #0]
 8005ba4:	f8d2 30c4 	ldr.w	r3, [r2, #196]	@ 0xc4
 8005ba8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bac:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
          tmp_hal_status = ADC_Disable(hadc);
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f7ff fed9 	bl	8005968 <ADC_Disable>
 8005bb6:	4606      	mov	r6, r0
          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8005bb8:	f1b5 1f01 	cmp.w	r5, #65537	@ 0x10001
 8005bbc:	d01e      	beq.n	8005bfc <HAL_ADCEx_Calibration_Start+0x188>
          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8005bbe:	6822      	ldr	r2, [r4, #0]
 8005bc0:	6893      	ldr	r3, [r2, #8]
 8005bc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bc6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005bce:	6093      	str	r3, [r2, #8]
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005bd0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	da8a      	bge.n	8005aee <HAL_ADCEx_Calibration_Start+0x7a>
            wait_loop_index++;
 8005bd8:	9b01      	ldr	r3, [sp, #4]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	9301      	str	r3, [sp, #4]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005bde:	9a01      	ldr	r2, [sp, #4]
 8005be0:	4b20      	ldr	r3, [pc, #128]	@ (8005c64 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d9f4      	bls.n	8005bd0 <HAL_ADCEx_Calibration_Start+0x15c>
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8005be6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8005be8:	f023 0312 	bic.w	r3, r3, #18
 8005bec:	f043 0310 	orr.w	r3, r3, #16
 8005bf0:	67a3      	str	r3, [r4, #120]	@ 0x78
              __HAL_UNLOCK(hadc);
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
              return HAL_ERROR;
 8005bf8:	2601      	movs	r6, #1
 8005bfa:	e028      	b.n	8005c4e <HAL_ADCEx_Calibration_Start+0x1da>
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8005bfc:	6822      	ldr	r2, [r4, #0]
 8005bfe:	6891      	ldr	r1, [r2, #8]
 8005c00:	4b17      	ldr	r3, [pc, #92]	@ (8005c60 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8005c02:	400b      	ands	r3, r1
 8005c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c08:	6093      	str	r3, [r2, #8]
 8005c0a:	e7d8      	b.n	8005bbe <HAL_ADCEx_Calibration_Start+0x14a>
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	f7ff ff17 	bl	8005a40 <LL_ADC_StartCalibration>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f6bf af69 	bge.w	8005aee <HAL_ADCEx_Calibration_Start+0x7a>
          wait_loop_index++;
 8005c1c:	9b01      	ldr	r3, [sp, #4]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	9301      	str	r3, [sp, #4]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005c22:	9a01      	ldr	r2, [sp, #4]
 8005c24:	4b0f      	ldr	r3, [pc, #60]	@ (8005c64 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d9f3      	bls.n	8005c12 <HAL_ADCEx_Calibration_Start+0x19e>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c2a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8005c2c:	f023 0312 	bic.w	r3, r3, #18
 8005c30:	f043 0310 	orr.w	r3, r3, #16
 8005c34:	67a3      	str	r3, [r4, #120]	@ 0x78
            __HAL_UNLOCK(hadc);
 8005c36:	2300      	movs	r3, #0
 8005c38:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
            return HAL_ERROR;
 8005c3c:	2601      	movs	r6, #1
 8005c3e:	e006      	b.n	8005c4e <HAL_ADCEx_Calibration_Start+0x1da>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c40:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8005c42:	f043 0310 	orr.w	r3, r3, #16
 8005c46:	67a3      	str	r3, [r4, #120]	@ 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74

  return tmp_hal_status;
}
 8005c4e:	4630      	mov	r0, r6
 8005c50:	b002      	add	sp, #8
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8005c54:	2602      	movs	r6, #2
 8005c56:	e7fa      	b.n	8005c4e <HAL_ADCEx_Calibration_Start+0x1da>
 8005c58:	46021000 	.word	0x46021000
 8005c5c:	e0044000 	.word	0xe0044000
 8005c60:	7ffeffc0 	.word	0x7ffeffc0
 8005c64:	01ba813f 	.word	0x01ba813f
 8005c68:	03021100 	.word	0x03021100

08005c6c <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	db07      	blt.n	8005c80 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c70:	f000 021f 	and.w	r2, r0, #31
 8005c74:	0940      	lsrs	r0, r0, #5
 8005c76:	2301      	movs	r3, #1
 8005c78:	4093      	lsls	r3, r2
 8005c7a:	4a02      	ldr	r2, [pc, #8]	@ (8005c84 <__NVIC_EnableIRQ+0x18>)
 8005c7c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	e000e100 	.word	0xe000e100

08005c88 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	db0c      	blt.n	8005ca6 <__NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c8c:	f000 021f 	and.w	r2, r0, #31
 8005c90:	0940      	lsrs	r0, r0, #5
 8005c92:	2301      	movs	r3, #1
 8005c94:	4093      	lsls	r3, r2
 8005c96:	3020      	adds	r0, #32
 8005c98:	4a03      	ldr	r2, [pc, #12]	@ (8005ca8 <__NVIC_DisableIRQ+0x20>)
 8005c9a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005ca2:	f3bf 8f6f 	isb	sy
}
 8005ca6:	4770      	bx	lr
 8005ca8:	e000e100 	.word	0xe000e100

08005cac <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8005cac:	2800      	cmp	r0, #0
 8005cae:	db08      	blt.n	8005cc2 <__NVIC_SetPriority+0x16>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cb0:	0109      	lsls	r1, r1, #4
 8005cb2:	b2c9      	uxtb	r1, r1
 8005cb4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8005cb8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8005cbc:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8005cc0:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cc2:	f000 000f 	and.w	r0, r0, #15
 8005cc6:	0109      	lsls	r1, r1, #4
 8005cc8:	b2c9      	uxtb	r1, r1
 8005cca:	4b01      	ldr	r3, [pc, #4]	@ (8005cd0 <__NVIC_SetPriority+0x24>)
 8005ccc:	5419      	strb	r1, [r3, r0]
}
 8005cce:	4770      	bx	lr
 8005cd0:	e000ed14 	.word	0xe000ed14

08005cd4 <NVIC_EncodePriority>:
{
 8005cd4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cd6:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cda:	f1c0 0c07 	rsb	ip, r0, #7
 8005cde:	f1bc 0f04 	cmp.w	ip, #4
 8005ce2:	bf28      	it	cs
 8005ce4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ce8:	1d03      	adds	r3, r0, #4
 8005cea:	2b06      	cmp	r3, #6
 8005cec:	d90f      	bls.n	8005d0e <NVIC_EncodePriority+0x3a>
 8005cee:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cf0:	f04f 3eff 	mov.w	lr, #4294967295
 8005cf4:	fa0e f00c 	lsl.w	r0, lr, ip
 8005cf8:	ea21 0100 	bic.w	r1, r1, r0
 8005cfc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cfe:	fa0e fe03 	lsl.w	lr, lr, r3
 8005d02:	ea22 020e 	bic.w	r2, r2, lr
}
 8005d06:	ea41 0002 	orr.w	r0, r1, r2
 8005d0a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e7ee      	b.n	8005cf0 <NVIC_EncodePriority+0x1c>
	...

08005d14 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d14:	4a07      	ldr	r2, [pc, #28]	@ (8005d34 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005d16:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d18:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005d1c:	041b      	lsls	r3, r3, #16
 8005d1e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d20:	0200      	lsls	r0, r0, #8
 8005d22:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d26:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8005d28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005d30:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005d32:	4770      	bx	lr
 8005d34:	e000ed00 	.word	0xe000ed00

08005d38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d38:	b510      	push	{r4, lr}
 8005d3a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d3c:	4b05      	ldr	r3, [pc, #20]	@ (8005d54 <HAL_NVIC_SetPriority+0x1c>)
 8005d3e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d40:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8005d44:	f7ff ffc6 	bl	8005cd4 <NVIC_EncodePriority>
 8005d48:	4601      	mov	r1, r0
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f7ff ffae 	bl	8005cac <__NVIC_SetPriority>
}
 8005d50:	bd10      	pop	{r4, pc}
 8005d52:	bf00      	nop
 8005d54:	e000ed00 	.word	0xe000ed00

08005d58 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d58:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d5a:	f7ff ff87 	bl	8005c6c <__NVIC_EnableIRQ>
}
 8005d5e:	bd08      	pop	{r3, pc}

08005d60 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d60:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005d62:	f7ff ff91 	bl	8005c88 <__NVIC_DisableIRQ>
}
 8005d66:	bd08      	pop	{r3, pc}

08005d68 <HAL_DCACHE_MspInit>:
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_MspInit can be implemented in the user file
   */
}
 8005d68:	4770      	bx	lr

08005d6a <HAL_DCACHE_CleanByAddrCallback>:
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8005d6a:	4770      	bx	lr

08005d6c <HAL_DCACHE_InvalidateByAddrCallback>:
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8005d6c:	4770      	bx	lr

08005d6e <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8005d6e:	4770      	bx	lr

08005d70 <HAL_DCACHE_InvalidateCompleteCallback>:
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8005d70:	4770      	bx	lr

08005d72 <HAL_DCACHE_ErrorCallback>:
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8005d72:	4770      	bx	lr

08005d74 <HAL_DCACHE_Enable>:
  if (hdcache == NULL)
 8005d74:	4602      	mov	r2, r0
 8005d76:	b158      	cbz	r0, 8005d90 <HAL_DCACHE_Enable+0x1c>
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8005d78:	6803      	ldr	r3, [r0, #0]
 8005d7a:	6859      	ldr	r1, [r3, #4]
 8005d7c:	f011 0f09 	tst.w	r1, #9
 8005d80:	d108      	bne.n	8005d94 <HAL_DCACHE_Enable+0x20>
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8005d82:	2000      	movs	r0, #0
 8005d84:	6290      	str	r0, [r2, #40]	@ 0x28
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	f042 0201 	orr.w	r2, r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	4770      	bx	lr
    return HAL_ERROR;
 8005d90:	2001      	movs	r0, #1
 8005d92:	4770      	bx	lr
    status =  HAL_BUSY;
 8005d94:	2002      	movs	r0, #2
}
 8005d96:	4770      	bx	lr

08005d98 <HAL_DCACHE_Init>:
  if (hdcache == NULL)
 8005d98:	b330      	cbz	r0, 8005de8 <HAL_DCACHE_Init+0x50>
{
 8005d9a:	b510      	push	{r4, lr}
 8005d9c:	4604      	mov	r4, r0
  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8005d9e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8005da2:	b973      	cbnz	r3, 8005dc2 <HAL_DCACHE_Init+0x2a>
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8005da4:	4b11      	ldr	r3, [pc, #68]	@ (8005dec <HAL_DCACHE_Init+0x54>)
 8005da6:	6083      	str	r3, [r0, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8005da8:	4b11      	ldr	r3, [pc, #68]	@ (8005df0 <HAL_DCACHE_Init+0x58>)
 8005daa:	60c3      	str	r3, [r0, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8005dac:	4b11      	ldr	r3, [pc, #68]	@ (8005df4 <HAL_DCACHE_Init+0x5c>)
 8005dae:	6103      	str	r3, [r0, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8005db0:	4b11      	ldr	r3, [pc, #68]	@ (8005df8 <HAL_DCACHE_Init+0x60>)
 8005db2:	6143      	str	r3, [r0, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8005db4:	4b11      	ldr	r3, [pc, #68]	@ (8005dfc <HAL_DCACHE_Init+0x64>)
 8005db6:	6183      	str	r3, [r0, #24]
    if (hdcache->MspInitCallback == NULL)
 8005db8:	69c3      	ldr	r3, [r0, #28]
 8005dba:	b193      	cbz	r3, 8005de2 <HAL_DCACHE_Init+0x4a>
    hdcache->MspInitCallback(hdcache);
 8005dbc:	69e3      	ldr	r3, [r4, #28]
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	4798      	blx	r3
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	62a3      	str	r3, [r4, #40]	@ 0x28
  hdcache->State = HAL_DCACHE_STATE_READY;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8005dcc:	6822      	ldr	r2, [r4, #0]
 8005dce:	6813      	ldr	r3, [r2, #0]
 8005dd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dd4:	6861      	ldr	r1, [r4, #4]
 8005dd6:	430b      	orrs	r3, r1
 8005dd8:	6013      	str	r3, [r2, #0]
  status = HAL_DCACHE_Enable(hdcache);
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f7ff ffca 	bl	8005d74 <HAL_DCACHE_Enable>
}
 8005de0:	bd10      	pop	{r4, pc}
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8005de2:	4b07      	ldr	r3, [pc, #28]	@ (8005e00 <HAL_DCACHE_Init+0x68>)
 8005de4:	61c3      	str	r3, [r0, #28]
 8005de6:	e7e9      	b.n	8005dbc <HAL_DCACHE_Init+0x24>
    return HAL_ERROR;
 8005de8:	2001      	movs	r0, #1
}
 8005dea:	4770      	bx	lr
 8005dec:	08005d73 	.word	0x08005d73
 8005df0:	08005d6b 	.word	0x08005d6b
 8005df4:	08005d6d 	.word	0x08005d6d
 8005df8:	08005d71 	.word	0x08005d71
 8005dfc:	08005d6f 	.word	0x08005d6f
 8005e00:	08005d69 	.word	0x08005d69

08005e04 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005e04:	b430      	push	{r4, r5}
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005e06:	6805      	ldr	r5, [r0, #0]
 8005e08:	6cac      	ldr	r4, [r5, #72]	@ 0x48
 8005e0a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005e0e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	ea4c 0303 	orr.w	r3, ip, r3
 8005e18:	64ab      	str	r3, [r5, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005e1a:	6803      	ldr	r3, [r0, #0]
 8005e1c:	f44f 44fe 	mov.w	r4, #32512	@ 0x7f00
 8005e20:	60dc      	str	r4, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005e22:	6803      	ldr	r3, [r0, #0]
 8005e24:	64d9      	str	r1, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005e26:	6803      	ldr	r3, [r0, #0]
 8005e28:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005e2a:	bc30      	pop	{r4, r5}
 8005e2c:	4770      	bx	lr
	...

08005e30 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005e30:	b410      	push	{r4}
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005e32:	6a01      	ldr	r1, [r0, #32]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005e34:	6802      	ldr	r2, [r0, #0]
 8005e36:	6953      	ldr	r3, [r2, #20]
 8005e38:	f423 0343 	bic.w	r3, r3, #12779520	@ 0xc30000
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	6153      	str	r3, [r2, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005e40:	6943      	ldr	r3, [r0, #20]
 8005e42:	69c2      	ldr	r2, [r0, #28]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	6902      	ldr	r2, [r0, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	6982      	ldr	r2, [r0, #24]
 8005e4c:	4313      	orrs	r3, r2

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005e4e:	6801      	ldr	r1, [r0, #0]
 8005e50:	4a78      	ldr	r2, [pc, #480]	@ (8006034 <DMA_Init+0x204>)
 8005e52:	4291      	cmp	r1, r2
 8005e54:	f000 808d 	beq.w	8005f72 <DMA_Init+0x142>
 8005e58:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005e5c:	4291      	cmp	r1, r2
 8005e5e:	f000 8088 	beq.w	8005f72 <DMA_Init+0x142>
 8005e62:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005e66:	3280      	adds	r2, #128	@ 0x80
 8005e68:	4291      	cmp	r1, r2
 8005e6a:	f000 8082 	beq.w	8005f72 <DMA_Init+0x142>
 8005e6e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005e72:	4291      	cmp	r1, r2
 8005e74:	d07d      	beq.n	8005f72 <DMA_Init+0x142>
 8005e76:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005e7a:	3280      	adds	r2, #128	@ 0x80
 8005e7c:	4291      	cmp	r1, r2
 8005e7e:	d078      	beq.n	8005f72 <DMA_Init+0x142>
 8005e80:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005e84:	4291      	cmp	r1, r2
 8005e86:	d074      	beq.n	8005f72 <DMA_Init+0x142>
 8005e88:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005e8c:	3280      	adds	r2, #128	@ 0x80
 8005e8e:	4291      	cmp	r1, r2
 8005e90:	d06f      	beq.n	8005f72 <DMA_Init+0x142>
 8005e92:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005e96:	4291      	cmp	r1, r2
 8005e98:	d06b      	beq.n	8005f72 <DMA_Init+0x142>
 8005e9a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005e9e:	3280      	adds	r2, #128	@ 0x80
 8005ea0:	4291      	cmp	r1, r2
 8005ea2:	d066      	beq.n	8005f72 <DMA_Init+0x142>
 8005ea4:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005ea8:	4291      	cmp	r1, r2
 8005eaa:	d062      	beq.n	8005f72 <DMA_Init+0x142>
 8005eac:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005eb0:	3280      	adds	r2, #128	@ 0x80
 8005eb2:	4291      	cmp	r1, r2
 8005eb4:	d05d      	beq.n	8005f72 <DMA_Init+0x142>
 8005eb6:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005eba:	4291      	cmp	r1, r2
 8005ebc:	d059      	beq.n	8005f72 <DMA_Init+0x142>
 8005ebe:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005ec2:	3280      	adds	r2, #128	@ 0x80
 8005ec4:	4291      	cmp	r1, r2
 8005ec6:	d054      	beq.n	8005f72 <DMA_Init+0x142>
 8005ec8:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005ecc:	4291      	cmp	r1, r2
 8005ece:	d050      	beq.n	8005f72 <DMA_Init+0x142>
 8005ed0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005ed4:	3280      	adds	r2, #128	@ 0x80
 8005ed6:	4291      	cmp	r1, r2
 8005ed8:	d04b      	beq.n	8005f72 <DMA_Init+0x142>
 8005eda:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005ede:	4291      	cmp	r1, r2
 8005ee0:	d047      	beq.n	8005f72 <DMA_Init+0x142>
 8005ee2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005ee6:	3280      	adds	r2, #128	@ 0x80
 8005ee8:	4291      	cmp	r1, r2
 8005eea:	d042      	beq.n	8005f72 <DMA_Init+0x142>
 8005eec:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005ef0:	4291      	cmp	r1, r2
 8005ef2:	d03e      	beq.n	8005f72 <DMA_Init+0x142>
 8005ef4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005ef8:	3280      	adds	r2, #128	@ 0x80
 8005efa:	4291      	cmp	r1, r2
 8005efc:	d039      	beq.n	8005f72 <DMA_Init+0x142>
 8005efe:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005f02:	4291      	cmp	r1, r2
 8005f04:	d035      	beq.n	8005f72 <DMA_Init+0x142>
 8005f06:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005f0a:	3280      	adds	r2, #128	@ 0x80
 8005f0c:	4291      	cmp	r1, r2
 8005f0e:	d030      	beq.n	8005f72 <DMA_Init+0x142>
 8005f10:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005f14:	4291      	cmp	r1, r2
 8005f16:	d02c      	beq.n	8005f72 <DMA_Init+0x142>
 8005f18:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005f1c:	3280      	adds	r2, #128	@ 0x80
 8005f1e:	4291      	cmp	r1, r2
 8005f20:	d027      	beq.n	8005f72 <DMA_Init+0x142>
 8005f22:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005f26:	4291      	cmp	r1, r2
 8005f28:	d023      	beq.n	8005f72 <DMA_Init+0x142>
 8005f2a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005f2e:	3280      	adds	r2, #128	@ 0x80
 8005f30:	4291      	cmp	r1, r2
 8005f32:	d01e      	beq.n	8005f72 <DMA_Init+0x142>
 8005f34:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005f38:	4291      	cmp	r1, r2
 8005f3a:	d01a      	beq.n	8005f72 <DMA_Init+0x142>
 8005f3c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005f40:	3280      	adds	r2, #128	@ 0x80
 8005f42:	4291      	cmp	r1, r2
 8005f44:	d015      	beq.n	8005f72 <DMA_Init+0x142>
 8005f46:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005f4a:	4291      	cmp	r1, r2
 8005f4c:	d011      	beq.n	8005f72 <DMA_Init+0x142>
 8005f4e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005f52:	3280      	adds	r2, #128	@ 0x80
 8005f54:	4291      	cmp	r1, r2
 8005f56:	d00c      	beq.n	8005f72 <DMA_Init+0x142>
 8005f58:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005f5c:	4291      	cmp	r1, r2
 8005f5e:	d008      	beq.n	8005f72 <DMA_Init+0x142>
 8005f60:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005f64:	3280      	adds	r2, #128	@ 0x80
 8005f66:	4291      	cmp	r1, r2
 8005f68:	d003      	beq.n	8005f72 <DMA_Init+0x142>
 8005f6a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005f6e:	4291      	cmp	r1, r2
 8005f70:	d10f      	bne.n	8005f92 <DMA_Init+0x162>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005f72:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8005f74:	3a01      	subs	r2, #1
 8005f76:	0512      	lsls	r2, r2, #20
 8005f78:	f002 727c 	and.w	r2, r2, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005f7c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005f7e:	ea44 0c02 	orr.w	ip, r4, r2
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005f82:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8005f84:	3a01      	subs	r2, #1
 8005f86:	0112      	lsls	r2, r2, #4
 8005f88:	f402 727c 	and.w	r2, r2, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005f8c:	ea4c 0202 	orr.w	r2, ip, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005f90:	4313      	orrs	r3, r2
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005f92:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005f94:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005f9c:	6883      	ldr	r3, [r0, #8]
 8005f9e:	6842      	ldr	r2, [r0, #4]
 8005fa0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8005fa8:	4313      	orrs	r3, r2

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005faa:	68c2      	ldr	r2, [r0, #12]
 8005fac:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005fb0:	d044      	beq.n	800603c <DMA_Init+0x20c>
    {
      tmpreg |= DMA_CTR2_DREQ;
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005fb2:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8005fb6:	f000 80d7 	beq.w	8006168 <DMA_Init+0x338>
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8005fba:	6801      	ldr	r1, [r0, #0]
 8005fbc:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
 8005fbe:	f022 4243 	bic.w	r2, r2, #3271557120	@ 0xc3000000
 8005fc2:	f422 127f 	bic.w	r2, r2, #4177920	@ 0x3fc000
 8005fc6:	f422 6267 	bic.w	r2, r2, #3696	@ 0xe70
 8005fca:	f022 020f 	bic.w	r2, r2, #15
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	644b      	str	r3, [r1, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005fd2:	6803      	ldr	r3, [r0, #0]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005fd8:	6803      	ldr	r3, [r0, #0]
 8005fda:	4a17      	ldr	r2, [pc, #92]	@ (8006038 <DMA_Init+0x208>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d01e      	beq.n	800601e <DMA_Init+0x1ee>
 8005fe0:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d01a      	beq.n	800601e <DMA_Init+0x1ee>
 8005fe8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005fec:	3280      	adds	r2, #128	@ 0x80
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d015      	beq.n	800601e <DMA_Init+0x1ee>
 8005ff2:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d011      	beq.n	800601e <DMA_Init+0x1ee>
 8005ffa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8005ffe:	3280      	adds	r2, #128	@ 0x80
 8006000:	4293      	cmp	r3, r2
 8006002:	d00c      	beq.n	800601e <DMA_Init+0x1ee>
 8006004:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006008:	4293      	cmp	r3, r2
 800600a:	d008      	beq.n	800601e <DMA_Init+0x1ee>
 800600c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8006010:	3280      	adds	r2, #128	@ 0x80
 8006012:	4293      	cmp	r3, r2
 8006014:	d003      	beq.n	800601e <DMA_Init+0x1ee>
 8006016:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800601a:	4293      	cmp	r3, r2
 800601c:	d103      	bne.n	8006026 <DMA_Init+0x1f6>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800601e:	2200      	movs	r2, #0
 8006020:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006022:	6803      	ldr	r3, [r0, #0]
 8006024:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006026:	6803      	ldr	r3, [r0, #0]
 8006028:	2200      	movs	r2, #0
 800602a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800602c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40020050 	.word	0x40020050
 8006038:	40020650 	.word	0x40020650
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800603c:	6802      	ldr	r2, [r0, #0]
 800603e:	494c      	ldr	r1, [pc, #304]	@ (8006170 <DMA_Init+0x340>)
 8006040:	428a      	cmp	r2, r1
 8006042:	f000 808e 	beq.w	8006162 <DMA_Init+0x332>
 8006046:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 800604a:	428a      	cmp	r2, r1
 800604c:	f000 8089 	beq.w	8006162 <DMA_Init+0x332>
 8006050:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8006054:	3180      	adds	r1, #128	@ 0x80
 8006056:	428a      	cmp	r2, r1
 8006058:	f000 8083 	beq.w	8006162 <DMA_Init+0x332>
 800605c:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006060:	428a      	cmp	r2, r1
 8006062:	d07e      	beq.n	8006162 <DMA_Init+0x332>
 8006064:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8006068:	3180      	adds	r1, #128	@ 0x80
 800606a:	428a      	cmp	r2, r1
 800606c:	d079      	beq.n	8006162 <DMA_Init+0x332>
 800606e:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006072:	428a      	cmp	r2, r1
 8006074:	d075      	beq.n	8006162 <DMA_Init+0x332>
 8006076:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 800607a:	3180      	adds	r1, #128	@ 0x80
 800607c:	428a      	cmp	r2, r1
 800607e:	d070      	beq.n	8006162 <DMA_Init+0x332>
 8006080:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006084:	428a      	cmp	r2, r1
 8006086:	d06c      	beq.n	8006162 <DMA_Init+0x332>
 8006088:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 800608c:	3180      	adds	r1, #128	@ 0x80
 800608e:	428a      	cmp	r2, r1
 8006090:	d067      	beq.n	8006162 <DMA_Init+0x332>
 8006092:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006096:	428a      	cmp	r2, r1
 8006098:	d063      	beq.n	8006162 <DMA_Init+0x332>
 800609a:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 800609e:	3180      	adds	r1, #128	@ 0x80
 80060a0:	428a      	cmp	r2, r1
 80060a2:	d05e      	beq.n	8006162 <DMA_Init+0x332>
 80060a4:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 80060a8:	428a      	cmp	r2, r1
 80060aa:	d05a      	beq.n	8006162 <DMA_Init+0x332>
 80060ac:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 80060b0:	3180      	adds	r1, #128	@ 0x80
 80060b2:	428a      	cmp	r2, r1
 80060b4:	d055      	beq.n	8006162 <DMA_Init+0x332>
 80060b6:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 80060ba:	428a      	cmp	r2, r1
 80060bc:	d051      	beq.n	8006162 <DMA_Init+0x332>
 80060be:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 80060c2:	3180      	adds	r1, #128	@ 0x80
 80060c4:	428a      	cmp	r2, r1
 80060c6:	d04c      	beq.n	8006162 <DMA_Init+0x332>
 80060c8:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 80060cc:	428a      	cmp	r2, r1
 80060ce:	d048      	beq.n	8006162 <DMA_Init+0x332>
 80060d0:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 80060d4:	3180      	adds	r1, #128	@ 0x80
 80060d6:	428a      	cmp	r2, r1
 80060d8:	d043      	beq.n	8006162 <DMA_Init+0x332>
 80060da:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 80060de:	428a      	cmp	r2, r1
 80060e0:	d03f      	beq.n	8006162 <DMA_Init+0x332>
 80060e2:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 80060e6:	3180      	adds	r1, #128	@ 0x80
 80060e8:	428a      	cmp	r2, r1
 80060ea:	d03a      	beq.n	8006162 <DMA_Init+0x332>
 80060ec:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 80060f0:	428a      	cmp	r2, r1
 80060f2:	d036      	beq.n	8006162 <DMA_Init+0x332>
 80060f4:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 80060f8:	3180      	adds	r1, #128	@ 0x80
 80060fa:	428a      	cmp	r2, r1
 80060fc:	d031      	beq.n	8006162 <DMA_Init+0x332>
 80060fe:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006102:	428a      	cmp	r2, r1
 8006104:	d02d      	beq.n	8006162 <DMA_Init+0x332>
 8006106:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 800610a:	3180      	adds	r1, #128	@ 0x80
 800610c:	428a      	cmp	r2, r1
 800610e:	d028      	beq.n	8006162 <DMA_Init+0x332>
 8006110:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006114:	428a      	cmp	r2, r1
 8006116:	d024      	beq.n	8006162 <DMA_Init+0x332>
 8006118:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 800611c:	3180      	adds	r1, #128	@ 0x80
 800611e:	428a      	cmp	r2, r1
 8006120:	d01f      	beq.n	8006162 <DMA_Init+0x332>
 8006122:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006126:	428a      	cmp	r2, r1
 8006128:	d01b      	beq.n	8006162 <DMA_Init+0x332>
 800612a:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 800612e:	3180      	adds	r1, #128	@ 0x80
 8006130:	428a      	cmp	r2, r1
 8006132:	d016      	beq.n	8006162 <DMA_Init+0x332>
 8006134:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006138:	428a      	cmp	r2, r1
 800613a:	d012      	beq.n	8006162 <DMA_Init+0x332>
 800613c:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8006140:	3180      	adds	r1, #128	@ 0x80
 8006142:	428a      	cmp	r2, r1
 8006144:	d00d      	beq.n	8006162 <DMA_Init+0x332>
 8006146:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 800614a:	428a      	cmp	r2, r1
 800614c:	d009      	beq.n	8006162 <DMA_Init+0x332>
 800614e:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8006152:	3180      	adds	r1, #128	@ 0x80
 8006154:	428a      	cmp	r2, r1
 8006156:	d004      	beq.n	8006162 <DMA_Init+0x332>
 8006158:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 800615c:	428a      	cmp	r2, r1
 800615e:	f47f af2c 	bne.w	8005fba <DMA_Init+0x18a>
      tmpreg |= DMA_CTR2_DREQ;
 8006162:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006166:	e728      	b.n	8005fba <DMA_Init+0x18a>
    tmpreg |= DMA_CTR2_SWREQ;
 8006168:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800616c:	e725      	b.n	8005fba <DMA_Init+0x18a>
 800616e:	bf00      	nop
 8006170:	40020050 	.word	0x40020050

08006174 <HAL_DMA_Init>:
{
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006178:	f7fe fab4 	bl	80046e4 <HAL_GetTick>
  if (hdma == NULL)
 800617c:	b33c      	cbz	r4, 80061ce <HAL_DMA_Init+0x5a>
 800617e:	4605      	mov	r5, r0
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006180:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8006182:	2300      	movs	r3, #0
 8006184:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
  hdma->State = HAL_DMA_STATE_BUSY;
 8006188:	2302      	movs	r3, #2
 800618a:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
  __HAL_DMA_DISABLE(hdma);
 800618e:	6953      	ldr	r3, [r2, #20]
 8006190:	f043 0306 	orr.w	r3, r3, #6
 8006194:	6153      	str	r3, [r2, #20]
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	f013 0f01 	tst.w	r3, #1
 800619e:	d00b      	beq.n	80061b8 <HAL_DMA_Init+0x44>
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80061a0:	f7fe faa0 	bl	80046e4 <HAL_GetTick>
 80061a4:	1b43      	subs	r3, r0, r5
 80061a6:	2b05      	cmp	r3, #5
 80061a8:	d9f5      	bls.n	8006196 <HAL_DMA_Init+0x22>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061aa:	2310      	movs	r3, #16
 80061ac:	65a3      	str	r3, [r4, #88]	@ 0x58
      hdma->State = HAL_DMA_STATE_ERROR;
 80061ae:	2303      	movs	r3, #3
 80061b0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 80061b4:	2001      	movs	r0, #1
 80061b6:	e009      	b.n	80061cc <HAL_DMA_Init+0x58>
  DMA_Init(hdma);
 80061b8:	4620      	mov	r0, r4
 80061ba:	f7ff fe39 	bl	8005e30 <DMA_Init>
  hdma->Mode = hdma->Init.Mode;
 80061be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061c0:	6523      	str	r3, [r4, #80]	@ 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061c2:	2000      	movs	r0, #0
 80061c4:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->State = HAL_DMA_STATE_READY;
 80061c6:	2301      	movs	r3, #1
 80061c8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 80061cc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80061ce:	2001      	movs	r0, #1
 80061d0:	e7fc      	b.n	80061cc <HAL_DMA_Init+0x58>
	...

080061d4 <HAL_DMA_DeInit>:
{
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80061d8:	f7fe fa84 	bl	80046e4 <HAL_GetTick>
  if (hdma == NULL)
 80061dc:	2c00      	cmp	r4, #0
 80061de:	d075      	beq.n	80062cc <HAL_DMA_DeInit+0xf8>
 80061e0:	4605      	mov	r5, r0
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	f423 667f 	bic.w	r6, r3, #4080	@ 0xff0
 80061e8:	f026 060f 	bic.w	r6, r6, #15
  __HAL_DMA_DISABLE(hdma);
 80061ec:	695a      	ldr	r2, [r3, #20]
 80061ee:	f042 0206 	orr.w	r2, r2, #6
 80061f2:	615a      	str	r2, [r3, #20]
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	695a      	ldr	r2, [r3, #20]
 80061f8:	f012 0f01 	tst.w	r2, #1
 80061fc:	d00b      	beq.n	8006216 <HAL_DMA_DeInit+0x42>
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80061fe:	f7fe fa71 	bl	80046e4 <HAL_GetTick>
 8006202:	1b43      	subs	r3, r0, r5
 8006204:	2b05      	cmp	r3, #5
 8006206:	d9f5      	bls.n	80061f4 <HAL_DMA_DeInit+0x20>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006208:	2310      	movs	r3, #16
 800620a:	65a3      	str	r3, [r4, #88]	@ 0x58
      hdma->State = HAL_DMA_STATE_ERROR;
 800620c:	2303      	movs	r3, #3
 800620e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8006212:	2001      	movs	r0, #1
 8006214:	e059      	b.n	80062ca <HAL_DMA_DeInit+0xf6>
  hdma->Instance->CLBAR = 0U;
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]
  hdma->Instance->CCR   = 0U;
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	615a      	str	r2, [r3, #20]
  hdma->Instance->CTR1  = 0U;
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->Instance->CTR2  = 0U;
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->Instance->CBR1  = 0U;
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->Instance->CSAR  = 0U;
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->Instance->CDAR  = 0U;
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->Instance->CLLR  = 0U;
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	67da      	str	r2, [r3, #124]	@ 0x7c
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	4a25      	ldr	r2, [pc, #148]	@ (80062d0 <HAL_DMA_DeInit+0xfc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d01e      	beq.n	800627c <HAL_DMA_DeInit+0xa8>
 800623e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006242:	4293      	cmp	r3, r2
 8006244:	d01a      	beq.n	800627c <HAL_DMA_DeInit+0xa8>
 8006246:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 800624a:	3280      	adds	r2, #128	@ 0x80
 800624c:	4293      	cmp	r3, r2
 800624e:	d015      	beq.n	800627c <HAL_DMA_DeInit+0xa8>
 8006250:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006254:	4293      	cmp	r3, r2
 8006256:	d011      	beq.n	800627c <HAL_DMA_DeInit+0xa8>
 8006258:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 800625c:	3280      	adds	r2, #128	@ 0x80
 800625e:	4293      	cmp	r3, r2
 8006260:	d00c      	beq.n	800627c <HAL_DMA_DeInit+0xa8>
 8006262:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006266:	4293      	cmp	r3, r2
 8006268:	d008      	beq.n	800627c <HAL_DMA_DeInit+0xa8>
 800626a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 800626e:	3280      	adds	r2, #128	@ 0x80
 8006270:	4293      	cmp	r3, r2
 8006272:	d003      	beq.n	800627c <HAL_DMA_DeInit+0xa8>
 8006274:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006278:	4293      	cmp	r3, r2
 800627a:	d103      	bne.n	8006284 <HAL_DMA_DeInit+0xb0>
    hdma->Instance->CTR3 = 0U;
 800627c:	2200      	movs	r2, #0
 800627e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->Instance->CBR2 = 0U;
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	659a      	str	r2, [r3, #88]	@ 0x58
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8006284:	6872      	ldr	r2, [r6, #4]
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800628c:	3b50      	subs	r3, #80	@ 0x50
 800628e:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 8006292:	2101      	movs	r1, #1
 8006294:	fa01 f303 	lsl.w	r3, r1, r3
 8006298:	ea22 0303 	bic.w	r3, r2, r3
 800629c:	6073      	str	r3, [r6, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80062a4:	60da      	str	r2, [r3, #12]
  hdma->XferCpltCallback     = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	6623      	str	r3, [r4, #96]	@ 0x60
  hdma->XferHalfCpltCallback = NULL;
 80062aa:	6663      	str	r3, [r4, #100]	@ 0x64
  hdma->XferErrorCallback    = NULL;
 80062ac:	66a3      	str	r3, [r4, #104]	@ 0x68
  hdma->XferAbortCallback    = NULL;
 80062ae:	66e3      	str	r3, [r4, #108]	@ 0x6c
  hdma->XferSuspendCallback  = NULL;
 80062b0:	6723      	str	r3, [r4, #112]	@ 0x70
  hdma->LinkedListQueue = NULL;
 80062b2:	6763      	str	r3, [r4, #116]	@ 0x74
  if (hdma->Parent != NULL)
 80062b4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80062b6:	b10b      	cbz	r3, 80062bc <HAL_DMA_DeInit+0xe8>
    hdma->Parent = NULL;
 80062b8:	2300      	movs	r3, #0
 80062ba:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->Mode = DMA_NORMAL;
 80062bc:	2000      	movs	r0, #0
 80062be:	6520      	str	r0, [r4, #80]	@ 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062c0:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->State = HAL_DMA_STATE_RESET;
 80062c2:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 80062c6:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
}
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80062cc:	2001      	movs	r0, #1
 80062ce:	e7fc      	b.n	80062ca <HAL_DMA_DeInit+0xf6>
 80062d0:	40020650 	.word	0x40020650

080062d4 <HAL_DMA_Start_IT>:
  if (hdma == NULL)
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d036      	beq.n	8006346 <HAL_DMA_Start_IT+0x72>
{
 80062d8:	b510      	push	{r4, lr}
 80062da:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80062dc:	f890 004c 	ldrb.w	r0, [r0, #76]	@ 0x4c
 80062e0:	2801      	cmp	r0, #1
 80062e2:	d032      	beq.n	800634a <HAL_DMA_Start_IT+0x76>
 80062e4:	2001      	movs	r0, #1
 80062e6:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
  if (hdma->State == HAL_DMA_STATE_READY)
 80062ea:	f894 0054 	ldrb.w	r0, [r4, #84]	@ 0x54
 80062ee:	b2c0      	uxtb	r0, r0
 80062f0:	2801      	cmp	r0, #1
 80062f2:	d006      	beq.n	8006302 <HAL_DMA_Start_IT+0x2e>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80062f4:	2340      	movs	r3, #64	@ 0x40
 80062f6:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80062f8:	2300      	movs	r3, #0
 80062fa:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    return HAL_ERROR;
 80062fe:	2001      	movs	r0, #1
}
 8006300:	bd10      	pop	{r4, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8006302:	2002      	movs	r0, #2
 8006304:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006308:	2000      	movs	r0, #0
 800630a:	65a0      	str	r0, [r4, #88]	@ 0x58
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800630c:	4620      	mov	r0, r4
 800630e:	f7ff fd79 	bl	8005e04 <DMA_SetConfig>
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006312:	6822      	ldr	r2, [r4, #0]
 8006314:	6953      	ldr	r3, [r2, #20]
 8006316:	f443 43ba 	orr.w	r3, r3, #23808	@ 0x5d00
 800631a:	6153      	str	r3, [r2, #20]
    if (hdma->XferHalfCpltCallback != NULL)
 800631c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800631e:	b123      	cbz	r3, 800632a <HAL_DMA_Start_IT+0x56>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006320:	6822      	ldr	r2, [r4, #0]
 8006322:	6953      	ldr	r3, [r2, #20]
 8006324:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006328:	6153      	str	r3, [r2, #20]
    if (hdma->XferSuspendCallback != NULL)
 800632a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800632c:	b123      	cbz	r3, 8006338 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800632e:	6822      	ldr	r2, [r4, #0]
 8006330:	6953      	ldr	r3, [r2, #20]
 8006332:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006336:	6153      	str	r3, [r2, #20]
    __HAL_DMA_ENABLE(hdma);
 8006338:	6822      	ldr	r2, [r4, #0]
 800633a:	6953      	ldr	r3, [r2, #20]
 800633c:	f043 0301 	orr.w	r3, r3, #1
 8006340:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8006342:	2000      	movs	r0, #0
 8006344:	e7dc      	b.n	8006300 <HAL_DMA_Start_IT+0x2c>
    return HAL_ERROR;
 8006346:	2001      	movs	r0, #1
}
 8006348:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800634a:	2002      	movs	r0, #2
 800634c:	e7d8      	b.n	8006300 <HAL_DMA_Start_IT+0x2c>

0800634e <HAL_DMA_Abort>:
{
 800634e:	b538      	push	{r3, r4, r5, lr}
 8006350:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 8006352:	f7fe f9c7 	bl	80046e4 <HAL_GetTick>
  if (hdma == NULL)
 8006356:	2c00      	cmp	r4, #0
 8006358:	d04d      	beq.n	80063f6 <HAL_DMA_Abort+0xa8>
 800635a:	4605      	mov	r5, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800635c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d006      	beq.n	8006374 <HAL_DMA_Abort+0x26>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006366:	2320      	movs	r3, #32
 8006368:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800636a:	2300      	movs	r3, #0
 800636c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    return HAL_ERROR;
 8006370:	2001      	movs	r0, #1
}
 8006372:	bd38      	pop	{r3, r4, r5, pc}
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8006374:	6822      	ldr	r2, [r4, #0]
 8006376:	6953      	ldr	r3, [r2, #20]
 8006378:	f043 0304 	orr.w	r3, r3, #4
 800637c:	6153      	str	r3, [r2, #20]
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800637e:	2305      	movs	r3, #5
 8006380:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	691a      	ldr	r2, [r3, #16]
 8006388:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800638c:	d117      	bne.n	80063be <HAL_DMA_Abort+0x70>
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800638e:	f7fe f9a9 	bl	80046e4 <HAL_GetTick>
 8006392:	1b43      	subs	r3, r0, r5
 8006394:	2b05      	cmp	r3, #5
 8006396:	d9f5      	bls.n	8006384 <HAL_DMA_Abort+0x36>
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8006398:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800639a:	f043 0310 	orr.w	r3, r3, #16
 800639e:	65a3      	str	r3, [r4, #88]	@ 0x58
        hdma->State = HAL_DMA_STATE_ERROR;
 80063a0:	2303      	movs	r3, #3
 80063a2:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80063a6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80063a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063ac:	d002      	beq.n	80063b4 <HAL_DMA_Abort+0x66>
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80063ae:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80063b0:	2201      	movs	r2, #1
 80063b2:	731a      	strb	r2, [r3, #12]
        __HAL_UNLOCK(hdma);
 80063b4:	2300      	movs	r3, #0
 80063b6:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
        return HAL_ERROR;
 80063ba:	2001      	movs	r0, #1
 80063bc:	e7d9      	b.n	8006372 <HAL_DMA_Abort+0x24>
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80063be:	695a      	ldr	r2, [r3, #20]
 80063c0:	f042 0202 	orr.w	r2, r2, #2
 80063c4:	615a      	str	r2, [r3, #20]
    hdma->State = HAL_DMA_STATE_ABORT;
 80063c6:	2304      	movs	r3, #4
 80063c8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80063d2:	60da      	str	r2, [r3, #12]
    hdma->State = HAL_DMA_STATE_READY;
 80063d4:	2301      	movs	r3, #1
 80063d6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80063da:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80063dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063e0:	d005      	beq.n	80063ee <HAL_DMA_Abort+0xa0>
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80063e2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80063e4:	2201      	movs	r2, #1
 80063e6:	731a      	strb	r2, [r3, #12]
      hdma->Instance->CBR1 = 0U;
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	2200      	movs	r2, #0
 80063ec:	649a      	str	r2, [r3, #72]	@ 0x48
    __HAL_UNLOCK(hdma);
 80063ee:	2000      	movs	r0, #0
 80063f0:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
  return HAL_OK;
 80063f4:	e7bd      	b.n	8006372 <HAL_DMA_Abort+0x24>
    return HAL_ERROR;
 80063f6:	2001      	movs	r0, #1
 80063f8:	e7bb      	b.n	8006372 <HAL_DMA_Abort+0x24>

080063fa <HAL_DMA_Abort_IT>:
  if (hdma == NULL)
 80063fa:	b1a0      	cbz	r0, 8006426 <HAL_DMA_Abort_IT+0x2c>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80063fc:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d003      	beq.n	800640e <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006406:	2320      	movs	r3, #32
 8006408:	6583      	str	r3, [r0, #88]	@ 0x58
    return HAL_ERROR;
 800640a:	2001      	movs	r0, #1
 800640c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800640e:	2304      	movs	r3, #4
 8006410:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8006414:	6802      	ldr	r2, [r0, #0]
 8006416:	6953      	ldr	r3, [r2, #20]
 8006418:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800641c:	f043 0304 	orr.w	r3, r3, #4
 8006420:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8006422:	2000      	movs	r0, #0
 8006424:	4770      	bx	lr
    return HAL_ERROR;
 8006426:	2001      	movs	r0, #1
}
 8006428:	4770      	bx	lr

0800642a <HAL_DMA_IRQHandler>:
{
 800642a:	b510      	push	{r4, lr}
 800642c:	4604      	mov	r4, r0
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800642e:	6802      	ldr	r2, [r0, #0]
 8006430:	f422 607f 	bic.w	r0, r2, #4080	@ 0xff0
 8006434:	f020 000f 	bic.w	r0, r0, #15
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8006438:	f3c2 030b 	ubfx	r3, r2, #0, #12
 800643c:	3b50      	subs	r3, #80	@ 0x50
 800643e:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 8006442:	2101      	movs	r1, #1
 8006444:	fa01 f303 	lsl.w	r3, r1, r3
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8006448:	68c1      	ldr	r1, [r0, #12]
  if (global_active_flag_ns == 0U)
 800644a:	4219      	tst	r1, r3
 800644c:	f000 80d8 	beq.w	8006600 <HAL_DMA_IRQHandler+0x1d6>
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8006450:	6913      	ldr	r3, [r2, #16]
 8006452:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006456:	d00a      	beq.n	800646e <HAL_DMA_IRQHandler+0x44>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8006458:	6953      	ldr	r3, [r2, #20]
 800645a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800645e:	d006      	beq.n	800646e <HAL_DMA_IRQHandler+0x44>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8006460:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006464:	60d3      	str	r3, [r2, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8006466:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006468:	f043 0301 	orr.w	r3, r3, #1
 800646c:	65a3      	str	r3, [r4, #88]	@ 0x58
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	691a      	ldr	r2, [r3, #16]
 8006472:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8006476:	d00a      	beq.n	800648e <HAL_DMA_IRQHandler+0x64>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8006478:	695a      	ldr	r2, [r3, #20]
 800647a:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800647e:	d006      	beq.n	800648e <HAL_DMA_IRQHandler+0x64>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8006480:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006484:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8006486:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006488:	f043 0302 	orr.w	r3, r3, #2
 800648c:	65a3      	str	r3, [r4, #88]	@ 0x58
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	691a      	ldr	r2, [r3, #16]
 8006492:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8006496:	d00a      	beq.n	80064ae <HAL_DMA_IRQHandler+0x84>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800649e:	d006      	beq.n	80064ae <HAL_DMA_IRQHandler+0x84>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80064a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80064a4:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80064a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80064a8:	f043 0304 	orr.w	r3, r3, #4
 80064ac:	65a3      	str	r3, [r4, #88]	@ 0x58
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	691a      	ldr	r2, [r3, #16]
 80064b2:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 80064b6:	d00a      	beq.n	80064ce <HAL_DMA_IRQHandler+0xa4>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80064b8:	695a      	ldr	r2, [r3, #20]
 80064ba:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 80064be:	d006      	beq.n	80064ce <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80064c0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80064c4:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80064c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80064c8:	f043 0308 	orr.w	r3, r3, #8
 80064cc:	65a3      	str	r3, [r4, #88]	@ 0x58
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	691a      	ldr	r2, [r3, #16]
 80064d2:	f412 7f00 	tst.w	r2, #512	@ 0x200
 80064d6:	d00a      	beq.n	80064ee <HAL_DMA_IRQHandler+0xc4>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80064d8:	695a      	ldr	r2, [r3, #20]
 80064da:	f412 7f00 	tst.w	r2, #512	@ 0x200
 80064de:	d006      	beq.n	80064ee <HAL_DMA_IRQHandler+0xc4>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80064e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064e4:	60da      	str	r2, [r3, #12]
      if (hdma->XferHalfCpltCallback != NULL)
 80064e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064e8:	b10b      	cbz	r3, 80064ee <HAL_DMA_IRQHandler+0xc4>
        hdma->XferHalfCpltCallback(hdma);
 80064ea:	4620      	mov	r0, r4
 80064ec:	4798      	blx	r3
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 80064f6:	d012      	beq.n	800651e <HAL_DMA_IRQHandler+0xf4>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80064f8:	695a      	ldr	r2, [r3, #20]
 80064fa:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 80064fe:	d00e      	beq.n	800651e <HAL_DMA_IRQHandler+0xf4>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8006500:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006504:	60da      	str	r2, [r3, #12]
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8006506:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b04      	cmp	r3, #4
 800650e:	d01f      	beq.n	8006550 <HAL_DMA_IRQHandler+0x126>
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8006510:	2305      	movs	r3, #5
 8006512:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
        if (hdma->XferSuspendCallback != NULL)
 8006516:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8006518:	b10b      	cbz	r3, 800651e <HAL_DMA_IRQHandler+0xf4>
          hdma->XferSuspendCallback(hdma);
 800651a:	4620      	mov	r0, r4
 800651c:	4798      	blx	r3
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8006526:	d04d      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x19a>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006528:	695a      	ldr	r2, [r3, #20]
 800652a:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800652e:	d049      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x19a>
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006530:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8006532:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8006536:	d035      	beq.n	80065a4 <HAL_DMA_IRQHandler+0x17a>
        if (hdma->Instance->CLLR == 0U)
 8006538:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800653a:	2a00      	cmp	r2, #0
 800653c:	d137      	bne.n	80065ae <HAL_DMA_IRQHandler+0x184>
          if (hdma->Instance->CBR1 == 0U)
 800653e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006540:	2b00      	cmp	r3, #0
 8006542:	d134      	bne.n	80065ae <HAL_DMA_IRQHandler+0x184>
            hdma->State = HAL_DMA_STATE_READY;
 8006544:	2301      	movs	r3, #1
 8006546:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800654a:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800654c:	7313      	strb	r3, [r2, #12]
 800654e:	e02e      	b.n	80065ae <HAL_DMA_IRQHandler+0x184>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8006550:	6822      	ldr	r2, [r4, #0]
 8006552:	6953      	ldr	r3, [r2, #20]
 8006554:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006558:	6153      	str	r3, [r2, #20]
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800655a:	6822      	ldr	r2, [r4, #0]
 800655c:	6953      	ldr	r3, [r2, #20]
 800655e:	f043 0302 	orr.w	r3, r3, #2
 8006562:	6153      	str	r3, [r2, #20]
        __NOP();
 8006564:	bf00      	nop
        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f013 0f01 	tst.w	r3, #1
 800656e:	d015      	beq.n	800659c <HAL_DMA_IRQHandler+0x172>
          hdma->State = HAL_DMA_STATE_ERROR;
 8006570:	2303      	movs	r3, #3
 8006572:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006576:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006578:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800657c:	d005      	beq.n	800658a <HAL_DMA_IRQHandler+0x160>
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800657e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8006580:	2201      	movs	r2, #1
 8006582:	731a      	strb	r2, [r3, #12]
          hdma->Instance->CBR1 = 0U;
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	2200      	movs	r2, #0
 8006588:	649a      	str	r2, [r3, #72]	@ 0x48
        __HAL_UNLOCK(hdma);
 800658a:	2300      	movs	r3, #0
 800658c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
        if (hdma->XferAbortCallback != NULL)
 8006590:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8006592:	2b00      	cmp	r3, #0
 8006594:	d034      	beq.n	8006600 <HAL_DMA_IRQHandler+0x1d6>
          hdma->XferAbortCallback(hdma);
 8006596:	4620      	mov	r0, r4
 8006598:	4798      	blx	r3
        return;
 800659a:	e031      	b.n	8006600 <HAL_DMA_IRQHandler+0x1d6>
          hdma->State = HAL_DMA_STATE_READY;
 800659c:	2301      	movs	r3, #1
 800659e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80065a2:	e7e8      	b.n	8006576 <HAL_DMA_IRQHandler+0x14c>
        if (hdma->Instance->CBR1 == 0U)
 80065a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065a6:	b913      	cbnz	r3, 80065ae <HAL_DMA_IRQHandler+0x184>
          hdma->State = HAL_DMA_STATE_READY;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80065b4:	60da      	str	r2, [r3, #12]
      __HAL_UNLOCK(hdma);
 80065b6:	2300      	movs	r3, #0
 80065b8:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
      if (hdma->XferCpltCallback != NULL)
 80065bc:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80065be:	b10b      	cbz	r3, 80065c4 <HAL_DMA_IRQHandler+0x19a>
        hdma->XferCpltCallback(hdma);
 80065c0:	4620      	mov	r0, r4
 80065c2:	4798      	blx	r3
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80065c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065c6:	b1db      	cbz	r3, 8006600 <HAL_DMA_IRQHandler+0x1d6>
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80065c8:	6822      	ldr	r2, [r4, #0]
 80065ca:	6953      	ldr	r3, [r2, #20]
 80065cc:	f043 0302 	orr.w	r3, r3, #2
 80065d0:	6153      	str	r3, [r2, #20]
    __NOP();
 80065d2:	bf00      	nop
    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	f013 0f01 	tst.w	r3, #1
 80065dc:	d011      	beq.n	8006602 <HAL_DMA_IRQHandler+0x1d8>
      hdma->State = HAL_DMA_STATE_ERROR;
 80065de:	2303      	movs	r3, #3
 80065e0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80065e4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80065e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065ea:	d002      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x1c8>
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80065ec:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80065ee:	2201      	movs	r2, #1
 80065f0:	731a      	strb	r2, [r3, #12]
    __HAL_UNLOCK(hdma);
 80065f2:	2300      	movs	r3, #0
 80065f4:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    if (hdma->XferErrorCallback != NULL)
 80065f8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80065fa:	b10b      	cbz	r3, 8006600 <HAL_DMA_IRQHandler+0x1d6>
      hdma->XferErrorCallback(hdma);
 80065fc:	4620      	mov	r0, r4
 80065fe:	4798      	blx	r3
}
 8006600:	bd10      	pop	{r4, pc}
      hdma->State = HAL_DMA_STATE_READY;
 8006602:	2301      	movs	r3, #1
 8006604:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8006608:	e7ec      	b.n	80065e4 <HAL_DMA_IRQHandler+0x1ba>

0800660a <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800660a:	6d80      	ldr	r0, [r0, #88]	@ 0x58
}
 800660c:	4770      	bx	lr

0800660e <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 800660e:	b1e8      	cbz	r0, 800664c <HAL_DMA_ConfigChannelAttributes+0x3e>
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8006610:	6803      	ldr	r3, [r0, #0]
 8006612:	f423 627f 	bic.w	r2, r3, #4080	@ 0xff0
 8006616:	f022 020f 	bic.w	r2, r2, #15
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800661a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800661e:	3b50      	subs	r3, #80	@ 0x50
 8006620:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 8006624:	2001      	movs	r0, #1
 8006626:	4098      	lsls	r0, r3
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8006628:	f011 0f10 	tst.w	r1, #16
 800662c:	d010      	beq.n	8006650 <HAL_DMA_ConfigChannelAttributes+0x42>
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800662e:	f001 0111 	and.w	r1, r1, #17
 8006632:	2911      	cmp	r1, #17
 8006634:	d005      	beq.n	8006642 <HAL_DMA_ConfigChannelAttributes+0x34>
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8006636:	6853      	ldr	r3, [r2, #4]
 8006638:	ea23 0300 	bic.w	r3, r3, r0
 800663c:	6053      	str	r3, [r2, #4]
  return HAL_OK;
 800663e:	2000      	movs	r0, #0
 8006640:	4770      	bx	lr
      p_dma_instance->PRIVCFGR |= channel_idx;
 8006642:	6853      	ldr	r3, [r2, #4]
 8006644:	4303      	orrs	r3, r0
 8006646:	6053      	str	r3, [r2, #4]
  return HAL_OK;
 8006648:	2000      	movs	r0, #0
 800664a:	4770      	bx	lr
    return HAL_ERROR;
 800664c:	2001      	movs	r0, #1
 800664e:	4770      	bx	lr
  return HAL_OK;
 8006650:	2000      	movs	r0, #0
}
 8006652:	4770      	bx	lr

08006654 <DMA_List_Init>:
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006654:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8006656:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8006658:	4319      	orrs	r1, r3

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800665a:	6803      	ldr	r3, [r0, #0]
 800665c:	4a67      	ldr	r2, [pc, #412]	@ (80067fc <DMA_List_Init+0x1a8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	f000 808d 	beq.w	800677e <DMA_List_Init+0x12a>
 8006664:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006668:	4293      	cmp	r3, r2
 800666a:	f000 8088 	beq.w	800677e <DMA_List_Init+0x12a>
 800666e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8006672:	3280      	adds	r2, #128	@ 0x80
 8006674:	4293      	cmp	r3, r2
 8006676:	f000 8082 	beq.w	800677e <DMA_List_Init+0x12a>
 800667a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800667e:	4293      	cmp	r3, r2
 8006680:	d07d      	beq.n	800677e <DMA_List_Init+0x12a>
 8006682:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8006686:	3280      	adds	r2, #128	@ 0x80
 8006688:	4293      	cmp	r3, r2
 800668a:	d078      	beq.n	800677e <DMA_List_Init+0x12a>
 800668c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006690:	4293      	cmp	r3, r2
 8006692:	d074      	beq.n	800677e <DMA_List_Init+0x12a>
 8006694:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8006698:	3280      	adds	r2, #128	@ 0x80
 800669a:	4293      	cmp	r3, r2
 800669c:	d06f      	beq.n	800677e <DMA_List_Init+0x12a>
 800669e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d06b      	beq.n	800677e <DMA_List_Init+0x12a>
 80066a6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 80066aa:	3280      	adds	r2, #128	@ 0x80
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d066      	beq.n	800677e <DMA_List_Init+0x12a>
 80066b0:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d062      	beq.n	800677e <DMA_List_Init+0x12a>
 80066b8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 80066bc:	3280      	adds	r2, #128	@ 0x80
 80066be:	4293      	cmp	r3, r2
 80066c0:	d05d      	beq.n	800677e <DMA_List_Init+0x12a>
 80066c2:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d059      	beq.n	800677e <DMA_List_Init+0x12a>
 80066ca:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 80066ce:	3280      	adds	r2, #128	@ 0x80
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d054      	beq.n	800677e <DMA_List_Init+0x12a>
 80066d4:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80066d8:	4293      	cmp	r3, r2
 80066da:	d050      	beq.n	800677e <DMA_List_Init+0x12a>
 80066dc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 80066e0:	3280      	adds	r2, #128	@ 0x80
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d04b      	beq.n	800677e <DMA_List_Init+0x12a>
 80066e6:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d047      	beq.n	800677e <DMA_List_Init+0x12a>
 80066ee:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 80066f2:	3280      	adds	r2, #128	@ 0x80
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d042      	beq.n	800677e <DMA_List_Init+0x12a>
 80066f8:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d03e      	beq.n	800677e <DMA_List_Init+0x12a>
 8006700:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8006704:	3280      	adds	r2, #128	@ 0x80
 8006706:	4293      	cmp	r3, r2
 8006708:	d039      	beq.n	800677e <DMA_List_Init+0x12a>
 800670a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800670e:	4293      	cmp	r3, r2
 8006710:	d035      	beq.n	800677e <DMA_List_Init+0x12a>
 8006712:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8006716:	3280      	adds	r2, #128	@ 0x80
 8006718:	4293      	cmp	r3, r2
 800671a:	d030      	beq.n	800677e <DMA_List_Init+0x12a>
 800671c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006720:	4293      	cmp	r3, r2
 8006722:	d02c      	beq.n	800677e <DMA_List_Init+0x12a>
 8006724:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8006728:	3280      	adds	r2, #128	@ 0x80
 800672a:	4293      	cmp	r3, r2
 800672c:	d027      	beq.n	800677e <DMA_List_Init+0x12a>
 800672e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006732:	4293      	cmp	r3, r2
 8006734:	d023      	beq.n	800677e <DMA_List_Init+0x12a>
 8006736:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 800673a:	3280      	adds	r2, #128	@ 0x80
 800673c:	4293      	cmp	r3, r2
 800673e:	d01e      	beq.n	800677e <DMA_List_Init+0x12a>
 8006740:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006744:	4293      	cmp	r3, r2
 8006746:	d01a      	beq.n	800677e <DMA_List_Init+0x12a>
 8006748:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 800674c:	3280      	adds	r2, #128	@ 0x80
 800674e:	4293      	cmp	r3, r2
 8006750:	d015      	beq.n	800677e <DMA_List_Init+0x12a>
 8006752:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006756:	4293      	cmp	r3, r2
 8006758:	d011      	beq.n	800677e <DMA_List_Init+0x12a>
 800675a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 800675e:	3280      	adds	r2, #128	@ 0x80
 8006760:	4293      	cmp	r3, r2
 8006762:	d00c      	beq.n	800677e <DMA_List_Init+0x12a>
 8006764:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006768:	4293      	cmp	r3, r2
 800676a:	d008      	beq.n	800677e <DMA_List_Init+0x12a>
 800676c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8006770:	3280      	adds	r2, #128	@ 0x80
 8006772:	4293      	cmp	r3, r2
 8006774:	d003      	beq.n	800677e <DMA_List_Init+0x12a>
 8006776:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800677a:	4293      	cmp	r3, r2
 800677c:	d101      	bne.n	8006782 <DMA_List_Init+0x12e>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800677e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8006780:	4311      	orrs	r1, r2
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006782:	695a      	ldr	r2, [r3, #20]
 8006784:	f422 0243 	bic.w	r2, r2, #12779520	@ 0xc30000
 8006788:	430a      	orrs	r2, r1
 800678a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 800678c:	6802      	ldr	r2, [r0, #0]
 800678e:	2300      	movs	r3, #0
 8006790:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006792:	6802      	ldr	r2, [r0, #0]
 8006794:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8006796:	6451      	str	r1, [r2, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006798:	6802      	ldr	r2, [r0, #0]
 800679a:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800679c:	6802      	ldr	r2, [r0, #0]
 800679e:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80067a0:	6802      	ldr	r2, [r0, #0]
 80067a2:	6513      	str	r3, [r2, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80067a4:	6803      	ldr	r3, [r0, #0]
 80067a6:	4a16      	ldr	r2, [pc, #88]	@ (8006800 <DMA_List_Init+0x1ac>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d01e      	beq.n	80067ea <DMA_List_Init+0x196>
 80067ac:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d01a      	beq.n	80067ea <DMA_List_Init+0x196>
 80067b4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 80067b8:	3280      	adds	r2, #128	@ 0x80
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d015      	beq.n	80067ea <DMA_List_Init+0x196>
 80067be:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d011      	beq.n	80067ea <DMA_List_Init+0x196>
 80067c6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 80067ca:	3280      	adds	r2, #128	@ 0x80
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00c      	beq.n	80067ea <DMA_List_Init+0x196>
 80067d0:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d008      	beq.n	80067ea <DMA_List_Init+0x196>
 80067d8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 80067dc:	3280      	adds	r2, #128	@ 0x80
 80067de:	4293      	cmp	r3, r2
 80067e0:	d003      	beq.n	80067ea <DMA_List_Init+0x196>
 80067e2:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d103      	bne.n	80067f2 <DMA_List_Init+0x19e>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80067ea:	2200      	movs	r2, #0
 80067ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80067ee:	6803      	ldr	r3, [r0, #0]
 80067f0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80067f2:	6803      	ldr	r3, [r0, #0]
 80067f4:	2200      	movs	r2, #0
 80067f6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	40020050 	.word	0x40020050
 8006800:	40020650 	.word	0x40020650

08006804 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006804:	b410      	push	{r4}
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006806:	6943      	ldr	r3, [r0, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006808:	69c2      	ldr	r2, [r0, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800680a:	4313      	orrs	r3, r2
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800680c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 800680e:	4313      	orrs	r3, r2
                                                   pNodeConfig->Init.SrcInc                      |
 8006810:	6902      	ldr	r2, [r0, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006812:	4313      	orrs	r3, r2
                                                   pNodeConfig->Init.SrcDataWidth;
 8006814:	6982      	ldr	r2, [r0, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006816:	4313      	orrs	r3, r2
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006818:	600b      	str	r3, [r1, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800681a:	6802      	ldr	r2, [r0, #0]
 800681c:	f012 0f20 	tst.w	r2, #32
 8006820:	d016      	beq.n	8006850 <DMA_List_BuildNode+0x4c>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006822:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8006824:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006826:	4322      	orrs	r2, r4
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006828:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800682a:	f104 3cff 	add.w	ip, r4, #4294967295
 800682e:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
 8006832:	f00c 7c7c 	and.w	ip, ip, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006836:	ea42 020c 	orr.w	r2, r2, ip
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800683a:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 800683c:	f104 3cff 	add.w	ip, r4, #4294967295
 8006840:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8006844:	f40c 7c7c 	and.w	ip, ip, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006848:	ea42 020c 	orr.w	r2, r2, ip
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800684c:	4313      	orrs	r3, r2
 800684e:	600b      	str	r3, [r1, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006850:	6b03      	ldr	r3, [r0, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006852:	6842      	ldr	r2, [r0, #4]
 8006854:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006858:	0592      	lsls	r2, r2, #22
 800685a:	0d92      	lsrs	r2, r2, #22
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800685c:	4313      	orrs	r3, r2
 800685e:	604b      	str	r3, [r1, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006860:	68c2      	ldr	r2, [r0, #12]
 8006862:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006866:	d064      	beq.n	8006932 <DMA_List_BuildNode+0x12e>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006868:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800686c:	d069      	beq.n	8006942 <DMA_List_BuildNode+0x13e>
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 800686e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006870:	b14b      	cbz	r3, 8006886 <DMA_List_BuildNode+0x82>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006872:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8006874:	4313      	orrs	r3, r2
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006876:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8006878:	0412      	lsls	r2, r2, #16
 800687a:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800687e:	4313      	orrs	r3, r2
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006880:	684a      	ldr	r2, [r1, #4]
 8006882:	4313      	orrs	r3, r2
 8006884:	604b      	str	r3, [r1, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006886:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 800688a:	608b      	str	r3, [r1, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800688c:	6802      	ldr	r2, [r0, #0]
 800688e:	f012 0f02 	tst.w	r2, #2
 8006892:	d020      	beq.n	80068d6 <DMA_List_BuildNode+0xd2>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006894:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8006896:	f102 3cff 	add.w	ip, r2, #4294967295
 800689a:	4a43      	ldr	r2, [pc, #268]	@ (80069a8 <DMA_List_BuildNode+0x1a4>)
 800689c:	ea02 420c 	and.w	r2, r2, ip, lsl #16
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80068a0:	4313      	orrs	r3, r2
 80068a2:	608b      	str	r3, [r1, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80068a4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80068a6:	2a00      	cmp	r2, #0
 80068a8:	db4f      	blt.n	800694a <DMA_List_BuildNode+0x146>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80068aa:	608b      	str	r3, [r1, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80068ac:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	db4f      	blt.n	8006952 <DMA_List_BuildNode+0x14e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80068b2:	688b      	ldr	r3, [r1, #8]
 80068b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80068b8:	608b      	str	r3, [r1, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80068ba:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80068bc:	2b00      	cmp	r3, #0
 80068be:	db4d      	blt.n	800695c <DMA_List_BuildNode+0x158>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80068c0:	688b      	ldr	r3, [r1, #8]
 80068c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068c6:	608b      	str	r3, [r1, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80068c8:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	db4b      	blt.n	8006966 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80068ce:	688b      	ldr	r3, [r1, #8]
 80068d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068d4:	608b      	str	r3, [r1, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80068d6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80068d8:	60cb      	str	r3, [r1, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80068da:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80068dc:	610b      	str	r3, [r1, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80068de:	6803      	ldr	r3, [r0, #0]
 80068e0:	f013 0f02 	tst.w	r3, #2
 80068e4:	d01a      	beq.n	800691c <DMA_List_BuildNode+0x118>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80068e6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	db41      	blt.n	8006970 <DMA_List_BuildNode+0x16c>
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80068ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80068f0:	614b      	str	r3, [r1, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80068f2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	db40      	blt.n	800697a <DMA_List_BuildNode+0x176>
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80068f8:	694a      	ldr	r2, [r1, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80068fa:	4c2c      	ldr	r4, [pc, #176]	@ (80069ac <DMA_List_BuildNode+0x1a8>)
 80068fc:	ea04 4303 	and.w	r3, r4, r3, lsl #16
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006900:	431a      	orrs	r2, r3
 8006902:	614a      	str	r2, [r1, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006904:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8006906:	2b00      	cmp	r3, #0
 8006908:	db3f      	blt.n	800698a <DMA_List_BuildNode+0x186>
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800690a:	b29b      	uxth	r3, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 800690c:	618b      	str	r3, [r1, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800690e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8006910:	2b00      	cmp	r3, #0
 8006912:	db3e      	blt.n	8006992 <DMA_List_BuildNode+0x18e>
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006914:	698a      	ldr	r2, [r1, #24]
 8006916:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800691a:	618a      	str	r2, [r1, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800691c:	6803      	ldr	r3, [r0, #0]
 800691e:	620b      	str	r3, [r1, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006920:	f013 0f02 	tst.w	r3, #2
 8006924:	d03b      	beq.n	800699e <DMA_List_BuildNode+0x19a>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006926:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800692a:	620b      	str	r3, [r1, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 800692c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006930:	4770      	bx	lr
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006932:	6802      	ldr	r2, [r0, #0]
 8006934:	f012 0f20 	tst.w	r2, #32
 8006938:	d099      	beq.n	800686e <DMA_List_BuildNode+0x6a>
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 800693a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800693e:	604b      	str	r3, [r1, #4]
 8006940:	e795      	b.n	800686e <DMA_List_BuildNode+0x6a>
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006942:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006946:	604b      	str	r3, [r1, #4]
 8006948:	e791      	b.n	800686e <DMA_List_BuildNode+0x6a>
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 800694a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800694e:	608b      	str	r3, [r1, #8]
 8006950:	e7ac      	b.n	80068ac <DMA_List_BuildNode+0xa8>
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006952:	688b      	ldr	r3, [r1, #8]
 8006954:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006958:	608b      	str	r3, [r1, #8]
 800695a:	e7ae      	b.n	80068ba <DMA_List_BuildNode+0xb6>
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 800695c:	688b      	ldr	r3, [r1, #8]
 800695e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006962:	608b      	str	r3, [r1, #8]
 8006964:	e7b0      	b.n	80068c8 <DMA_List_BuildNode+0xc4>
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006966:	688b      	ldr	r3, [r1, #8]
 8006968:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800696c:	608b      	str	r3, [r1, #8]
 800696e:	e7b2      	b.n	80068d6 <DMA_List_BuildNode+0xd2>
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006970:	425b      	negs	r3, r3
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006972:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006976:	614b      	str	r3, [r1, #20]
 8006978:	e7bb      	b.n	80068f2 <DMA_List_BuildNode+0xee>
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 800697a:	425b      	negs	r3, r3
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800697c:	694a      	ldr	r2, [r1, #20]
 800697e:	4c0b      	ldr	r4, [pc, #44]	@ (80069ac <DMA_List_BuildNode+0x1a8>)
 8006980:	ea04 4303 	and.w	r3, r4, r3, lsl #16
 8006984:	431a      	orrs	r2, r3
 8006986:	614a      	str	r2, [r1, #20]
 8006988:	e7bc      	b.n	8006904 <DMA_List_BuildNode+0x100>
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 800698a:	425b      	negs	r3, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 800698c:	b29b      	uxth	r3, r3
 800698e:	618b      	str	r3, [r1, #24]
 8006990:	e7bd      	b.n	800690e <DMA_List_BuildNode+0x10a>
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006992:	425b      	negs	r3, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006994:	698a      	ldr	r2, [r1, #24]
 8006996:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800699a:	618a      	str	r2, [r1, #24]
 800699c:	e7be      	b.n	800691c <DMA_List_BuildNode+0x118>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800699e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80069a2:	620b      	str	r3, [r1, #32]
}
 80069a4:	e7c2      	b.n	800692c <DMA_List_BuildNode+0x128>
 80069a6:	bf00      	nop
 80069a8:	07ff0000 	.word	0x07ff0000
 80069ac:	1fff0000 	.word	0x1fff0000

080069b0 <DMA_List_CheckNodesBaseAddresses>:
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80069b0:	4684      	mov	ip, r0
 80069b2:	ea40 0301 	orr.w	r3, r0, r1
 80069b6:	4313      	orrs	r3, r2
  uint32_t ref  = 0U;

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80069b8:	b130      	cbz	r0, 80069c8 <DMA_List_CheckNodesBaseAddresses+0x18>
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80069ba:	ea83 030c 	eor.w	r3, r3, ip
 80069be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069c2:	d20a      	bcs.n	80069da <DMA_List_CheckNodesBaseAddresses+0x2a>
  {
    return 1U;
  }

  return 0U;
 80069c4:	2000      	movs	r0, #0
 80069c6:	4770      	bx	lr
  else if ((uint32_t)pNode2 != 0U)
 80069c8:	b109      	cbz	r1, 80069ce <DMA_List_CheckNodesBaseAddresses+0x1e>
    ref = (uint32_t)pNode2;
 80069ca:	468c      	mov	ip, r1
 80069cc:	e7f5      	b.n	80069ba <DMA_List_CheckNodesBaseAddresses+0xa>
  else if ((uint32_t)pNode3 != 0U)
 80069ce:	b10a      	cbz	r2, 80069d4 <DMA_List_CheckNodesBaseAddresses+0x24>
    ref = (uint32_t)pNode3;
 80069d0:	4694      	mov	ip, r2
 80069d2:	e7f2      	b.n	80069ba <DMA_List_CheckNodesBaseAddresses+0xa>
  uint32_t ref  = 0U;
 80069d4:	f04f 0c00 	mov.w	ip, #0
 80069d8:	e7ef      	b.n	80069ba <DMA_List_CheckNodesBaseAddresses+0xa>
    return 1U;
 80069da:	2001      	movs	r0, #1
}
 80069dc:	4770      	bx	lr

080069de <DMA_List_CheckNodesTypes>:
                                         DMA_NodeTypeDef const *const pNode3)
{
  uint32_t ref = 0U;

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80069de:	b168      	cbz	r0, 80069fc <DMA_List_CheckNodesTypes+0x1e>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80069e0:	f890 3020 	ldrb.w	r3, [r0, #32]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80069e4:	b119      	cbz	r1, 80069ee <DMA_List_CheckNodesTypes+0x10>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80069e6:	f891 1020 	ldrb.w	r1, [r1, #32]
 80069ea:	4299      	cmp	r1, r3
 80069ec:	d110      	bne.n	8006a10 <DMA_List_CheckNodesTypes+0x32>
      return 2U;
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80069ee:	b18a      	cbz	r2, 8006a14 <DMA_List_CheckNodesTypes+0x36>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80069f0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d10f      	bne.n	8006a18 <DMA_List_CheckNodesTypes+0x3a>
    {
      return 3U;
    }
  }

  return 0U;
 80069f8:	2000      	movs	r0, #0
 80069fa:	4770      	bx	lr
  else if (pNode2 != NULL)
 80069fc:	b111      	cbz	r1, 8006a04 <DMA_List_CheckNodesTypes+0x26>
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80069fe:	f891 3020 	ldrb.w	r3, [r1, #32]
  if (pNode2 != NULL)
 8006a02:	e7f0      	b.n	80069e6 <DMA_List_CheckNodesTypes+0x8>
  else if (pNode3 != NULL)
 8006a04:	b112      	cbz	r2, 8006a0c <DMA_List_CheckNodesTypes+0x2e>
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8006a06:	f892 3020 	ldrb.w	r3, [r2, #32]
 8006a0a:	e7eb      	b.n	80069e4 <DMA_List_CheckNodesTypes+0x6>
  uint32_t ref = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	e7e9      	b.n	80069e4 <DMA_List_CheckNodesTypes+0x6>
      return 2U;
 8006a10:	2002      	movs	r0, #2
 8006a12:	4770      	bx	lr
  return 0U;
 8006a14:	2000      	movs	r0, #0
 8006a16:	4770      	bx	lr
      return 3U;
 8006a18:	2003      	movs	r0, #3
}
 8006a1a:	4770      	bx	lr

08006a1c <DMA_List_GetCLLRNodeInfo>:
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006a1c:	6a03      	ldr	r3, [r0, #32]
 8006a1e:	f013 0f02 	tst.w	r3, #2
 8006a22:	d006      	beq.n	8006a32 <DMA_List_GetCLLRNodeInfo+0x16>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8006a24:	b109      	cbz	r1, 8006a2a <DMA_List_GetCLLRNodeInfo+0xe>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8006a26:	4b06      	ldr	r3, [pc, #24]	@ (8006a40 <DMA_List_GetCLLRNodeInfo+0x24>)
 8006a28:	600b      	str	r3, [r1, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8006a2a:	b142      	cbz	r2, 8006a3e <DMA_List_GetCLLRNodeInfo+0x22>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8006a2c:	2307      	movs	r3, #7
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	4770      	bx	lr
  }
  /* Update CLLR and register number for linear addressing node */
  else
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8006a32:	b109      	cbz	r1, 8006a38 <DMA_List_GetCLLRNodeInfo+0x1c>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8006a34:	4b03      	ldr	r3, [pc, #12]	@ (8006a44 <DMA_List_GetCLLRNodeInfo+0x28>)
 8006a36:	600b      	str	r3, [r1, #0]
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8006a38:	b10a      	cbz	r2, 8006a3e <DMA_List_GetCLLRNodeInfo+0x22>
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8006a3a:	2305      	movs	r3, #5
 8006a3c:	6013      	str	r3, [r2, #0]
    }
  }
}
 8006a3e:	4770      	bx	lr
 8006a40:	fe010000 	.word	0xfe010000
 8006a44:	f8010000 	.word	0xf8010000

08006a48 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8006a48:	b530      	push	{r4, r5, lr}
 8006a4a:	4684      	mov	ip, r0
  uint32_t node_idx = 0U;
  uint32_t currentnode_address  = 0U;
  uint32_t previousnode_address  = 0U;
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8006a4c:	6815      	ldr	r5, [r2, #0]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8006a4e:	460c      	mov	r4, r1
 8006a50:	b1e1      	cbz	r1, 8006a8c <DMA_List_FindNode+0x44>
  uint32_t previousnode_address  = 0U;
 8006a52:	f04f 0e00 	mov.w	lr, #0
  uint32_t currentnode_address  = 0U;
 8006a56:	4671      	mov	r1, lr
  uint32_t node_idx = 0U;
 8006a58:	4673      	mov	r3, lr
 8006a5a:	e027      	b.n	8006aac <DMA_List_FindNode+0x64>
      else
      {
        previousnode_address = currentnode_address;
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006a5c:	f8bc 0002 	ldrh.w	r0, [ip, #2]
          ((DMA_NodeTypeDef *)(currentnode_address +
 8006a60:	eb01 4000 	add.w	r0, r1, r0, lsl #16
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006a64:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
        previousnode_address = currentnode_address;
 8006a68:	468e      	mov	lr, r1
        currentnode_address =
 8006a6a:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 8006a6e:	4001      	ands	r1, r0
      }

      /* Increment node index */
      node_idx++;
 8006a70:	3301      	adds	r3, #1
    while (node_idx < pQList->NodeNumber)
 8006a72:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8006a76:	4298      	cmp	r0, r3
 8006a78:	d92a      	bls.n	8006ad0 <DMA_List_FindNode+0x88>
      if (node_idx == 0U)
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1ee      	bne.n	8006a5c <DMA_List_FindNode+0x14>
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8006a7e:	f8dc 1000 	ldr.w	r1, [ip]
 8006a82:	f021 0103 	bic.w	r1, r1, #3
 8006a86:	0409      	lsls	r1, r1, #16
 8006a88:	0c09      	lsrs	r1, r1, #16
 8006a8a:	e7f1      	b.n	8006a70 <DMA_List_FindNode+0x28>
  uint32_t previousnode_address  = 0U;
 8006a8c:	f04f 0e00 	mov.w	lr, #0
  uint32_t currentnode_address  = 0U;
 8006a90:	4671      	mov	r1, lr
  uint32_t node_idx = 0U;
 8006a92:	4673      	mov	r3, lr
 8006a94:	e7ed      	b.n	8006a72 <DMA_List_FindNode+0x2a>
      else
      {
        previousnode_address = currentnode_address;
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006a96:	f8bc 0002 	ldrh.w	r0, [ip, #2]
          ((DMA_NodeTypeDef *)(currentnode_address +
 8006a9a:	eb01 4000 	add.w	r0, r1, r0, lsl #16
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006a9e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
        previousnode_address = currentnode_address;
 8006aa2:	468e      	mov	lr, r1
        currentnode_address =
 8006aa4:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 8006aa8:	4001      	ands	r1, r0
      }

      /* Increment node index */
      node_idx++;
 8006aaa:	3301      	adds	r3, #1
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8006aac:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8006ab0:	4298      	cmp	r0, r3
 8006ab2:	d90d      	bls.n	8006ad0 <DMA_List_FindNode+0x88>
 8006ab4:	f64f 70fc 	movw	r0, #65532	@ 0xfffc
 8006ab8:	4020      	ands	r0, r4
 8006aba:	4288      	cmp	r0, r1
 8006abc:	d008      	beq.n	8006ad0 <DMA_List_FindNode+0x88>
      if (node_idx == 0U)
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e9      	bne.n	8006a96 <DMA_List_FindNode+0x4e>
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8006ac2:	f8dc 1000 	ldr.w	r1, [ip]
 8006ac6:	f021 0103 	bic.w	r1, r1, #3
 8006aca:	0409      	lsls	r1, r1, #16
 8006acc:	0c09      	lsrs	r1, r1, #16
 8006ace:	e7ec      	b.n	8006aaa <DMA_List_FindNode+0x62>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8006ad0:	b12c      	cbz	r4, 8006ade <DMA_List_FindNode+0x96>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8006ad2:	f024 0403 	bic.w	r4, r4, #3
 8006ad6:	0424      	lsls	r4, r4, #16
 8006ad8:	0c24      	lsrs	r4, r4, #16
 8006ada:	428c      	cmp	r4, r1
 8006adc:	d118      	bne.n	8006b10 <DMA_List_FindNode+0xc8>
      return 1U;
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8006ade:	6093      	str	r3, [r2, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8006ae0:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 8006ae4:	ea4e 4303 	orr.w	r3, lr, r3, lsl #16
 8006ae8:	6053      	str	r3, [r2, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8006aea:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 8006aee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006af2:	60d1      	str	r1, [r2, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8006af4:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 8006af8:	b158      	cbz	r0, 8006b12 <DMA_List_FindNode+0xca>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8006afa:	f020 0003 	bic.w	r0, r0, #3
 8006afe:	0400      	lsls	r0, r0, #16
 8006b00:	0c00      	lsrs	r0, r0, #16
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8006b02:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 8006b06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8006b0a:	6110      	str	r0, [r2, #16]
  }

  return 0U;
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	e000      	b.n	8006b12 <DMA_List_FindNode+0xca>
      return 1U;
 8006b10:	2001      	movs	r0, #1
}
 8006b12:	bd30      	pop	{r4, r5, pc}

08006b14 <HAL_DMAEx_List_Init>:
{
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006b18:	f7fd fde4 	bl	80046e4 <HAL_GetTick>
  if (hdma == NULL)
 8006b1c:	b33c      	cbz	r4, 8006b6e <HAL_DMAEx_List_Init+0x5a>
 8006b1e:	4605      	mov	r5, r0
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006b20:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8006b22:	2300      	movs	r3, #0
 8006b24:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b28:	2302      	movs	r3, #2
 8006b2a:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
  __HAL_DMA_DISABLE(hdma);
 8006b2e:	6953      	ldr	r3, [r2, #20]
 8006b30:	f043 0306 	orr.w	r3, r3, #6
 8006b34:	6153      	str	r3, [r2, #20]
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	f013 0f01 	tst.w	r3, #1
 8006b3e:	d00b      	beq.n	8006b58 <HAL_DMAEx_List_Init+0x44>
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006b40:	f7fd fdd0 	bl	80046e4 <HAL_GetTick>
 8006b44:	1b43      	subs	r3, r0, r5
 8006b46:	2b05      	cmp	r3, #5
 8006b48:	d9f5      	bls.n	8006b36 <HAL_DMAEx_List_Init+0x22>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b4a:	2310      	movs	r3, #16
 8006b4c:	65a3      	str	r3, [r4, #88]	@ 0x58
      hdma->State = HAL_DMA_STATE_ERROR;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8006b54:	2001      	movs	r0, #1
 8006b56:	e009      	b.n	8006b6c <HAL_DMAEx_List_Init+0x58>
  DMA_List_Init(hdma);
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f7ff fd7b 	bl	8006654 <DMA_List_Init>
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8006b5e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8006b60:	6523      	str	r3, [r4, #80]	@ 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b62:	2000      	movs	r0, #0
 8006b64:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->State = HAL_DMA_STATE_READY;
 8006b66:	2301      	movs	r3, #1
 8006b68:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8006b6c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006b6e:	2001      	movs	r0, #1
 8006b70:	e7fc      	b.n	8006b6c <HAL_DMAEx_List_Init+0x58>

08006b72 <HAL_DMAEx_List_Start_IT>:
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d05e      	beq.n	8006c34 <HAL_DMAEx_List_Start_IT+0xc2>
{
 8006b76:	b510      	push	{r4, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	4604      	mov	r4, r0
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006b7c:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 8006b7e:	2900      	cmp	r1, #0
 8006b80:	d05a      	beq.n	8006c38 <HAL_DMAEx_List_Start_IT+0xc6>
  dma_state = hdma->State;
 8006b82:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8006b86:	b2db      	uxtb	r3, r3
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8006b88:	6802      	ldr	r2, [r0, #0]
 8006b8a:	6952      	ldr	r2, [r2, #20]
 8006b8c:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d003      	beq.n	8006b9c <HAL_DMAEx_List_Start_IT+0x2a>
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d146      	bne.n	8006c26 <HAL_DMAEx_List_Start_IT+0xb4>
 8006b98:	2a00      	cmp	r2, #0
 8006b9a:	d044      	beq.n	8006c26 <HAL_DMAEx_List_Start_IT+0xb4>
    if (hdma->State == HAL_DMA_STATE_READY)
 8006b9c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d007      	beq.n	8006bb6 <HAL_DMAEx_List_Start_IT+0x44>
    __HAL_DMA_ENABLE(hdma);
 8006ba6:	6822      	ldr	r2, [r4, #0]
 8006ba8:	6953      	ldr	r3, [r2, #20]
 8006baa:	f043 0301 	orr.w	r3, r3, #1
 8006bae:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8006bb0:	2000      	movs	r0, #0
}
 8006bb2:	b002      	add	sp, #8
 8006bb4:	bd10      	pop	{r4, pc}
      __HAL_LOCK(hdma);
 8006bb6:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d03e      	beq.n	8006c3c <HAL_DMAEx_List_Start_IT+0xca>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006bca:	730b      	strb	r3, [r1, #12]
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	65a3      	str	r3, [r4, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006bd0:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8006bd2:	6113      	str	r3, [r2, #16]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006bd4:	6822      	ldr	r2, [r4, #0]
 8006bd6:	6953      	ldr	r3, [r2, #20]
 8006bd8:	f443 43ba 	orr.w	r3, r3, #23808	@ 0x5d00
 8006bdc:	6153      	str	r3, [r2, #20]
      if (hdma->XferHalfCpltCallback != NULL)
 8006bde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006be0:	b123      	cbz	r3, 8006bec <HAL_DMAEx_List_Start_IT+0x7a>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006be2:	6822      	ldr	r2, [r4, #0]
 8006be4:	6953      	ldr	r3, [r2, #20]
 8006be6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006bea:	6153      	str	r3, [r2, #20]
      if (hdma->XferSuspendCallback != NULL)
 8006bec:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8006bee:	b123      	cbz	r3, 8006bfa <HAL_DMAEx_List_Start_IT+0x88>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006bf0:	6822      	ldr	r2, [r4, #0]
 8006bf2:	6953      	ldr	r3, [r2, #20]
 8006bf4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006bf8:	6153      	str	r3, [r2, #20]
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006bfa:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	a901      	add	r1, sp, #4
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	f7ff ff0b 	bl	8006a1c <DMA_List_GetCLLRNodeInfo>
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006c06:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8006c08:	6822      	ldr	r2, [r4, #0]
 8006c0a:	885b      	ldrh	r3, [r3, #2]
 8006c0c:	041b      	lsls	r3, r3, #16
 8006c0e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006c10:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f023 0303 	bic.w	r3, r3, #3
 8006c18:	041b      	lsls	r3, r3, #16
 8006c1a:	0c1b      	lsrs	r3, r3, #16
 8006c1c:	6822      	ldr	r2, [r4, #0]
 8006c1e:	9901      	ldr	r1, [sp, #4]
 8006c20:	430b      	orrs	r3, r1
 8006c22:	67d3      	str	r3, [r2, #124]	@ 0x7c
 8006c24:	e7bf      	b.n	8006ba6 <HAL_DMAEx_List_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006c26:	2340      	movs	r3, #64	@ 0x40
 8006c28:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    return HAL_ERROR;
 8006c30:	2001      	movs	r0, #1
 8006c32:	e7be      	b.n	8006bb2 <HAL_DMAEx_List_Start_IT+0x40>
    return HAL_ERROR;
 8006c34:	2001      	movs	r0, #1
}
 8006c36:	4770      	bx	lr
    return HAL_ERROR;
 8006c38:	2001      	movs	r0, #1
 8006c3a:	e7ba      	b.n	8006bb2 <HAL_DMAEx_List_Start_IT+0x40>
      __HAL_LOCK(hdma);
 8006c3c:	2002      	movs	r0, #2
 8006c3e:	e7b8      	b.n	8006bb2 <HAL_DMAEx_List_Start_IT+0x40>

08006c40 <HAL_DMAEx_List_BuildNode>:
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006c40:	b128      	cbz	r0, 8006c4e <HAL_DMAEx_List_BuildNode+0xe>
{
 8006c42:	b508      	push	{r3, lr}
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006c44:	b129      	cbz	r1, 8006c52 <HAL_DMAEx_List_BuildNode+0x12>
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006c46:	f7ff fddd 	bl	8006804 <DMA_List_BuildNode>
  return HAL_OK;
 8006c4a:	2000      	movs	r0, #0
}
 8006c4c:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8006c4e:	2001      	movs	r0, #1
}
 8006c50:	4770      	bx	lr
    return HAL_ERROR;
 8006c52:	2001      	movs	r0, #1
 8006c54:	e7fa      	b.n	8006c4c <HAL_DMAEx_List_BuildNode+0xc>

08006c56 <HAL_DMAEx_List_InsertNode_Tail>:
  if ((pQList == NULL) || (pNewNode == NULL))
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d050      	beq.n	8006cfc <HAL_DMAEx_List_InsertNode_Tail+0xa6>
{
 8006c5a:	b570      	push	{r4, r5, r6, lr}
 8006c5c:	b088      	sub	sp, #32
 8006c5e:	460c      	mov	r4, r1
 8006c60:	4605      	mov	r5, r0
  if ((pQList == NULL) || (pNewNode == NULL))
 8006c62:	2900      	cmp	r1, #0
 8006c64:	d04c      	beq.n	8006d00 <HAL_DMAEx_List_InsertNode_Tail+0xaa>
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006c66:	6943      	ldr	r3, [r0, #20]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d039      	beq.n	8006ce0 <HAL_DMAEx_List_InsertNode_Tail+0x8a>
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8006c6c:	6806      	ldr	r6, [r0, #0]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	4630      	mov	r0, r6
 8006c72:	f7ff fe9d 	bl	80069b0 <DMA_List_CheckNodesBaseAddresses>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d136      	bne.n	8006ce8 <HAL_DMAEx_List_InsertNode_Tail+0x92>
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f7ff fead 	bl	80069de <DMA_List_CheckNodesTypes>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d133      	bne.n	8006cf0 <HAL_DMAEx_List_InsertNode_Tail+0x9a>
  if (pQList->Head == NULL)
 8006c88:	2e00      	cmp	r6, #0
 8006c8a:	d035      	beq.n	8006cf8 <HAL_DMAEx_List_InsertNode_Tail+0xa2>
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8006c8c:	aa06      	add	r2, sp, #24
 8006c8e:	a907      	add	r1, sp, #28
 8006c90:	4620      	mov	r0, r4
 8006c92:	f7ff fec3 	bl	8006a1c <DMA_List_GetCLLRNodeInfo>
    node_info.cllr_offset = cllr_offset;
 8006c96:	9b06      	ldr	r3, [sp, #24]
 8006c98:	9301      	str	r3, [sp, #4]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006c9a:	aa01      	add	r2, sp, #4
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f7ff fed2 	bl	8006a48 <DMA_List_FindNode>
    if (pQList->FirstCircularNode != NULL)
 8006ca4:	686b      	ldr	r3, [r5, #4]
 8006ca6:	b143      	cbz	r3, 8006cba <HAL_DMAEx_List_InsertNode_Tail+0x64>
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006ca8:	f023 0303 	bic.w	r3, r3, #3
 8006cac:	041b      	lsls	r3, r3, #16
 8006cae:	0c1b      	lsrs	r3, r3, #16
 8006cb0:	9a07      	ldr	r2, [sp, #28]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	9a06      	ldr	r2, [sp, #24]
 8006cb6:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006cba:	f024 0403 	bic.w	r4, r4, #3
 8006cbe:	0424      	lsls	r4, r4, #16
 8006cc0:	0c24      	lsrs	r4, r4, #16
 8006cc2:	9b07      	ldr	r3, [sp, #28]
 8006cc4:	431c      	orrs	r4, r3
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8006cc6:	9b04      	ldr	r3, [sp, #16]
 8006cc8:	9a06      	ldr	r2, [sp, #24]
 8006cca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  pQList->NodeNumber++;
 8006cce:	68ab      	ldr	r3, [r5, #8]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	60ab      	str	r3, [r5, #8]
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	6128      	str	r0, [r5, #16]
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	732b      	strb	r3, [r5, #12]
}
 8006cdc:	b008      	add	sp, #32
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	6103      	str	r3, [r0, #16]
    return HAL_ERROR;
 8006ce4:	2001      	movs	r0, #1
 8006ce6:	e7f9      	b.n	8006cdc <HAL_DMAEx_List_InsertNode_Tail+0x86>
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006ce8:	2305      	movs	r3, #5
 8006cea:	612b      	str	r3, [r5, #16]
    return HAL_ERROR;
 8006cec:	2001      	movs	r0, #1
 8006cee:	e7f5      	b.n	8006cdc <HAL_DMAEx_List_InsertNode_Tail+0x86>
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	612b      	str	r3, [r5, #16]
    return HAL_ERROR;
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	e7f1      	b.n	8006cdc <HAL_DMAEx_List_InsertNode_Tail+0x86>
    pQList->Head = pNewNode;
 8006cf8:	602c      	str	r4, [r5, #0]
 8006cfa:	e7e8      	b.n	8006cce <HAL_DMAEx_List_InsertNode_Tail+0x78>
    return HAL_ERROR;
 8006cfc:	2001      	movs	r0, #1
}
 8006cfe:	4770      	bx	lr
    return HAL_ERROR;
 8006d00:	2001      	movs	r0, #1
 8006d02:	e7eb      	b.n	8006cdc <HAL_DMAEx_List_InsertNode_Tail+0x86>

08006d04 <HAL_DMAEx_List_LinkQ>:
  if ((hdma == NULL) || (pQList == NULL))
 8006d04:	4684      	mov	ip, r0
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d05a      	beq.n	8006dc0 <HAL_DMAEx_List_LinkQ+0xbc>
 8006d0a:	2900      	cmp	r1, #0
 8006d0c:	d05a      	beq.n	8006dc4 <HAL_DMAEx_List_LinkQ+0xc0>
  state = hdma->State;
 8006d0e:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8006d12:	b2da      	uxtb	r2, r3
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8006d14:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d037      	beq.n	8006d8e <HAL_DMAEx_List_LinkQ+0x8a>
 8006d1e:	2a05      	cmp	r2, #5
 8006d20:	d035      	beq.n	8006d8e <HAL_DMAEx_List_LinkQ+0x8a>
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8006d22:	7b0b      	ldrb	r3, [r1, #12]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d039      	beq.n	8006d9e <HAL_DMAEx_List_LinkQ+0x9a>
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006d2a:	6803      	ldr	r3, [r0, #0]
 8006d2c:	4a26      	ldr	r2, [pc, #152]	@ (8006dc8 <HAL_DMAEx_List_LinkQ+0xc4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d023      	beq.n	8006d7a <HAL_DMAEx_List_LinkQ+0x76>
 8006d32:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d01f      	beq.n	8006d7a <HAL_DMAEx_List_LinkQ+0x76>
 8006d3a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8006d3e:	3280      	adds	r2, #128	@ 0x80
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d01a      	beq.n	8006d7a <HAL_DMAEx_List_LinkQ+0x76>
 8006d44:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d016      	beq.n	8006d7a <HAL_DMAEx_List_LinkQ+0x76>
 8006d4c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8006d50:	3280      	adds	r2, #128	@ 0x80
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d011      	beq.n	8006d7a <HAL_DMAEx_List_LinkQ+0x76>
 8006d56:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00d      	beq.n	8006d7a <HAL_DMAEx_List_LinkQ+0x76>
 8006d5e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8006d62:	3280      	adds	r2, #128	@ 0x80
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d008      	beq.n	8006d7a <HAL_DMAEx_List_LinkQ+0x76>
 8006d68:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d004      	beq.n	8006d7a <HAL_DMAEx_List_LinkQ+0x76>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8006d70:	680b      	ldr	r3, [r1, #0]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006d74:	f013 0f02 	tst.w	r3, #2
 8006d78:	d114      	bne.n	8006da4 <HAL_DMAEx_List_LinkQ+0xa0>
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006d7a:	f8dc 3050 	ldr.w	r3, [ip, #80]	@ 0x50
 8006d7e:	2b81      	cmp	r3, #129	@ 0x81
 8006d80:	d014      	beq.n	8006dac <HAL_DMAEx_List_LinkQ+0xa8>
    if (pQList->FirstCircularNode != NULL)
 8006d82:	684b      	ldr	r3, [r1, #4]
 8006d84:	b1a3      	cbz	r3, 8006db0 <HAL_DMAEx_List_LinkQ+0xac>
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006d86:	2304      	movs	r3, #4
 8006d88:	610b      	str	r3, [r1, #16]
      return HAL_ERROR;
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006d8e:	2340      	movs	r3, #64	@ 0x40
 8006d90:	f8cc 3058 	str.w	r3, [ip, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006d94:	2300      	movs	r3, #0
 8006d96:	f88c 304c 	strb.w	r3, [ip, #76]	@ 0x4c
    return HAL_ERROR;
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	4770      	bx	lr
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8006d9e:	2001      	movs	r0, #1
 8006da0:	6108      	str	r0, [r1, #16]
    return HAL_ERROR;
 8006da2:	4770      	bx	lr
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8006da4:	2303      	movs	r3, #3
 8006da6:	610b      	str	r3, [r1, #16]
    return HAL_ERROR;
 8006da8:	2001      	movs	r0, #1
 8006daa:	4770      	bx	lr
    if (pQList->FirstCircularNode == NULL)
 8006dac:	684b      	ldr	r3, [r1, #4]
 8006dae:	b11b      	cbz	r3, 8006db8 <HAL_DMAEx_List_LinkQ+0xb4>
  hdma->LinkedListQueue = pQList;
 8006db0:	f8cc 1074 	str.w	r1, [ip, #116]	@ 0x74
  return HAL_OK;
 8006db4:	2000      	movs	r0, #0
 8006db6:	4770      	bx	lr
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006db8:	2304      	movs	r3, #4
 8006dba:	610b      	str	r3, [r1, #16]
      return HAL_ERROR;
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	4770      	bx	lr
    return HAL_ERROR;
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	4770      	bx	lr
 8006dc4:	2001      	movs	r0, #1
}
 8006dc6:	4770      	bx	lr
 8006dc8:	40020650 	.word	0x40020650

08006dcc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8006dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8006dce:	4604      	mov	r4, r0
  uint32_t position = 0U;
 8006dd0:	2300      	movs	r3, #0

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006dd2:	e0d9      	b.n	8006f88 <HAL_GPIO_Init+0x1bc>
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8006dd4:	6805      	ldr	r5, [r0, #0]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8006dd6:	ea25 050c 	bic.w	r5, r5, ip
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8006dda:	684c      	ldr	r4, [r1, #4]
 8006ddc:	f004 0401 	and.w	r4, r4, #1
 8006de0:	409c      	lsls	r4, r3
 8006de2:	432c      	orrs	r4, r5
        GPIOx->MODER = tmp;
 8006de4:	6004      	str	r4, [r0, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8006de6:	4d7c      	ldr	r5, [pc, #496]	@ (8006fd8 <HAL_GPIO_Init+0x20c>)
 8006de8:	f855 4033 	ldr.w	r4, [r5, r3, lsl #3]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8006dec:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006df0:	686d      	ldr	r5, [r5, #4]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8006df2:	08ef      	lsrs	r7, r5, #3
 8006df4:	3708      	adds	r7, #8
 8006df6:	f854 6027 	ldr.w	r6, [r4, r7, lsl #2]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8006dfa:	f005 0c07 	and.w	ip, r5, #7
 8006dfe:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006e02:	f04f 0e0f 	mov.w	lr, #15
 8006e06:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006e0a:	ea26 0e0e 	bic.w	lr, r6, lr
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8006e0e:	260b      	movs	r6, #11
 8006e10:	fa06 f60c 	lsl.w	r6, r6, ip
 8006e14:	ea46 060e 	orr.w	r6, r6, lr
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8006e18:	f844 6027 	str.w	r6, [r4, r7, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8006e1c:	6827      	ldr	r7, [r4, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8006e1e:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 8006e22:	2603      	movs	r6, #3
 8006e24:	fa06 f60c 	lsl.w	r6, r6, ip
 8006e28:	ea27 0706 	bic.w	r7, r7, r6
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8006e2c:	2602      	movs	r6, #2
 8006e2e:	fa06 f60c 	lsl.w	r6, r6, ip
 8006e32:	433e      	orrs	r6, r7
        p_gpio->MODER = tmp;
 8006e34:	6026      	str	r6, [r4, #0]
 8006e36:	e021      	b.n	8006e7c <HAL_GPIO_Init+0xb0>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8006e38:	08de      	lsrs	r6, r3, #3
 8006e3a:	3608      	adds	r6, #8
 8006e3c:	f850 5026 	ldr.w	r5, [r0, r6, lsl #2]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8006e40:	f003 0707 	and.w	r7, r3, #7
 8006e44:	00bf      	lsls	r7, r7, #2
 8006e46:	f04f 0c0f 	mov.w	ip, #15
 8006e4a:	fa0c fc07 	lsl.w	ip, ip, r7
 8006e4e:	ea25 0c0c 	bic.w	ip, r5, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8006e52:	690d      	ldr	r5, [r1, #16]
 8006e54:	f005 050f 	and.w	r5, r5, #15
 8006e58:	40bd      	lsls	r5, r7
 8006e5a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = tmp;
 8006e5e:	f840 5026 	str.w	r5, [r0, r6, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8006e62:	6826      	ldr	r6, [r4, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8006e64:	005f      	lsls	r7, r3, #1
 8006e66:	2503      	movs	r5, #3
 8006e68:	40bd      	lsls	r5, r7
 8006e6a:	ea26 0605 	bic.w	r6, r6, r5
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8006e6e:	684d      	ldr	r5, [r1, #4]
 8006e70:	f005 0503 	and.w	r5, r5, #3
 8006e74:	40bd      	lsls	r5, r7
 8006e76:	4335      	orrs	r5, r6
        p_gpio->MODER = tmp;
 8006e78:	6025      	str	r5, [r4, #0]
    pin_position = position;
 8006e7a:	461d      	mov	r5, r3
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
        p_gpio->MODER = tmp;
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e7c:	684e      	ldr	r6, [r1, #4]
 8006e7e:	f106 3cff 	add.w	ip, r6, #4294967295
 8006e82:	f1bc 0f01 	cmp.w	ip, #1
 8006e86:	d903      	bls.n	8006e90 <HAL_GPIO_Init+0xc4>
 8006e88:	2e11      	cmp	r6, #17
 8006e8a:	d001      	beq.n	8006e90 <HAL_GPIO_Init+0xc4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e8c:	2e12      	cmp	r6, #18
 8006e8e:	d11c      	bne.n	8006eca <HAL_GPIO_Init+0xfe>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8006e90:	68a6      	ldr	r6, [r4, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8006e92:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 8006e96:	f04f 0c03 	mov.w	ip, #3
 8006e9a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006e9e:	ea26 0c0c 	bic.w	ip, r6, ip
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8006ea2:	68ce      	ldr	r6, [r1, #12]
 8006ea4:	fa06 f60e 	lsl.w	r6, r6, lr
 8006ea8:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->OSPEEDR = tmp;
 8006eac:	60a6      	str	r6, [r4, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8006eae:	6866      	ldr	r6, [r4, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8006eb0:	f04f 0c01 	mov.w	ip, #1
 8006eb4:	fa0c fc05 	lsl.w	ip, ip, r5
 8006eb8:	ea26 0c0c 	bic.w	ip, r6, ip
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8006ebc:	684e      	ldr	r6, [r1, #4]
 8006ebe:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8006ec2:	40ae      	lsls	r6, r5
 8006ec4:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->OTYPER = tmp;
 8006ec8:	6066      	str	r6, [r4, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8006eca:	684e      	ldr	r6, [r1, #4]
 8006ecc:	2e03      	cmp	r6, #3
 8006ece:	d00c      	beq.n	8006eea <HAL_GPIO_Init+0x11e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8006ed0:	68e6      	ldr	r6, [r4, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8006ed2:	006d      	lsls	r5, r5, #1
 8006ed4:	f04f 0c03 	mov.w	ip, #3
 8006ed8:	fa0c fc05 	lsl.w	ip, ip, r5
 8006edc:	ea26 0c0c 	bic.w	ip, r6, ip
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8006ee0:	688e      	ldr	r6, [r1, #8]
 8006ee2:	40ae      	lsls	r6, r5
 8006ee4:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->PUPDR = tmp;
 8006ee8:	60e6      	str	r6, [r4, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006eea:	684d      	ldr	r5, [r1, #4]
 8006eec:	f015 5f80 	tst.w	r5, #268435456	@ 0x10000000
 8006ef0:	d049      	beq.n	8006f86 <HAL_GPIO_Init+0x1ba>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8006ef2:	089e      	lsrs	r6, r3, #2
 8006ef4:	4f39      	ldr	r7, [pc, #228]	@ (8006fdc <HAL_GPIO_Init+0x210>)
 8006ef6:	3618      	adds	r6, #24
 8006ef8:	f857 5026 	ldr.w	r5, [r7, r6, lsl #2]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8006efc:	f003 0c03 	and.w	ip, r3, #3
 8006f00:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8006f04:	f04f 0e0f 	mov.w	lr, #15
 8006f08:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006f0c:	ea25 0e0e 	bic.w	lr, r5, lr
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8006f10:	4d33      	ldr	r5, [pc, #204]	@ (8006fe0 <HAL_GPIO_Init+0x214>)
 8006f12:	ea05 2590 	and.w	r5, r5, r0, lsr #10
 8006f16:	fa05 f50c 	lsl.w	r5, r5, ip
 8006f1a:	ea45 050e 	orr.w	r5, r5, lr
        EXTI->EXTICR[position >> 2U] = tmp;
 8006f1e:	f847 5026 	str.w	r5, [r7, r6, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8006f22:	683e      	ldr	r6, [r7, #0]
        tmp &= ~((uint32_t)iocurrent);
 8006f24:	ea6f 0c02 	mvn.w	ip, r2
 8006f28:	ea26 0702 	bic.w	r7, r6, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006f2c:	684d      	ldr	r5, [r1, #4]
 8006f2e:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
 8006f32:	d001      	beq.n	8006f38 <HAL_GPIO_Init+0x16c>
        {
          tmp |= iocurrent;
 8006f34:	ea42 0706 	orr.w	r7, r2, r6
        }
        EXTI->RTSR1 = tmp;
 8006f38:	4e28      	ldr	r6, [pc, #160]	@ (8006fdc <HAL_GPIO_Init+0x210>)
 8006f3a:	6037      	str	r7, [r6, #0]

        tmp = EXTI->FTSR1;
 8006f3c:	6876      	ldr	r6, [r6, #4]
        tmp &= ~((uint32_t)iocurrent);
 8006f3e:	ea0c 0706 	and.w	r7, ip, r6
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006f42:	684d      	ldr	r5, [r1, #4]
 8006f44:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
 8006f48:	d001      	beq.n	8006f4e <HAL_GPIO_Init+0x182>
        {
          tmp |= iocurrent;
 8006f4a:	ea42 0706 	orr.w	r7, r2, r6
        }
        EXTI->FTSR1 = tmp;
 8006f4e:	4e23      	ldr	r6, [pc, #140]	@ (8006fdc <HAL_GPIO_Init+0x210>)
 8006f50:	6077      	str	r7, [r6, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8006f52:	f8d6 6084 	ldr.w	r6, [r6, #132]	@ 0x84
        tmp &= ~((uint32_t)iocurrent);
 8006f56:	ea0c 0706 	and.w	r7, ip, r6
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006f5a:	684d      	ldr	r5, [r1, #4]
 8006f5c:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
 8006f60:	d001      	beq.n	8006f66 <HAL_GPIO_Init+0x19a>
        {
          tmp |= iocurrent;
 8006f62:	ea42 0706 	orr.w	r7, r2, r6
        }
        EXTI->EMR1 = tmp;
 8006f66:	4e1d      	ldr	r6, [pc, #116]	@ (8006fdc <HAL_GPIO_Init+0x210>)
 8006f68:	f8c6 7084 	str.w	r7, [r6, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8006f6c:	f8d6 6080 	ldr.w	r6, [r6, #128]	@ 0x80
        tmp &= ~((uint32_t)iocurrent);
 8006f70:	ea0c 0506 	and.w	r5, ip, r6
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006f74:	684f      	ldr	r7, [r1, #4]
 8006f76:	f417 3f80 	tst.w	r7, #65536	@ 0x10000
 8006f7a:	d001      	beq.n	8006f80 <HAL_GPIO_Init+0x1b4>
        {
          tmp |= iocurrent;
 8006f7c:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI->IMR1 = tmp;
 8006f80:	4a16      	ldr	r2, [pc, #88]	@ (8006fdc <HAL_GPIO_Init+0x210>)
 8006f82:	f8c2 5080 	str.w	r5, [r2, #128]	@ 0x80
      }
    }
    position++;
 8006f86:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006f88:	680a      	ldr	r2, [r1, #0]
 8006f8a:	fa32 f503 	lsrs.w	r5, r2, r3
 8006f8e:	d021      	beq.n	8006fd4 <HAL_GPIO_Init+0x208>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8006f90:	f04f 0c01 	mov.w	ip, #1
 8006f94:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0U)
 8006f98:	ea1c 0202 	ands.w	r2, ip, r2
 8006f9c:	d0f3      	beq.n	8006f86 <HAL_GPIO_Init+0x1ba>
      if (GPIOx == LPGPIO1)
 8006f9e:	4d11      	ldr	r5, [pc, #68]	@ (8006fe4 <HAL_GPIO_Init+0x218>)
 8006fa0:	42a8      	cmp	r0, r5
 8006fa2:	f43f af17 	beq.w	8006dd4 <HAL_GPIO_Init+0x8>
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fa6:	684d      	ldr	r5, [r1, #4]
 8006fa8:	2d02      	cmp	r5, #2
 8006faa:	f43f af45 	beq.w	8006e38 <HAL_GPIO_Init+0x6c>
 8006fae:	2d12      	cmp	r5, #18
 8006fb0:	f43f af42 	beq.w	8006e38 <HAL_GPIO_Init+0x6c>
        tmp = p_gpio->MODER;
 8006fb4:	6826      	ldr	r6, [r4, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8006fb6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006fba:	2703      	movs	r7, #3
 8006fbc:	fa07 f70c 	lsl.w	r7, r7, ip
 8006fc0:	ea26 0607 	bic.w	r6, r6, r7
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8006fc4:	f005 0503 	and.w	r5, r5, #3
 8006fc8:	fa05 f50c 	lsl.w	r5, r5, ip
 8006fcc:	4335      	orrs	r5, r6
        p_gpio->MODER = tmp;
 8006fce:	6025      	str	r5, [r4, #0]
    pin_position = position;
 8006fd0:	461d      	mov	r5, r3
 8006fd2:	e753      	b.n	8006e7c <HAL_GPIO_Init+0xb0>
  }
}
 8006fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	08017770 	.word	0x08017770
 8006fdc:	46022000 	.word	0x46022000
 8006fe0:	002f7f7f 	.word	0x002f7f7f
 8006fe4:	46020000 	.word	0x46020000

08006fe8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006fe8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8006fea:	4604      	mov	r4, r0
  uint32_t position = 0U;
 8006fec:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8006fee:	e034      	b.n	800705a <HAL_GPIO_DeInit+0x72>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8006ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80070dc <HAL_GPIO_DeInit+0xf4>)
 8006ff2:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8006ff6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ffa:	685d      	ldr	r5, [r3, #4]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8006ffc:	4f38      	ldr	r7, [pc, #224]	@ (80070e0 <HAL_GPIO_DeInit+0xf8>)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2601      	movs	r6, #1
 8007002:	40ae      	lsls	r6, r5
 8007004:	ea23 0306 	bic.w	r3, r3, r6
 8007008:	603b      	str	r3, [r7, #0]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 800700a:	6826      	ldr	r6, [r4, #0]
 800700c:	006f      	lsls	r7, r5, #1
 800700e:	2303      	movs	r3, #3
 8007010:	40bb      	lsls	r3, r7
 8007012:	431e      	orrs	r6, r3
 8007014:	6026      	str	r6, [r4, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8007016:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 800701a:	f10c 0c08 	add.w	ip, ip, #8
 800701e:	f854 602c 	ldr.w	r6, [r4, ip, lsl #2]
 8007022:	f005 0707 	and.w	r7, r5, #7
 8007026:	00bf      	lsls	r7, r7, #2
 8007028:	f04f 0e0f 	mov.w	lr, #15
 800702c:	fa0e fe07 	lsl.w	lr, lr, r7
 8007030:	ea26 060e 	bic.w	r6, r6, lr
 8007034:	f844 602c 	str.w	r6, [r4, ip, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8007038:	68a6      	ldr	r6, [r4, #8]
 800703a:	ea26 0603 	bic.w	r6, r6, r3
 800703e:	60a6      	str	r6, [r4, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007040:	6866      	ldr	r6, [r4, #4]
 8007042:	f04f 0c01 	mov.w	ip, #1
 8007046:	fa0c f505 	lsl.w	r5, ip, r5
 800704a:	ea26 0505 	bic.w	r5, r6, r5
 800704e:	6065      	str	r5, [r4, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8007050:	68e5      	ldr	r5, [r4, #12]
 8007052:	ea25 0303 	bic.w	r3, r5, r3
 8007056:	60e3      	str	r3, [r4, #12]
    }

    position++;
 8007058:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0U)
 800705a:	fa31 f302 	lsrs.w	r3, r1, r2
 800705e:	d03b      	beq.n	80070d8 <HAL_GPIO_DeInit+0xf0>
    iocurrent = (GPIO_Pin) & (1UL << position);
 8007060:	2301      	movs	r3, #1
 8007062:	4093      	lsls	r3, r2
    if (iocurrent != 0U)
 8007064:	400b      	ands	r3, r1
 8007066:	d0f7      	beq.n	8007058 <HAL_GPIO_DeInit+0x70>
      if (GPIOx == LPGPIO1)
 8007068:	4d1d      	ldr	r5, [pc, #116]	@ (80070e0 <HAL_GPIO_DeInit+0xf8>)
 800706a:	42a8      	cmp	r0, r5
 800706c:	d0c0      	beq.n	8006ff0 <HAL_GPIO_DeInit+0x8>
        tmp = EXTI->EXTICR[position >> 2U];
 800706e:	ea4f 0e92 	mov.w	lr, r2, lsr #2
 8007072:	f10e 0618 	add.w	r6, lr, #24
 8007076:	4d1b      	ldr	r5, [pc, #108]	@ (80070e4 <HAL_GPIO_DeInit+0xfc>)
 8007078:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800707c:	f002 0603 	and.w	r6, r2, #3
 8007080:	00f6      	lsls	r6, r6, #3
 8007082:	270f      	movs	r7, #15
 8007084:	40b7      	lsls	r7, r6
 8007086:	ea07 0c05 	and.w	ip, r7, r5
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800708a:	4d17      	ldr	r5, [pc, #92]	@ (80070e8 <HAL_GPIO_DeInit+0x100>)
 800708c:	ea05 2590 	and.w	r5, r5, r0, lsr #10
 8007090:	40b5      	lsls	r5, r6
 8007092:	4565      	cmp	r5, ip
 8007094:	d001      	beq.n	800709a <HAL_GPIO_DeInit+0xb2>
    pin_position = position;
 8007096:	4615      	mov	r5, r2
 8007098:	e7b7      	b.n	800700a <HAL_GPIO_DeInit+0x22>
          EXTI->IMR1 &= ~(iocurrent);
 800709a:	4d12      	ldr	r5, [pc, #72]	@ (80070e4 <HAL_GPIO_DeInit+0xfc>)
 800709c:	f8d5 6080 	ldr.w	r6, [r5, #128]	@ 0x80
 80070a0:	ea26 0603 	bic.w	r6, r6, r3
 80070a4:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 80070a8:	f8d5 6084 	ldr.w	r6, [r5, #132]	@ 0x84
 80070ac:	ea26 0603 	bic.w	r6, r6, r3
 80070b0:	f8c5 6084 	str.w	r6, [r5, #132]	@ 0x84
          EXTI->RTSR1 &= ~(iocurrent);
 80070b4:	682e      	ldr	r6, [r5, #0]
 80070b6:	ea26 0603 	bic.w	r6, r6, r3
 80070ba:	602e      	str	r6, [r5, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 80070bc:	686e      	ldr	r6, [r5, #4]
 80070be:	ea26 0303 	bic.w	r3, r6, r3
 80070c2:	606b      	str	r3, [r5, #4]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 80070c4:	f10e 0e18 	add.w	lr, lr, #24
 80070c8:	f855 302e 	ldr.w	r3, [r5, lr, lsl #2]
 80070cc:	ea23 0307 	bic.w	r3, r3, r7
 80070d0:	f845 302e 	str.w	r3, [r5, lr, lsl #2]
    pin_position = position;
 80070d4:	4615      	mov	r5, r2
 80070d6:	e798      	b.n	800700a <HAL_GPIO_DeInit+0x22>
  }
}
 80070d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070da:	bf00      	nop
 80070dc:	08017770 	.word	0x08017770
 80070e0:	46020000 	.word	0x46020000
 80070e4:	46022000 	.word	0x46022000
 80070e8:	002f7f7f 	.word	0x002f7f7f

080070ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070ec:	b10a      	cbz	r2, 80070f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070ee:	6181      	str	r1, [r0, #24]
 80070f0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80070f2:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80070f4:	4770      	bx	lr

080070f6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80070f6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80070f8:	ea01 0203 	and.w	r2, r1, r3
 80070fc:	ea21 0103 	bic.w	r1, r1, r3
 8007100:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007104:	6181      	str	r1, [r0, #24]
}
 8007106:	4770      	bx	lr

08007108 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007108:	6803      	ldr	r3, [r0, #0]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	f012 0f02 	tst.w	r2, #2
 8007110:	d001      	beq.n	8007116 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007112:	2200      	movs	r2, #0
 8007114:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007116:	6803      	ldr	r3, [r0, #0]
 8007118:	699a      	ldr	r2, [r3, #24]
 800711a:	f012 0f01 	tst.w	r2, #1
 800711e:	d103      	bne.n	8007128 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007120:	699a      	ldr	r2, [r3, #24]
 8007122:	f042 0201 	orr.w	r2, r2, #1
 8007126:	619a      	str	r2, [r3, #24]
  }
}
 8007128:	4770      	bx	lr

0800712a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800712a:	b410      	push	{r4}
 800712c:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800712e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007132:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007136:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007138:	4321      	orrs	r1, r4
 800713a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800713e:	6802      	ldr	r2, [r0, #0]
 8007140:	6853      	ldr	r3, [r2, #4]
 8007142:	0d64      	lsrs	r4, r4, #21
 8007144:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 8007148:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 800714c:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 8007150:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 8007154:	f044 0403 	orr.w	r4, r4, #3
 8007158:	ea23 0304 	bic.w	r3, r3, r4
 800715c:	430b      	orrs	r3, r1
 800715e:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007164:	4770      	bx	lr

08007166 <I2C_IsErrorOccurred>:
{
 8007166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800716a:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800716c:	6803      	ldr	r3, [r0, #0]
 800716e:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007170:	f016 0610 	ands.w	r6, r6, #16
 8007174:	d07c      	beq.n	8007270 <I2C_IsErrorOccurred+0x10a>
 8007176:	460d      	mov	r5, r1
 8007178:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800717a:	2210      	movs	r2, #16
 800717c:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 800717e:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007180:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	6998      	ldr	r0, [r3, #24]
 8007186:	f010 0f20 	tst.w	r0, #32
 800718a:	d130      	bne.n	80071ee <I2C_IsErrorOccurred+0x88>
 800718c:	bb7f      	cbnz	r7, 80071ee <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 800718e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007192:	d0f6      	beq.n	8007182 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007194:	f7fd faa6 	bl	80046e4 <HAL_GetTick>
 8007198:	eba0 0008 	sub.w	r0, r0, r8
 800719c:	42a8      	cmp	r0, r5
 800719e:	d801      	bhi.n	80071a4 <I2C_IsErrorOccurred+0x3e>
 80071a0:	2d00      	cmp	r5, #0
 80071a2:	d1ee      	bne.n	8007182 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80071a4:	6821      	ldr	r1, [r4, #0]
 80071a6:	684b      	ldr	r3, [r1, #4]
 80071a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 80071ac:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 80071b0:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80071b2:	6988      	ldr	r0, [r1, #24]
 80071b4:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 80071b8:	d002      	beq.n	80071c0 <I2C_IsErrorOccurred+0x5a>
 80071ba:	b90b      	cbnz	r3, 80071c0 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 80071bc:	2a20      	cmp	r2, #32
 80071be:	d10e      	bne.n	80071de <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	f013 0f20 	tst.w	r3, #32
 80071c8:	d1db      	bne.n	8007182 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80071ca:	f7fd fa8b 	bl	80046e4 <HAL_GetTick>
 80071ce:	eba0 0008 	sub.w	r0, r0, r8
 80071d2:	2819      	cmp	r0, #25
 80071d4:	d9f4      	bls.n	80071c0 <I2C_IsErrorOccurred+0x5a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80071d6:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 80071da:	2701      	movs	r7, #1
              break;
 80071dc:	e7d1      	b.n	8007182 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80071de:	684b      	ldr	r3, [r1, #4]
 80071e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071e4:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80071e6:	f7fd fa7d 	bl	80046e4 <HAL_GetTick>
 80071ea:	4680      	mov	r8, r0
 80071ec:	e7e8      	b.n	80071c0 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 80071ee:	b90f      	cbnz	r7, 80071f4 <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071f0:	2220      	movs	r2, #32
 80071f2:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80071f4:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 80071f8:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 80071fa:	6822      	ldr	r2, [r4, #0]
 80071fc:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80071fe:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007202:	d005      	beq.n	8007210 <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 8007204:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007208:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800720c:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800720e:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007210:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007214:	d006      	beq.n	8007224 <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 8007216:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800721a:	6822      	ldr	r2, [r4, #0]
 800721c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007220:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8007222:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007224:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8007228:	d024      	beq.n	8007274 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 800722a:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007234:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8007236:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8007238:	4620      	mov	r0, r4
 800723a:	f7ff ff65 	bl	8007108 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800723e:	6822      	ldr	r2, [r4, #0]
 8007240:	6853      	ldr	r3, [r2, #4]
 8007242:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8007246:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800724a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800724e:	f023 0301 	bic.w	r3, r3, #1
 8007252:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8007254:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007256:	4333      	orrs	r3, r6
 8007258:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800725a:	2320      	movs	r3, #32
 800725c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007260:	2300      	movs	r3, #0
 8007262:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8007266:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800726a:	4628      	mov	r0, r5
 800726c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8007270:	2500      	movs	r5, #0
 8007272:	e7c2      	b.n	80071fa <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 8007274:	2d00      	cmp	r5, #0
 8007276:	d0f8      	beq.n	800726a <I2C_IsErrorOccurred+0x104>
 8007278:	e7de      	b.n	8007238 <I2C_IsErrorOccurred+0xd2>

0800727a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800727a:	b570      	push	{r4, r5, r6, lr}
 800727c:	4604      	mov	r4, r0
 800727e:	460d      	mov	r5, r1
 8007280:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	f013 0f02 	tst.w	r3, #2
 800728a:	d122      	bne.n	80072d2 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800728c:	4632      	mov	r2, r6
 800728e:	4629      	mov	r1, r5
 8007290:	4620      	mov	r0, r4
 8007292:	f7ff ff68 	bl	8007166 <I2C_IsErrorOccurred>
 8007296:	b9f0      	cbnz	r0, 80072d6 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8007298:	f1b5 3fff 	cmp.w	r5, #4294967295
 800729c:	d0f1      	beq.n	8007282 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729e:	f7fd fa21 	bl	80046e4 <HAL_GetTick>
 80072a2:	1b80      	subs	r0, r0, r6
 80072a4:	42a8      	cmp	r0, r5
 80072a6:	d801      	bhi.n	80072ac <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80072a8:	2d00      	cmp	r5, #0
 80072aa:	d1ea      	bne.n	8007282 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f013 0f02 	tst.w	r3, #2
 80072b4:	d1e5      	bne.n	8007282 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80072b8:	f043 0320 	orr.w	r3, r3, #32
 80072bc:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80072be:	2320      	movs	r3, #32
 80072c0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072c4:	2300      	movs	r3, #0
 80072c6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80072ca:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 80072ce:	2001      	movs	r0, #1
 80072d0:	e000      	b.n	80072d4 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 80072d2:	2000      	movs	r0, #0
}
 80072d4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80072d6:	2001      	movs	r0, #1
 80072d8:	e7fc      	b.n	80072d4 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

080072da <I2C_WaitOnFlagUntilTimeout>:
{
 80072da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072de:	4605      	mov	r5, r0
 80072e0:	460f      	mov	r7, r1
 80072e2:	4616      	mov	r6, r2
 80072e4:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072e6:	682c      	ldr	r4, [r5, #0]
 80072e8:	69a4      	ldr	r4, [r4, #24]
 80072ea:	ea37 0404 	bics.w	r4, r7, r4
 80072ee:	bf0c      	ite	eq
 80072f0:	2401      	moveq	r4, #1
 80072f2:	2400      	movne	r4, #0
 80072f4:	42b4      	cmp	r4, r6
 80072f6:	d122      	bne.n	800733e <I2C_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 80072f8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80072fc:	d0f3      	beq.n	80072e6 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072fe:	f7fd f9f1 	bl	80046e4 <HAL_GetTick>
 8007302:	9b06      	ldr	r3, [sp, #24]
 8007304:	1ac0      	subs	r0, r0, r3
 8007306:	4540      	cmp	r0, r8
 8007308:	d802      	bhi.n	8007310 <I2C_WaitOnFlagUntilTimeout+0x36>
 800730a:	f1b8 0f00 	cmp.w	r8, #0
 800730e:	d1ea      	bne.n	80072e6 <I2C_WaitOnFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	ea37 0303 	bics.w	r3, r7, r3
 8007318:	bf0c      	ite	eq
 800731a:	2301      	moveq	r3, #1
 800731c:	2300      	movne	r3, #0
 800731e:	42b3      	cmp	r3, r6
 8007320:	d1e1      	bne.n	80072e6 <I2C_WaitOnFlagUntilTimeout+0xc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007322:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007324:	f043 0320 	orr.w	r3, r3, #32
 8007328:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800732a:	2320      	movs	r3, #32
 800732c:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007330:	2300      	movs	r3, #0
 8007332:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8007336:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800733a:	2001      	movs	r0, #1
 800733c:	e000      	b.n	8007340 <I2C_WaitOnFlagUntilTimeout+0x66>
  return HAL_OK;
 800733e:	2000      	movs	r0, #0
}
 8007340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007344 <I2C_RequestMemoryWrite>:
{
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	4604      	mov	r4, r0
 800734c:	4690      	mov	r8, r2
 800734e:	461d      	mov	r5, r3
 8007350:	9e08      	ldr	r6, [sp, #32]
 8007352:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007354:	4b19      	ldr	r3, [pc, #100]	@ (80073bc <I2C_RequestMemoryWrite+0x78>)
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800735c:	b2ea      	uxtb	r2, r5
 800735e:	f7ff fee4 	bl	800712a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007362:	463a      	mov	r2, r7
 8007364:	4631      	mov	r1, r6
 8007366:	4620      	mov	r0, r4
 8007368:	f7ff ff87 	bl	800727a <I2C_WaitOnTXISFlagUntilTimeout>
 800736c:	b9f8      	cbnz	r0, 80073ae <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800736e:	2d01      	cmp	r5, #1
 8007370:	d10e      	bne.n	8007390 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	fa5f f288 	uxtb.w	r2, r8
 8007378:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800737a:	9700      	str	r7, [sp, #0]
 800737c:	4633      	mov	r3, r6
 800737e:	2200      	movs	r2, #0
 8007380:	2180      	movs	r1, #128	@ 0x80
 8007382:	4620      	mov	r0, r4
 8007384:	f7ff ffa9 	bl	80072da <I2C_WaitOnFlagUntilTimeout>
 8007388:	b9a8      	cbnz	r0, 80073b6 <I2C_RequestMemoryWrite+0x72>
}
 800738a:	b002      	add	sp, #8
 800738c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8007396:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007398:	463a      	mov	r2, r7
 800739a:	4631      	mov	r1, r6
 800739c:	4620      	mov	r0, r4
 800739e:	f7ff ff6c 	bl	800727a <I2C_WaitOnTXISFlagUntilTimeout>
 80073a2:	b930      	cbnz	r0, 80073b2 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	fa5f f288 	uxtb.w	r2, r8
 80073aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80073ac:	e7e5      	b.n	800737a <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80073ae:	2001      	movs	r0, #1
 80073b0:	e7eb      	b.n	800738a <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80073b2:	2001      	movs	r0, #1
 80073b4:	e7e9      	b.n	800738a <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80073b6:	2001      	movs	r0, #1
 80073b8:	e7e7      	b.n	800738a <I2C_RequestMemoryWrite+0x46>
 80073ba:	bf00      	nop
 80073bc:	80002000 	.word	0x80002000

080073c0 <I2C_RequestMemoryRead>:
{
 80073c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c4:	b082      	sub	sp, #8
 80073c6:	4604      	mov	r4, r0
 80073c8:	4690      	mov	r8, r2
 80073ca:	461d      	mov	r5, r3
 80073cc:	9e08      	ldr	r6, [sp, #32]
 80073ce:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80073d0:	4b18      	ldr	r3, [pc, #96]	@ (8007434 <I2C_RequestMemoryRead+0x74>)
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	2300      	movs	r3, #0
 80073d6:	b2ea      	uxtb	r2, r5
 80073d8:	f7ff fea7 	bl	800712a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073dc:	463a      	mov	r2, r7
 80073de:	4631      	mov	r1, r6
 80073e0:	4620      	mov	r0, r4
 80073e2:	f7ff ff4a 	bl	800727a <I2C_WaitOnTXISFlagUntilTimeout>
 80073e6:	b9f8      	cbnz	r0, 8007428 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073e8:	2d01      	cmp	r5, #1
 80073ea:	d10e      	bne.n	800740a <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	fa5f f288 	uxtb.w	r2, r8
 80073f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80073f4:	9700      	str	r7, [sp, #0]
 80073f6:	4633      	mov	r3, r6
 80073f8:	2200      	movs	r2, #0
 80073fa:	2140      	movs	r1, #64	@ 0x40
 80073fc:	4620      	mov	r0, r4
 80073fe:	f7ff ff6c 	bl	80072da <I2C_WaitOnFlagUntilTimeout>
 8007402:	b9a8      	cbnz	r0, 8007430 <I2C_RequestMemoryRead+0x70>
}
 8007404:	b002      	add	sp, #8
 8007406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8007410:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007412:	463a      	mov	r2, r7
 8007414:	4631      	mov	r1, r6
 8007416:	4620      	mov	r0, r4
 8007418:	f7ff ff2f 	bl	800727a <I2C_WaitOnTXISFlagUntilTimeout>
 800741c:	b930      	cbnz	r0, 800742c <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	fa5f f288 	uxtb.w	r2, r8
 8007424:	629a      	str	r2, [r3, #40]	@ 0x28
 8007426:	e7e5      	b.n	80073f4 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8007428:	2001      	movs	r0, #1
 800742a:	e7eb      	b.n	8007404 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 800742c:	2001      	movs	r0, #1
 800742e:	e7e9      	b.n	8007404 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8007430:	2001      	movs	r0, #1
 8007432:	e7e7      	b.n	8007404 <I2C_RequestMemoryRead+0x44>
 8007434:	80002000 	.word	0x80002000

08007438 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	4604      	mov	r4, r0
 800743c:	460d      	mov	r5, r1
 800743e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007440:	e004      	b.n	800744c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f013 0f20 	tst.w	r3, #32
 800744a:	d012      	beq.n	8007472 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	f013 0f20 	tst.w	r3, #32
 8007454:	d11b      	bne.n	800748e <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007456:	4632      	mov	r2, r6
 8007458:	4629      	mov	r1, r5
 800745a:	4620      	mov	r0, r4
 800745c:	f7ff fe83 	bl	8007166 <I2C_IsErrorOccurred>
 8007460:	b9b8      	cbnz	r0, 8007492 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007462:	f7fd f93f 	bl	80046e4 <HAL_GetTick>
 8007466:	1b80      	subs	r0, r0, r6
 8007468:	42a8      	cmp	r0, r5
 800746a:	d8ea      	bhi.n	8007442 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 800746c:	2d00      	cmp	r5, #0
 800746e:	d1ed      	bne.n	800744c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 8007470:	e7e7      	b.n	8007442 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007472:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007474:	f043 0320 	orr.w	r3, r3, #32
 8007478:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800747a:	2320      	movs	r3, #32
 800747c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007480:	2300      	movs	r3, #0
 8007482:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8007486:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 800748a:	2001      	movs	r0, #1
 800748c:	e000      	b.n	8007490 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 800748e:	2000      	movs	r0, #0
}
 8007490:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007492:	2001      	movs	r0, #1
 8007494:	e7fc      	b.n	8007490 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

08007496 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8007496:	2800      	cmp	r0, #0
 8007498:	d05f      	beq.n	800755a <HAL_I2C_Init+0xc4>
{
 800749a:	b510      	push	{r4, lr}
 800749c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800749e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d048      	beq.n	8007538 <HAL_I2C_Init+0xa2>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80074a6:	2324      	movs	r3, #36	@ 0x24
 80074a8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80074ac:	6822      	ldr	r2, [r4, #0]
 80074ae:	6813      	ldr	r3, [r2, #0]
 80074b0:	f023 0301 	bic.w	r3, r3, #1
 80074b4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074b6:	6863      	ldr	r3, [r4, #4]
 80074b8:	6822      	ldr	r2, [r4, #0]
 80074ba:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80074be:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074c0:	6822      	ldr	r2, [r4, #0]
 80074c2:	6893      	ldr	r3, [r2, #8]
 80074c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80074c8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074ca:	68e3      	ldr	r3, [r4, #12]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d038      	beq.n	8007542 <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074d0:	68a3      	ldr	r3, [r4, #8]
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 80074d8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074da:	68e3      	ldr	r3, [r4, #12]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d036      	beq.n	800754e <HAL_I2C_Init+0xb8>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80074e0:	6822      	ldr	r2, [r4, #0]
 80074e2:	6853      	ldr	r3, [r2, #4]
 80074e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074e8:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80074ea:	6822      	ldr	r2, [r4, #0]
 80074ec:	6853      	ldr	r3, [r2, #4]
 80074ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80074f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074f6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80074f8:	6822      	ldr	r2, [r4, #0]
 80074fa:	68d3      	ldr	r3, [r2, #12]
 80074fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007500:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	6962      	ldr	r2, [r4, #20]
 8007506:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007508:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800750a:	6822      	ldr	r2, [r4, #0]
 800750c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007510:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007512:	69e3      	ldr	r3, [r4, #28]
 8007514:	6a21      	ldr	r1, [r4, #32]
 8007516:	6822      	ldr	r2, [r4, #0]
 8007518:	430b      	orrs	r3, r1
 800751a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800751c:	6822      	ldr	r2, [r4, #0]
 800751e:	6813      	ldr	r3, [r2, #0]
 8007520:	f043 0301 	orr.w	r3, r3, #1
 8007524:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007526:	2000      	movs	r0, #0
 8007528:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800752a:	2320      	movs	r3, #32
 800752c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007530:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007532:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8007536:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8007538:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800753c:	f7fc fc02 	bl	8003d44 <HAL_I2C_MspInit>
 8007540:	e7b1      	b.n	80074a6 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007542:	68a3      	ldr	r3, [r4, #8]
 8007544:	6822      	ldr	r2, [r4, #0]
 8007546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800754a:	6093      	str	r3, [r2, #8]
 800754c:	e7c5      	b.n	80074da <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800754e:	6822      	ldr	r2, [r4, #0]
 8007550:	6853      	ldr	r3, [r2, #4]
 8007552:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007556:	6053      	str	r3, [r2, #4]
 8007558:	e7c7      	b.n	80074ea <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 800755a:	2001      	movs	r0, #1
}
 800755c:	4770      	bx	lr

0800755e <HAL_I2C_Mem_Write>:
{
 800755e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007562:	b083      	sub	sp, #12
 8007564:	460e      	mov	r6, r1
 8007566:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800756a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800756c:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8007570:	b2c9      	uxtb	r1, r1
 8007572:	2920      	cmp	r1, #32
 8007574:	f040 80bb 	bne.w	80076ee <HAL_I2C_Mem_Write+0x190>
 8007578:	4604      	mov	r4, r0
 800757a:	4690      	mov	r8, r2
 800757c:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800757e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007580:	b1cb      	cbz	r3, 80075b6 <HAL_I2C_Mem_Write+0x58>
 8007582:	f1ba 0f00 	cmp.w	sl, #0
 8007586:	d016      	beq.n	80075b6 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8007588:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800758c:	2b01      	cmp	r3, #1
 800758e:	f000 80b2 	beq.w	80076f6 <HAL_I2C_Mem_Write+0x198>
 8007592:	f04f 0b01 	mov.w	fp, #1
 8007596:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800759a:	f7fd f8a3 	bl	80046e4 <HAL_GetTick>
 800759e:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075a0:	9000      	str	r0, [sp, #0]
 80075a2:	2319      	movs	r3, #25
 80075a4:	465a      	mov	r2, fp
 80075a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80075aa:	4620      	mov	r0, r4
 80075ac:	f7ff fe95 	bl	80072da <I2C_WaitOnFlagUntilTimeout>
 80075b0:	b130      	cbz	r0, 80075c0 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 80075b2:	2001      	movs	r0, #1
 80075b4:	e09c      	b.n	80076f0 <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075ba:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80075bc:	2001      	movs	r0, #1
 80075be:	e097      	b.n	80076f0 <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075c0:	2321      	movs	r3, #33	@ 0x21
 80075c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075c6:	2340      	movs	r3, #64	@ 0x40
 80075c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075cc:	2300      	movs	r3, #0
 80075ce:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80075d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075d2:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80075d4:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80075d8:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075da:	9701      	str	r7, [sp, #4]
 80075dc:	9500      	str	r5, [sp, #0]
 80075de:	464b      	mov	r3, r9
 80075e0:	4642      	mov	r2, r8
 80075e2:	4631      	mov	r1, r6
 80075e4:	4620      	mov	r0, r4
 80075e6:	f7ff fead 	bl	8007344 <I2C_RequestMemoryWrite>
 80075ea:	b970      	cbnz	r0, 800760a <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075ec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	2bff      	cmp	r3, #255	@ 0xff
 80075f2:	d90f      	bls.n	8007614 <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075f4:	22ff      	movs	r2, #255	@ 0xff
 80075f6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075f8:	2300      	movs	r3, #0
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007600:	4631      	mov	r1, r6
 8007602:	4620      	mov	r0, r4
 8007604:	f7ff fd91 	bl	800712a <I2C_TransferConfig>
 8007608:	e021      	b.n	800764e <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 800760a:	2300      	movs	r3, #0
 800760c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007610:	4658      	mov	r0, fp
 8007612:	e06d      	b.n	80076f0 <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 8007614:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007616:	b292      	uxth	r2, r2
 8007618:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800761a:	2300      	movs	r3, #0
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	4631      	mov	r1, r6
 8007626:	4620      	mov	r0, r4
 8007628:	f7ff fd7f 	bl	800712a <I2C_TransferConfig>
 800762c:	e00f      	b.n	800764e <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 800762e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007630:	b292      	uxth	r2, r2
 8007632:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007634:	2300      	movs	r3, #0
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800763c:	b2d2      	uxtb	r2, r2
 800763e:	4631      	mov	r1, r6
 8007640:	4620      	mov	r0, r4
 8007642:	f7ff fd72 	bl	800712a <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007646:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d033      	beq.n	80076b6 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800764e:	463a      	mov	r2, r7
 8007650:	4629      	mov	r1, r5
 8007652:	4620      	mov	r0, r4
 8007654:	f7ff fe11 	bl	800727a <I2C_WaitOnTXISFlagUntilTimeout>
 8007658:	2800      	cmp	r0, #0
 800765a:	d14e      	bne.n	80076fa <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800765c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	7812      	ldrb	r2, [r2, #0]
 8007662:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8007664:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007666:	3301      	adds	r3, #1
 8007668:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800766a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b01      	subs	r3, #1
 8007670:	b29b      	uxth	r3, r3
 8007672:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007674:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8007676:	3b01      	subs	r3, #1
 8007678:	b29b      	uxth	r3, r3
 800767a:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800767c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800767e:	b292      	uxth	r2, r2
 8007680:	2a00      	cmp	r2, #0
 8007682:	d0e0      	beq.n	8007646 <HAL_I2C_Mem_Write+0xe8>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1de      	bne.n	8007646 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007688:	9700      	str	r7, [sp, #0]
 800768a:	462b      	mov	r3, r5
 800768c:	2200      	movs	r2, #0
 800768e:	2180      	movs	r1, #128	@ 0x80
 8007690:	4620      	mov	r0, r4
 8007692:	f7ff fe22 	bl	80072da <I2C_WaitOnFlagUntilTimeout>
 8007696:	bb90      	cbnz	r0, 80076fe <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007698:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800769a:	b29b      	uxth	r3, r3
 800769c:	2bff      	cmp	r3, #255	@ 0xff
 800769e:	d9c6      	bls.n	800762e <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076a0:	22ff      	movs	r2, #255	@ 0xff
 80076a2:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076a4:	2300      	movs	r3, #0
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80076ac:	4631      	mov	r1, r6
 80076ae:	4620      	mov	r0, r4
 80076b0:	f7ff fd3b 	bl	800712a <I2C_TransferConfig>
 80076b4:	e7c7      	b.n	8007646 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076b6:	463a      	mov	r2, r7
 80076b8:	4629      	mov	r1, r5
 80076ba:	4620      	mov	r0, r4
 80076bc:	f7ff febc 	bl	8007438 <I2C_WaitOnSTOPFlagUntilTimeout>
 80076c0:	b9f8      	cbnz	r0, 8007702 <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	2220      	movs	r2, #32
 80076c6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80076c8:	6821      	ldr	r1, [r4, #0]
 80076ca:	684b      	ldr	r3, [r1, #4]
 80076cc:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80076d0:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80076d4:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80076d8:	f023 0301 	bic.w	r3, r3, #1
 80076dc:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80076de:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076e2:	2300      	movs	r3, #0
 80076e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80076e8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 80076ec:	e000      	b.n	80076f0 <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 80076ee:	2002      	movs	r0, #2
}
 80076f0:	b003      	add	sp, #12
 80076f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80076f6:	2002      	movs	r0, #2
 80076f8:	e7fa      	b.n	80076f0 <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 80076fa:	2001      	movs	r0, #1
 80076fc:	e7f8      	b.n	80076f0 <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 80076fe:	2001      	movs	r0, #1
 8007700:	e7f6      	b.n	80076f0 <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 8007702:	2001      	movs	r0, #1
 8007704:	e7f4      	b.n	80076f0 <HAL_I2C_Mem_Write+0x192>
	...

08007708 <HAL_I2C_Mem_Read>:
{
 8007708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770c:	b083      	sub	sp, #12
 800770e:	460e      	mov	r6, r1
 8007710:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8007714:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007716:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800771a:	b2c9      	uxtb	r1, r1
 800771c:	2920      	cmp	r1, #32
 800771e:	f040 80bc 	bne.w	800789a <HAL_I2C_Mem_Read+0x192>
 8007722:	4604      	mov	r4, r0
 8007724:	4690      	mov	r8, r2
 8007726:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8007728:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800772a:	b1cb      	cbz	r3, 8007760 <HAL_I2C_Mem_Read+0x58>
 800772c:	f1ba 0f00 	cmp.w	sl, #0
 8007730:	d016      	beq.n	8007760 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 8007732:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007736:	2b01      	cmp	r3, #1
 8007738:	f000 80b3 	beq.w	80078a2 <HAL_I2C_Mem_Read+0x19a>
 800773c:	f04f 0b01 	mov.w	fp, #1
 8007740:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8007744:	f7fc ffce 	bl	80046e4 <HAL_GetTick>
 8007748:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800774a:	9000      	str	r0, [sp, #0]
 800774c:	2319      	movs	r3, #25
 800774e:	465a      	mov	r2, fp
 8007750:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007754:	4620      	mov	r0, r4
 8007756:	f7ff fdc0 	bl	80072da <I2C_WaitOnFlagUntilTimeout>
 800775a:	b130      	cbz	r0, 800776a <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 800775c:	2001      	movs	r0, #1
 800775e:	e09d      	b.n	800789c <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007760:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007764:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8007766:	2001      	movs	r0, #1
 8007768:	e098      	b.n	800789c <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800776a:	2322      	movs	r3, #34	@ 0x22
 800776c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007770:	2340      	movs	r3, #64	@ 0x40
 8007772:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007776:	2300      	movs	r3, #0
 8007778:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800777a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800777c:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800777e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007782:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007784:	9701      	str	r7, [sp, #4]
 8007786:	9500      	str	r5, [sp, #0]
 8007788:	464b      	mov	r3, r9
 800778a:	4642      	mov	r2, r8
 800778c:	4631      	mov	r1, r6
 800778e:	4620      	mov	r0, r4
 8007790:	f7ff fe16 	bl	80073c0 <I2C_RequestMemoryRead>
 8007794:	b970      	cbnz	r0, 80077b4 <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007796:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007798:	b29b      	uxth	r3, r3
 800779a:	2bff      	cmp	r3, #255	@ 0xff
 800779c:	d90f      	bls.n	80077be <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800779e:	22ff      	movs	r2, #255	@ 0xff
 80077a0:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80077a2:	4b44      	ldr	r3, [pc, #272]	@ (80078b4 <HAL_I2C_Mem_Read+0x1ac>)
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80077aa:	4631      	mov	r1, r6
 80077ac:	4620      	mov	r0, r4
 80077ae:	f7ff fcbc 	bl	800712a <I2C_TransferConfig>
 80077b2:	e021      	b.n	80077f8 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 80077b4:	2300      	movs	r3, #0
 80077b6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80077ba:	4658      	mov	r0, fp
 80077bc:	e06e      	b.n	800789c <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 80077be:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80077c0:	b292      	uxth	r2, r2
 80077c2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077c4:	4b3b      	ldr	r3, [pc, #236]	@ (80078b4 <HAL_I2C_Mem_Read+0x1ac>)
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	4631      	mov	r1, r6
 80077d0:	4620      	mov	r0, r4
 80077d2:	f7ff fcaa 	bl	800712a <I2C_TransferConfig>
 80077d6:	e00f      	b.n	80077f8 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 80077d8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80077da:	b292      	uxth	r2, r2
 80077dc:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077de:	2300      	movs	r3, #0
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	4631      	mov	r1, r6
 80077ea:	4620      	mov	r0, r4
 80077ec:	f7ff fc9d 	bl	800712a <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80077f0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d034      	beq.n	8007862 <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80077f8:	9700      	str	r7, [sp, #0]
 80077fa:	462b      	mov	r3, r5
 80077fc:	2200      	movs	r2, #0
 80077fe:	2104      	movs	r1, #4
 8007800:	4620      	mov	r0, r4
 8007802:	f7ff fd6a 	bl	80072da <I2C_WaitOnFlagUntilTimeout>
 8007806:	2800      	cmp	r0, #0
 8007808:	d14d      	bne.n	80078a6 <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800780e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007810:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007812:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007814:	3301      	adds	r3, #1
 8007816:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8007818:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800781a:	3a01      	subs	r2, #1
 800781c:	b292      	uxth	r2, r2
 800781e:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007820:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007822:	b29b      	uxth	r3, r3
 8007824:	3b01      	subs	r3, #1
 8007826:	b29b      	uxth	r3, r3
 8007828:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800782a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0de      	beq.n	80077f0 <HAL_I2C_Mem_Read+0xe8>
 8007832:	2a00      	cmp	r2, #0
 8007834:	d1dc      	bne.n	80077f0 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007836:	9700      	str	r7, [sp, #0]
 8007838:	462b      	mov	r3, r5
 800783a:	2180      	movs	r1, #128	@ 0x80
 800783c:	4620      	mov	r0, r4
 800783e:	f7ff fd4c 	bl	80072da <I2C_WaitOnFlagUntilTimeout>
 8007842:	bb90      	cbnz	r0, 80078aa <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007844:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007846:	b29b      	uxth	r3, r3
 8007848:	2bff      	cmp	r3, #255	@ 0xff
 800784a:	d9c5      	bls.n	80077d8 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800784c:	22ff      	movs	r2, #255	@ 0xff
 800784e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007850:	2300      	movs	r3, #0
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007858:	4631      	mov	r1, r6
 800785a:	4620      	mov	r0, r4
 800785c:	f7ff fc65 	bl	800712a <I2C_TransferConfig>
 8007860:	e7c6      	b.n	80077f0 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007862:	463a      	mov	r2, r7
 8007864:	4629      	mov	r1, r5
 8007866:	4620      	mov	r0, r4
 8007868:	f7ff fde6 	bl	8007438 <I2C_WaitOnSTOPFlagUntilTimeout>
 800786c:	b9f8      	cbnz	r0, 80078ae <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	2220      	movs	r2, #32
 8007872:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007874:	6821      	ldr	r1, [r4, #0]
 8007876:	684b      	ldr	r3, [r1, #4]
 8007878:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800787c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8007880:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8007884:	f023 0301 	bic.w	r3, r3, #1
 8007888:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800788a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800788e:	2300      	movs	r3, #0
 8007890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8007894:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8007898:	e000      	b.n	800789c <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 800789a:	2002      	movs	r0, #2
}
 800789c:	b003      	add	sp, #12
 800789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80078a2:	2002      	movs	r0, #2
 80078a4:	e7fa      	b.n	800789c <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 80078a6:	2001      	movs	r0, #1
 80078a8:	e7f8      	b.n	800789c <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 80078aa:	2001      	movs	r0, #1
 80078ac:	e7f6      	b.n	800789c <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 80078ae:	2001      	movs	r0, #1
 80078b0:	e7f4      	b.n	800789c <HAL_I2C_Mem_Read+0x194>
 80078b2:	bf00      	nop
 80078b4:	80002400 	.word	0x80002400

080078b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078b8:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078ba:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	2a20      	cmp	r2, #32
 80078c2:	d123      	bne.n	800790c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078c4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80078c8:	2a01      	cmp	r2, #1
 80078ca:	d021      	beq.n	8007910 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80078cc:	2201      	movs	r2, #1
 80078ce:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078d2:	2224      	movs	r2, #36	@ 0x24
 80078d4:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078d8:	6800      	ldr	r0, [r0, #0]
 80078da:	6802      	ldr	r2, [r0, #0]
 80078dc:	f022 0201 	bic.w	r2, r2, #1
 80078e0:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80078e2:	6818      	ldr	r0, [r3, #0]
 80078e4:	6802      	ldr	r2, [r0, #0]
 80078e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80078ea:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80078ec:	6818      	ldr	r0, [r3, #0]
 80078ee:	6802      	ldr	r2, [r0, #0]
 80078f0:	4311      	orrs	r1, r2
 80078f2:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078f4:	6819      	ldr	r1, [r3, #0]
 80078f6:	680a      	ldr	r2, [r1, #0]
 80078f8:	f042 0201 	orr.w	r2, r2, #1
 80078fc:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078fe:	2220      	movs	r2, #32
 8007900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007904:	2000      	movs	r0, #0
 8007906:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800790a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800790c:	2002      	movs	r0, #2
 800790e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8007910:	2002      	movs	r0, #2
  }
}
 8007912:	4770      	bx	lr

08007914 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007914:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007916:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800791a:	b2d2      	uxtb	r2, r2
 800791c:	2a20      	cmp	r2, #32
 800791e:	d121      	bne.n	8007964 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007920:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8007924:	2a01      	cmp	r2, #1
 8007926:	d01f      	beq.n	8007968 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8007928:	2201      	movs	r2, #1
 800792a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800792e:	2224      	movs	r2, #36	@ 0x24
 8007930:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007934:	6800      	ldr	r0, [r0, #0]
 8007936:	6802      	ldr	r2, [r0, #0]
 8007938:	f022 0201 	bic.w	r2, r2, #1
 800793c:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800793e:	6818      	ldr	r0, [r3, #0]
 8007940:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007942:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007946:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800794a:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800794c:	6819      	ldr	r1, [r3, #0]
 800794e:	680a      	ldr	r2, [r1, #0]
 8007950:	f042 0201 	orr.w	r2, r2, #1
 8007954:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007956:	2220      	movs	r2, #32
 8007958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800795c:	2000      	movs	r0, #0
 800795e:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8007962:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8007964:	2002      	movs	r0, #2
 8007966:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8007968:	2002      	movs	r0, #2
  }
}
 800796a:	4770      	bx	lr

0800796c <HAL_I2CEx_ConfigFastModePlus>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  FastModePlus New state of the Fast Mode Plus.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigFastModePlus(I2C_HandleTypeDef *hi2c, uint32_t FastModePlus)
{
 800796c:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_FASTMODEPLUS(FastModePlus));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800796e:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	2a20      	cmp	r2, #32
 8007976:	d126      	bne.n	80079c6 <HAL_I2CEx_ConfigFastModePlus+0x5a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007978:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800797c:	2a01      	cmp	r2, #1
 800797e:	d024      	beq.n	80079ca <HAL_I2CEx_ConfigFastModePlus+0x5e>
 8007980:	2201      	movs	r2, #1
 8007982:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007986:	2224      	movs	r2, #36	@ 0x24
 8007988:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800798c:	6800      	ldr	r0, [r0, #0]
 800798e:	6802      	ldr	r2, [r0, #0]
 8007990:	f022 0201 	bic.w	r2, r2, #1
 8007994:	6002      	str	r2, [r0, #0]

    if (FastModePlus == I2C_FASTMODEPLUS_ENABLE)
 8007996:	b981      	cbnz	r1, 80079ba <HAL_I2CEx_ConfigFastModePlus+0x4e>
    {
      /* Set I2Cx FMP bit */
      hi2c->Instance->CR1 |= (I2C_CR1_FMP);
 8007998:	6819      	ldr	r1, [r3, #0]
 800799a:	680a      	ldr	r2, [r1, #0]
 800799c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80079a0:	600a      	str	r2, [r1, #0]
    {
      /* Reset I2Cx FMP bit */
      hi2c->Instance->CR1 &= ~(I2C_CR1_FMP);
    }

    __HAL_I2C_ENABLE(hi2c);
 80079a2:	6819      	ldr	r1, [r3, #0]
 80079a4:	680a      	ldr	r2, [r1, #0]
 80079a6:	f042 0201 	orr.w	r2, r2, #1
 80079aa:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079ac:	2220      	movs	r2, #32
 80079ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079b2:	2000      	movs	r0, #0
 80079b4:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 80079b8:	4770      	bx	lr
      hi2c->Instance->CR1 &= ~(I2C_CR1_FMP);
 80079ba:	6819      	ldr	r1, [r3, #0]
 80079bc:	680a      	ldr	r2, [r1, #0]
 80079be:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80079c2:	600a      	str	r2, [r1, #0]
 80079c4:	e7ed      	b.n	80079a2 <HAL_I2CEx_ConfigFastModePlus+0x36>
  }
  else
  {
    return HAL_BUSY;
 80079c6:	2002      	movs	r0, #2
 80079c8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80079ca:	2002      	movs	r0, #2
  }
}
 80079cc:	4770      	bx	lr
	...

080079d0 <HAL_ICACHE_ConfigAssociativityMode>:

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80079d0:	4b07      	ldr	r3, [pc, #28]	@ (80079f0 <HAL_ICACHE_ConfigAssociativityMode+0x20>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f013 0f01 	tst.w	r3, #1
 80079d8:	d107      	bne.n	80079ea <HAL_ICACHE_ConfigAssociativityMode+0x1a>
  {
    status = HAL_ERROR;
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80079da:	4a05      	ldr	r2, [pc, #20]	@ (80079f0 <HAL_ICACHE_ConfigAssociativityMode+0x20>)
 80079dc:	6813      	ldr	r3, [r2, #0]
 80079de:	f023 0304 	bic.w	r3, r3, #4
 80079e2:	4303      	orrs	r3, r0
 80079e4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079e6:	2000      	movs	r0, #0
 80079e8:	4770      	bx	lr
    status = HAL_ERROR;
 80079ea:	2001      	movs	r0, #1
  }

  return status;
}
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	40030400 	.word	0x40030400

080079f4 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80079f4:	4a03      	ldr	r2, [pc, #12]	@ (8007a04 <HAL_ICACHE_Enable+0x10>)
 80079f6:	6813      	ldr	r3, [r2, #0]
 80079f8:	f043 0301 	orr.w	r3, r3, #1
 80079fc:	6013      	str	r3, [r2, #0]

  return HAL_OK;
}
 80079fe:	2000      	movs	r0, #0
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	40030400 	.word	0x40030400

08007a08 <OSPI_DMACplt>:
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMACplt(DMA_HandleTypeDef *hdma)
{
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hdma->Parent);
 8007a08:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  hospi->XferCount = 0;
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Disable the DMA transfer on the OctoSPI side */
  CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8007a0e:	6819      	ldr	r1, [r3, #0]
 8007a10:	680a      	ldr	r2, [r1, #0]
 8007a12:	f022 0204 	bic.w	r2, r2, #4
 8007a16:	600a      	str	r2, [r1, #0]

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8007a18:	6801      	ldr	r1, [r0, #0]
 8007a1a:	694a      	ldr	r2, [r1, #20]
 8007a1c:	f042 0206 	orr.w	r2, r2, #6
 8007a20:	614a      	str	r2, [r1, #20]

  /* Enable the OSPI transfer complete Interrupt */
  __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	6813      	ldr	r3, [r2, #0]
 8007a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a2a:	6013      	str	r3, [r2, #0]
}
 8007a2c:	4770      	bx	lr
	...

08007a30 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8007a30:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8007a32:	6802      	ldr	r2, [r0, #0]
 8007a34:	6813      	ldr	r3, [r2, #0]
 8007a36:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8007a3a:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8007a3c:	6883      	ldr	r3, [r0, #8]
 8007a3e:	b933      	cbnz	r3, 8007a4e <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_MSEL, cmd->FlashId);
 8007a40:	6802      	ldr	r2, [r0, #0]
 8007a42:	6813      	ldr	r3, [r2, #0]
 8007a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a48:	684c      	ldr	r4, [r1, #4]
 8007a4a:	4323      	orrs	r3, r4
 8007a4c:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8007a4e:	680b      	ldr	r3, [r1, #0]
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d04d      	beq.n	8007af0 <OSPI_ConfigCmd+0xc0>
    ccr_reg = &(hospi->Instance->WCCR);
    tcr_reg = &(hospi->Instance->WTCR);
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8007a54:	2b03      	cmp	r3, #3
 8007a56:	d055      	beq.n	8007b04 <OSPI_ConfigCmd+0xd4>
    ir_reg  = &(hospi->Instance->WPIR);
    abr_reg = &(hospi->Instance->WPABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8007a58:	6803      	ldr	r3, [r0, #0]
 8007a5a:	f503 7280 	add.w	r2, r3, #256	@ 0x100
    tcr_reg = &(hospi->Instance->TCR);
 8007a5e:	f503 7e84 	add.w	lr, r3, #264	@ 0x108
    ir_reg  = &(hospi->Instance->IR);
 8007a62:	f503 7c88 	add.w	ip, r3, #272	@ 0x110
    abr_reg = &(hospi->Instance->ABR);
 8007a66:	f503 7390 	add.w	r3, r3, #288	@ 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8007a6a:	6ccc      	ldr	r4, [r1, #76]	@ 0x4c
 8007a6c:	6c8d      	ldr	r5, [r1, #72]	@ 0x48
 8007a6e:	432c      	orrs	r4, r5
 8007a70:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8007a72:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8007a74:	b15c      	cbz	r4, 8007a8e <OSPI_ConfigCmd+0x5e>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8007a76:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8007a78:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8007a7a:	6813      	ldr	r3, [r2, #0]
 8007a7c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8007a80:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8007a82:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8007a84:	432c      	orrs	r4, r5
 8007a86:	6b0d      	ldr	r5, [r1, #48]	@ 0x30
 8007a88:	432c      	orrs	r4, r5
 8007a8a:	4323      	orrs	r3, r4
 8007a8c:	6013      	str	r3, [r2, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8007a8e:	f8de 3000 	ldr.w	r3, [lr]
 8007a92:	f023 031f 	bic.w	r3, r3, #31
 8007a96:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 8007a98:	4323      	orrs	r3, r4
 8007a9a:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007a9e:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8007aa0:	b12b      	cbz	r3, 8007aae <OSPI_ConfigCmd+0x7e>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8007aa2:	680b      	ldr	r3, [r1, #0]
 8007aa4:	b91b      	cbnz	r3, 8007aae <OSPI_ConfigCmd+0x7e>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8007aa6:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8007aa8:	6804      	ldr	r4, [r0, #0]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	6423      	str	r3, [r4, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8007aae:	68cb      	ldr	r3, [r1, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d077      	beq.n	8007ba4 <OSPI_ConfigCmd+0x174>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8007ab4:	69cc      	ldr	r4, [r1, #28]
 8007ab6:	2c00      	cmp	r4, #0
 8007ab8:	d04a      	beq.n	8007b50 <OSPI_ConfigCmd+0x120>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007aba:	6b8d      	ldr	r5, [r1, #56]	@ 0x38
 8007abc:	b365      	cbz	r5, 8007b18 <OSPI_ConfigCmd+0xe8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8007abe:	6817      	ldr	r7, [r2, #0]
 8007ac0:	4e4b      	ldr	r6, [pc, #300]	@ (8007bf0 <OSPI_ConfigCmd+0x1c0>)
 8007ac2:	403e      	ands	r6, r7
 8007ac4:	694f      	ldr	r7, [r1, #20]
 8007ac6:	433b      	orrs	r3, r7
 8007ac8:	690f      	ldr	r7, [r1, #16]
 8007aca:	433b      	orrs	r3, r7
 8007acc:	4323      	orrs	r3, r4
 8007ace:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8007ad0:	4323      	orrs	r3, r4
 8007ad2:	6a0c      	ldr	r4, [r1, #32]
 8007ad4:	4323      	orrs	r3, r4
 8007ad6:	431d      	orrs	r5, r3
 8007ad8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ada:	431d      	orrs	r5, r3
 8007adc:	432e      	orrs	r6, r5
 8007ade:	6016      	str	r6, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8007ae0:	688b      	ldr	r3, [r1, #8]
 8007ae2:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8007ae6:	6803      	ldr	r3, [r0, #0]
 8007ae8:	698a      	ldr	r2, [r1, #24]
 8007aea:	649a      	str	r2, [r3, #72]	@ 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8007aec:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 8007aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 8007af0:	6803      	ldr	r3, [r0, #0]
 8007af2:	f503 72c0 	add.w	r2, r3, #384	@ 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 8007af6:	f503 7ec4 	add.w	lr, r3, #392	@ 0x188
    ir_reg  = &(hospi->Instance->WIR);
 8007afa:	f503 7cc8 	add.w	ip, r3, #400	@ 0x190
    abr_reg = &(hospi->Instance->WABR);
 8007afe:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8007b02:	e7b2      	b.n	8007a6a <OSPI_ConfigCmd+0x3a>
    ccr_reg = &(hospi->Instance->WPCCR);
 8007b04:	6803      	ldr	r3, [r0, #0]
 8007b06:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 8007b0a:	f503 7ea4 	add.w	lr, r3, #328	@ 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 8007b0e:	f503 7ca8 	add.w	ip, r3, #336	@ 0x150
    abr_reg = &(hospi->Instance->WPABR);
 8007b12:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007b16:	e7a8      	b.n	8007a6a <OSPI_ConfigCmd+0x3a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8007b18:	6815      	ldr	r5, [r2, #0]
 8007b1a:	f425 557c 	bic.w	r5, r5, #16128	@ 0x3f00
 8007b1e:	f025 053f 	bic.w	r5, r5, #63	@ 0x3f
 8007b22:	694e      	ldr	r6, [r1, #20]
 8007b24:	431e      	orrs	r6, r3
 8007b26:	690b      	ldr	r3, [r1, #16]
 8007b28:	431e      	orrs	r6, r3
 8007b2a:	4334      	orrs	r4, r6
 8007b2c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8007b2e:	431c      	orrs	r4, r3
 8007b30:	6a0b      	ldr	r3, [r1, #32]
 8007b32:	431c      	orrs	r4, r3
 8007b34:	4325      	orrs	r5, r4
 8007b36:	6015      	str	r5, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8007b38:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007b3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b3e:	d1cf      	bne.n	8007ae0 <OSPI_ConfigCmd+0xb0>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8007b40:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8007b42:	2b08      	cmp	r3, #8
 8007b44:	d1cc      	bne.n	8007ae0 <OSPI_ConfigCmd+0xb0>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8007b46:	6813      	ldr	r3, [r2, #0]
 8007b48:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b4c:	6013      	str	r3, [r2, #0]
 8007b4e:	e7c7      	b.n	8007ae0 <OSPI_ConfigCmd+0xb0>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007b50:	6b8c      	ldr	r4, [r1, #56]	@ 0x38
 8007b52:	b194      	cbz	r4, 8007b7a <OSPI_ConfigCmd+0x14a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8007b54:	6810      	ldr	r0, [r2, #0]
 8007b56:	f020 6070 	bic.w	r0, r0, #251658240	@ 0xf000000
 8007b5a:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8007b5e:	694d      	ldr	r5, [r1, #20]
 8007b60:	431d      	orrs	r5, r3
 8007b62:	690b      	ldr	r3, [r1, #16]
 8007b64:	431d      	orrs	r5, r3
 8007b66:	432c      	orrs	r4, r5
 8007b68:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b6a:	431c      	orrs	r4, r3
 8007b6c:	4320      	orrs	r0, r4
 8007b6e:	6010      	str	r0, [r2, #0]
      *ir_reg = cmd->Instruction;
 8007b70:	688b      	ldr	r3, [r1, #8]
 8007b72:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 8007b76:	2000      	movs	r0, #0
 8007b78:	e7b9      	b.n	8007aee <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8007b7a:	6814      	ldr	r4, [r2, #0]
 8007b7c:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 8007b80:	694d      	ldr	r5, [r1, #20]
 8007b82:	432b      	orrs	r3, r5
 8007b84:	690d      	ldr	r5, [r1, #16]
 8007b86:	432b      	orrs	r3, r5
 8007b88:	4323      	orrs	r3, r4
 8007b8a:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8007b8c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007b8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b92:	d1ed      	bne.n	8007b70 <OSPI_ConfigCmd+0x140>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8007b94:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8007b96:	2b08      	cmp	r3, #8
 8007b98:	d1ea      	bne.n	8007b70 <OSPI_ConfigCmd+0x140>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8007b9a:	6813      	ldr	r3, [r2, #0]
 8007b9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	e7e5      	b.n	8007b70 <OSPI_ConfigCmd+0x140>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8007ba4:	69cb      	ldr	r3, [r1, #28]
 8007ba6:	b1f3      	cbz	r3, 8007be6 <OSPI_ConfigCmd+0x1b6>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007ba8:	6b8c      	ldr	r4, [r1, #56]	@ 0x38
 8007baa:	b194      	cbz	r4, 8007bd2 <OSPI_ConfigCmd+0x1a2>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8007bac:	6815      	ldr	r5, [r2, #0]
 8007bae:	f025 6570 	bic.w	r5, r5, #251658240	@ 0xf000000
 8007bb2:	f425 557c 	bic.w	r5, r5, #16128	@ 0x3f00
 8007bb6:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 8007bb8:	4333      	orrs	r3, r6
 8007bba:	6a0e      	ldr	r6, [r1, #32]
 8007bbc:	4333      	orrs	r3, r6
 8007bbe:	431c      	orrs	r4, r3
 8007bc0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bc2:	431c      	orrs	r4, r3
 8007bc4:	4325      	orrs	r5, r4
 8007bc6:	6015      	str	r5, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 8007bc8:	6803      	ldr	r3, [r0, #0]
 8007bca:	698a      	ldr	r2, [r1, #24]
 8007bcc:	649a      	str	r2, [r3, #72]	@ 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8007bce:	2000      	movs	r0, #0
 8007bd0:	e78d      	b.n	8007aee <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8007bd2:	6814      	ldr	r4, [r2, #0]
 8007bd4:	f424 547c 	bic.w	r4, r4, #16128	@ 0x3f00
 8007bd8:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8007bda:	432b      	orrs	r3, r5
 8007bdc:	6a0d      	ldr	r5, [r1, #32]
 8007bde:	432b      	orrs	r3, r5
 8007be0:	4323      	orrs	r3, r4
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	e7f0      	b.n	8007bc8 <OSPI_ConfigCmd+0x198>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007be6:	2308      	movs	r3, #8
 8007be8:	6543      	str	r3, [r0, #84]	@ 0x54
      status = HAL_ERROR;
 8007bea:	2001      	movs	r0, #1
 8007bec:	e77f      	b.n	8007aee <OSPI_ConfigCmd+0xbe>
 8007bee:	bf00      	nop
 8007bf0:	f0ffc0c0 	.word	0xf0ffc0c0

08007bf4 <OSPIM_GetConfig>:
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t reg;
  uint32_t value = 0U;
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8007bf4:	1e43      	subs	r3, r0, #1
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d901      	bls.n	8007c00 <OSPIM_GetConfig+0xc>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8007bfc:	2001      	movs	r0, #1
 8007bfe:	4770      	bx	lr
  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8007c00:	2900      	cmp	r1, #0
 8007c02:	d06a      	beq.n	8007cda <OSPIM_GetConfig+0xe6>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	600b      	str	r3, [r1, #0]
    cfg->DQSPort    = 0U;
 8007c08:	604b      	str	r3, [r1, #4]
    cfg->NCSPort    = 0U;
 8007c0a:	608b      	str	r3, [r1, #8]
    cfg->IOLowPort  = 0U;
 8007c0c:	60cb      	str	r3, [r1, #12]
    cfg->IOHighPort = 0U;
 8007c0e:	610b      	str	r3, [r1, #16]

    if (instance_nb == 2U)
 8007c10:	2802      	cmp	r0, #2
 8007c12:	d005      	beq.n	8007c20 <OSPIM_GetConfig+0x2c>
  uint32_t value = 0U;
 8007c14:	2000      	movs	r0, #0
        value = OCTOSPIM_PCR_NCSSRC;
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007c16:	2200      	movs	r2, #0
 8007c18:	2a01      	cmp	r2, #1
 8007c1a:	d860      	bhi.n	8007cde <OSPIM_GetConfig+0xea>
{
 8007c1c:	b410      	push	{r4}
 8007c1e:	e015      	b.n	8007c4c <OSPIM_GetConfig+0x58>
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007c20:	4b30      	ldr	r3, [pc, #192]	@ (8007ce4 <OSPIM_GetConfig+0xf0>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f013 0f01 	tst.w	r3, #1
 8007c28:	d101      	bne.n	8007c2e <OSPIM_GetConfig+0x3a>
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007c2a:	482f      	ldr	r0, [pc, #188]	@ (8007ce8 <OSPIM_GetConfig+0xf4>)
 8007c2c:	e7f3      	b.n	8007c16 <OSPIM_GetConfig+0x22>
        value = OCTOSPIM_PCR_NCSSRC;
 8007c2e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007c32:	e7f0      	b.n	8007c16 <OSPIM_GetConfig+0x22>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007c34:	1c54      	adds	r4, r2, #1
 8007c36:	f044 7480 	orr.w	r4, r4, #16777216	@ 0x1000000
 8007c3a:	60cc      	str	r4, [r1, #12]
 8007c3c:	e039      	b.n	8007cb2 <OSPIM_GetConfig+0xbe>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007c3e:	1c53      	adds	r3, r2, #1
 8007c40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c44:	610b      	str	r3, [r1, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007c46:	3201      	adds	r2, #1
 8007c48:	2a01      	cmp	r2, #1
 8007c4a:	d842      	bhi.n	8007cd2 <OSPIM_GetConfig+0xde>
      reg = OCTOSPIM->PCR[index];
 8007c4c:	0093      	lsls	r3, r2, #2
 8007c4e:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8007c52:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 8007c56:	685b      	ldr	r3, [r3, #4]
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007c58:	f013 0f01 	tst.w	r3, #1
 8007c5c:	d006      	beq.n	8007c6c <OSPIM_GetConfig+0x78>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007c5e:	ea80 0c03 	eor.w	ip, r0, r3
 8007c62:	f01c 0f02 	tst.w	ip, #2
 8007c66:	d101      	bne.n	8007c6c <OSPIM_GetConfig+0x78>
          cfg->ClkPort = index + 1U;
 8007c68:	1c54      	adds	r4, r2, #1
 8007c6a:	600c      	str	r4, [r1, #0]
      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007c6c:	f013 0f10 	tst.w	r3, #16
 8007c70:	d006      	beq.n	8007c80 <OSPIM_GetConfig+0x8c>
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007c72:	ea80 0c03 	eor.w	ip, r0, r3
 8007c76:	f01c 0f20 	tst.w	ip, #32
 8007c7a:	d101      	bne.n	8007c80 <OSPIM_GetConfig+0x8c>
          cfg->DQSPort = index + 1U;
 8007c7c:	1c54      	adds	r4, r2, #1
 8007c7e:	604c      	str	r4, [r1, #4]
      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007c80:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007c84:	d006      	beq.n	8007c94 <OSPIM_GetConfig+0xa0>
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007c86:	ea80 0c03 	eor.w	ip, r0, r3
 8007c8a:	f41c 7f00 	tst.w	ip, #512	@ 0x200
 8007c8e:	d101      	bne.n	8007c94 <OSPIM_GetConfig+0xa0>
          cfg->NCSPort = index + 1U;
 8007c90:	1c54      	adds	r4, r2, #1
 8007c92:	608c      	str	r4, [r1, #8]
      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007c94:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8007c98:	d00b      	beq.n	8007cb2 <OSPIM_GetConfig+0xbe>
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007c9a:	ea80 0c03 	eor.w	ip, r0, r3
 8007c9e:	f41c 2f80 	tst.w	ip, #262144	@ 0x40000
 8007ca2:	d106      	bne.n	8007cb2 <OSPIM_GetConfig+0xbe>
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007ca4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007ca8:	d1c4      	bne.n	8007c34 <OSPIM_GetConfig+0x40>
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007caa:	1c54      	adds	r4, r2, #1
 8007cac:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
 8007cb0:	60cc      	str	r4, [r1, #12]
      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007cb2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8007cb6:	d0c6      	beq.n	8007c46 <OSPIM_GetConfig+0x52>
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007cb8:	ea80 0c03 	eor.w	ip, r0, r3
 8007cbc:	f01c 6f80 	tst.w	ip, #67108864	@ 0x4000000
 8007cc0:	d1c1      	bne.n	8007c46 <OSPIM_GetConfig+0x52>
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007cc2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8007cc6:	d1ba      	bne.n	8007c3e <OSPIM_GetConfig+0x4a>
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007cc8:	1c53      	adds	r3, r2, #1
 8007cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cce:	610b      	str	r3, [r1, #16]
 8007cd0:	e7b9      	b.n	8007c46 <OSPIM_GetConfig+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8007cd2:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 8007cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cd8:	4770      	bx	lr
    status = HAL_ERROR;
 8007cda:	2001      	movs	r0, #1
 8007cdc:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8007cde:	2000      	movs	r0, #0
}
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	420c4000 	.word	0x420c4000
 8007ce8:	04040222 	.word	0x04040222

08007cec <HAL_OSPI_DeInit>:
  if (hospi == NULL)
 8007cec:	b180      	cbz	r0, 8007d10 <HAL_OSPI_DeInit+0x24>
{
 8007cee:	b510      	push	{r4, lr}
 8007cf0:	4604      	mov	r4, r0
    __HAL_OSPI_DISABLE(hospi);
 8007cf2:	6802      	ldr	r2, [r0, #0]
 8007cf4:	6813      	ldr	r3, [r2, #0]
 8007cf6:	f023 0301 	bic.w	r3, r3, #1
 8007cfa:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007cfc:	6802      	ldr	r2, [r0, #0]
 8007cfe:	6893      	ldr	r3, [r2, #8]
 8007d00:	f023 0302 	bic.w	r3, r3, #2
 8007d04:	6093      	str	r3, [r2, #8]
    HAL_OSPI_MspDeInit(hospi);
 8007d06:	f7fb fe21 	bl	800394c <HAL_OSPI_MspDeInit>
    hospi->State = HAL_OSPI_STATE_RESET;
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	6520      	str	r0, [r4, #80]	@ 0x50
}
 8007d0e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8007d10:	2001      	movs	r0, #1
}
 8007d12:	4770      	bx	lr

08007d14 <HAL_OSPI_Transmit_DMA>:
{
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	4604      	mov	r4, r0
  uint32_t data_size = hospi->Instance->DLR + 1U;
 8007d18:	6802      	ldr	r2, [r0, #0]
 8007d1a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
  if (pData == NULL)
 8007d1c:	b141      	cbz	r1, 8007d30 <HAL_OSPI_Transmit_DMA+0x1c>
 8007d1e:	3301      	adds	r3, #1
 8007d20:	460d      	mov	r5, r1
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007d22:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 8007d24:	2804      	cmp	r0, #4
 8007d26:	d007      	beq.n	8007d38 <HAL_OSPI_Transmit_DMA+0x24>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007d28:	2310      	movs	r3, #16
 8007d2a:	6563      	str	r3, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 8007d2c:	2001      	movs	r0, #1
}
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007d30:	2308      	movs	r3, #8
 8007d32:	6543      	str	r3, [r0, #84]	@ 0x54
    status = HAL_ERROR;
 8007d34:	2001      	movs	r0, #1
 8007d36:	e7fa      	b.n	8007d2e <HAL_OSPI_Transmit_DMA+0x1a>
      if ((hospi->hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007d38:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8007d3a:	6d08      	ldr	r0, [r1, #80]	@ 0x50
 8007d3c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8007d40:	d00d      	beq.n	8007d5e <HAL_OSPI_Transmit_DMA+0x4a>
        p_queue = hospi->hdma->LinkedListQueue;
 8007d42:	6f4e      	ldr	r6, [r1, #116]	@ 0x74
        if ((p_queue != NULL) && (p_queue->Head != NULL))
 8007d44:	b136      	cbz	r6, 8007d54 <HAL_OSPI_Transmit_DMA+0x40>
 8007d46:	6831      	ldr	r1, [r6, #0]
 8007d48:	b121      	cbz	r1, 8007d54 <HAL_OSPI_Transmit_DMA+0x40>
          data_width = p_queue->Head->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] & DMA_CTR1_DDW_LOG2;
 8007d4a:	6809      	ldr	r1, [r1, #0]
 8007d4c:	f401 3140 	and.w	r1, r1, #196608	@ 0x30000
  HAL_StatusTypeDef status = HAL_OK;
 8007d50:	2000      	movs	r0, #0
          data_width = p_queue->Head->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] & DMA_CTR1_DDW_LOG2;
 8007d52:	e007      	b.n	8007d64 <HAL_OSPI_Transmit_DMA+0x50>
          hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8007d54:	2104      	movs	r1, #4
 8007d56:	6561      	str	r1, [r4, #84]	@ 0x54
  uint32_t data_width = DMA_DEST_DATAWIDTH_BYTE;
 8007d58:	2100      	movs	r1, #0
          status = HAL_ERROR;
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	e002      	b.n	8007d64 <HAL_OSPI_Transmit_DMA+0x50>
        data_width = hospi->hdma->Init.DestDataWidth;
 8007d5e:	69c9      	ldr	r1, [r1, #28]
  DMA_QListTypeDef *p_queue = {NULL};
 8007d60:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007d62:	4630      	mov	r0, r6
      if (data_width == DMA_DEST_DATAWIDTH_BYTE)
 8007d64:	2900      	cmp	r1, #0
 8007d66:	d146      	bne.n	8007df6 <HAL_OSPI_Transmit_DMA+0xe2>
        hospi->XferCount = data_size;
 8007d68:	64a3      	str	r3, [r4, #72]	@ 0x48
      if (status == HAL_OK)
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d1df      	bne.n	8007d2e <HAL_OSPI_Transmit_DMA+0x1a>
        hospi->XferSize = hospi->XferCount;
 8007d6e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8007d70:	6463      	str	r3, [r4, #68]	@ 0x44
        hospi->pBuffPtr = pData;
 8007d72:	6425      	str	r5, [r4, #64]	@ 0x40
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007d74:	6813      	ldr	r3, [r2, #0]
 8007d76:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8007d7a:	6013      	str	r3, [r2, #0]
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TE | HAL_OSPI_FLAG_TC);
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	2203      	movs	r2, #3
 8007d80:	625a      	str	r2, [r3, #36]	@ 0x24
        hospi->State = HAL_OSPI_STATE_BUSY_TX;
 8007d82:	2318      	movs	r3, #24
 8007d84:	6523      	str	r3, [r4, #80]	@ 0x50
        hospi->hdma->XferCpltCallback = OSPI_DMACplt;
 8007d86:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007d88:	4a3a      	ldr	r2, [pc, #232]	@ (8007e74 <HAL_OSPI_Transmit_DMA+0x160>)
 8007d8a:	661a      	str	r2, [r3, #96]	@ 0x60
        hospi->hdma->XferHalfCpltCallback = OSPI_DMAHalfCplt;
 8007d8c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007d8e:	4a3a      	ldr	r2, [pc, #232]	@ (8007e78 <HAL_OSPI_Transmit_DMA+0x164>)
 8007d90:	665a      	str	r2, [r3, #100]	@ 0x64
        hospi->hdma->XferErrorCallback = OSPI_DMAError;
 8007d92:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007d94:	4a39      	ldr	r2, [pc, #228]	@ (8007e7c <HAL_OSPI_Transmit_DMA+0x168>)
 8007d96:	669a      	str	r2, [r3, #104]	@ 0x68
        hospi->hdma->XferAbortCallback = NULL;
 8007d98:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	66da      	str	r2, [r3, #108]	@ 0x6c
        if ((hospi->hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007d9e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007da0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007da2:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8007da6:	d050      	beq.n	8007e4a <HAL_OSPI_Transmit_DMA+0x136>
          if (hospi->hdma->LinkedListQueue != NULL)
 8007da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d043      	beq.n	8007e36 <HAL_OSPI_Transmit_DMA+0x122>
            MODIFY_REG(p_queue->Head->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET], \
 8007dae:	6832      	ldr	r2, [r6, #0]
 8007db0:	6813      	ldr	r3, [r2, #0]
 8007db2:	f023 1308 	bic.w	r3, r3, #524296	@ 0x80008
 8007db6:	f043 0308 	orr.w	r3, r3, #8
 8007dba:	6013      	str	r3, [r2, #0]
            MODIFY_REG(p_queue->Head->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET], \
 8007dbc:	6832      	ldr	r2, [r6, #0]
 8007dbe:	6853      	ldr	r3, [r2, #4]
 8007dc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007dc4:	6053      	str	r3, [r2, #4]
            p_queue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hospi->XferSize;
 8007dc6:	6833      	ldr	r3, [r6, #0]
 8007dc8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007dca:	609a      	str	r2, [r3, #8]
            p_queue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8007dcc:	6833      	ldr	r3, [r6, #0]
 8007dce:	60dd      	str	r5, [r3, #12]
            p_queue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hospi->Instance->DR;
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	3350      	adds	r3, #80	@ 0x50
 8007dd4:	6832      	ldr	r2, [r6, #0]
 8007dd6:	6113      	str	r3, [r2, #16]
            status = HAL_DMAEx_List_Start_IT(hospi->hdma);
 8007dd8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8007dda:	f7fe feca 	bl	8006b72 <HAL_DMAEx_List_Start_IT>
        if (status == HAL_OK)
 8007dde:	bb70      	cbnz	r0, 8007e3e <HAL_OSPI_Transmit_DMA+0x12a>
          __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TE);
 8007de0:	6822      	ldr	r2, [r4, #0]
 8007de2:	6813      	ldr	r3, [r2, #0]
 8007de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007de8:	6013      	str	r3, [r2, #0]
          SET_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8007dea:	6822      	ldr	r2, [r4, #0]
 8007dec:	6813      	ldr	r3, [r2, #0]
 8007dee:	f043 0304 	orr.w	r3, r3, #4
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	e79b      	b.n	8007d2e <HAL_OSPI_Transmit_DMA+0x1a>
      else if (data_width == DMA_DEST_DATAWIDTH_HALFWORD)
 8007df6:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8007dfa:	d00d      	beq.n	8007e18 <HAL_OSPI_Transmit_DMA+0x104>
      else if (data_width == DMA_DEST_DATAWIDTH_WORD)
 8007dfc:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8007e00:	d1b3      	bne.n	8007d6a <HAL_OSPI_Transmit_DMA+0x56>
        if (((data_size % 4U) != 0U) || ((hospi->Init.FifoThreshold % 4U) != 0U))
 8007e02:	f013 0f03 	tst.w	r3, #3
 8007e06:	d103      	bne.n	8007e10 <HAL_OSPI_Transmit_DMA+0xfc>
 8007e08:	6861      	ldr	r1, [r4, #4]
 8007e0a:	f011 0f03 	tst.w	r1, #3
 8007e0e:	d010      	beq.n	8007e32 <HAL_OSPI_Transmit_DMA+0x11e>
          hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007e10:	2308      	movs	r3, #8
 8007e12:	6563      	str	r3, [r4, #84]	@ 0x54
          status = HAL_ERROR;
 8007e14:	2001      	movs	r0, #1
 8007e16:	e78a      	b.n	8007d2e <HAL_OSPI_Transmit_DMA+0x1a>
        if (((data_size % 2U) != 0U) || ((hospi->Init.FifoThreshold % 2U) != 0U))
 8007e18:	f013 0f01 	tst.w	r3, #1
 8007e1c:	d103      	bne.n	8007e26 <HAL_OSPI_Transmit_DMA+0x112>
 8007e1e:	6861      	ldr	r1, [r4, #4]
 8007e20:	f011 0f01 	tst.w	r1, #1
 8007e24:	d003      	beq.n	8007e2e <HAL_OSPI_Transmit_DMA+0x11a>
          hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007e26:	2308      	movs	r3, #8
 8007e28:	6563      	str	r3, [r4, #84]	@ 0x54
          status = HAL_ERROR;
 8007e2a:	2001      	movs	r0, #1
 8007e2c:	e77f      	b.n	8007d2e <HAL_OSPI_Transmit_DMA+0x1a>
          hospi->XferCount = data_size;
 8007e2e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007e30:	e79b      	b.n	8007d6a <HAL_OSPI_Transmit_DMA+0x56>
          hospi->XferCount = data_size;
 8007e32:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007e34:	e799      	b.n	8007d6a <HAL_OSPI_Transmit_DMA+0x56>
            hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8007e36:	2304      	movs	r3, #4
 8007e38:	6563      	str	r3, [r4, #84]	@ 0x54
            hospi->State = HAL_OSPI_STATE_READY;
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	6523      	str	r3, [r4, #80]	@ 0x50
          hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8007e3e:	2304      	movs	r3, #4
 8007e40:	6563      	str	r3, [r4, #84]	@ 0x54
          hospi->State = HAL_OSPI_STATE_READY;
 8007e42:	2302      	movs	r3, #2
 8007e44:	6523      	str	r3, [r4, #80]	@ 0x50
          status = HAL_ERROR;
 8007e46:	2001      	movs	r0, #1
 8007e48:	e771      	b.n	8007d2e <HAL_OSPI_Transmit_DMA+0x1a>
          MODIFY_REG(hospi->hdma->Instance->CTR1, (DMA_CTR1_SINC | DMA_CTR1_DINC), \
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007e4e:	f023 1308 	bic.w	r3, r3, #524296	@ 0x80008
 8007e52:	f043 0308 	orr.w	r3, r3, #8
 8007e56:	6413      	str	r3, [r2, #64]	@ 0x40
          MODIFY_REG(hospi->hdma->Instance->CTR2, DMA_CTR2_DREQ, DMA_MEMORY_TO_PERIPH);
 8007e58:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8007e5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007e62:	6453      	str	r3, [r2, #68]	@ 0x44
          status = HAL_DMA_Start_IT(hospi->hdma, (uint32_t)pData, (uint32_t)&hospi->Instance->DR, hospi->XferSize);
 8007e64:	6822      	ldr	r2, [r4, #0]
 8007e66:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007e68:	3250      	adds	r2, #80	@ 0x50
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8007e6e:	f7fe fa31 	bl	80062d4 <HAL_DMA_Start_IT>
 8007e72:	e7b4      	b.n	8007dde <HAL_OSPI_Transmit_DMA+0xca>
 8007e74:	08007a09 	.word	0x08007a09
 8007e78:	08008083 	.word	0x08008083
 8007e7c:	080082c9 	.word	0x080082c9

08007e80 <HAL_OSPI_Receive_DMA>:
{
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	4604      	mov	r4, r0
  uint32_t data_size = hospi->Instance->DLR + 1U;
 8007e84:	6803      	ldr	r3, [r0, #0]
 8007e86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uint32_t addr_reg = hospi->Instance->AR;
 8007e88:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8007e8a:	f8d3 6110 	ldr.w	r6, [r3, #272]	@ 0x110
  if (pData == NULL)
 8007e8e:	b141      	cbz	r1, 8007ea2 <HAL_OSPI_Receive_DMA+0x22>
 8007e90:	3201      	adds	r2, #1
 8007e92:	460f      	mov	r7, r1
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007e94:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8007e96:	2904      	cmp	r1, #4
 8007e98:	d007      	beq.n	8007eaa <HAL_OSPI_Receive_DMA+0x2a>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007e9a:	2310      	movs	r3, #16
 8007e9c:	6543      	str	r3, [r0, #84]	@ 0x54
      status = HAL_ERROR;
 8007e9e:	2001      	movs	r0, #1
}
 8007ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007ea2:	2308      	movs	r3, #8
 8007ea4:	6543      	str	r3, [r0, #84]	@ 0x54
    status = HAL_ERROR;
 8007ea6:	2001      	movs	r0, #1
 8007ea8:	e7fa      	b.n	8007ea0 <HAL_OSPI_Receive_DMA+0x20>
      if ((hospi->hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007eaa:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007eac:	6d08      	ldr	r0, [r1, #80]	@ 0x50
 8007eae:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8007eb2:	d011      	beq.n	8007ed8 <HAL_OSPI_Receive_DMA+0x58>
        p_queue = hospi->hdma->LinkedListQueue;
 8007eb4:	f8d1 c074 	ldr.w	ip, [r1, #116]	@ 0x74
        if ((p_queue != NULL) && (p_queue->Head != NULL))
 8007eb8:	f1bc 0f00 	cmp.w	ip, #0
 8007ebc:	d007      	beq.n	8007ece <HAL_OSPI_Receive_DMA+0x4e>
 8007ebe:	f8dc 1000 	ldr.w	r1, [ip]
 8007ec2:	b121      	cbz	r1, 8007ece <HAL_OSPI_Receive_DMA+0x4e>
          data_width = p_queue->Head->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] & DMA_CTR1_DDW_LOG2;
 8007ec4:	6809      	ldr	r1, [r1, #0]
 8007ec6:	f401 3140 	and.w	r1, r1, #196608	@ 0x30000
  HAL_StatusTypeDef status = HAL_OK;
 8007eca:	2000      	movs	r0, #0
          data_width = p_queue->Head->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] & DMA_CTR1_DDW_LOG2;
 8007ecc:	e008      	b.n	8007ee0 <HAL_OSPI_Receive_DMA+0x60>
          hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8007ece:	2104      	movs	r1, #4
 8007ed0:	6561      	str	r1, [r4, #84]	@ 0x54
  uint32_t data_width = DMA_DEST_DATAWIDTH_BYTE;
 8007ed2:	2100      	movs	r1, #0
          status = HAL_ERROR;
 8007ed4:	2001      	movs	r0, #1
 8007ed6:	e003      	b.n	8007ee0 <HAL_OSPI_Receive_DMA+0x60>
        data_width = hospi->hdma->Init.DestDataWidth;
 8007ed8:	69c9      	ldr	r1, [r1, #28]
  DMA_QListTypeDef *p_queue = {NULL};
 8007eda:	f04f 0c00 	mov.w	ip, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007ede:	4660      	mov	r0, ip
      if (data_width == DMA_DEST_DATAWIDTH_BYTE)
 8007ee0:	2900      	cmp	r1, #0
 8007ee2:	d154      	bne.n	8007f8e <HAL_OSPI_Receive_DMA+0x10e>
        hospi->XferCount = data_size;
 8007ee4:	64a2      	str	r2, [r4, #72]	@ 0x48
      if (status == HAL_OK)
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d1da      	bne.n	8007ea0 <HAL_OSPI_Receive_DMA+0x20>
        hospi->XferSize  = hospi->XferCount;
 8007eea:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8007eec:	6462      	str	r2, [r4, #68]	@ 0x44
        hospi->pBuffPtr  = pData;
 8007eee:	6427      	str	r7, [r4, #64]	@ 0x40
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007ef6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007efa:	601a      	str	r2, [r3, #0]
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TE | HAL_OSPI_FLAG_TC);
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	2203      	movs	r2, #3
 8007f00:	625a      	str	r2, [r3, #36]	@ 0x24
        hospi->State = HAL_OSPI_STATE_BUSY_RX;
 8007f02:	2328      	movs	r3, #40	@ 0x28
 8007f04:	6523      	str	r3, [r4, #80]	@ 0x50
        hospi->hdma->XferCpltCallback = OSPI_DMACplt;
 8007f06:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007f08:	4a46      	ldr	r2, [pc, #280]	@ (8008024 <HAL_OSPI_Receive_DMA+0x1a4>)
 8007f0a:	661a      	str	r2, [r3, #96]	@ 0x60
        hospi->hdma->XferHalfCpltCallback = OSPI_DMAHalfCplt;
 8007f0c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007f0e:	4a46      	ldr	r2, [pc, #280]	@ (8008028 <HAL_OSPI_Receive_DMA+0x1a8>)
 8007f10:	665a      	str	r2, [r3, #100]	@ 0x64
        hospi->hdma->XferErrorCallback = OSPI_DMAError;
 8007f12:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007f14:	4a45      	ldr	r2, [pc, #276]	@ (800802c <HAL_OSPI_Receive_DMA+0x1ac>)
 8007f16:	669a      	str	r2, [r3, #104]	@ 0x68
        hospi->hdma->XferAbortCallback = NULL;
 8007f18:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	66da      	str	r2, [r3, #108]	@ 0x6c
        if ((hospi->hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007f1e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007f20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f22:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8007f26:	d05c      	beq.n	8007fe2 <HAL_OSPI_Receive_DMA+0x162>
          if (hospi->hdma->LinkedListQueue != NULL)
 8007f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d04f      	beq.n	8007fce <HAL_OSPI_Receive_DMA+0x14e>
            MODIFY_REG(p_queue->Head->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET], \
 8007f2e:	f8dc 2000 	ldr.w	r2, [ip]
 8007f32:	6813      	ldr	r3, [r2, #0]
 8007f34:	f023 1308 	bic.w	r3, r3, #524296	@ 0x80008
 8007f38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f3c:	6013      	str	r3, [r2, #0]
            MODIFY_REG(p_queue->Head->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET], \
 8007f3e:	f8dc 2000 	ldr.w	r2, [ip]
 8007f42:	6853      	ldr	r3, [r2, #4]
 8007f44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f48:	6053      	str	r3, [r2, #4]
            p_queue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hospi->XferSize;
 8007f4a:	f8dc 3000 	ldr.w	r3, [ip]
 8007f4e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007f50:	609a      	str	r2, [r3, #8]
            p_queue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hospi->Instance->DR;
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	3350      	adds	r3, #80	@ 0x50
 8007f56:	f8dc 2000 	ldr.w	r2, [ip]
 8007f5a:	60d3      	str	r3, [r2, #12]
            p_queue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8007f5c:	f8dc 3000 	ldr.w	r3, [ip]
 8007f60:	611f      	str	r7, [r3, #16]
            status = HAL_DMAEx_List_Start_IT(hospi->hdma);
 8007f62:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8007f64:	f7fe fe05 	bl	8006b72 <HAL_DMAEx_List_Start_IT>
        if (status == HAL_OK)
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d134      	bne.n	8007fd6 <HAL_OSPI_Receive_DMA+0x156>
          __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TE);
 8007f6c:	6822      	ldr	r2, [r4, #0]
 8007f6e:	6813      	ldr	r3, [r2, #0]
 8007f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f74:	6013      	str	r3, [r2, #0]
          if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007f76:	68e3      	ldr	r3, [r4, #12]
 8007f78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f7c:	d046      	beq.n	800800c <HAL_OSPI_Receive_DMA+0x18c>
            if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8007f84:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 8007f88:	d048      	beq.n	800801c <HAL_OSPI_Receive_DMA+0x19c>
              WRITE_REG(hospi->Instance->AR, addr_reg);
 8007f8a:	649d      	str	r5, [r3, #72]	@ 0x48
 8007f8c:	e040      	b.n	8008010 <HAL_OSPI_Receive_DMA+0x190>
      else if (data_width == DMA_DEST_DATAWIDTH_HALFWORD)
 8007f8e:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8007f92:	d00d      	beq.n	8007fb0 <HAL_OSPI_Receive_DMA+0x130>
      else if (data_width == DMA_DEST_DATAWIDTH_WORD)
 8007f94:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8007f98:	d1a5      	bne.n	8007ee6 <HAL_OSPI_Receive_DMA+0x66>
        if (((data_size % 4U) != 0U) || ((hospi->Init.FifoThreshold % 4U) != 0U))
 8007f9a:	f012 0f03 	tst.w	r2, #3
 8007f9e:	d103      	bne.n	8007fa8 <HAL_OSPI_Receive_DMA+0x128>
 8007fa0:	6861      	ldr	r1, [r4, #4]
 8007fa2:	f011 0f03 	tst.w	r1, #3
 8007fa6:	d010      	beq.n	8007fca <HAL_OSPI_Receive_DMA+0x14a>
          hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007fa8:	2308      	movs	r3, #8
 8007faa:	6563      	str	r3, [r4, #84]	@ 0x54
          status = HAL_ERROR;
 8007fac:	2001      	movs	r0, #1
 8007fae:	e777      	b.n	8007ea0 <HAL_OSPI_Receive_DMA+0x20>
        if (((data_size % 2U) != 0U) || ((hospi->Init.FifoThreshold % 2U) != 0U))
 8007fb0:	f012 0f01 	tst.w	r2, #1
 8007fb4:	d103      	bne.n	8007fbe <HAL_OSPI_Receive_DMA+0x13e>
 8007fb6:	6861      	ldr	r1, [r4, #4]
 8007fb8:	f011 0f01 	tst.w	r1, #1
 8007fbc:	d003      	beq.n	8007fc6 <HAL_OSPI_Receive_DMA+0x146>
          hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007fbe:	2308      	movs	r3, #8
 8007fc0:	6563      	str	r3, [r4, #84]	@ 0x54
          status = HAL_ERROR;
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	e76c      	b.n	8007ea0 <HAL_OSPI_Receive_DMA+0x20>
          hospi->XferCount = data_size;
 8007fc6:	64a2      	str	r2, [r4, #72]	@ 0x48
 8007fc8:	e78d      	b.n	8007ee6 <HAL_OSPI_Receive_DMA+0x66>
          hospi->XferCount = data_size;
 8007fca:	64a2      	str	r2, [r4, #72]	@ 0x48
 8007fcc:	e78b      	b.n	8007ee6 <HAL_OSPI_Receive_DMA+0x66>
            hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8007fce:	2304      	movs	r3, #4
 8007fd0:	6563      	str	r3, [r4, #84]	@ 0x54
            hospi->State = HAL_OSPI_STATE_READY;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	6523      	str	r3, [r4, #80]	@ 0x50
          hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8007fd6:	2304      	movs	r3, #4
 8007fd8:	6563      	str	r3, [r4, #84]	@ 0x54
          hospi->State = HAL_OSPI_STATE_READY;
 8007fda:	2302      	movs	r3, #2
 8007fdc:	6523      	str	r3, [r4, #80]	@ 0x50
          status = HAL_ERROR;
 8007fde:	2001      	movs	r0, #1
 8007fe0:	e75e      	b.n	8007ea0 <HAL_OSPI_Receive_DMA+0x20>
          MODIFY_REG(hospi->hdma->Instance->CTR1, (DMA_CTR1_SINC | DMA_CTR1_DINC), \
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007fe6:	f023 1308 	bic.w	r3, r3, #524296	@ 0x80008
 8007fea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007fee:	6413      	str	r3, [r2, #64]	@ 0x40
          MODIFY_REG(hospi->hdma->Instance->CTR2, DMA_CTR2_DREQ, DMA_PERIPH_TO_MEMORY);
 8007ff0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8007ff6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ffa:	6453      	str	r3, [r2, #68]	@ 0x44
          status = HAL_DMA_Start_IT(hospi->hdma, (uint32_t)&hospi->Instance->DR, (uint32_t)pData, hospi->XferSize);
 8007ffc:	6821      	ldr	r1, [r4, #0]
 8007ffe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008000:	463a      	mov	r2, r7
 8008002:	3150      	adds	r1, #80	@ 0x50
 8008004:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8008006:	f7fe f965 	bl	80062d4 <HAL_DMA_Start_IT>
 800800a:	e7ad      	b.n	8007f68 <HAL_OSPI_Receive_DMA+0xe8>
            WRITE_REG(hospi->Instance->AR, addr_reg);
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	649d      	str	r5, [r3, #72]	@ 0x48
          SET_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8008010:	6822      	ldr	r2, [r4, #0]
 8008012:	6813      	ldr	r3, [r2, #0]
 8008014:	f043 0304 	orr.w	r3, r3, #4
 8008018:	6013      	str	r3, [r2, #0]
 800801a:	e741      	b.n	8007ea0 <HAL_OSPI_Receive_DMA+0x20>
              WRITE_REG(hospi->Instance->IR, ir_reg);
 800801c:	f8c3 6110 	str.w	r6, [r3, #272]	@ 0x110
 8008020:	e7f6      	b.n	8008010 <HAL_OSPI_Receive_DMA+0x190>
 8008022:	bf00      	nop
 8008024:	08007a09 	.word	0x08007a09
 8008028:	08008083 	.word	0x08008083
 800802c:	080082c9 	.word	0x080082c9

08008030 <HAL_OSPI_ErrorCallback>:
}
 8008030:	4770      	bx	lr

08008032 <HAL_OSPI_AbortCpltCallback>:
}
 8008032:	4770      	bx	lr

08008034 <OSPI_DMAAbortCplt>:
{
 8008034:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hdma->Parent);
 8008036:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  hospi->XferCount = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	6483      	str	r3, [r0, #72]	@ 0x48
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800803c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800803e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008042:	d116      	bne.n	8008072 <OSPI_DMAAbortCplt+0x3e>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8008044:	6803      	ldr	r3, [r0, #0]
 8008046:	6a1a      	ldr	r2, [r3, #32]
 8008048:	f012 0f20 	tst.w	r2, #32
 800804c:	d00c      	beq.n	8008068 <OSPI_DMAAbortCplt+0x34>
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800804e:	2202      	movs	r2, #2
 8008050:	625a      	str	r2, [r3, #36]	@ 0x24
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8008052:	6802      	ldr	r2, [r0, #0]
 8008054:	6813      	ldr	r3, [r2, #0]
 8008056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800805a:	6013      	str	r3, [r2, #0]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800805c:	6802      	ldr	r2, [r0, #0]
 800805e:	6813      	ldr	r3, [r2, #0]
 8008060:	f043 0302 	orr.w	r3, r3, #2
 8008064:	6013      	str	r3, [r2, #0]
 8008066:	e008      	b.n	800807a <OSPI_DMAAbortCplt+0x46>
      hospi->State = HAL_OSPI_STATE_READY;
 8008068:	2302      	movs	r3, #2
 800806a:	6503      	str	r3, [r0, #80]	@ 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 800806c:	f7ff ffe1 	bl	8008032 <HAL_OSPI_AbortCpltCallback>
 8008070:	e003      	b.n	800807a <OSPI_DMAAbortCplt+0x46>
    hospi->State = HAL_OSPI_STATE_READY;
 8008072:	2302      	movs	r3, #2
 8008074:	6503      	str	r3, [r0, #80]	@ 0x50
    HAL_OSPI_ErrorCallback(hospi);
 8008076:	f7ff ffdb 	bl	8008030 <HAL_OSPI_ErrorCallback>
}
 800807a:	bd08      	pop	{r3, pc}

0800807c <HAL_OSPI_FifoThresholdCallback>:
}
 800807c:	4770      	bx	lr

0800807e <HAL_OSPI_RxCpltCallback>:
}
 800807e:	4770      	bx	lr

08008080 <HAL_OSPI_TxCpltCallback>:
}
 8008080:	4770      	bx	lr

08008082 <OSPI_DMAHalfCplt>:
{
 8008082:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hdma->Parent);
 8008084:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  hospi->XferCount = (hospi->XferCount >> 1);
 8008086:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8008088:	085b      	lsrs	r3, r3, #1
 800808a:	6483      	str	r3, [r0, #72]	@ 0x48
  if (hospi->State == HAL_OSPI_STATE_BUSY_RX)
 800808c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800808e:	2b28      	cmp	r3, #40	@ 0x28
 8008090:	d002      	beq.n	8008098 <OSPI_DMAHalfCplt+0x16>
    HAL_OSPI_TxHalfCpltCallback(hospi);
 8008092:	f7fb f88d 	bl	80031b0 <HAL_OSPI_TxHalfCpltCallback>
}
 8008096:	bd08      	pop	{r3, pc}
    HAL_OSPI_RxHalfCpltCallback(hospi);
 8008098:	f7fb f88b 	bl	80031b2 <HAL_OSPI_RxHalfCpltCallback>
 800809c:	e7fb      	b.n	8008096 <OSPI_DMAHalfCplt+0x14>

0800809e <HAL_OSPI_StatusMatchCallback>:
}
 800809e:	4770      	bx	lr

080080a0 <HAL_OSPI_TimeOutCallback>:
}
 80080a0:	4770      	bx	lr
	...

080080a4 <HAL_OSPI_IRQHandler>:
{
 80080a4:	b510      	push	{r4, lr}
 80080a6:	4604      	mov	r4, r0
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80080a8:	6802      	ldr	r2, [r0, #0]
  uint32_t flag           = hospi->Instance->SR;
 80080aa:	6a13      	ldr	r3, [r2, #32]
  uint32_t itsource       = hospi->Instance->CR;
 80080ac:	6811      	ldr	r1, [r2, #0]
  uint32_t currentstate   = hospi->State;
 80080ae:	6d00      	ldr	r0, [r0, #80]	@ 0x50
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 80080b0:	f013 0f04 	tst.w	r3, #4
 80080b4:	d027      	beq.n	8008106 <HAL_OSPI_IRQHandler+0x62>
 80080b6:	f411 2f80 	tst.w	r1, #262144	@ 0x40000
 80080ba:	d024      	beq.n	8008106 <HAL_OSPI_IRQHandler+0x62>
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80080bc:	2818      	cmp	r0, #24
 80080be:	d00c      	beq.n	80080da <HAL_OSPI_IRQHandler+0x36>
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80080c0:	2828      	cmp	r0, #40	@ 0x28
 80080c2:	d015      	beq.n	80080f0 <HAL_OSPI_IRQHandler+0x4c>
    if (hospi->XferCount == 0U)
 80080c4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80080c6:	b923      	cbnz	r3, 80080d2 <HAL_OSPI_IRQHandler+0x2e>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 80080c8:	6822      	ldr	r2, [r4, #0]
 80080ca:	6813      	ldr	r3, [r2, #0]
 80080cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080d0:	6013      	str	r3, [r2, #0]
    HAL_OSPI_FifoThresholdCallback(hospi);
 80080d2:	4620      	mov	r0, r4
 80080d4:	f7ff ffd2 	bl	800807c <HAL_OSPI_FifoThresholdCallback>
}
 80080d8:	bd10      	pop	{r4, pc}
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80080da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
      hospi->pBuffPtr++;
 80080e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080e4:	3301      	adds	r3, #1
 80080e6:	6423      	str	r3, [r4, #64]	@ 0x40
      hospi->XferCount--;
 80080e8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80080ea:	3b01      	subs	r3, #1
 80080ec:	64a3      	str	r3, [r4, #72]	@ 0x48
 80080ee:	e7e9      	b.n	80080c4 <HAL_OSPI_IRQHandler+0x20>
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80080f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080f2:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 80080f6:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 80080f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080fa:	3301      	adds	r3, #1
 80080fc:	6423      	str	r3, [r4, #64]	@ 0x40
      hospi->XferCount--;
 80080fe:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008100:	3b01      	subs	r3, #1
 8008102:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008104:	e7de      	b.n	80080c4 <HAL_OSPI_IRQHandler+0x20>
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8008106:	f013 0f02 	tst.w	r3, #2
 800810a:	d044      	beq.n	8008196 <HAL_OSPI_IRQHandler+0xf2>
 800810c:	f411 3f00 	tst.w	r1, #131072	@ 0x20000
 8008110:	d041      	beq.n	8008196 <HAL_OSPI_IRQHandler+0xf2>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8008112:	2828      	cmp	r0, #40	@ 0x28
 8008114:	d014      	beq.n	8008140 <HAL_OSPI_IRQHandler+0x9c>
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8008116:	2102      	movs	r1, #2
 8008118:	6251      	str	r1, [r2, #36]	@ 0x24
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800811a:	6822      	ldr	r2, [r4, #0]
 800811c:	6813      	ldr	r3, [r2, #0]
 800811e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8008122:	6013      	str	r3, [r2, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 8008124:	6521      	str	r1, [r4, #80]	@ 0x50
      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8008126:	2818      	cmp	r0, #24
 8008128:	d029      	beq.n	800817e <HAL_OSPI_IRQHandler+0xda>
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800812a:	2808      	cmp	r0, #8
 800812c:	d02b      	beq.n	8008186 <HAL_OSPI_IRQHandler+0xe2>
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800812e:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8008132:	d1d1      	bne.n	80080d8 <HAL_OSPI_IRQHandler+0x34>
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8008134:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008136:	bb53      	cbnz	r3, 800818e <HAL_OSPI_IRQHandler+0xea>
          HAL_OSPI_AbortCpltCallback(hospi);
 8008138:	4620      	mov	r0, r4
 800813a:	f7ff ff7a 	bl	8008032 <HAL_OSPI_AbortCpltCallback>
 800813e:	e7cb      	b.n	80080d8 <HAL_OSPI_IRQHandler+0x34>
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8008140:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008142:	b169      	cbz	r1, 8008160 <HAL_OSPI_IRQHandler+0xbc>
 8008144:	f413 4ffe 	tst.w	r3, #32512	@ 0x7f00
 8008148:	d00a      	beq.n	8008160 <HAL_OSPI_IRQHandler+0xbc>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800814a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800814c:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 8008150:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8008152:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008154:	3301      	adds	r3, #1
 8008156:	6423      	str	r3, [r4, #64]	@ 0x40
        hospi->XferCount--;
 8008158:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800815a:	3b01      	subs	r3, #1
 800815c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800815e:	e7bb      	b.n	80080d8 <HAL_OSPI_IRQHandler+0x34>
      else if (hospi->XferCount == 0U)
 8008160:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1b8      	bne.n	80080d8 <HAL_OSPI_IRQHandler+0x34>
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8008166:	2102      	movs	r1, #2
 8008168:	6251      	str	r1, [r2, #36]	@ 0x24
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800816a:	6822      	ldr	r2, [r4, #0]
 800816c:	6813      	ldr	r3, [r2, #0]
 800816e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8008172:	6013      	str	r3, [r2, #0]
        hospi->State = HAL_OSPI_STATE_READY;
 8008174:	6521      	str	r1, [r4, #80]	@ 0x50
        HAL_OSPI_RxCpltCallback(hospi);
 8008176:	4620      	mov	r0, r4
 8008178:	f7ff ff81 	bl	800807e <HAL_OSPI_RxCpltCallback>
 800817c:	e7ac      	b.n	80080d8 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_TxCpltCallback(hospi);
 800817e:	4620      	mov	r0, r4
 8008180:	f7ff ff7e 	bl	8008080 <HAL_OSPI_TxCpltCallback>
 8008184:	e7a8      	b.n	80080d8 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_CmdCpltCallback(hospi);
 8008186:	4620      	mov	r0, r4
 8008188:	f7fb f811 	bl	80031ae <HAL_OSPI_CmdCpltCallback>
 800818c:	e7a4      	b.n	80080d8 <HAL_OSPI_IRQHandler+0x34>
          HAL_OSPI_ErrorCallback(hospi);
 800818e:	4620      	mov	r0, r4
 8008190:	f7ff ff4e 	bl	8008030 <HAL_OSPI_ErrorCallback>
 8008194:	e7a0      	b.n	80080d8 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8008196:	f013 0f08 	tst.w	r3, #8
 800819a:	d013      	beq.n	80081c4 <HAL_OSPI_IRQHandler+0x120>
 800819c:	f411 2f00 	tst.w	r1, #524288	@ 0x80000
 80081a0:	d010      	beq.n	80081c4 <HAL_OSPI_IRQHandler+0x120>
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 80081a2:	2308      	movs	r3, #8
 80081a4:	6253      	str	r3, [r2, #36]	@ 0x24
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 80081ae:	d005      	beq.n	80081bc <HAL_OSPI_IRQHandler+0x118>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 80081b6:	601a      	str	r2, [r3, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 80081b8:	2302      	movs	r3, #2
 80081ba:	6523      	str	r3, [r4, #80]	@ 0x50
    HAL_OSPI_StatusMatchCallback(hospi);
 80081bc:	4620      	mov	r0, r4
 80081be:	f7ff ff6e 	bl	800809e <HAL_OSPI_StatusMatchCallback>
 80081c2:	e789      	b.n	80080d8 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 80081c4:	f013 0f01 	tst.w	r3, #1
 80081c8:	d029      	beq.n	800821e <HAL_OSPI_IRQHandler+0x17a>
 80081ca:	f411 3f80 	tst.w	r1, #65536	@ 0x10000
 80081ce:	d026      	beq.n	800821e <HAL_OSPI_IRQHandler+0x17a>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 80081d0:	2301      	movs	r3, #1
 80081d2:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 80081d4:	6822      	ldr	r2, [r4, #0]
 80081d6:	6813      	ldr	r3, [r2, #0]
 80081d8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80081dc:	6013      	str	r3, [r2, #0]
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 80081de:	2302      	movs	r3, #2
 80081e0:	6563      	str	r3, [r4, #84]	@ 0x54
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	f012 0f04 	tst.w	r2, #4
 80081ea:	d012      	beq.n	8008212 <HAL_OSPI_IRQHandler+0x16e>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	f022 0204 	bic.w	r2, r2, #4
 80081f2:	601a      	str	r2, [r3, #0]
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 80081f4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80081f6:	4a11      	ldr	r2, [pc, #68]	@ (800823c <HAL_OSPI_IRQHandler+0x198>)
 80081f8:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 80081fa:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80081fc:	f7fe f8fd 	bl	80063fa <HAL_DMA_Abort_IT>
 8008200:	2800      	cmp	r0, #0
 8008202:	f43f af69 	beq.w	80080d8 <HAL_OSPI_IRQHandler+0x34>
        hospi->State = HAL_OSPI_STATE_READY;
 8008206:	2302      	movs	r3, #2
 8008208:	6523      	str	r3, [r4, #80]	@ 0x50
        HAL_OSPI_ErrorCallback(hospi);
 800820a:	4620      	mov	r0, r4
 800820c:	f7ff ff10 	bl	8008030 <HAL_OSPI_ErrorCallback>
 8008210:	e762      	b.n	80080d8 <HAL_OSPI_IRQHandler+0x34>
      hospi->State = HAL_OSPI_STATE_READY;
 8008212:	2302      	movs	r3, #2
 8008214:	6523      	str	r3, [r4, #80]	@ 0x50
      HAL_OSPI_ErrorCallback(hospi);
 8008216:	4620      	mov	r0, r4
 8008218:	f7ff ff0a 	bl	8008030 <HAL_OSPI_ErrorCallback>
 800821c:	e75c      	b.n	80080d8 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800821e:	f013 0f10 	tst.w	r3, #16
 8008222:	f43f af59 	beq.w	80080d8 <HAL_OSPI_IRQHandler+0x34>
 8008226:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800822a:	f43f af55 	beq.w	80080d8 <HAL_OSPI_IRQHandler+0x34>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800822e:	2310      	movs	r3, #16
 8008230:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_OSPI_TimeOutCallback(hospi);
 8008232:	4620      	mov	r0, r4
 8008234:	f7ff ff34 	bl	80080a0 <HAL_OSPI_TimeOutCallback>
}
 8008238:	e74e      	b.n	80080d8 <HAL_OSPI_IRQHandler+0x34>
 800823a:	bf00      	nop
 800823c:	08008035 	.word	0x08008035

08008240 <HAL_OSPI_Abort_IT>:
{
 8008240:	b510      	push	{r4, lr}
 8008242:	4604      	mov	r4, r0
  state = hospi->State;
 8008244:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8008246:	f013 0f0c 	tst.w	r3, #12
 800824a:	d036      	beq.n	80082ba <HAL_OSPI_Abort_IT+0x7a>
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800824c:	6802      	ldr	r2, [r0, #0]
 800824e:	6813      	ldr	r3, [r2, #0]
 8008250:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008254:	6013      	str	r3, [r2, #0]
    hospi->State = HAL_OSPI_STATE_ABORT;
 8008256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800825a:	6503      	str	r3, [r0, #80]	@ 0x50
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800825c:	6803      	ldr	r3, [r0, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	f012 0f04 	tst.w	r2, #4
 8008264:	d111      	bne.n	800828a <HAL_OSPI_Abort_IT+0x4a>
      if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8008266:	6a1a      	ldr	r2, [r3, #32]
 8008268:	f012 0f20 	tst.w	r2, #32
 800826c:	d01f      	beq.n	80082ae <HAL_OSPI_Abort_IT+0x6e>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800826e:	2202      	movs	r2, #2
 8008270:	625a      	str	r2, [r3, #36]	@ 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8008272:	6802      	ldr	r2, [r0, #0]
 8008274:	6813      	ldr	r3, [r2, #0]
 8008276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800827a:	6013      	str	r3, [r2, #0]
        SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800827c:	6802      	ldr	r2, [r0, #0]
 800827e:	6813      	ldr	r3, [r2, #0]
 8008280:	f043 0302 	orr.w	r3, r3, #2
 8008284:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008286:	2000      	movs	r0, #0
 8008288:	e01a      	b.n	80082c0 <HAL_OSPI_Abort_IT+0x80>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	f022 0204 	bic.w	r2, r2, #4
 8008290:	601a      	str	r2, [r3, #0]
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8008292:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8008294:	4a0b      	ldr	r2, [pc, #44]	@ (80082c4 <HAL_OSPI_Abort_IT+0x84>)
 8008296:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 8008298:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800829a:	f7fe f8ae 	bl	80063fa <HAL_DMA_Abort_IT>
 800829e:	b178      	cbz	r0, 80082c0 <HAL_OSPI_Abort_IT+0x80>
        hospi->State = HAL_OSPI_STATE_READY;
 80082a0:	2302      	movs	r3, #2
 80082a2:	6523      	str	r3, [r4, #80]	@ 0x50
        HAL_OSPI_AbortCpltCallback(hospi);
 80082a4:	4620      	mov	r0, r4
 80082a6:	f7ff fec4 	bl	8008032 <HAL_OSPI_AbortCpltCallback>
  HAL_StatusTypeDef status = HAL_OK;
 80082aa:	2000      	movs	r0, #0
 80082ac:	e008      	b.n	80082c0 <HAL_OSPI_Abort_IT+0x80>
        hospi->State = HAL_OSPI_STATE_READY;
 80082ae:	2302      	movs	r3, #2
 80082b0:	6503      	str	r3, [r0, #80]	@ 0x50
        HAL_OSPI_AbortCpltCallback(hospi);
 80082b2:	f7ff febe 	bl	8008032 <HAL_OSPI_AbortCpltCallback>
  HAL_StatusTypeDef status = HAL_OK;
 80082b6:	2000      	movs	r0, #0
 80082b8:	e002      	b.n	80082c0 <HAL_OSPI_Abort_IT+0x80>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80082ba:	2310      	movs	r3, #16
 80082bc:	6543      	str	r3, [r0, #84]	@ 0x54
    status = HAL_ERROR;
 80082be:	2001      	movs	r0, #1
}
 80082c0:	bd10      	pop	{r4, pc}
 80082c2:	bf00      	nop
 80082c4:	08008035 	.word	0x08008035

080082c8 <OSPI_DMAError>:
{
 80082c8:	b510      	push	{r4, lr}
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hdma->Parent);
 80082ca:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
  hospi->XferCount = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	64a3      	str	r3, [r4, #72]	@ 0x48
  hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80082d0:	2304      	movs	r3, #4
 80082d2:	6563      	str	r3, [r4, #84]	@ 0x54
  CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80082d4:	6822      	ldr	r2, [r4, #0]
 80082d6:	6813      	ldr	r3, [r2, #0]
 80082d8:	f023 0304 	bic.w	r3, r3, #4
 80082dc:	6013      	str	r3, [r2, #0]
  if (HAL_OSPI_Abort_IT(hospi) != HAL_OK)
 80082de:	4620      	mov	r0, r4
 80082e0:	f7ff ffae 	bl	8008240 <HAL_OSPI_Abort_IT>
 80082e4:	b900      	cbnz	r0, 80082e8 <OSPI_DMAError+0x20>
}
 80082e6:	bd10      	pop	{r4, pc}
    __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	6813      	ldr	r3, [r2, #0]
 80082ec:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80082f0:	6013      	str	r3, [r2, #0]
    hospi->State = HAL_OSPI_STATE_READY;
 80082f2:	2302      	movs	r3, #2
 80082f4:	6523      	str	r3, [r4, #80]	@ 0x50
    HAL_OSPI_ErrorCallback(hospi);
 80082f6:	4620      	mov	r0, r4
 80082f8:	f7ff fe9a 	bl	8008030 <HAL_OSPI_ErrorCallback>
}
 80082fc:	e7f3      	b.n	80082e6 <OSPI_DMAError+0x1e>

080082fe <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 80082fe:	6581      	str	r1, [r0, #88]	@ 0x58
}
 8008300:	2000      	movs	r0, #0
 8008302:	4770      	bx	lr

08008304 <HAL_OSPIM_Config>:
{
 8008304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008308:	b08d      	sub	sp, #52	@ 0x34
 800830a:	4681      	mov	r9, r0
 800830c:	460d      	mov	r5, r1
  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 800830e:	6802      	ldr	r2, [r0, #0]
 8008310:	4ba5      	ldr	r3, [pc, #660]	@ (80085a8 <HAL_OSPIM_Config+0x2a4>)
 8008312:	429a      	cmp	r2, r3
 8008314:	d005      	beq.n	8008322 <HAL_OSPIM_Config+0x1e>
    other_instance = 0U;
 8008316:	f04f 0800 	mov.w	r8, #0
    instance = 1U;
 800831a:	2601      	movs	r6, #1
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800831c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800831e:	461f      	mov	r7, r3
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8008320:	e004      	b.n	800832c <HAL_OSPIM_Config+0x28>
    other_instance = 1U;
 8008322:	f04f 0801 	mov.w	r8, #1
    instance = 0U;
 8008326:	2600      	movs	r6, #0
 8008328:	e7f8      	b.n	800831c <HAL_OSPIM_Config+0x18>
      status = HAL_ERROR;
 800832a:	4623      	mov	r3, r4
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800832c:	2b01      	cmp	r3, #1
 800832e:	d80f      	bhi.n	8008350 <HAL_OSPIM_Config+0x4c>
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8008330:	1c5c      	adds	r4, r3, #1
 8008332:	b2e4      	uxtb	r4, r4
 8008334:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008338:	eb0d 01c3 	add.w	r1, sp, r3, lsl #3
 800833c:	4620      	mov	r0, r4
 800833e:	f7ff fc59 	bl	8007bf4 <OSPIM_GetConfig>
 8008342:	2800      	cmp	r0, #0
 8008344:	d0f1      	beq.n	800832a <HAL_OSPIM_Config+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8008346:	2308      	movs	r3, #8
 8008348:	f8c9 3054 	str.w	r3, [r9, #84]	@ 0x54
      status = HAL_ERROR;
 800834c:	2701      	movs	r7, #1
 800834e:	e7ec      	b.n	800832a <HAL_OSPIM_Config+0x26>
  if (status == HAL_OK)
 8008350:	2f00      	cmp	r7, #0
 8008352:	f040 8123 	bne.w	800859c <HAL_OSPIM_Config+0x298>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8008356:	4b94      	ldr	r3, [pc, #592]	@ (80085a8 <HAL_OSPIM_Config+0x2a4>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f013 0f01 	tst.w	r3, #1
 800835e:	f000 8121 	beq.w	80085a4 <HAL_OSPIM_Config+0x2a0>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8008362:	4a91      	ldr	r2, [pc, #580]	@ (80085a8 <HAL_OSPIM_Config+0x2a4>)
 8008364:	6813      	ldr	r3, [r2, #0]
 8008366:	f023 0301 	bic.w	r3, r3, #1
 800836a:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800836c:	2101      	movs	r1, #1
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800836e:	4b8f      	ldr	r3, [pc, #572]	@ (80085ac <HAL_OSPIM_Config+0x2a8>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f013 0f01 	tst.w	r3, #1
 8008376:	d007      	beq.n	8008388 <HAL_OSPIM_Config+0x84>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8008378:	4a8c      	ldr	r2, [pc, #560]	@ (80085ac <HAL_OSPIM_Config+0x2a8>)
 800837a:	6813      	ldr	r3, [r2, #0]
 800837c:	f023 0301 	bic.w	r3, r3, #1
 8008380:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8008382:	f041 0102 	orr.w	r1, r1, #2
 8008386:	b2c9      	uxtb	r1, r1
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8008388:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800838c:	aa0c      	add	r2, sp, #48	@ 0x30
 800838e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008392:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8008396:	3b01      	subs	r3, #1
 8008398:	4885      	ldr	r0, [pc, #532]	@ (80085b0 <HAL_OSPIM_Config+0x2ac>)
 800839a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800839e:	685a      	ldr	r2, [r3, #4]
 80083a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083a4:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80083a6:	6803      	ldr	r3, [r0, #0]
 80083a8:	f013 0f01 	tst.w	r3, #1
 80083ac:	f000 814c 	beq.w	8008648 <HAL_OSPIM_Config+0x344>
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80083b0:	6803      	ldr	r3, [r0, #0]
 80083b2:	f023 0301 	bic.w	r3, r3, #1
 80083b6:	6003      	str	r3, [r0, #0]
      if (other_instance == 1U)
 80083b8:	f1b8 0f00 	cmp.w	r8, #0
 80083bc:	f040 80fa 	bne.w	80085b4 <HAL_OSPIM_Config+0x2b0>
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80083c0:	f8d5 e000 	ldr.w	lr, [r5]
 80083c4:	4643      	mov	r3, r8
 80083c6:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 80083ca:	a80c      	add	r0, sp, #48	@ 0x30
 80083cc:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80083d0:	f852 2c30 	ldr.w	r2, [r2, #-48]
 80083d4:	4596      	cmp	lr, r2
 80083d6:	d017      	beq.n	8008408 <HAL_OSPIM_Config+0x104>
 80083d8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80083dc:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
 80083e0:	f858 0c2c 	ldr.w	r0, [r8, #-44]
 80083e4:	686c      	ldr	r4, [r5, #4]
 80083e6:	4284      	cmp	r4, r0
 80083e8:	d00e      	beq.n	8008408 <HAL_OSPIM_Config+0x104>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80083ea:	f858 0c28 	ldr.w	r0, [r8, #-40]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80083ee:	68ac      	ldr	r4, [r5, #8]
 80083f0:	4284      	cmp	r4, r0
 80083f2:	d009      	beq.n	8008408 <HAL_OSPIM_Config+0x104>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80083f4:	f858 0c24 	ldr.w	r0, [r8, #-36]
 80083f8:	68ec      	ldr	r4, [r5, #12]
 80083fa:	4284      	cmp	r4, r0
 80083fc:	d004      	beq.n	8008408 <HAL_OSPIM_Config+0x104>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80083fe:	f858 0c20 	ldr.w	r0, [r8, #-32]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8008402:	692c      	ldr	r4, [r5, #16]
 8008404:	4284      	cmp	r4, r0
 8008406:	d152      	bne.n	80084ae <HAL_OSPIM_Config+0x1aa>
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8008408:	4596      	cmp	lr, r2
 800840a:	f000 816e 	beq.w	80086ea <HAL_OSPIM_Config+0x3e6>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800840e:	3a01      	subs	r2, #1
 8008410:	0092      	lsls	r2, r2, #2
 8008412:	f102 4284 	add.w	r2, r2, #1107296256	@ 0x42000000
 8008416:	f502 2244 	add.w	r2, r2, #802816	@ 0xc4000
 800841a:	6850      	ldr	r0, [r2, #4]
 800841c:	f020 0001 	bic.w	r0, r0, #1
 8008420:	6050      	str	r0, [r2, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8008422:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008426:	a80c      	add	r0, sp, #48	@ 0x30
 8008428:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800842c:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 8008430:	b14a      	cbz	r2, 8008446 <HAL_OSPIM_Config+0x142>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8008432:	3a01      	subs	r2, #1
 8008434:	0092      	lsls	r2, r2, #2
 8008436:	f102 4284 	add.w	r2, r2, #1107296256	@ 0x42000000
 800843a:	f502 2244 	add.w	r2, r2, #802816	@ 0xc4000
 800843e:	6850      	ldr	r0, [r2, #4]
 8008440:	f020 0010 	bic.w	r0, r0, #16
 8008444:	6050      	str	r0, [r2, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8008446:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800844a:	aa0c      	add	r2, sp, #48	@ 0x30
 800844c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8008450:	f850 2c28 	ldr.w	r2, [r0, #-40]
 8008454:	3a01      	subs	r2, #1
 8008456:	0092      	lsls	r2, r2, #2
 8008458:	f102 4284 	add.w	r2, r2, #1107296256	@ 0x42000000
 800845c:	f502 2244 	add.w	r2, r2, #802816	@ 0xc4000
 8008460:	6854      	ldr	r4, [r2, #4]
 8008462:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 8008466:	6054      	str	r4, [r2, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8008468:	f850 2c24 	ldr.w	r2, [r0, #-36]
 800846c:	b15a      	cbz	r2, 8008486 <HAL_OSPIM_Config+0x182>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800846e:	3a01      	subs	r2, #1
 8008470:	f002 0201 	and.w	r2, r2, #1
 8008474:	0092      	lsls	r2, r2, #2
 8008476:	f102 4284 	add.w	r2, r2, #1107296256	@ 0x42000000
 800847a:	f502 2244 	add.w	r2, r2, #802816	@ 0xc4000
 800847e:	6850      	ldr	r0, [r2, #4]
 8008480:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8008484:	6050      	str	r0, [r2, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008486:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800848a:	aa0c      	add	r2, sp, #48	@ 0x30
 800848c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008490:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008494:	b15b      	cbz	r3, 80084ae <HAL_OSPIM_Config+0x1aa>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8008496:	3b01      	subs	r3, #1
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80084a2:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80084ac:	605a      	str	r2, [r3, #4]
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80084ae:	68ab      	ldr	r3, [r5, #8]
 80084b0:	3b01      	subs	r3, #1
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80084b8:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80084c2:	ea42 2246 	orr.w	r2, r2, r6, lsl #9
 80084c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80084ca:	605a      	str	r2, [r3, #4]
    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 80084cc:	696b      	ldr	r3, [r5, #20]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	2bff      	cmp	r3, #255	@ 0xff
 80084d2:	d80c      	bhi.n	80084ee <HAL_OSPIM_Config+0x1ea>
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80084d4:	4a36      	ldr	r2, [pc, #216]	@ (80085b0 <HAL_OSPIM_Config+0x2ac>)
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80084dc:	4293      	cmp	r3, r2
 80084de:	d906      	bls.n	80084ee <HAL_OSPIM_Config+0x1ea>
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80084e0:	4833      	ldr	r0, [pc, #204]	@ (80085b0 <HAL_OSPIM_Config+0x2ac>)
 80084e2:	6802      	ldr	r2, [r0, #0]
 80084e4:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 80084e8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80084ec:	6003      	str	r3, [r0, #0]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80084ee:	4b30      	ldr	r3, [pc, #192]	@ (80085b0 <HAL_OSPIM_Config+0x2ac>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f013 0f01 	tst.w	r3, #1
 80084f6:	f000 8142 	beq.w	800877e <HAL_OSPIM_Config+0x47a>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80084fa:	682b      	ldr	r3, [r5, #0]
 80084fc:	3b01      	subs	r3, #1
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8008504:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	f022 0203 	bic.w	r2, r2, #3
 800850e:	f042 0201 	orr.w	r2, r2, #1
 8008512:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8008514:	686b      	ldr	r3, [r5, #4]
 8008516:	b15b      	cbz	r3, 8008530 <HAL_OSPIM_Config+0x22c>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8008518:	3b01      	subs	r3, #1
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8008520:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800852a:	f042 0210 	orr.w	r2, r2, #16
 800852e:	605a      	str	r2, [r3, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008530:	68eb      	ldr	r3, [r5, #12]
 8008532:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8008536:	f000 80fe 	beq.w	8008736 <HAL_OSPIM_Config+0x432>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800853a:	3b01      	subs	r3, #1
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8008546:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8008550:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008554:	605a      	str	r2, [r3, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008556:	692b      	ldr	r3, [r5, #16]
 8008558:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800855c:	f000 80fd 	beq.w	800875a <HAL_OSPIM_Config+0x456>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8008560:	3b01      	subs	r3, #1
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 800856c:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8008576:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800857a:	605a      	str	r2, [r3, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 800857c:	f011 0f01 	tst.w	r1, #1
 8008580:	d004      	beq.n	800858c <HAL_OSPIM_Config+0x288>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8008582:	4a09      	ldr	r2, [pc, #36]	@ (80085a8 <HAL_OSPIM_Config+0x2a4>)
 8008584:	6813      	ldr	r3, [r2, #0]
 8008586:	f043 0301 	orr.w	r3, r3, #1
 800858a:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 800858c:	f011 0f02 	tst.w	r1, #2
 8008590:	d004      	beq.n	800859c <HAL_OSPIM_Config+0x298>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8008592:	4a06      	ldr	r2, [pc, #24]	@ (80085ac <HAL_OSPIM_Config+0x2a8>)
 8008594:	6813      	ldr	r3, [r2, #0]
 8008596:	f043 0301 	orr.w	r3, r3, #1
 800859a:	6013      	str	r3, [r2, #0]
}
 800859c:	4638      	mov	r0, r7
 800859e:	b00d      	add	sp, #52	@ 0x34
 80085a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  uint8_t ospi_enabled = 0U;
 80085a4:	4639      	mov	r1, r7
 80085a6:	e6e2      	b.n	800836e <HAL_OSPIM_Config+0x6a>
 80085a8:	420d1400 	.word	0x420d1400
 80085ac:	420d2400 	.word	0x420d2400
 80085b0:	420c4000 	.word	0x420c4000
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80085b4:	4642      	mov	r2, r8
 80085b6:	eb08 0048 	add.w	r0, r8, r8, lsl #1
 80085ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80085bc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80085c0:	f850 3c30 	ldr.w	r3, [r0, #-48]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80085cc:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 80085d0:	685c      	ldr	r4, [r3, #4]
 80085d2:	f044 0402 	orr.w	r4, r4, #2
 80085d6:	605c      	str	r4, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80085d8:	f850 3c2c 	ldr.w	r3, [r0, #-44]
 80085dc:	b14b      	cbz	r3, 80085f2 <HAL_OSPIM_Config+0x2ee>
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80085de:	3b01      	subs	r3, #1
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80085e6:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 80085ea:	6858      	ldr	r0, [r3, #4]
 80085ec:	f040 0020 	orr.w	r0, r0, #32
 80085f0:	6058      	str	r0, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80085f2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80085f6:	a80c      	add	r0, sp, #48	@ 0x30
 80085f8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80085fc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8008600:	b15b      	cbz	r3, 800861a <HAL_OSPIM_Config+0x316>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8008602:	3b01      	subs	r3, #1
 8008604:	f003 0301 	and.w	r3, r3, #1
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 800860e:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 8008612:	6858      	ldr	r0, [r3, #4]
 8008614:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8008618:	6058      	str	r0, [r3, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800861a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800861e:	ab0c      	add	r3, sp, #48	@ 0x30
 8008620:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8008624:	f852 3c20 	ldr.w	r3, [r2, #-32]
 8008628:	2b00      	cmp	r3, #0
 800862a:	f43f aec9 	beq.w	80083c0 <HAL_OSPIM_Config+0xbc>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800862e:	3b01      	subs	r3, #1
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 800863a:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8008644:	605a      	str	r2, [r3, #4]
 8008646:	e6bb      	b.n	80083c0 <HAL_OSPIM_Config+0xbc>
      if (IOM_cfg[instance].ClkPort != 0U)
 8008648:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800864c:	aa0c      	add	r2, sp, #48	@ 0x30
 800864e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008652:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8008656:	2b00      	cmp	r3, #0
 8008658:	f43f aeb2 	beq.w	80083c0 <HAL_OSPIM_Config+0xbc>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800865c:	3b01      	subs	r3, #1
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8008664:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 8008668:	685a      	ldr	r2, [r3, #4]
 800866a:	f022 0201 	bic.w	r2, r2, #1
 800866e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8008670:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8008674:	aa0c      	add	r2, sp, #48	@ 0x30
 8008676:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800867a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800867e:	b14b      	cbz	r3, 8008694 <HAL_OSPIM_Config+0x390>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8008680:	3b01      	subs	r3, #1
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8008688:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	f022 0210 	bic.w	r2, r2, #16
 8008692:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8008694:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8008698:	aa0c      	add	r2, sp, #48	@ 0x30
 800869a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800869e:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80086a2:	b15b      	cbz	r3, 80086bc <HAL_OSPIM_Config+0x3b8>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80086a4:	3b01      	subs	r3, #1
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80086b0:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80086ba:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80086bc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80086c0:	aa0c      	add	r2, sp, #48	@ 0x30
 80086c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086c6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f43f ae78 	beq.w	80083c0 <HAL_OSPIM_Config+0xbc>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80086d0:	3b01      	subs	r3, #1
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80086dc:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80086e6:	605a      	str	r2, [r3, #4]
 80086e8:	e66a      	b.n	80083c0 <HAL_OSPIM_Config+0xbc>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80086ea:	686c      	ldr	r4, [r5, #4]
 80086ec:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80086f0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80086f4:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
 80086f8:	f850 0c2c 	ldr.w	r0, [r0, #-44]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80086fc:	4284      	cmp	r4, r0
 80086fe:	f47f ae86 	bne.w	800840e <HAL_OSPIM_Config+0x10a>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8008702:	68ec      	ldr	r4, [r5, #12]
 8008704:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8008708:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
 800870c:	f850 0c24 	ldr.w	r0, [r0, #-36]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8008710:	4284      	cmp	r4, r0
 8008712:	f47f ae7c 	bne.w	800840e <HAL_OSPIM_Config+0x10a>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8008716:	692c      	ldr	r4, [r5, #16]
 8008718:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800871c:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
 8008720:	f850 0c20 	ldr.w	r0, [r0, #-32]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8008724:	4284      	cmp	r4, r0
 8008726:	f47f ae72 	bne.w	800840e <HAL_OSPIM_Config+0x10a>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800872a:	4a4c      	ldr	r2, [pc, #304]	@ (800885c <HAL_OSPIM_Config+0x558>)
 800872c:	6813      	ldr	r3, [r2, #0]
 800872e:	f043 0301 	orr.w	r3, r3, #1
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	e6bb      	b.n	80084ae <HAL_OSPIM_Config+0x1aa>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8008736:	2b00      	cmp	r3, #0
 8008738:	f43f af0d 	beq.w	8008556 <HAL_OSPIM_Config+0x252>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800873c:	3b01      	subs	r3, #1
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8008748:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 8008752:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8008756:	605a      	str	r2, [r3, #4]
 8008758:	e6fd      	b.n	8008556 <HAL_OSPIM_Config+0x252>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800875a:	2b00      	cmp	r3, #0
 800875c:	f43f af0e 	beq.w	800857c <HAL_OSPIM_Config+0x278>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8008760:	3b01      	subs	r3, #1
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 800876c:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 8008776:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800877a:	605a      	str	r2, [r3, #4]
 800877c:	e6fe      	b.n	800857c <HAL_OSPIM_Config+0x278>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800877e:	682b      	ldr	r3, [r5, #0]
 8008780:	3b01      	subs	r3, #1
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8008788:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	f022 0203 	bic.w	r2, r2, #3
 8008792:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 8008796:	f042 0201 	orr.w	r2, r2, #1
 800879a:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800879c:	686b      	ldr	r3, [r5, #4]
 800879e:	b16b      	cbz	r3, 80087bc <HAL_OSPIM_Config+0x4b8>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80087a0:	3b01      	subs	r3, #1
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80087a8:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 80087ac:	685a      	ldr	r2, [r3, #4]
 80087ae:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80087b2:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
 80087b6:	f042 0210 	orr.w	r2, r2, #16
 80087ba:	605a      	str	r2, [r3, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80087bc:	68eb      	ldr	r3, [r5, #12]
 80087be:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80087c2:	d024      	beq.n	800880e <HAL_OSPIM_Config+0x50a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80087c4:	3b01      	subs	r3, #1
 80087c6:	f003 0301 	and.w	r3, r3, #1
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80087d0:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 80087da:	ea42 4286 	orr.w	r2, r2, r6, lsl #18
 80087de:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80087e2:	605a      	str	r2, [r3, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80087e4:	692b      	ldr	r3, [r5, #16]
 80087e6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80087ea:	d023      	beq.n	8008834 <HAL_OSPIM_Config+0x530>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80087ec:	3b01      	subs	r3, #1
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80087f8:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 80087fc:	685a      	ldr	r2, [r3, #4]
 80087fe:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8008802:	ea42 4286 	orr.w	r2, r2, r6, lsl #18
 8008806:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800880a:	605a      	str	r2, [r3, #4]
 800880c:	e6b6      	b.n	800857c <HAL_OSPIM_Config+0x278>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800880e:	2b00      	cmp	r3, #0
 8008810:	d0e8      	beq.n	80087e4 <HAL_OSPIM_Config+0x4e0>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8008812:	3b01      	subs	r3, #1
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 800881e:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 8008828:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 800882c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8008830:	605a      	str	r2, [r3, #4]
 8008832:	e7d7      	b.n	80087e4 <HAL_OSPIM_Config+0x4e0>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008834:	2b00      	cmp	r3, #0
 8008836:	f43f aea1 	beq.w	800857c <HAL_OSPIM_Config+0x278>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800883a:	3b01      	subs	r3, #1
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8008846:	f503 2344 	add.w	r3, r3, #802816	@ 0xc4000
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 8008850:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8008854:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8008858:	605a      	str	r2, [r3, #4]
 800885a:	e68f      	b.n	800857c <HAL_OSPIM_Config+0x278>
 800885c:	420c4000 	.word	0x420c4000

08008860 <OSPI_WaitFlagStateUntilTimeout>:
{
 8008860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008864:	4605      	mov	r5, r0
 8008866:	460f      	mov	r7, r1
 8008868:	4616      	mov	r6, r2
 800886a:	4699      	mov	r9, r3
 800886c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8008870:	682c      	ldr	r4, [r5, #0]
 8008872:	6a24      	ldr	r4, [r4, #32]
 8008874:	423c      	tst	r4, r7
 8008876:	bf14      	ite	ne
 8008878:	f04f 0c01 	movne.w	ip, #1
 800887c:	f04f 0c00 	moveq.w	ip, #0
 8008880:	45b4      	cmp	ip, r6
 8008882:	d019      	beq.n	80088b8 <OSPI_WaitFlagStateUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 8008884:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008888:	d0f2      	beq.n	8008870 <OSPI_WaitFlagStateUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800888a:	f7fb ff2b 	bl	80046e4 <HAL_GetTick>
 800888e:	eba0 0009 	sub.w	r0, r0, r9
 8008892:	4540      	cmp	r0, r8
 8008894:	d802      	bhi.n	800889c <OSPI_WaitFlagStateUntilTimeout+0x3c>
 8008896:	f1b8 0f00 	cmp.w	r8, #0
 800889a:	d1e9      	bne.n	8008870 <OSPI_WaitFlagStateUntilTimeout+0x10>
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 800889c:	682b      	ldr	r3, [r5, #0]
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	403b      	ands	r3, r7
 80088a2:	42b3      	cmp	r3, r6
 80088a4:	d0e4      	beq.n	8008870 <OSPI_WaitFlagStateUntilTimeout+0x10>
          hospi->State     = HAL_OSPI_STATE_ERROR;
 80088a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088aa:	652b      	str	r3, [r5, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80088ac:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80088ae:	f043 0301 	orr.w	r3, r3, #1
 80088b2:	656b      	str	r3, [r5, #84]	@ 0x54
          return HAL_ERROR;
 80088b4:	2001      	movs	r0, #1
 80088b6:	e000      	b.n	80088ba <OSPI_WaitFlagStateUntilTimeout+0x5a>
  return HAL_OK;
 80088b8:	2000      	movs	r0, #0
}
 80088ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080088c0 <HAL_OSPI_Init>:
{
 80088c0:	b530      	push	{r4, r5, lr}
 80088c2:	b083      	sub	sp, #12
 80088c4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80088c6:	f7fb ff0d 	bl	80046e4 <HAL_GetTick>
  if (hospi == NULL)
 80088ca:	2c00      	cmp	r4, #0
 80088cc:	d077      	beq.n	80089be <HAL_OSPI_Init+0xfe>
 80088ce:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80088d0:	2300      	movs	r3, #0
 80088d2:	6563      	str	r3, [r4, #84]	@ 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80088d4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80088d6:	b113      	cbz	r3, 80088de <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 80088d8:	2000      	movs	r0, #0
}
 80088da:	b003      	add	sp, #12
 80088dc:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 80088de:	4620      	mov	r0, r4
 80088e0:	f7fa ff00 	bl	80036e4 <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80088e4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80088e8:	4620      	mov	r0, r4
 80088ea:	f7ff fd08 	bl	80082fe <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 80088ee:	6820      	ldr	r0, [r4, #0]
 80088f0:	6882      	ldr	r2, [r0, #8]
 80088f2:	4b34      	ldr	r3, [pc, #208]	@ (80089c4 <HAL_OSPI_Init+0x104>)
 80088f4:	4013      	ands	r3, r2
 80088f6:	68e2      	ldr	r2, [r4, #12]
 80088f8:	6921      	ldr	r1, [r4, #16]
 80088fa:	3901      	subs	r1, #1
 80088fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008900:	6961      	ldr	r1, [r4, #20]
 8008902:	3901      	subs	r1, #1
 8008904:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800890a:	430a      	orrs	r2, r1
 800890c:	69e1      	ldr	r1, [r4, #28]
 800890e:	430a      	orrs	r2, r1
 8008910:	4313      	orrs	r3, r2
 8008912:	6083      	str	r3, [r0, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8008914:	6822      	ldr	r2, [r4, #0]
 8008916:	68d3      	ldr	r3, [r2, #12]
 8008918:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800891c:	6a21      	ldr	r1, [r4, #32]
 800891e:	430b      	orrs	r3, r1
 8008920:	60d3      	str	r3, [r2, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8008922:	6b21      	ldr	r1, [r4, #48]	@ 0x30
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8008924:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8008926:	6822      	ldr	r2, [r4, #0]
 8008928:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800892c:	6113      	str	r3, [r2, #16]
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8008932:	615a      	str	r2, [r3, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8008934:	6821      	ldr	r1, [r4, #0]
 8008936:	680b      	ldr	r3, [r1, #0]
 8008938:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800893c:	6862      	ldr	r2, [r4, #4]
 800893e:	3a01      	subs	r2, #1
 8008940:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008944:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8008946:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	462b      	mov	r3, r5
 800894c:	2200      	movs	r2, #0
 800894e:	2120      	movs	r1, #32
 8008950:	4620      	mov	r0, r4
 8008952:	f7ff ff85 	bl	8008860 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8008956:	2800      	cmp	r0, #0
 8008958:	d1bf      	bne.n	80088da <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800895a:	6821      	ldr	r1, [r4, #0]
 800895c:	68cb      	ldr	r3, [r1, #12]
 800895e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008962:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008964:	3a01      	subs	r2, #1
 8008966:	4313      	orrs	r3, r2
 8008968:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 800896a:	6822      	ldr	r2, [r4, #0]
 800896c:	6813      	ldr	r3, [r2, #0]
 800896e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008972:	68a1      	ldr	r1, [r4, #8]
 8008974:	430b      	orrs	r3, r1
 8008976:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8008978:	6821      	ldr	r1, [r4, #0]
 800897a:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
 800897e:	f023 43a0 	bic.w	r3, r3, #1342177280	@ 0x50000000
 8008982:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008984:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8008986:	432a      	orrs	r2, r5
 8008988:	4313      	orrs	r3, r2
 800898a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
        __HAL_OSPI_ENABLE(hospi);
 800898e:	6822      	ldr	r2, [r4, #0]
 8008990:	6813      	ldr	r3, [r2, #0]
 8008992:	f043 0301 	orr.w	r3, r3, #1
 8008996:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8008998:	69a3      	ldr	r3, [r4, #24]
 800899a:	2b02      	cmp	r3, #2
 800899c:	d006      	beq.n	80089ac <HAL_OSPI_Init+0xec>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800899e:	68e3      	ldr	r3, [r4, #12]
 80089a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089a4:	d008      	beq.n	80089b8 <HAL_OSPI_Init+0xf8>
          hospi->State = HAL_OSPI_STATE_READY;
 80089a6:	2302      	movs	r3, #2
 80089a8:	6523      	str	r3, [r4, #80]	@ 0x50
 80089aa:	e796      	b.n	80088da <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80089ac:	6822      	ldr	r2, [r4, #0]
 80089ae:	6893      	ldr	r3, [r2, #8]
 80089b0:	f043 0302 	orr.w	r3, r3, #2
 80089b4:	6093      	str	r3, [r2, #8]
 80089b6:	e7f2      	b.n	800899e <HAL_OSPI_Init+0xde>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80089b8:	2301      	movs	r3, #1
 80089ba:	6523      	str	r3, [r4, #80]	@ 0x50
 80089bc:	e78d      	b.n	80088da <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 80089be:	2001      	movs	r0, #1
 80089c0:	e78b      	b.n	80088da <HAL_OSPI_Init+0x1a>
 80089c2:	bf00      	nop
 80089c4:	f8e0c0f4 	.word	0xf8e0c0f4

080089c8 <HAL_OSPI_Command>:
{
 80089c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	4604      	mov	r4, r0
 80089d0:	4688      	mov	r8, r1
 80089d2:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80089d4:	f7fb fe86 	bl	80046e4 <HAL_GetTick>
 80089d8:	4606      	mov	r6, r0
  state = hospi->State;
 80089da:	6d25      	ldr	r5, [r4, #80]	@ 0x50
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80089dc:	2d02      	cmp	r5, #2
 80089de:	d009      	beq.n	80089f4 <HAL_OSPI_Command+0x2c>
 80089e0:	2d14      	cmp	r5, #20
 80089e2:	d024      	beq.n	8008a2e <HAL_OSPI_Command+0x66>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80089e4:	2d24      	cmp	r5, #36	@ 0x24
 80089e6:	d028      	beq.n	8008a3a <HAL_OSPI_Command+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80089e8:	2310      	movs	r3, #16
 80089ea:	6563      	str	r3, [r4, #84]	@ 0x54
    status = HAL_ERROR;
 80089ec:	2001      	movs	r0, #1
}
 80089ee:	b002      	add	sp, #8
 80089f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80089f4:	68e3      	ldr	r3, [r4, #12]
 80089f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089fa:	d0f1      	beq.n	80089e0 <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80089fc:	9700      	str	r7, [sp, #0]
 80089fe:	4633      	mov	r3, r6
 8008a00:	2200      	movs	r2, #0
 8008a02:	2120      	movs	r1, #32
 8008a04:	4620      	mov	r0, r4
 8008a06:	f7ff ff2b 	bl	8008860 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	d1ef      	bne.n	80089ee <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8008a0e:	6560      	str	r0, [r4, #84]	@ 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 8008a10:	4641      	mov	r1, r8
 8008a12:	4620      	mov	r0, r4
 8008a14:	f7ff f80c 	bl	8007a30 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d1e8      	bne.n	80089ee <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8008a1c:	f8d8 3038 	ldr.w	r3, [r8, #56]	@ 0x38
 8008a20:	b193      	cbz	r3, 8008a48 <HAL_OSPI_Command+0x80>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8008a22:	f8d8 3000 	ldr.w	r3, [r8]
 8008a26:	b9d3      	cbnz	r3, 8008a5e <HAL_OSPI_Command+0x96>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008a28:	2304      	movs	r3, #4
 8008a2a:	6523      	str	r3, [r4, #80]	@ 0x50
 8008a2c:	e7df      	b.n	80089ee <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8008a2e:	f8d8 3000 	ldr.w	r3, [r8]
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8008a32:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d8d5      	bhi.n	80089e4 <HAL_OSPI_Command+0x1c>
 8008a38:	e7e0      	b.n	80089fc <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8008a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d0dc      	beq.n	80089fc <HAL_OSPI_Command+0x34>
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d1d0      	bne.n	80089e8 <HAL_OSPI_Command+0x20>
 8008a46:	e7d9      	b.n	80089fc <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8008a48:	9700      	str	r7, [sp, #0]
 8008a4a:	4633      	mov	r3, r6
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	2102      	movs	r1, #2
 8008a50:	4620      	mov	r0, r4
 8008a52:	f7ff ff05 	bl	8008860 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	2202      	movs	r2, #2
 8008a5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8008a5c:	e7c7      	b.n	80089ee <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d007      	beq.n	8008a72 <HAL_OSPI_Command+0xaa>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d1c3      	bne.n	80089ee <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8008a66:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008a68:	2b14      	cmp	r3, #20
 8008a6a:	d00b      	beq.n	8008a84 <HAL_OSPI_Command+0xbc>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8008a6c:	2324      	movs	r3, #36	@ 0x24
 8008a6e:	6523      	str	r3, [r4, #80]	@ 0x50
 8008a70:	e7bd      	b.n	80089ee <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8008a72:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008a74:	2b24      	cmp	r3, #36	@ 0x24
 8008a76:	d002      	beq.n	8008a7e <HAL_OSPI_Command+0xb6>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8008a78:	2314      	movs	r3, #20
 8008a7a:	6523      	str	r3, [r4, #80]	@ 0x50
 8008a7c:	e7b7      	b.n	80089ee <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008a7e:	2304      	movs	r3, #4
 8008a80:	6523      	str	r3, [r4, #80]	@ 0x50
 8008a82:	e7b4      	b.n	80089ee <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008a84:	2304      	movs	r3, #4
 8008a86:	6523      	str	r3, [r4, #80]	@ 0x50
 8008a88:	e7b1      	b.n	80089ee <HAL_OSPI_Command+0x26>

08008a8a <HAL_OSPI_Abort>:
{
 8008a8a:	b530      	push	{r4, r5, lr}
 8008a8c:	b083      	sub	sp, #12
 8008a8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008a90:	f7fb fe28 	bl	80046e4 <HAL_GetTick>
  state = hospi->State;
 8008a94:	6d22      	ldr	r2, [r4, #80]	@ 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8008a96:	f012 0f0c 	tst.w	r2, #12
 8008a9a:	d036      	beq.n	8008b0a <HAL_OSPI_Abort+0x80>
 8008a9c:	4605      	mov	r5, r0
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8008a9e:	6823      	ldr	r3, [r4, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	f012 0f04 	tst.w	r2, #4
 8008aa6:	d108      	bne.n	8008aba <HAL_OSPI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 8008aa8:	2000      	movs	r0, #0
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	6a1a      	ldr	r2, [r3, #32]
 8008aae:	f012 0f20 	tst.w	r2, #32
 8008ab2:	d10e      	bne.n	8008ad2 <HAL_OSPI_Abort+0x48>
      hospi->State = HAL_OSPI_STATE_READY;
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	6523      	str	r3, [r4, #80]	@ 0x50
 8008ab8:	e02a      	b.n	8008b10 <HAL_OSPI_Abort+0x86>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	f022 0204 	bic.w	r2, r2, #4
 8008ac0:	601a      	str	r2, [r3, #0]
      status = HAL_DMA_Abort(hospi->hdma);
 8008ac2:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8008ac4:	f7fd fc43 	bl	800634e <HAL_DMA_Abort>
      if (status != HAL_OK)
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d0ee      	beq.n	8008aaa <HAL_OSPI_Abort+0x20>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8008acc:	2304      	movs	r3, #4
 8008ace:	6563      	str	r3, [r4, #84]	@ 0x54
 8008ad0:	e7eb      	b.n	8008aaa <HAL_OSPI_Abort+0x20>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	f042 0202 	orr.w	r2, r2, #2
 8008ad8:	601a      	str	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8008ada:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	462b      	mov	r3, r5
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	2102      	movs	r1, #2
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f7ff febb 	bl	8008860 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8008aea:	b988      	cbnz	r0, 8008b10 <HAL_OSPI_Abort+0x86>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	2202      	movs	r2, #2
 8008af0:	625a      	str	r2, [r3, #36]	@ 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8008af2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	462b      	mov	r3, r5
 8008af8:	2200      	movs	r2, #0
 8008afa:	2120      	movs	r1, #32
 8008afc:	4620      	mov	r0, r4
 8008afe:	f7ff feaf 	bl	8008860 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8008b02:	b928      	cbnz	r0, 8008b10 <HAL_OSPI_Abort+0x86>
          hospi->State = HAL_OSPI_STATE_READY;
 8008b04:	2302      	movs	r3, #2
 8008b06:	6523      	str	r3, [r4, #80]	@ 0x50
 8008b08:	e002      	b.n	8008b10 <HAL_OSPI_Abort+0x86>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008b0a:	2310      	movs	r3, #16
 8008b0c:	6563      	str	r3, [r4, #84]	@ 0x54
    status = HAL_ERROR;
 8008b0e:	2001      	movs	r0, #1
}
 8008b10:	b003      	add	sp, #12
 8008b12:	bd30      	pop	{r4, r5, pc}

08008b14 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8008b18:	6802      	ldr	r2, [r0, #0]
 8008b1a:	6893      	ldr	r3, [r2, #8]
 8008b1c:	f043 0302 	orr.w	r3, r3, #2
 8008b20:	6093      	str	r3, [r2, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8008b22:	2308      	movs	r3, #8
 8008b24:	6503      	str	r3, [r0, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8008b26:	6803      	ldr	r3, [r0, #0]
 8008b28:	4a11      	ldr	r2, [pc, #68]	@ (8008b70 <HAL_OSPI_DLYB_SetConfig+0x5c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00d      	beq.n	8008b4a <HAL_OSPI_DLYB_SetConfig+0x36>
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
    status = HAL_OK;
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8008b2e:	4a11      	ldr	r2, [pc, #68]	@ (8008b74 <HAL_OSPI_DLYB_SetConfig+0x60>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d013      	beq.n	8008b5c <HAL_OSPI_DLYB_SetConfig+0x48>
  HAL_StatusTypeDef status = HAL_ERROR;
 8008b34:	2501      	movs	r5, #1
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8008b36:	4620      	mov	r0, r4
 8008b38:	f7ff ffa7 	bl	8008a8a <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8008b3c:	6822      	ldr	r2, [r4, #0]
 8008b3e:	6893      	ldr	r3, [r2, #8]
 8008b40:	f023 0302 	bic.w	r3, r3, #2
 8008b44:	6093      	str	r3, [r2, #8]

  /* Return function status */
  return status;
}
 8008b46:	4628      	mov	r0, r5
 8008b48:	bd38      	pop	{r3, r4, r5, pc}
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8008b4a:	480b      	ldr	r0, [pc, #44]	@ (8008b78 <HAL_OSPI_DLYB_SetConfig+0x64>)
 8008b4c:	6803      	ldr	r3, [r0, #0]
 8008b4e:	f043 0301 	orr.w	r3, r3, #1
 8008b52:	6003      	str	r3, [r0, #0]
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8008b54:	f006 f8a5 	bl	800eca2 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8008b58:	2500      	movs	r5, #0
 8008b5a:	e7ec      	b.n	8008b36 <HAL_OSPI_DLYB_SetConfig+0x22>
 8008b5c:	4807      	ldr	r0, [pc, #28]	@ (8008b7c <HAL_OSPI_DLYB_SetConfig+0x68>)
 8008b5e:	6803      	ldr	r3, [r0, #0]
 8008b60:	f043 0301 	orr.w	r3, r3, #1
 8008b64:	6003      	str	r3, [r0, #0]
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8008b66:	f006 f89c 	bl	800eca2 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8008b6a:	2500      	movs	r5, #0
 8008b6c:	e7e3      	b.n	8008b36 <HAL_OSPI_DLYB_SetConfig+0x22>
 8008b6e:	bf00      	nop
 8008b70:	420d1400 	.word	0x420d1400
 8008b74:	420d2400 	.word	0x420d2400
 8008b78:	420cf000 	.word	0x420cf000
 8008b7c:	420cf400 	.word	0x420cf400

08008b80 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b84:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b86:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8008b8a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8008b8e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008b92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d854      	bhi.n	8008c44 <PCD_WriteEmptyTxFifo+0xc4>
 8008b9a:	4607      	mov	r7, r0
 8008b9c:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8008b9e:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8008ba0:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8008ba4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008ba8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d300      	bcc.n	8008bb0 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8008bae:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8008bb0:	f102 0903 	add.w	r9, r2, #3
 8008bb4:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008bb8:	e015      	b.n	8008be6 <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8008bba:	f106 0903 	add.w	r9, r6, #3
 8008bbe:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008bc2:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8008bc6:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008bca:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8008bcc:	7b3b      	ldrb	r3, [r7, #12]
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	b2b3      	uxth	r3, r6
 8008bd2:	b2e2      	uxtb	r2, r4
 8008bd4:	4640      	mov	r0, r8
 8008bd6:	f006 fbc4 	bl	800f362 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8008bda:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8008bdc:	4433      	add	r3, r6
 8008bde:	64ab      	str	r3, [r5, #72]	@ 0x48
    ep->xfer_count += len;
 8008be0:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8008be2:	4433      	add	r3, r6
 8008be4:	652b      	str	r3, [r5, #80]	@ 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008be6:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8008bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008bf2:	454b      	cmp	r3, r9
 8008bf4:	d312      	bcc.n	8008c1c <PCD_WriteEmptyTxFifo+0x9c>
 8008bf6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8008bfa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008bfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d20a      	bcs.n	8008c1c <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008c06:	b14b      	cbz	r3, 8008c1c <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8008c08:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8008c0a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8008c0e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8008c12:	6c56      	ldr	r6, [r2, #68]	@ 0x44
 8008c14:	429e      	cmp	r6, r3
 8008c16:	d3d0      	bcc.n	8008bba <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8008c18:	461e      	mov	r6, r3
 8008c1a:	e7ce      	b.n	8008bba <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008c1c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8008c20:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8008c24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d80f      	bhi.n	8008c4c <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008c2c:	f004 040f 	and.w	r4, r4, #15
 8008c30:	2201      	movs	r2, #1
 8008c32:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008c34:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 8008c38:	ea23 0302 	bic.w	r3, r3, r2
 8008c3c:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 8008c40:	2000      	movs	r0, #0
 8008c42:	e000      	b.n	8008c46 <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 8008c44:	2001      	movs	r0, #1
}
 8008c46:	b003      	add	sp, #12
 8008c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	e7fa      	b.n	8008c46 <PCD_WriteEmptyTxFifo+0xc6>

08008c50 <HAL_PCD_Init>:
{
 8008c50:	b570      	push	{r4, r5, r6, lr}
 8008c52:	b08a      	sub	sp, #40	@ 0x28
  if (hpcd == NULL)
 8008c54:	2800      	cmp	r0, #0
 8008c56:	f000 8090 	beq.w	8008d7a <HAL_PCD_Init+0x12a>
 8008c5a:	4605      	mov	r5, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008c5c:	f890 34bd 	ldrb.w	r3, [r0, #1213]	@ 0x4bd
 8008c60:	b30b      	cbz	r3, 8008ca6 <HAL_PCD_Init+0x56>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8008c62:	2303      	movs	r3, #3
 8008c64:	f885 34bd 	strb.w	r3, [r5, #1213]	@ 0x4bd
  __HAL_PCD_DISABLE(hpcd);
 8008c68:	6828      	ldr	r0, [r5, #0]
 8008c6a:	f006 f925 	bl	800eeb8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008c6e:	462c      	mov	r4, r5
 8008c70:	f854 6b10 	ldr.w	r6, [r4], #16
 8008c74:	46ec      	mov	ip, sp
 8008c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008c82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008c86:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008c8a:	1d2b      	adds	r3, r5, #4
 8008c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c8e:	4630      	mov	r0, r6
 8008c90:	f006 f878 	bl	800ed84 <USB_CoreInit>
 8008c94:	4604      	mov	r4, r0
 8008c96:	b158      	cbz	r0, 8008cb0 <HAL_PCD_Init+0x60>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c98:	2302      	movs	r3, #2
 8008c9a:	f885 34bd 	strb.w	r3, [r5, #1213]	@ 0x4bd
    return HAL_ERROR;
 8008c9e:	2401      	movs	r4, #1
}
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	b00a      	add	sp, #40	@ 0x28
 8008ca4:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8008ca6:	f880 34bc 	strb.w	r3, [r0, #1212]	@ 0x4bc
    HAL_PCD_MspInit(hpcd);
 8008caa:	f7fa ffd9 	bl	8003c60 <HAL_PCD_MspInit>
 8008cae:	e7d8      	b.n	8008c62 <HAL_PCD_Init+0x12>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	6828      	ldr	r0, [r5, #0]
 8008cb4:	f006 fd6b 	bl	800f78e <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cb8:	4623      	mov	r3, r4
 8008cba:	e016      	b.n	8008cea <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 8008cbc:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8008cc0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
    hpcd->IN_ep[i].num = i;
 8008cca:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008cce:	f8a2 3056 	strh.w	r3, [r2, #86]	@ 0x56
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	f882 1040 	strb.w	r1, [r2, #64]	@ 0x40
    hpcd->IN_ep[i].maxpacket = 0U;
 8008cd8:	6451      	str	r1, [r2, #68]	@ 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008cda:	6491      	str	r1, [r2, #72]	@ 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8008cdc:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8008ce0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8008ce4:	64d1      	str	r1, [r2, #76]	@ 0x4c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	6869      	ldr	r1, [r5, #4]
 8008cec:	428b      	cmp	r3, r1
 8008cee:	d3e5      	bcc.n	8008cbc <HAL_PCD_Init+0x6c>
 8008cf0:	e016      	b.n	8008d20 <HAL_PCD_Init+0xd0>
    hpcd->OUT_ep[i].is_in = 0U;
 8008cf2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8008cf6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 227d 	strb.w	r2, [r3, #637]	@ 0x27d
    hpcd->OUT_ep[i].num = i;
 8008d00:	f883 427c 	strb.w	r4, [r3, #636]	@ 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008d04:	f883 2280 	strb.w	r2, [r3, #640]	@ 0x280
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008d08:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008d0c:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008d10:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8008d14:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008d18:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d1c:	3401      	adds	r4, #1
 8008d1e:	b2e4      	uxtb	r4, r4
 8008d20:	42a1      	cmp	r1, r4
 8008d22:	d8e6      	bhi.n	8008cf2 <HAL_PCD_Init+0xa2>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008d24:	462c      	mov	r4, r5
 8008d26:	f854 6b10 	ldr.w	r6, [r4], #16
 8008d2a:	46ec      	mov	ip, sp
 8008d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008d38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008d3c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008d40:	1d2b      	adds	r3, r5, #4
 8008d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d44:	4630      	mov	r0, r6
 8008d46:	f006 f913 	bl	800ef70 <USB_DevInit>
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	b960      	cbnz	r0, 8008d68 <HAL_PCD_Init+0x118>
  hpcd->USB_Address = 0U;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008d54:	2301      	movs	r3, #1
 8008d56:	f885 34bd 	strb.w	r3, [r5, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 8008d5a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d008      	beq.n	8008d72 <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 8008d60:	6828      	ldr	r0, [r5, #0]
 8008d62:	f006 fcd3 	bl	800f70c <USB_DevDisconnect>
  return HAL_OK;
 8008d66:	e79b      	b.n	8008ca0 <HAL_PCD_Init+0x50>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d68:	2302      	movs	r3, #2
 8008d6a:	f885 34bd 	strb.w	r3, [r5, #1213]	@ 0x4bd
    return HAL_ERROR;
 8008d6e:	2401      	movs	r4, #1
 8008d70:	e796      	b.n	8008ca0 <HAL_PCD_Init+0x50>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008d72:	4628      	mov	r0, r5
 8008d74:	f000 fda5 	bl	80098c2 <HAL_PCDEx_ActivateLPM>
 8008d78:	e7f2      	b.n	8008d60 <HAL_PCD_Init+0x110>
    return HAL_ERROR;
 8008d7a:	2401      	movs	r4, #1
 8008d7c:	e790      	b.n	8008ca0 <HAL_PCD_Init+0x50>

08008d7e <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8008d7e:	f890 34bc 	ldrb.w	r3, [r0, #1212]	@ 0x4bc
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d00e      	beq.n	8008da4 <HAL_PCD_Start+0x26>
{
 8008d86:	b510      	push	{r4, lr}
 8008d88:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	f880 34bc 	strb.w	r3, [r0, #1212]	@ 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8008d90:	6800      	ldr	r0, [r0, #0]
 8008d92:	f006 f88b 	bl	800eeac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008d96:	6820      	ldr	r0, [r4, #0]
 8008d98:	f006 fcaa 	bl	800f6f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc
}
 8008da2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008da4:	2002      	movs	r0, #2
}
 8008da6:	4770      	bx	lr

08008da8 <HAL_PCD_Stop>:
  __HAL_LOCK(hpcd);
 8008da8:	f890 34bc 	ldrb.w	r3, [r0, #1212]	@ 0x4bc
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d012      	beq.n	8008dd6 <HAL_PCD_Stop+0x2e>
{
 8008db0:	b510      	push	{r4, lr}
 8008db2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8008db4:	2301      	movs	r3, #1
 8008db6:	f880 34bc 	strb.w	r3, [r0, #1212]	@ 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8008dba:	6800      	ldr	r0, [r0, #0]
 8008dbc:	f006 f87c 	bl	800eeb8 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8008dc0:	6820      	ldr	r0, [r4, #0]
 8008dc2:	f006 fca3 	bl	800f70c <USB_DevDisconnect>
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008dc6:	2110      	movs	r1, #16
 8008dc8:	6820      	ldr	r0, [r4, #0]
 8008dca:	f006 f87b 	bl	800eec4 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
 8008dce:	2000      	movs	r0, #0
 8008dd0:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc
}
 8008dd4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008dd6:	2002      	movs	r0, #2
}
 8008dd8:	4770      	bx	lr
	...

08008ddc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	4604      	mov	r4, r0
 8008de0:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008de2:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008de4:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008de6:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8008dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dee:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008df0:	68e1      	ldr	r1, [r4, #12]
 8008df2:	2901      	cmp	r1, #1
 8008df4:	d011      	beq.n	8008e1a <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008df6:	4938      	ldr	r1, [pc, #224]	@ (8008ed8 <PCD_EP_OutXfrComplete_int+0xfc>)
 8008df8:	428e      	cmp	r6, r1
 8008dfa:	d056      	beq.n	8008eaa <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008dfc:	b93d      	cbnz	r5, 8008e0e <PCD_EP_OutXfrComplete_int+0x32>
 8008dfe:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8008e02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e06:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d05e      	beq.n	8008ecc <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008e0e:	b2e9      	uxtb	r1, r5
 8008e10:	4620      	mov	r0, r4
 8008e12:	f00b fafb 	bl	801440c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8008e16:	2000      	movs	r0, #0
 8008e18:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008e1a:	f012 0f08 	tst.w	r2, #8
 8008e1e:	d009      	beq.n	8008e34 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e20:	492e      	ldr	r1, [pc, #184]	@ (8008edc <PCD_EP_OutXfrComplete_int+0x100>)
 8008e22:	428e      	cmp	r6, r1
 8008e24:	d9f7      	bls.n	8008e16 <PCD_EP_OutXfrComplete_int+0x3a>
 8008e26:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8008e2a:	d0f4      	beq.n	8008e16 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e2c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008e30:	609a      	str	r2, [r3, #8]
 8008e32:	e7f0      	b.n	8008e16 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008e34:	f012 0f20 	tst.w	r2, #32
 8008e38:	d002      	beq.n	8008e40 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	609a      	str	r2, [r3, #8]
 8008e3e:	e7ea      	b.n	8008e16 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008e40:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8008e44:	d1e7      	bne.n	8008e16 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e46:	4925      	ldr	r1, [pc, #148]	@ (8008edc <PCD_EP_OutXfrComplete_int+0x100>)
 8008e48:	428e      	cmp	r6, r1
 8008e4a:	d906      	bls.n	8008e5a <PCD_EP_OutXfrComplete_int+0x7e>
 8008e4c:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8008e50:	d003      	beq.n	8008e5a <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e52:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008e56:	609a      	str	r2, [r3, #8]
 8008e58:	e7dd      	b.n	8008e16 <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e5a:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8008e5e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008e62:	f8d2 129c 	ldr.w	r1, [r2, #668]	@ 0x29c
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e6c:	1acb      	subs	r3, r1, r3
 8008e6e:	f8c2 3290 	str.w	r3, [r2, #656]	@ 0x290
        if (epnum == 0U)
 8008e72:	b97d      	cbnz	r5, 8008e94 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 8008e74:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8008e78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008e7c:	f8d2 228c 	ldr.w	r2, [r2, #652]	@ 0x28c
 8008e80:	b16a      	cbz	r2, 8008e9e <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 8008e82:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8008e86:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008e8a:	f8d2 1288 	ldr.w	r1, [r2, #648]	@ 0x288
 8008e8e:	4419      	add	r1, r3
 8008e90:	f8c2 1288 	str.w	r1, [r2, #648]	@ 0x288
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008e94:	b2e9      	uxtb	r1, r5
 8008e96:	4620      	mov	r0, r4
 8008e98:	f00b fab8 	bl	801440c <HAL_PCD_DataOutStageCallback>
 8008e9c:	e7bb      	b.n	8008e16 <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008e9e:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	f006 fcb4 	bl	800f810 <USB_EP0_OutStart>
 8008ea8:	e7f4      	b.n	8008e94 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008eaa:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8008eae:	d003      	beq.n	8008eb8 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008eb0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008eb4:	609a      	str	r2, [r3, #8]
 8008eb6:	e7ae      	b.n	8008e16 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008eb8:	f012 0f20 	tst.w	r2, #32
 8008ebc:	d001      	beq.n	8008ec2 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008ec2:	b2e9      	uxtb	r1, r5
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f00b faa1 	bl	801440c <HAL_PCD_DataOutStageCallback>
 8008eca:	e7a4      	b.n	8008e16 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008ecc:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	f006 fc9d 	bl	800f810 <USB_EP0_OutStart>
 8008ed6:	e79a      	b.n	8008e0e <PCD_EP_OutXfrComplete_int+0x32>
 8008ed8:	4f54310a 	.word	0x4f54310a
 8008edc:	4f54300a 	.word	0x4f54300a

08008ee0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ee4:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ee6:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008ee8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008eec:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8008f2c <PCD_EP_OutSetupPacket_int+0x4c>)
 8008ef2:	4295      	cmp	r5, r2
 8008ef4:	d907      	bls.n	8008f06 <PCD_EP_OutSetupPacket_int+0x26>
 8008ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008efa:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8008efe:	d002      	beq.n	8008f06 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008f04:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008f06:	4620      	mov	r0, r4
 8008f08:	f00b f9ba 	bl	8014280 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008f0c:	4b07      	ldr	r3, [pc, #28]	@ (8008f2c <PCD_EP_OutSetupPacket_int+0x4c>)
 8008f0e:	429d      	cmp	r5, r3
 8008f10:	d902      	bls.n	8008f18 <PCD_EP_OutSetupPacket_int+0x38>
 8008f12:	68e3      	ldr	r3, [r4, #12]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d001      	beq.n	8008f1c <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8008f18:	2000      	movs	r0, #0
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008f1c:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 8008f20:	2101      	movs	r1, #1
 8008f22:	6820      	ldr	r0, [r4, #0]
 8008f24:	f006 fc74 	bl	800f810 <USB_EP0_OutStart>
 8008f28:	e7f6      	b.n	8008f18 <PCD_EP_OutSetupPacket_int+0x38>
 8008f2a:	bf00      	nop
 8008f2c:	4f54300a 	.word	0x4f54300a

08008f30 <HAL_PCD_ISOOUTIncompleteCallback>:
}
 8008f30:	4770      	bx	lr

08008f32 <HAL_PCD_ISOINIncompleteCallback>:
}
 8008f32:	4770      	bx	lr

08008f34 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8008f34:	f890 34bc 	ldrb.w	r3, [r0, #1212]	@ 0x4bc
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d00d      	beq.n	8008f58 <HAL_PCD_SetAddress+0x24>
{
 8008f3c:	b510      	push	{r4, lr}
 8008f3e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8008f40:	2301      	movs	r3, #1
 8008f42:	f880 34bc 	strb.w	r3, [r0, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8008f46:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f4a:	6800      	ldr	r0, [r0, #0]
 8008f4c:	f006 fbc0 	bl	800f6d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f50:	2000      	movs	r0, #0
 8008f52:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc
}
 8008f56:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008f58:	2002      	movs	r0, #2
}
 8008f5a:	4770      	bx	lr

08008f5c <HAL_PCD_EP_Open>:
{
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	4605      	mov	r5, r0
 8008f60:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8008f62:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8008f66:	d129      	bne.n	8008fbc <HAL_PCD_EP_Open+0x60>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f68:	f001 0e0f 	and.w	lr, r1, #15
 8008f6c:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8008f70:	00a4      	lsls	r4, r4, #2
 8008f72:	f504 741e 	add.w	r4, r4, #632	@ 0x278
 8008f76:	4404      	add	r4, r0
 8008f78:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8008f7a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8008f7e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8008f82:	2000      	movs	r0, #0
 8008f84:	f88e 027d 	strb.w	r0, [lr, #637]	@ 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f88:	f00c 0c0f 	and.w	ip, ip, #15
 8008f8c:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8008f90:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8008f92:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8008f94:	784a      	ldrb	r2, [r1, #1]
 8008f96:	b10a      	cbz	r2, 8008f9c <HAL_PCD_EP_Open+0x40>
    ep->tx_fifo_num = ep->num;
 8008f98:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d01d      	beq.n	8008fdc <HAL_PCD_EP_Open+0x80>
  __HAL_LOCK(hpcd);
 8008fa0:	f895 34bc 	ldrb.w	r3, [r5, #1212]	@ 0x4bc
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d01c      	beq.n	8008fe2 <HAL_PCD_EP_Open+0x86>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	f885 34bc 	strb.w	r3, [r5, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008fae:	6828      	ldr	r0, [r5, #0]
 8008fb0:	f006 f8bb 	bl	800f12a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	f885 04bc 	strb.w	r0, [r5, #1212]	@ 0x4bc
}
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fbc:	f001 000f 	and.w	r0, r1, #15
 8008fc0:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8008fc4:	0089      	lsls	r1, r1, #2
 8008fc6:	3138      	adds	r1, #56	@ 0x38
 8008fc8:	4429      	add	r1, r5
 8008fca:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8008fcc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8008fd0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8008fd4:	2401      	movs	r4, #1
 8008fd6:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
 8008fda:	e7d5      	b.n	8008f88 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	714b      	strb	r3, [r1, #5]
 8008fe0:	e7de      	b.n	8008fa0 <HAL_PCD_EP_Open+0x44>
  __HAL_LOCK(hpcd);
 8008fe2:	2002      	movs	r0, #2
 8008fe4:	e7e9      	b.n	8008fba <HAL_PCD_EP_Open+0x5e>

08008fe6 <HAL_PCD_EP_Close>:
{
 8008fe6:	b510      	push	{r4, lr}
 8008fe8:	4604      	mov	r4, r0
 8008fea:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8008fec:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8008ff0:	d120      	bne.n	8009034 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ff2:	f001 000f 	and.w	r0, r1, #15
 8008ff6:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8009000:	4423      	add	r3, r4
 8009002:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8009004:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8009008:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800900c:	2300      	movs	r3, #0
 800900e:	f880 327d 	strb.w	r3, [r0, #637]	@ 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 8009012:	f002 020f 	and.w	r2, r2, #15
 8009016:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8009018:	f894 34bc 	ldrb.w	r3, [r4, #1212]	@ 0x4bc
 800901c:	2b01      	cmp	r3, #1
 800901e:	d019      	beq.n	8009054 <HAL_PCD_EP_Close+0x6e>
 8009020:	2301      	movs	r3, #1
 8009022:	f884 34bc 	strb.w	r3, [r4, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009026:	6820      	ldr	r0, [r4, #0]
 8009028:	f006 f8cc 	bl	800f1c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800902c:	2000      	movs	r0, #0
 800902e:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc
}
 8009032:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009034:	f001 000f 	and.w	r0, r1, #15
 8009038:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	3338      	adds	r3, #56	@ 0x38
 8009040:	4423      	add	r3, r4
 8009042:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8009044:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8009048:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800904c:	2301      	movs	r3, #1
 800904e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
 8009052:	e7de      	b.n	8009012 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8009054:	2002      	movs	r0, #2
 8009056:	e7ec      	b.n	8009032 <HAL_PCD_EP_Close+0x4c>

08009058 <HAL_PCD_EP_Receive>:
{
 8009058:	b508      	push	{r3, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800905a:	f001 0c0f 	and.w	ip, r1, #15
 800905e:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8009062:	0089      	lsls	r1, r1, #2
 8009064:	f501 711e 	add.w	r1, r1, #632	@ 0x278
 8009068:	4401      	add	r1, r0
 800906a:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 800906c:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8009070:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8009074:	f8ce 2288 	str.w	r2, [lr, #648]	@ 0x288
  ep->xfer_len = len;
 8009078:	f8ce 328c 	str.w	r3, [lr, #652]	@ 0x28c
  ep->xfer_count = 0U;
 800907c:	2300      	movs	r3, #0
 800907e:	f8ce 3290 	str.w	r3, [lr, #656]	@ 0x290
  ep->is_in = 0U;
 8009082:	f88e 327d 	strb.w	r3, [lr, #637]	@ 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 8009086:	f88e c27c 	strb.w	ip, [lr, #636]	@ 0x27c
  if (hpcd->Init.dma_enable == 1U)
 800908a:	68c3      	ldr	r3, [r0, #12]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d005      	beq.n	800909c <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009090:	b2da      	uxtb	r2, r3
 8009092:	6800      	ldr	r0, [r0, #0]
 8009094:	f006 f97c 	bl	800f390 <USB_EPStartXfer>
}
 8009098:	2000      	movs	r0, #0
 800909a:	bd08      	pop	{r3, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800909c:	f8ce 2298 	str.w	r2, [lr, #664]	@ 0x298
 80090a0:	e7f6      	b.n	8009090 <HAL_PCD_EP_Receive+0x38>

080090a2 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80090a2:	f001 010f 	and.w	r1, r1, #15
 80090a6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80090aa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80090ae:	f8d0 0290 	ldr.w	r0, [r0, #656]	@ 0x290
 80090b2:	4770      	bx	lr

080090b4 <HAL_PCD_EP_Transmit>:
{
 80090b4:	b508      	push	{r3, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090b6:	f001 0c0f 	and.w	ip, r1, #15
 80090ba:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80090be:	0089      	lsls	r1, r1, #2
 80090c0:	3138      	adds	r1, #56	@ 0x38
 80090c2:	4401      	add	r1, r0
 80090c4:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80090c6:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80090ca:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80090ce:	f8ce 2048 	str.w	r2, [lr, #72]	@ 0x48
  ep->xfer_len = len;
 80090d2:	f8ce 304c 	str.w	r3, [lr, #76]	@ 0x4c
  ep->xfer_count = 0U;
 80090d6:	2300      	movs	r3, #0
 80090d8:	f8ce 3050 	str.w	r3, [lr, #80]	@ 0x50
  ep->is_in = 1U;
 80090dc:	2301      	movs	r3, #1
 80090de:	f88e 303d 	strb.w	r3, [lr, #61]	@ 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80090e2:	f88e c03c 	strb.w	ip, [lr, #60]	@ 0x3c
  if (hpcd->Init.dma_enable == 1U)
 80090e6:	68c3      	ldr	r3, [r0, #12]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d005      	beq.n	80090f8 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	6800      	ldr	r0, [r0, #0]
 80090f0:	f006 f94e 	bl	800f390 <USB_EPStartXfer>
}
 80090f4:	2000      	movs	r0, #0
 80090f6:	bd08      	pop	{r3, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80090f8:	f8ce 2058 	str.w	r2, [lr, #88]	@ 0x58
 80090fc:	e7f6      	b.n	80090ec <HAL_PCD_EP_Transmit+0x38>

080090fe <HAL_PCD_EP_SetStall>:
{
 80090fe:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009100:	f001 050f 	and.w	r5, r1, #15
 8009104:	6842      	ldr	r2, [r0, #4]
 8009106:	4295      	cmp	r5, r2
 8009108:	d839      	bhi.n	800917e <HAL_PCD_EP_SetStall+0x80>
 800910a:	4604      	mov	r4, r0
 800910c:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 800910e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8009112:	d11f      	bne.n	8009154 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8009114:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8009118:	0089      	lsls	r1, r1, #2
 800911a:	f501 711e 	add.w	r1, r1, #632	@ 0x278
 800911e:	4401      	add	r1, r0
 8009120:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8009122:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8009126:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800912a:	2200      	movs	r2, #0
 800912c:	f883 227d 	strb.w	r2, [r3, #637]	@ 0x27d
  ep->is_stall = 1U;
 8009130:	2301      	movs	r3, #1
 8009132:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009134:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8009136:	f894 34bc 	ldrb.w	r3, [r4, #1212]	@ 0x4bc
 800913a:	2b01      	cmp	r3, #1
 800913c:	d021      	beq.n	8009182 <HAL_PCD_EP_SetStall+0x84>
 800913e:	2301      	movs	r3, #1
 8009140:	f884 34bc 	strb.w	r3, [r4, #1212]	@ 0x4bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009144:	6820      	ldr	r0, [r4, #0]
 8009146:	f006 fa68 	bl	800f61a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800914a:	b18d      	cbz	r5, 8009170 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 800914c:	2000      	movs	r0, #0
 800914e:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc
}
 8009152:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009154:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8009158:	0089      	lsls	r1, r1, #2
 800915a:	3138      	adds	r1, #56	@ 0x38
 800915c:	4401      	add	r1, r0
 800915e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8009160:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8009164:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009168:	2201      	movs	r2, #1
 800916a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800916e:	e7df      	b.n	8009130 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009170:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 8009174:	7b21      	ldrb	r1, [r4, #12]
 8009176:	6820      	ldr	r0, [r4, #0]
 8009178:	f006 fb4a 	bl	800f810 <USB_EP0_OutStart>
 800917c:	e7e6      	b.n	800914c <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 800917e:	2001      	movs	r0, #1
 8009180:	e7e7      	b.n	8009152 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8009182:	2002      	movs	r0, #2
 8009184:	e7e5      	b.n	8009152 <HAL_PCD_EP_SetStall+0x54>

08009186 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009186:	f001 030f 	and.w	r3, r1, #15
 800918a:	6842      	ldr	r2, [r0, #4]
 800918c:	4293      	cmp	r3, r2
 800918e:	d831      	bhi.n	80091f4 <HAL_PCD_EP_ClrStall+0x6e>
{
 8009190:	b510      	push	{r4, lr}
 8009192:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8009194:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8009198:	d11e      	bne.n	80091d8 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800919a:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800919e:	0089      	lsls	r1, r1, #2
 80091a0:	f501 711e 	add.w	r1, r1, #632	@ 0x278
 80091a4:	4401      	add	r1, r0
 80091a6:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80091a8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80091ac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80091b0:	2000      	movs	r0, #0
 80091b2:	f882 027d 	strb.w	r0, [r2, #637]	@ 0x27d
  ep->is_stall = 0U;
 80091b6:	2200      	movs	r2, #0
 80091b8:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091ba:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80091bc:	f894 34bc 	ldrb.w	r3, [r4, #1212]	@ 0x4bc
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d019      	beq.n	80091f8 <HAL_PCD_EP_ClrStall+0x72>
 80091c4:	2301      	movs	r3, #1
 80091c6:	f884 34bc 	strb.w	r3, [r4, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80091ca:	6820      	ldr	r0, [r4, #0]
 80091cc:	f006 fa52 	bl	800f674 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80091d0:	2000      	movs	r0, #0
 80091d2:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc
}
 80091d6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091d8:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80091dc:	0089      	lsls	r1, r1, #2
 80091de:	3138      	adds	r1, #56	@ 0x38
 80091e0:	4401      	add	r1, r0
 80091e2:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80091e4:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80091e8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80091ec:	2001      	movs	r0, #1
 80091ee:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
 80091f2:	e7e0      	b.n	80091b6 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 80091f4:	2001      	movs	r0, #1
}
 80091f6:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80091f8:	2002      	movs	r0, #2
 80091fa:	e7ec      	b.n	80091d6 <HAL_PCD_EP_ClrStall+0x50>

080091fc <HAL_PCD_EP_Abort>:
{
 80091fc:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 80091fe:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8009202:	d10c      	bne.n	800921e <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009204:	f001 010f 	and.w	r1, r1, #15
 8009208:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800920c:	0089      	lsls	r1, r1, #2
 800920e:	f501 711e 	add.w	r1, r1, #632	@ 0x278
 8009212:	4401      	add	r1, r0
 8009214:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009216:	6800      	ldr	r0, [r0, #0]
 8009218:	f006 f844 	bl	800f2a4 <USB_EPStopXfer>
}
 800921c:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800921e:	f001 010f 	and.w	r1, r1, #15
 8009222:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8009226:	0089      	lsls	r1, r1, #2
 8009228:	3138      	adds	r1, #56	@ 0x38
 800922a:	4401      	add	r1, r0
 800922c:	3104      	adds	r1, #4
 800922e:	e7f2      	b.n	8009216 <HAL_PCD_EP_Abort+0x1a>

08009230 <HAL_PCD_IRQHandler>:
{
 8009230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	b083      	sub	sp, #12
 8009236:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009238:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800923a:	4628      	mov	r0, r5
 800923c:	f006 faa3 	bl	800f786 <USB_GetMode>
 8009240:	b110      	cbz	r0, 8009248 <HAL_PCD_IRQHandler+0x18>
}
 8009242:	b003      	add	sp, #12
 8009244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009248:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800924a:	6820      	ldr	r0, [r4, #0]
 800924c:	f006 fa6c 	bl	800f728 <USB_ReadInterrupts>
 8009250:	2800      	cmp	r0, #0
 8009252:	d0f6      	beq.n	8009242 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009254:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800925e:	f8c4 34fc 	str.w	r3, [r4, #1276]	@ 0x4fc
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009262:	6820      	ldr	r0, [r4, #0]
 8009264:	f006 fa60 	bl	800f728 <USB_ReadInterrupts>
 8009268:	f010 0f02 	tst.w	r0, #2
 800926c:	d004      	beq.n	8009278 <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800926e:	6822      	ldr	r2, [r4, #0]
 8009270:	6953      	ldr	r3, [r2, #20]
 8009272:	f003 0302 	and.w	r3, r3, #2
 8009276:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009278:	6820      	ldr	r0, [r4, #0]
 800927a:	f006 fa55 	bl	800f728 <USB_ReadInterrupts>
 800927e:	f010 0f10 	tst.w	r0, #16
 8009282:	d014      	beq.n	80092ae <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009284:	6822      	ldr	r2, [r4, #0]
 8009286:	6993      	ldr	r3, [r2, #24]
 8009288:	f023 0310 	bic.w	r3, r3, #16
 800928c:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 800928e:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009292:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009296:	f3c8 4343 	ubfx	r3, r8, #17, #4
 800929a:	2b02      	cmp	r3, #2
 800929c:	d069      	beq.n	8009372 <HAL_PCD_IRQHandler+0x142>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800929e:	2b06      	cmp	r3, #6
 80092a0:	f000 808d 	beq.w	80093be <HAL_PCD_IRQHandler+0x18e>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80092a4:	6822      	ldr	r2, [r4, #0]
 80092a6:	6993      	ldr	r3, [r2, #24]
 80092a8:	f043 0310 	orr.w	r3, r3, #16
 80092ac:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80092ae:	6820      	ldr	r0, [r4, #0]
 80092b0:	f006 fa3a 	bl	800f728 <USB_ReadInterrupts>
 80092b4:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 80092b8:	f040 8093 	bne.w	80093e2 <HAL_PCD_IRQHandler+0x1b2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80092bc:	6820      	ldr	r0, [r4, #0]
 80092be:	f006 fa33 	bl	800f728 <USB_ReadInterrupts>
 80092c2:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 80092c6:	f040 80fc 	bne.w	80094c2 <HAL_PCD_IRQHandler+0x292>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80092ca:	6820      	ldr	r0, [r4, #0]
 80092cc:	f006 fa2c 	bl	800f728 <USB_ReadInterrupts>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	f2c0 817f 	blt.w	80095d4 <HAL_PCD_IRQHandler+0x3a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80092d6:	6820      	ldr	r0, [r4, #0]
 80092d8:	f006 fa26 	bl	800f728 <USB_ReadInterrupts>
 80092dc:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 80092e0:	d009      	beq.n	80092f6 <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	f013 0f01 	tst.w	r3, #1
 80092e8:	f040 818c 	bne.w	8009604 <HAL_PCD_IRQHandler+0x3d4>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80092ec:	6822      	ldr	r2, [r4, #0]
 80092ee:	6953      	ldr	r3, [r2, #20]
 80092f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092f4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80092f6:	6820      	ldr	r0, [r4, #0]
 80092f8:	f006 fa16 	bl	800f728 <USB_ReadInterrupts>
 80092fc:	f010 6f00 	tst.w	r0, #134217728	@ 0x8000000
 8009300:	d015      	beq.n	800932e <HAL_PCD_IRQHandler+0xfe>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009302:	6822      	ldr	r2, [r4, #0]
 8009304:	6953      	ldr	r3, [r2, #20]
 8009306:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800930a:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800930c:	f894 34f4 	ldrb.w	r3, [r4, #1268]	@ 0x4f4
 8009310:	2b00      	cmp	r3, #0
 8009312:	f040 817b 	bne.w	800960c <HAL_PCD_IRQHandler+0x3dc>
        hpcd->LPM_State = LPM_L1;
 8009316:	2101      	movs	r1, #1
 8009318:	f884 14f4 	strb.w	r1, [r4, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800931c:	6823      	ldr	r3, [r4, #0]
 800931e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009320:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8009324:	f8c4 34f8 	str.w	r3, [r4, #1272]	@ 0x4f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009328:	4620      	mov	r0, r4
 800932a:	f000 fadd 	bl	80098e8 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800932e:	6820      	ldr	r0, [r4, #0]
 8009330:	f006 f9fa 	bl	800f728 <USB_ReadInterrupts>
 8009334:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8009338:	f040 816c 	bne.w	8009614 <HAL_PCD_IRQHandler+0x3e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800933c:	6820      	ldr	r0, [r4, #0]
 800933e:	f006 f9f3 	bl	800f728 <USB_ReadInterrupts>
 8009342:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8009346:	f040 81b9 	bne.w	80096bc <HAL_PCD_IRQHandler+0x48c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800934a:	6820      	ldr	r0, [r4, #0]
 800934c:	f006 f9ec 	bl	800f728 <USB_ReadInterrupts>
 8009350:	f010 0f08 	tst.w	r0, #8
 8009354:	f040 81ca 	bne.w	80096ec <HAL_PCD_IRQHandler+0x4bc>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009358:	6820      	ldr	r0, [r4, #0]
 800935a:	f006 f9e5 	bl	800f728 <USB_ReadInterrupts>
 800935e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8009362:	f000 81dd 	beq.w	8009720 <HAL_PCD_IRQHandler+0x4f0>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009366:	69ab      	ldr	r3, [r5, #24]
 8009368:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800936c:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800936e:	2601      	movs	r6, #1
 8009370:	e1c6      	b.n	8009700 <HAL_PCD_IRQHandler+0x4d0>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009372:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8009376:	ea18 0f03 	tst.w	r8, r3
 800937a:	d093      	beq.n	80092a4 <HAL_PCD_IRQHandler+0x74>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800937c:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009380:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009384:	9301      	str	r3, [sp, #4]
 8009386:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 800938a:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 800938e:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8009392:	f8db 1288 	ldr.w	r1, [fp, #648]	@ 0x288
 8009396:	4628      	mov	r0, r5
 8009398:	f006 f91c 	bl	800f5d4 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800939c:	f8db 3288 	ldr.w	r3, [fp, #648]	@ 0x288
 80093a0:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 80093a4:	4453      	add	r3, sl
 80093a6:	f8cb 3288 	str.w	r3, [fp, #648]	@ 0x288
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80093aa:	f8db 3290 	ldr.w	r3, [fp, #656]	@ 0x290
 80093ae:	9a01      	ldr	r2, [sp, #4]
 80093b0:	444a      	add	r2, r9
 80093b2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80093b6:	4453      	add	r3, sl
 80093b8:	f8c2 3290 	str.w	r3, [r2, #656]	@ 0x290
 80093bc:	e772      	b.n	80092a4 <HAL_PCD_IRQHandler+0x74>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80093be:	2208      	movs	r2, #8
 80093c0:	f204 41c4 	addw	r1, r4, #1220	@ 0x4c4
 80093c4:	4628      	mov	r0, r5
 80093c6:	f006 f905 	bl	800f5d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80093ca:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80093ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093d2:	f8d3 2290 	ldr.w	r2, [r3, #656]	@ 0x290
 80093d6:	f3c8 180a 	ubfx	r8, r8, #4, #11
 80093da:	4442      	add	r2, r8
 80093dc:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 80093e0:	e760      	b.n	80092a4 <HAL_PCD_IRQHandler+0x74>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80093e2:	6820      	ldr	r0, [r4, #0]
 80093e4:	f006 f9a4 	bl	800f730 <USB_ReadDevAllOutEpInterrupt>
 80093e8:	4680      	mov	r8, r0
      epnum = 0U;
 80093ea:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80093ec:	e035      	b.n	800945a <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80093ee:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80093f2:	2201      	movs	r2, #1
 80093f4:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80093f8:	4649      	mov	r1, r9
 80093fa:	4620      	mov	r0, r4
 80093fc:	f7ff fcee 	bl	8008ddc <PCD_EP_OutXfrComplete_int>
 8009400:	e03c      	b.n	800947c <HAL_PCD_IRQHandler+0x24c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009402:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8009406:	2208      	movs	r2, #8
 8009408:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800940c:	4649      	mov	r1, r9
 800940e:	4620      	mov	r0, r4
 8009410:	f7ff fd66 	bl	8008ee0 <PCD_EP_OutSetupPacket_int>
 8009414:	e035      	b.n	8009482 <HAL_PCD_IRQHandler+0x252>
            if (ep->is_iso_incomplete == 1U)
 8009416:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800941a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800941e:	f893 327f 	ldrb.w	r3, [r3, #639]	@ 0x27f
 8009422:	2b01      	cmp	r3, #1
 8009424:	d041      	beq.n	80094aa <HAL_PCD_IRQHandler+0x27a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009426:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800942a:	2202      	movs	r2, #2
 800942c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009430:	f01a 0f20 	tst.w	sl, #32
 8009434:	d004      	beq.n	8009440 <HAL_PCD_IRQHandler+0x210>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009436:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800943a:	2220      	movs	r2, #32
 800943c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009440:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8009444:	d005      	beq.n	8009452 <HAL_PCD_IRQHandler+0x222>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009446:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800944a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800944e:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8009452:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8009456:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800945a:	f1b8 0f00 	cmp.w	r8, #0
 800945e:	f43f af2d 	beq.w	80092bc <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 8009462:	f018 0f01 	tst.w	r8, #1
 8009466:	d0f4      	beq.n	8009452 <HAL_PCD_IRQHandler+0x222>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009468:	fa5f fb89 	uxtb.w	fp, r9
 800946c:	4659      	mov	r1, fp
 800946e:	6820      	ldr	r0, [r4, #0]
 8009470:	f006 f96e 	bl	800f750 <USB_ReadDevOutEPInterrupt>
 8009474:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009476:	f010 0f01 	tst.w	r0, #1
 800947a:	d1b8      	bne.n	80093ee <HAL_PCD_IRQHandler+0x1be>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800947c:	f01a 0f08 	tst.w	sl, #8
 8009480:	d1bf      	bne.n	8009402 <HAL_PCD_IRQHandler+0x1d2>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009482:	f01a 0f10 	tst.w	sl, #16
 8009486:	d004      	beq.n	8009492 <HAL_PCD_IRQHandler+0x262>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009488:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800948c:	2210      	movs	r2, #16
 800948e:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009492:	f01a 0f02 	tst.w	sl, #2
 8009496:	d0cb      	beq.n	8009430 <HAL_PCD_IRQHandler+0x200>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009498:	696b      	ldr	r3, [r5, #20]
 800949a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800949e:	d0ba      	beq.n	8009416 <HAL_PCD_IRQHandler+0x1e6>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80094a6:	607b      	str	r3, [r7, #4]
 80094a8:	e7b5      	b.n	8009416 <HAL_PCD_IRQHandler+0x1e6>
              ep->is_iso_incomplete = 0U;
 80094aa:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80094ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 227f 	strb.w	r2, [r3, #639]	@ 0x27f
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80094b8:	4659      	mov	r1, fp
 80094ba:	4620      	mov	r0, r4
 80094bc:	f7ff fd38 	bl	8008f30 <HAL_PCD_ISOOUTIncompleteCallback>
 80094c0:	e7b1      	b.n	8009426 <HAL_PCD_IRQHandler+0x1f6>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80094c2:	6820      	ldr	r0, [r4, #0]
 80094c4:	f006 f93c 	bl	800f740 <USB_ReadDevAllInEpInterrupt>
 80094c8:	4680      	mov	r8, r0
      epnum = 0U;
 80094ca:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80094cc:	e025      	b.n	800951a <HAL_PCD_IRQHandler+0x2ea>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80094ce:	4659      	mov	r1, fp
 80094d0:	4620      	mov	r0, r4
 80094d2:	f00a ff29 	bl	8014328 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80094d6:	f01a 0f08 	tst.w	sl, #8
 80094da:	d004      	beq.n	80094e6 <HAL_PCD_IRQHandler+0x2b6>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80094dc:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80094e0:	2208      	movs	r2, #8
 80094e2:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80094e6:	f01a 0f10 	tst.w	sl, #16
 80094ea:	d004      	beq.n	80094f6 <HAL_PCD_IRQHandler+0x2c6>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80094ec:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80094f0:	2210      	movs	r2, #16
 80094f2:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80094f6:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80094fa:	d004      	beq.n	8009506 <HAL_PCD_IRQHandler+0x2d6>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80094fc:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8009500:	2240      	movs	r2, #64	@ 0x40
 8009502:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009506:	f01a 0f02 	tst.w	sl, #2
 800950a:	d140      	bne.n	800958e <HAL_PCD_IRQHandler+0x35e>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800950c:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8009510:	d15b      	bne.n	80095ca <HAL_PCD_IRQHandler+0x39a>
        epnum++;
 8009512:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8009516:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800951a:	f1b8 0f00 	cmp.w	r8, #0
 800951e:	f43f aed4 	beq.w	80092ca <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009522:	f018 0f01 	tst.w	r8, #1
 8009526:	d0f4      	beq.n	8009512 <HAL_PCD_IRQHandler+0x2e2>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009528:	fa5f fb89 	uxtb.w	fp, r9
 800952c:	4659      	mov	r1, fp
 800952e:	6820      	ldr	r0, [r4, #0]
 8009530:	f006 f917 	bl	800f762 <USB_ReadDevInEPInterrupt>
 8009534:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009536:	f010 0f01 	tst.w	r0, #1
 800953a:	d0cc      	beq.n	80094d6 <HAL_PCD_IRQHandler+0x2a6>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800953c:	f009 020f 	and.w	r2, r9, #15
 8009540:	2101      	movs	r1, #1
 8009542:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009548:	ea23 0302 	bic.w	r3, r3, r2
 800954c:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800954e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8009552:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8009556:	68e3      	ldr	r3, [r4, #12]
 8009558:	428b      	cmp	r3, r1
 800955a:	d1b8      	bne.n	80094ce <HAL_PCD_IRQHandler+0x29e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800955c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8009560:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009564:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009566:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8009568:	440a      	add	r2, r1
 800956a:	649a      	str	r2, [r3, #72]	@ 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800956c:	f1b9 0f00 	cmp.w	r9, #0
 8009570:	d1ad      	bne.n	80094ce <HAL_PCD_IRQHandler+0x29e>
 8009572:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8009576:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800957a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1a6      	bne.n	80094ce <HAL_PCD_IRQHandler+0x29e>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009580:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 8009584:	2101      	movs	r1, #1
 8009586:	6820      	ldr	r0, [r4, #0]
 8009588:	f006 f942 	bl	800f810 <USB_EP0_OutStart>
 800958c:	e79f      	b.n	80094ce <HAL_PCD_IRQHandler+0x29e>
            (void)USB_FlushTxFifo(USBx, epnum);
 800958e:	4649      	mov	r1, r9
 8009590:	4628      	mov	r0, r5
 8009592:	f005 fc97 	bl	800eec4 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8009596:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800959a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800959e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d005      	beq.n	80095b2 <HAL_PCD_IRQHandler+0x382>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80095a6:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80095aa:	2202      	movs	r2, #2
 80095ac:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 80095b0:	e7ac      	b.n	800950c <HAL_PCD_IRQHandler+0x2dc>
              ep->is_iso_incomplete = 0U;
 80095b2:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80095b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80095c0:	4659      	mov	r1, fp
 80095c2:	4620      	mov	r0, r4
 80095c4:	f7ff fcb5 	bl	8008f32 <HAL_PCD_ISOINIncompleteCallback>
 80095c8:	e7ed      	b.n	80095a6 <HAL_PCD_IRQHandler+0x376>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80095ca:	4649      	mov	r1, r9
 80095cc:	4620      	mov	r0, r4
 80095ce:	f7ff fad7 	bl	8008b80 <PCD_WriteEmptyTxFifo>
 80095d2:	e79e      	b.n	8009512 <HAL_PCD_IRQHandler+0x2e2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f023 0301 	bic.w	r3, r3, #1
 80095da:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 80095dc:	f894 34f4 	ldrb.w	r3, [r4, #1268]	@ 0x4f4
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d008      	beq.n	80095f6 <HAL_PCD_IRQHandler+0x3c6>
        HAL_PCD_ResumeCallback(hpcd);
 80095e4:	4620      	mov	r0, r4
 80095e6:	f00a ffb3 	bl	8014550 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80095ea:	6822      	ldr	r2, [r4, #0]
 80095ec:	6953      	ldr	r3, [r2, #20]
 80095ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095f2:	6153      	str	r3, [r2, #20]
 80095f4:	e66f      	b.n	80092d6 <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 80095f6:	2100      	movs	r1, #0
 80095f8:	f884 14f4 	strb.w	r1, [r4, #1268]	@ 0x4f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80095fc:	4620      	mov	r0, r4
 80095fe:	f000 f973 	bl	80098e8 <HAL_PCDEx_LPM_Callback>
 8009602:	e7f2      	b.n	80095ea <HAL_PCD_IRQHandler+0x3ba>
        HAL_PCD_SuspendCallback(hpcd);
 8009604:	4620      	mov	r0, r4
 8009606:	f00a ff97 	bl	8014538 <HAL_PCD_SuspendCallback>
 800960a:	e66f      	b.n	80092ec <HAL_PCD_IRQHandler+0xbc>
        HAL_PCD_SuspendCallback(hpcd);
 800960c:	4620      	mov	r0, r4
 800960e:	f00a ff93 	bl	8014538 <HAL_PCD_SuspendCallback>
 8009612:	e68c      	b.n	800932e <HAL_PCD_IRQHandler+0xfe>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f023 0301 	bic.w	r3, r3, #1
 800961a:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800961c:	2110      	movs	r1, #16
 800961e:	6820      	ldr	r0, [r4, #0]
 8009620:	f005 fc50 	bl	800eec4 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009624:	e01a      	b.n	800965c <HAL_PCD_IRQHandler+0x42c>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009626:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 800962a:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 800962e:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009632:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8009636:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800963a:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800963e:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009642:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8009646:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800964a:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800964e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8009652:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8009656:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800965a:	3601      	adds	r6, #1
 800965c:	6863      	ldr	r3, [r4, #4]
 800965e:	42b3      	cmp	r3, r6
 8009660:	d8e1      	bhi.n	8009626 <HAL_PCD_IRQHandler+0x3f6>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8009668:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800966a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800966c:	b1db      	cbz	r3, 80096a6 <HAL_PCD_IRQHandler+0x476>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800966e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009672:	f043 030b 	orr.w	r3, r3, #11
 8009676:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800967a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800967c:	f043 030b 	orr.w	r3, r3, #11
 8009680:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009682:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 8009686:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800968a:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800968e:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 8009692:	7b21      	ldrb	r1, [r4, #12]
 8009694:	6820      	ldr	r0, [r4, #0]
 8009696:	f006 f8bb 	bl	800f810 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800969a:	6822      	ldr	r2, [r4, #0]
 800969c:	6953      	ldr	r3, [r2, #20]
 800969e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80096a2:	6153      	str	r3, [r2, #20]
 80096a4:	e64a      	b.n	800933c <HAL_PCD_IRQHandler+0x10c>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80096ac:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80096b0:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	f043 030b 	orr.w	r3, r3, #11
 80096b8:	613b      	str	r3, [r7, #16]
 80096ba:	e7e2      	b.n	8009682 <HAL_PCD_IRQHandler+0x452>
      (void)USB_ActivateSetup(hpcd->Instance);
 80096bc:	6820      	ldr	r0, [r4, #0]
 80096be:	f006 f897 	bl	800f7f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80096c2:	6820      	ldr	r0, [r4, #0]
 80096c4:	f005 fd20 	bl	800f108 <USB_GetDevSpeed>
 80096c8:	6120      	str	r0, [r4, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80096ca:	6826      	ldr	r6, [r4, #0]
 80096cc:	f000 fcd0 	bl	800a070 <HAL_RCC_GetHCLKFreq>
 80096d0:	4601      	mov	r1, r0
 80096d2:	7c22      	ldrb	r2, [r4, #16]
 80096d4:	4630      	mov	r0, r6
 80096d6:	f005 fb77 	bl	800edc8 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80096da:	4620      	mov	r0, r4
 80096dc:	f00a fee6 	bl	80144ac <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80096e0:	6822      	ldr	r2, [r4, #0]
 80096e2:	6953      	ldr	r3, [r2, #20]
 80096e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096e8:	6153      	str	r3, [r2, #20]
 80096ea:	e62e      	b.n	800934a <HAL_PCD_IRQHandler+0x11a>
      HAL_PCD_SOFCallback(hpcd);
 80096ec:	4620      	mov	r0, r4
 80096ee:	f00a ff3b 	bl	8014568 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80096f2:	6822      	ldr	r2, [r4, #0]
 80096f4:	6953      	ldr	r3, [r2, #20]
 80096f6:	f003 0308 	and.w	r3, r3, #8
 80096fa:	6153      	str	r3, [r2, #20]
 80096fc:	e62c      	b.n	8009358 <HAL_PCD_IRQHandler+0x128>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80096fe:	3601      	adds	r6, #1
 8009700:	6863      	ldr	r3, [r4, #4]
 8009702:	42b3      	cmp	r3, r6
 8009704:	d90c      	bls.n	8009720 <HAL_PCD_IRQHandler+0x4f0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009706:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800970a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800970e:	f893 327f 	ldrb.w	r3, [r3, #639]	@ 0x27f
 8009712:	2b01      	cmp	r3, #1
 8009714:	d1f3      	bne.n	80096fe <HAL_PCD_IRQHandler+0x4ce>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009716:	b2f1      	uxtb	r1, r6
 8009718:	4620      	mov	r0, r4
 800971a:	f7ff fd6f 	bl	80091fc <HAL_PCD_EP_Abort>
 800971e:	e7ee      	b.n	80096fe <HAL_PCD_IRQHandler+0x4ce>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009720:	6820      	ldr	r0, [r4, #0]
 8009722:	f006 f801 	bl	800f728 <USB_ReadInterrupts>
 8009726:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 800972a:	d127      	bne.n	800977c <HAL_PCD_IRQHandler+0x54c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800972c:	6820      	ldr	r0, [r4, #0]
 800972e:	f005 fffb 	bl	800f728 <USB_ReadInterrupts>
 8009732:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8009736:	d05b      	beq.n	80097f0 <HAL_PCD_IRQHandler+0x5c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009738:	2301      	movs	r3, #1
 800973a:	e028      	b.n	800978e <HAL_PCD_IRQHandler+0x55e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800973c:	3601      	adds	r6, #1
 800973e:	6863      	ldr	r3, [r4, #4]
 8009740:	42b3      	cmp	r3, r6
 8009742:	d91d      	bls.n	8009780 <HAL_PCD_IRQHandler+0x550>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009744:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8009748:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800974c:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8009750:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009754:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009758:	2b01      	cmp	r3, #1
 800975a:	d1ef      	bne.n	800973c <HAL_PCD_IRQHandler+0x50c>
 800975c:	2a00      	cmp	r2, #0
 800975e:	daed      	bge.n	800973c <HAL_PCD_IRQHandler+0x50c>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009760:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8009764:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009768:	2201      	movs	r2, #1
 800976a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800976e:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8009772:	b2c9      	uxtb	r1, r1
 8009774:	4620      	mov	r0, r4
 8009776:	f7ff fd41 	bl	80091fc <HAL_PCD_EP_Abort>
 800977a:	e7df      	b.n	800973c <HAL_PCD_IRQHandler+0x50c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800977c:	2601      	movs	r6, #1
 800977e:	e7de      	b.n	800973e <HAL_PCD_IRQHandler+0x50e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009780:	6822      	ldr	r2, [r4, #0]
 8009782:	6953      	ldr	r3, [r2, #20]
 8009784:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009788:	6153      	str	r3, [r2, #20]
 800978a:	e7cf      	b.n	800972c <HAL_PCD_IRQHandler+0x4fc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800978c:	3301      	adds	r3, #1
 800978e:	6862      	ldr	r2, [r4, #4]
 8009790:	429a      	cmp	r2, r3
 8009792:	d928      	bls.n	80097e6 <HAL_PCD_IRQHandler+0x5b6>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009794:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8009798:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800979c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80097a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80097a4:	f892 2280 	ldrb.w	r2, [r2, #640]	@ 0x280
 80097a8:	2a01      	cmp	r2, #1
 80097aa:	d1ef      	bne.n	800978c <HAL_PCD_IRQHandler+0x55c>
 80097ac:	2900      	cmp	r1, #0
 80097ae:	daed      	bge.n	800978c <HAL_PCD_IRQHandler+0x55c>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80097b0:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 80097b4:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	@ 0x4fc
 80097b8:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80097bc:	4291      	cmp	r1, r2
 80097be:	d1e5      	bne.n	800978c <HAL_PCD_IRQHandler+0x55c>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80097c0:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80097c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80097c8:	2101      	movs	r1, #1
 80097ca:	f882 127f 	strb.w	r1, [r2, #639]	@ 0x27f
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80097ce:	69aa      	ldr	r2, [r5, #24]
 80097d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80097d4:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80097d6:	696a      	ldr	r2, [r5, #20]
 80097d8:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80097dc:	d1d6      	bne.n	800978c <HAL_PCD_IRQHandler+0x55c>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80097e4:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80097e6:	6822      	ldr	r2, [r4, #0]
 80097e8:	6953      	ldr	r3, [r2, #20]
 80097ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097ee:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80097f0:	6820      	ldr	r0, [r4, #0]
 80097f2:	f005 ff99 	bl	800f728 <USB_ReadInterrupts>
 80097f6:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 80097fa:	d110      	bne.n	800981e <HAL_PCD_IRQHandler+0x5ee>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80097fc:	6820      	ldr	r0, [r4, #0]
 80097fe:	f005 ff93 	bl	800f728 <USB_ReadInterrupts>
 8009802:	f010 0f04 	tst.w	r0, #4
 8009806:	f43f ad1c 	beq.w	8009242 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800980e:	f015 0f04 	tst.w	r5, #4
 8009812:	d10d      	bne.n	8009830 <HAL_PCD_IRQHandler+0x600>
      hpcd->Instance->GOTGINT |= RegVal;
 8009814:	6822      	ldr	r2, [r4, #0]
 8009816:	6853      	ldr	r3, [r2, #4]
 8009818:	432b      	orrs	r3, r5
 800981a:	6053      	str	r3, [r2, #4]
 800981c:	e511      	b.n	8009242 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 800981e:	4620      	mov	r0, r4
 8009820:	f00a fe6c 	bl	80144fc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009824:	6822      	ldr	r2, [r4, #0]
 8009826:	6953      	ldr	r3, [r2, #20]
 8009828:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800982c:	6153      	str	r3, [r2, #20]
 800982e:	e7e5      	b.n	80097fc <HAL_PCD_IRQHandler+0x5cc>
        HAL_PCD_DisconnectCallback(hpcd);
 8009830:	4620      	mov	r0, r4
 8009832:	f00a fe6f 	bl	8014514 <HAL_PCD_DisconnectCallback>
 8009836:	e7ed      	b.n	8009814 <HAL_PCD_IRQHandler+0x5e4>

08009838 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8009838:	f890 34bc 	ldrb.w	r3, [r0, #1212]	@ 0x4bc
 800983c:	2b01      	cmp	r3, #1
 800983e:	d014      	beq.n	800986a <HAL_PCD_EP_Flush+0x32>
{
 8009840:	b510      	push	{r4, lr}
 8009842:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8009844:	2301      	movs	r3, #1
 8009846:	f880 34bc 	strb.w	r3, [r0, #1212]	@ 0x4bc
  if ((ep_addr & 0x80U) == 0x80U)
 800984a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800984e:	d106      	bne.n	800985e <HAL_PCD_EP_Flush+0x26>
    (void)USB_FlushRxFifo(hpcd->Instance);
 8009850:	6800      	ldr	r0, [r0, #0]
 8009852:	f005 fb5f 	bl	800ef14 <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd);
 8009856:	2000      	movs	r0, #0
 8009858:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc
}
 800985c:	bd10      	pop	{r4, pc}
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800985e:	f001 010f 	and.w	r1, r1, #15
 8009862:	6800      	ldr	r0, [r0, #0]
 8009864:	f005 fb2e 	bl	800eec4 <USB_FlushTxFifo>
 8009868:	e7f5      	b.n	8009856 <HAL_PCD_EP_Flush+0x1e>
  __HAL_LOCK(hpcd);
 800986a:	2002      	movs	r0, #2
}
 800986c:	4770      	bx	lr

0800986e <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800986e:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009870:	6804      	ldr	r4, [r0, #0]
 8009872:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8009874:	b931      	cbnz	r1, 8009884 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009876:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800987a:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800987c:	2000      	movs	r0, #0
 800987e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009882:	4770      	bx	lr
 8009884:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009886:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009888:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800988c:	2300      	movs	r3, #0
 800988e:	e008      	b.n	80098a2 <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009890:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009894:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009898:	6849      	ldr	r1, [r1, #4]
 800989a:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800989e:	3301      	adds	r3, #1
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80098a6:	428b      	cmp	r3, r1
 80098a8:	d3f2      	bcc.n	8009890 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80098aa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80098ae:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 80098b2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80098b6:	6060      	str	r0, [r4, #4]
 80098b8:	e7e0      	b.n	800987c <HAL_PCDEx_SetTxFiFo+0xe>

080098ba <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80098ba:	6803      	ldr	r3, [r0, #0]
 80098bc:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 80098be:	2000      	movs	r0, #0
 80098c0:	4770      	bx	lr

080098c2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80098c2:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80098c4:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 80098c6:	2101      	movs	r1, #1
 80098c8:	f8c0 1500 	str.w	r1, [r0, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80098cc:	2000      	movs	r0, #0
 80098ce:	f883 04f4 	strb.w	r0, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80098d2:	6993      	ldr	r3, [r2, #24]
 80098d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80098d8:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80098da:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80098dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098e0:	f043 0303 	orr.w	r3, r3, #3
 80098e4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 80098e6:	4770      	bx	lr

080098e8 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80098e8:	4770      	bx	lr
	...

080098ec <HAL_PWR_ConfigPVD>:
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 80098ec:	4602      	mov	r2, r0
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d045      	beq.n	800997e <HAL_PWR_ConfigPVD+0x92>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 80098f2:	4925      	ldr	r1, [pc, #148]	@ (8009988 <HAL_PWR_ConfigPVD+0x9c>)
 80098f4:	690b      	ldr	r3, [r1, #16]
 80098f6:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80098fa:	6800      	ldr	r0, [r0, #0]
 80098fc:	4303      	orrs	r3, r0
 80098fe:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8009900:	4b22      	ldr	r3, [pc, #136]	@ (800998c <HAL_PWR_ConfigPVD+0xa0>)
 8009902:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8009906:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800990a:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800990e:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8009912:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8009916:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800991a:	6819      	ldr	r1, [r3, #0]
 800991c:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8009920:	6019      	str	r1, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8009922:	6859      	ldr	r1, [r3, #4]
 8009924:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8009928:	6059      	str	r1, [r3, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800992a:	6853      	ldr	r3, [r2, #4]
 800992c:	f013 0f04 	tst.w	r3, #4
 8009930:	d006      	beq.n	8009940 <HAL_PWR_ConfigPVD+0x54>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8009932:	4916      	ldr	r1, [pc, #88]	@ (800998c <HAL_PWR_ConfigPVD+0xa0>)
 8009934:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8009938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800993c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8009940:	6853      	ldr	r3, [r2, #4]
 8009942:	f013 0f08 	tst.w	r3, #8
 8009946:	d006      	beq.n	8009956 <HAL_PWR_ConfigPVD+0x6a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8009948:	4910      	ldr	r1, [pc, #64]	@ (800998c <HAL_PWR_ConfigPVD+0xa0>)
 800994a:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
 800994e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009952:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8009956:	6853      	ldr	r3, [r2, #4]
 8009958:	f013 0f01 	tst.w	r3, #1
 800995c:	d004      	beq.n	8009968 <HAL_PWR_ConfigPVD+0x7c>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800995e:	490b      	ldr	r1, [pc, #44]	@ (800998c <HAL_PWR_ConfigPVD+0xa0>)
 8009960:	680b      	ldr	r3, [r1, #0]
 8009962:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009966:	600b      	str	r3, [r1, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8009968:	6853      	ldr	r3, [r2, #4]
 800996a:	f013 0f02 	tst.w	r3, #2
 800996e:	d008      	beq.n	8009982 <HAL_PWR_ConfigPVD+0x96>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8009970:	4a06      	ldr	r2, [pc, #24]	@ (800998c <HAL_PWR_ConfigPVD+0xa0>)
 8009972:	6853      	ldr	r3, [r2, #4]
 8009974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009978:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 800997a:	2000      	movs	r0, #0
 800997c:	4770      	bx	lr
    return HAL_ERROR;
 800997e:	2001      	movs	r0, #1
 8009980:	4770      	bx	lr
  return HAL_OK;
 8009982:	2000      	movs	r0, #0
}
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	46020800 	.word	0x46020800
 800998c:	46022000 	.word	0x46022000

08009990 <HAL_PWR_EnablePVD>:
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 8009990:	4a02      	ldr	r2, [pc, #8]	@ (800999c <HAL_PWR_EnablePVD+0xc>)
 8009992:	6913      	ldr	r3, [r2, #16]
 8009994:	f043 0310 	orr.w	r3, r3, #16
 8009998:	6113      	str	r3, [r2, #16]
}
 800999a:	4770      	bx	lr
 800999c:	46020800 	.word	0x46020800

080099a0 <HAL_PWREx_ControlVoltageScaling>:

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80099a0:	4b24      	ldr	r3, [pc, #144]	@ (8009a34 <HAL_PWREx_ControlVoltageScaling+0x94>)
 80099a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80099a8:	4283      	cmp	r3, r0
 80099aa:	d019      	beq.n	80099e0 <HAL_PWREx_ControlVoltageScaling+0x40>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80099ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80099b0:	d920      	bls.n	80099f4 <HAL_PWREx_ControlVoltageScaling+0x54>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80099b2:	4a20      	ldr	r2, [pc, #128]	@ (8009a34 <HAL_PWREx_ControlVoltageScaling+0x94>)
 80099b4:	68d3      	ldr	r3, [r2, #12]
 80099b6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80099ba:	4303      	orrs	r3, r0
 80099bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80099c0:	60d3      	str	r3, [r2, #12]
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80099c2:	4b1d      	ldr	r3, [pc, #116]	@ (8009a38 <HAL_PWREx_ControlVoltageScaling+0x98>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a1d      	ldr	r2, [pc, #116]	@ (8009a3c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80099c8:	fba2 1303 	umull	r1, r3, r2, r3
 80099cc:	099b      	lsrs	r3, r3, #6
 80099ce:	2132      	movs	r1, #50	@ 0x32
 80099d0:	fb01 f303 	mul.w	r3, r1, r3
 80099d4:	fba2 2303 	umull	r2, r3, r2, r3
 80099d8:	099b      	lsrs	r3, r3, #6
 80099da:	3301      	adds	r3, #1
 80099dc:	461a      	mov	r2, r3
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80099de:	e011      	b.n	8009a04 <HAL_PWREx_ControlVoltageScaling+0x64>
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80099e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80099e4:	d904      	bls.n	80099f0 <HAL_PWREx_ControlVoltageScaling+0x50>
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80099e6:	4a13      	ldr	r2, [pc, #76]	@ (8009a34 <HAL_PWREx_ControlVoltageScaling+0x94>)
 80099e8:	68d3      	ldr	r3, [r2, #12]
 80099ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80099ee:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80099f0:	2000      	movs	r0, #0
 80099f2:	4770      	bx	lr
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80099f4:	4a0f      	ldr	r2, [pc, #60]	@ (8009a34 <HAL_PWREx_ControlVoltageScaling+0x94>)
 80099f6:	68d3      	ldr	r3, [r2, #12]
 80099f8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80099fc:	4303      	orrs	r3, r0
 80099fe:	60d3      	str	r3, [r2, #12]
 8009a00:	e7df      	b.n	80099c2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    timeout--;
 8009a02:	3a01      	subs	r2, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009a04:	490b      	ldr	r1, [pc, #44]	@ (8009a34 <HAL_PWREx_ControlVoltageScaling+0x94>)
 8009a06:	68c9      	ldr	r1, [r1, #12]
 8009a08:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8009a0c:	d101      	bne.n	8009a12 <HAL_PWREx_ControlVoltageScaling+0x72>
 8009a0e:	2a00      	cmp	r2, #0
 8009a10:	d1f7      	bne.n	8009a02 <HAL_PWREx_ControlVoltageScaling+0x62>
  }

  /* Check time out */
  if (timeout != 0U)
 8009a12:	b912      	cbnz	r2, 8009a1a <HAL_PWREx_ControlVoltageScaling+0x7a>
  }

  /* Check time out */
  if (timeout == 0U)
  {
    return HAL_TIMEOUT;
 8009a14:	2003      	movs	r0, #3
 8009a16:	4770      	bx	lr
      timeout--;
 8009a18:	3b01      	subs	r3, #1
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009a1a:	4a06      	ldr	r2, [pc, #24]	@ (8009a34 <HAL_PWREx_ControlVoltageScaling+0x94>)
 8009a1c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009a1e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8009a22:	d101      	bne.n	8009a28 <HAL_PWREx_ControlVoltageScaling+0x88>
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1f7      	bne.n	8009a18 <HAL_PWREx_ControlVoltageScaling+0x78>
  if (timeout == 0U)
 8009a28:	b10b      	cbz	r3, 8009a2e <HAL_PWREx_ControlVoltageScaling+0x8e>
  }

  return HAL_OK;
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	4770      	bx	lr
    return HAL_TIMEOUT;
 8009a2e:	2003      	movs	r0, #3
}
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	46020800 	.word	0x46020800
 8009a38:	20000008 	.word	0x20000008
 8009a3c:	10624dd3 	.word	0x10624dd3

08009a40 <HAL_PWREx_GetVoltageRange>:
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8009a40:	4b02      	ldr	r3, [pc, #8]	@ (8009a4c <HAL_PWREx_GetVoltageRange+0xc>)
 8009a42:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
}
 8009a44:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	46020800 	.word	0x46020800

08009a50 <HAL_PWREx_ConfigSupply>:

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009a50:	4b17      	ldr	r3, [pc, #92]	@ (8009ab0 <HAL_PWREx_ConfigSupply+0x60>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a17      	ldr	r2, [pc, #92]	@ (8009ab4 <HAL_PWREx_ConfigSupply+0x64>)
 8009a56:	fba2 1303 	umull	r1, r3, r2, r3
 8009a5a:	099b      	lsrs	r3, r3, #6
 8009a5c:	2132      	movs	r1, #50	@ 0x32
 8009a5e:	fb01 f303 	mul.w	r3, r1, r3
 8009a62:	fba2 2303 	umull	r2, r3, r2, r3
 8009a66:	099b      	lsrs	r3, r3, #6
 8009a68:	3301      	adds	r3, #1

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8009a6a:	b980      	cbnz	r0, 8009a8e <HAL_PWREx_ConfigSupply+0x3e>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009a6c:	4912      	ldr	r1, [pc, #72]	@ (8009ab8 <HAL_PWREx_ConfigSupply+0x68>)
 8009a6e:	688a      	ldr	r2, [r1, #8]
 8009a70:	f022 0202 	bic.w	r2, r2, #2
 8009a74:	608a      	str	r2, [r1, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009a76:	e000      	b.n	8009a7a <HAL_PWREx_ConfigSupply+0x2a>
    {
      timeout--;
 8009a78:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009a7a:	4a0f      	ldr	r2, [pc, #60]	@ (8009ab8 <HAL_PWREx_ConfigSupply+0x68>)
 8009a7c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009a7e:	f012 0f02 	tst.w	r2, #2
 8009a82:	d001      	beq.n	8009a88 <HAL_PWREx_ConfigSupply+0x38>
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1f7      	bne.n	8009a78 <HAL_PWREx_ConfigSupply+0x28>
      timeout--;
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009a88:	b183      	cbz	r3, 8009aac <HAL_PWREx_ConfigSupply+0x5c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	4770      	bx	lr
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009a8e:	490a      	ldr	r1, [pc, #40]	@ (8009ab8 <HAL_PWREx_ConfigSupply+0x68>)
 8009a90:	688a      	ldr	r2, [r1, #8]
 8009a92:	f042 0202 	orr.w	r2, r2, #2
 8009a96:	608a      	str	r2, [r1, #8]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009a98:	e000      	b.n	8009a9c <HAL_PWREx_ConfigSupply+0x4c>
      timeout--;
 8009a9a:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009a9c:	4a06      	ldr	r2, [pc, #24]	@ (8009ab8 <HAL_PWREx_ConfigSupply+0x68>)
 8009a9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009aa0:	f012 0f02 	tst.w	r2, #2
 8009aa4:	d1f0      	bne.n	8009a88 <HAL_PWREx_ConfigSupply+0x38>
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1f7      	bne.n	8009a9a <HAL_PWREx_ConfigSupply+0x4a>
 8009aaa:	e7ed      	b.n	8009a88 <HAL_PWREx_ConfigSupply+0x38>
    return HAL_TIMEOUT;
 8009aac:	2003      	movs	r0, #3
}
 8009aae:	4770      	bx	lr
 8009ab0:	20000008 	.word	0x20000008
 8009ab4:	10624dd3 	.word	0x10624dd3
 8009ab8:	46020800 	.word	0x46020800

08009abc <HAL_PWREx_EnableVddUSB>:
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8009abc:	4a02      	ldr	r2, [pc, #8]	@ (8009ac8 <HAL_PWREx_EnableVddUSB+0xc>)
 8009abe:	6913      	ldr	r3, [r2, #16]
 8009ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ac4:	6113      	str	r3, [r2, #16]
}
 8009ac6:	4770      	bx	lr
 8009ac8:	46020800 	.word	0x46020800

08009acc <HAL_PWREx_EnableVddIO2>:
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8009acc:	4a02      	ldr	r2, [pc, #8]	@ (8009ad8 <HAL_PWREx_EnableVddIO2+0xc>)
 8009ace:	6913      	ldr	r3, [r2, #16]
 8009ad0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009ad4:	6113      	str	r3, [r2, #16]
}
 8009ad6:	4770      	bx	lr
 8009ad8:	46020800 	.word	0x46020800

08009adc <HAL_PWREx_EnableVddA>:
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8009adc:	4a02      	ldr	r2, [pc, #8]	@ (8009ae8 <HAL_PWREx_EnableVddA+0xc>)
 8009ade:	6913      	ldr	r3, [r2, #16]
 8009ae0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ae4:	6113      	str	r3, [r2, #16]
}
 8009ae6:	4770      	bx	lr
 8009ae8:	46020800 	.word	0x46020800

08009aec <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8009aec:	b508      	push	{r3, lr}
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8009aee:	f7ff ffa7 	bl	8009a40 <HAL_PWREx_GetVoltageRange>

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009af2:	f5b0 3f40 	cmp.w	r0, #196608	@ 0x30000
 8009af6:	d002      	beq.n	8009afe <HAL_PWREx_EnableUSBHSTranceiverSupply+0x12>
 8009af8:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8009afc:	d106      	bne.n	8009b0c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x20>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8009afe:	4a04      	ldr	r2, [pc, #16]	@ (8009b10 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x24>)
 8009b00:	68d3      	ldr	r3, [r2, #12]
 8009b02:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8009b06:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009b08:	2000      	movs	r0, #0
}
 8009b0a:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8009b0c:	2001      	movs	r0, #1
 8009b0e:	e7fc      	b.n	8009b0a <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1e>
 8009b10:	46020800 	.word	0x46020800

08009b14 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8009b14:	4a02      	ldr	r2, [pc, #8]	@ (8009b20 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8009b16:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009b18:	f043 0301 	orr.w	r3, r3, #1
 8009b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8009b1e:	4770      	bx	lr
 8009b20:	46020800 	.word	0x46020800

08009b24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009b24:	b530      	push	{r4, r5, lr}
 8009b26:	b083      	sub	sp, #12
 8009b28:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8009be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b30:	f013 0f04 	tst.w	r3, #4
 8009b34:	d00f      	beq.n	8009b56 <RCC_SetFlashLatencyFromMSIRange+0x32>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009b36:	f7ff ff83 	bl	8009a40 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009b3a:	f5b0 3f40 	cmp.w	r0, #196608	@ 0x30000
 8009b3e:	d020      	beq.n	8009b82 <RCC_SetFlashLatencyFromMSIRange+0x5e>
 8009b40:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8009b44:	d01d      	beq.n	8009b82 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      latency = FLASH_LATENCY_0; /* 0WS */
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8009b46:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8009b4a:	d22c      	bcs.n	8009ba6 <RCC_SetFlashLatencyFromMSIRange+0x82>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009b4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009b50:	d040      	beq.n	8009bd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
      }
      else
      {
        return HAL_ERROR;
 8009b52:	2001      	movs	r0, #1
 8009b54:	e025      	b.n	8009ba2 <RCC_SetFlashLatencyFromMSIRange+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8009b56:	4d22      	ldr	r5, [pc, #136]	@ (8009be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009b58:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8009b5c:	f043 0304 	orr.w	r3, r3, #4
 8009b60:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 8009b64:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	9301      	str	r3, [sp, #4]
 8009b6e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8009b70:	f7ff ff66 	bl	8009a40 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8009b74:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8009b78:	f023 0304 	bic.w	r3, r3, #4
 8009b7c:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 8009b80:	e7db      	b.n	8009b3a <RCC_SetFlashLatencyFromMSIRange+0x16>
    if (msirange < RCC_MSIRANGE_1)
 8009b82:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8009b86:	d223      	bcs.n	8009bd0 <RCC_SetFlashLatencyFromMSIRange+0xac>
      latency = FLASH_LATENCY_1; /* 1WS */
 8009b88:	2001      	movs	r0, #1
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009b8a:	4a16      	ldr	r2, [pc, #88]	@ (8009be4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8009b8c:	6813      	ldr	r3, [r2, #0]
 8009b8e:	f023 030f 	bic.w	r3, r3, #15
 8009b92:	4303      	orrs	r3, r0
 8009b94:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009b96:	6813      	ldr	r3, [r2, #0]
 8009b98:	f003 030f 	and.w	r3, r3, #15
 8009b9c:	4283      	cmp	r3, r0
 8009b9e:	d11d      	bne.n	8009bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009ba0:	2000      	movs	r0, #0
}
 8009ba2:	b003      	add	sp, #12
 8009ba4:	bd30      	pop	{r4, r5, pc}
      if (msirange > RCC_MSIRANGE_2)
 8009ba6:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
 8009baa:	d905      	bls.n	8009bb8 <RCC_SetFlashLatencyFromMSIRange+0x94>
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8009bac:	b9a0      	cbnz	r0, 8009bd8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
          if (msirange > RCC_MSIRANGE_3)
 8009bae:	f1b4 5f40 	cmp.w	r4, #805306368	@ 0x30000000
 8009bb2:	d8ea      	bhi.n	8009b8a <RCC_SetFlashLatencyFromMSIRange+0x66>
            latency = FLASH_LATENCY_1; /* 0WS */
 8009bb4:	2001      	movs	r0, #1
 8009bb6:	e7e8      	b.n	8009b8a <RCC_SetFlashLatencyFromMSIRange+0x66>
        if (msirange == RCC_MSIRANGE_1)
 8009bb8:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8009bbc:	d001      	beq.n	8009bc2 <RCC_SetFlashLatencyFromMSIRange+0x9e>
          latency = FLASH_LATENCY_1; /* 1WS */
 8009bbe:	2001      	movs	r0, #1
 8009bc0:	e7e3      	b.n	8009b8a <RCC_SetFlashLatencyFromMSIRange+0x66>
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009bc2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009bc6:	d001      	beq.n	8009bcc <RCC_SetFlashLatencyFromMSIRange+0xa8>
            latency = FLASH_LATENCY_2; /* 2WS */
 8009bc8:	2002      	movs	r0, #2
 8009bca:	e7de      	b.n	8009b8a <RCC_SetFlashLatencyFromMSIRange+0x66>
            latency = FLASH_LATENCY_1; /* 1WS */
 8009bcc:	2001      	movs	r0, #1
 8009bce:	e7dc      	b.n	8009b8a <RCC_SetFlashLatencyFromMSIRange+0x66>
      latency = FLASH_LATENCY_0; /* 0WS */
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	e7da      	b.n	8009b8a <RCC_SetFlashLatencyFromMSIRange+0x66>
        latency = FLASH_LATENCY_3; /* 3WS */
 8009bd4:	2003      	movs	r0, #3
 8009bd6:	e7d8      	b.n	8009b8a <RCC_SetFlashLatencyFromMSIRange+0x66>
          latency = FLASH_LATENCY_0; /* 0WS */
 8009bd8:	2000      	movs	r0, #0
 8009bda:	e7d6      	b.n	8009b8a <RCC_SetFlashLatencyFromMSIRange+0x66>
    return HAL_ERROR;
 8009bdc:	2001      	movs	r0, #1
 8009bde:	e7e0      	b.n	8009ba2 <RCC_SetFlashLatencyFromMSIRange+0x7e>
 8009be0:	46020c00 	.word	0x46020c00
 8009be4:	40022000 	.word	0x40022000

08009be8 <HAL_RCC_GetSysClockFreq>:
{
 8009be8:	b410      	push	{r4}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bea:	4a59      	ldr	r2, [pc, #356]	@ (8009d50 <HAL_RCC_GetSysClockFreq+0x168>)
 8009bec:	69d3      	ldr	r3, [r2, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009bee:	6a92      	ldr	r2, [r2, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009bf0:	f013 030c 	ands.w	r3, r3, #12
 8009bf4:	d010      	beq.n	8009c18 <HAL_RCC_GetSysClockFreq+0x30>
 8009bf6:	f002 0203 	and.w	r2, r2, #3
 8009bfa:	2b0c      	cmp	r3, #12
 8009bfc:	d00a      	beq.n	8009c14 <HAL_RCC_GetSysClockFreq+0x2c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009bfe:	4a54      	ldr	r2, [pc, #336]	@ (8009d50 <HAL_RCC_GetSysClockFreq+0x168>)
 8009c00:	69d2      	ldr	r2, [r2, #28]
 8009c02:	f002 020c 	and.w	r2, r2, #12
 8009c06:	2a04      	cmp	r2, #4
 8009c08:	d020      	beq.n	8009c4c <HAL_RCC_GetSysClockFreq+0x64>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009c0a:	2b08      	cmp	r3, #8
 8009c0c:	d021      	beq.n	8009c52 <HAL_RCC_GetSysClockFreq+0x6a>
  uint32_t sysclockfreq = 0U;
 8009c0e:	2000      	movs	r0, #0
  uint32_t msirange = 0U;
 8009c10:	4604      	mov	r4, r0
 8009c12:	e010      	b.n	8009c36 <HAL_RCC_GetSysClockFreq+0x4e>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009c14:	2a01      	cmp	r2, #1
 8009c16:	d1f2      	bne.n	8009bfe <HAL_RCC_GetSysClockFreq+0x16>
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8009c18:	4a4d      	ldr	r2, [pc, #308]	@ (8009d50 <HAL_RCC_GetSysClockFreq+0x168>)
 8009c1a:	6892      	ldr	r2, [r2, #8]
 8009c1c:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
 8009c20:	d10e      	bne.n	8009c40 <HAL_RCC_GetSysClockFreq+0x58>
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8009c22:	4a4b      	ldr	r2, [pc, #300]	@ (8009d50 <HAL_RCC_GetSysClockFreq+0x168>)
 8009c24:	f8d2 20f4 	ldr.w	r2, [r2, #244]	@ 0xf4
 8009c28:	f3c2 3203 	ubfx	r2, r2, #12, #4
    msirange = MSIRangeTable[msirange];
 8009c2c:	4949      	ldr	r1, [pc, #292]	@ (8009d54 <HAL_RCC_GetSysClockFreq+0x16c>)
 8009c2e:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009c32:	b14b      	cbz	r3, 8009c48 <HAL_RCC_GetSysClockFreq+0x60>
  uint32_t sysclockfreq = 0U;
 8009c34:	2000      	movs	r0, #0
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009c36:	2b0c      	cmp	r3, #12
 8009c38:	d00e      	beq.n	8009c58 <HAL_RCC_GetSysClockFreq+0x70>
}
 8009c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c3e:	4770      	bx	lr
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8009c40:	4a43      	ldr	r2, [pc, #268]	@ (8009d50 <HAL_RCC_GetSysClockFreq+0x168>)
 8009c42:	6892      	ldr	r2, [r2, #8]
 8009c44:	0f12      	lsrs	r2, r2, #28
 8009c46:	e7f1      	b.n	8009c2c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = msirange;
 8009c48:	4620      	mov	r0, r4
 8009c4a:	e7f4      	b.n	8009c36 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8009c4c:	4842      	ldr	r0, [pc, #264]	@ (8009d58 <HAL_RCC_GetSysClockFreq+0x170>)
  uint32_t msirange = 0U;
 8009c4e:	2400      	movs	r4, #0
 8009c50:	e7f1      	b.n	8009c36 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSE_VALUE;
 8009c52:	4841      	ldr	r0, [pc, #260]	@ (8009d58 <HAL_RCC_GetSysClockFreq+0x170>)
  uint32_t msirange = 0U;
 8009c54:	2400      	movs	r4, #0
 8009c56:	e7ee      	b.n	8009c36 <HAL_RCC_GetSysClockFreq+0x4e>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009c58:	483d      	ldr	r0, [pc, #244]	@ (8009d50 <HAL_RCC_GetSysClockFreq+0x168>)
 8009c5a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009c5c:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009c60:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009c62:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009c66:	3301      	adds	r3, #1
 8009c68:	ee07 3a10 	vmov	s14, r3
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009c6c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009c6e:	f3c3 1c00 	ubfx	ip, r3, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009c72:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009c74:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8009c78:	fb0c f303 	mul.w	r3, ip, r3
 8009c7c:	ee07 3a90 	vmov	s15, r3
 8009c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8009c84:	2902      	cmp	r1, #2
 8009c86:	d01e      	beq.n	8009cc6 <HAL_RCC_GetSysClockFreq+0xde>
 8009c88:	2903      	cmp	r1, #3
 8009c8a:	d046      	beq.n	8009d1a <HAL_RCC_GetSysClockFreq+0x132>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c8c:	ee06 4a90 	vmov	s13, r4
 8009c90:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009c94:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009c98:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8009c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8009d50 <HAL_RCC_GetSysClockFreq+0x168>)
 8009c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca4:	ee07 3a10 	vmov	s14, r3
 8009ca8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009cac:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8009d5c <HAL_RCC_GetSysClockFreq+0x174>
 8009cb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009cb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cbc:	ee77 7a87 	vadd.f32	s15, s15, s14
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009cc0:	ee66 6a27 	vmul.f32	s13, s12, s15
        break;
 8009cc4:	e019      	b.n	8009cfa <HAL_RCC_GetSysClockFreq+0x112>
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009cc6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009cca:	ed9f 6a25 	vldr	s12, [pc, #148]	@ 8009d60 <HAL_RCC_GetSysClockFreq+0x178>
 8009cce:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8009cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8009d50 <HAL_RCC_GetSysClockFreq+0x168>)
 8009cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cda:	ee07 3a10 	vmov	s14, r3
 8009cde:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009ce2:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8009d5c <HAL_RCC_GetSysClockFreq+0x174>
 8009ce6:	ee67 7a86 	vmul.f32	s15, s15, s12
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009cea:	ee77 7a27 	vadd.f32	s15, s14, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009cee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cf2:	ee77 7a87 	vadd.f32	s15, s15, s14
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009cf6:	ee66 6aa7 	vmul.f32	s13, s13, s15
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8009cfa:	4b15      	ldr	r3, [pc, #84]	@ (8009d50 <HAL_RCC_GetSysClockFreq+0x168>)
 8009cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cfe:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009d02:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8009d04:	ee07 3a90 	vmov	s15, r3
 8009d08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d14:	ee17 0a90 	vmov	r0, s15
  return sysclockfreq;
 8009d18:	e78f      	b.n	8009c3a <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d1a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009d1e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8009d60 <HAL_RCC_GetSysClockFreq+0x178>
 8009d22:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8009d26:	4b0a      	ldr	r3, [pc, #40]	@ (8009d50 <HAL_RCC_GetSysClockFreq+0x168>)
 8009d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d2e:	ee07 3a10 	vmov	s14, r3
 8009d32:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009d36:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 8009d5c <HAL_RCC_GetSysClockFreq+0x174>
 8009d3a:	ee67 7a86 	vmul.f32	s15, s15, s12
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009d42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d46:	ee77 7a87 	vadd.f32	s15, s15, s14
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 8009d4e:	e7d4      	b.n	8009cfa <HAL_RCC_GetSysClockFreq+0x112>
 8009d50:	46020c00 	.word	0x46020c00
 8009d54:	080176e0 	.word	0x080176e0
 8009d58:	00f42400 	.word	0x00f42400
 8009d5c:	39000000 	.word	0x39000000
 8009d60:	4b742400 	.word	0x4b742400

08009d64 <HAL_RCC_ClockConfig>:
  if (pRCC_ClkInitStruct == NULL)
 8009d64:	2800      	cmp	r0, #0
 8009d66:	f000 8171 	beq.w	800a04c <HAL_RCC_ClockConfig+0x2e8>
{
 8009d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	460d      	mov	r5, r1
 8009d70:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d72:	4b7f      	ldr	r3, [pc, #508]	@ (8009f70 <HAL_RCC_ClockConfig+0x20c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 030f 	and.w	r3, r3, #15
 8009d7a:	428b      	cmp	r3, r1
 8009d7c:	d20b      	bcs.n	8009d96 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d7e:	4a7c      	ldr	r2, [pc, #496]	@ (8009f70 <HAL_RCC_ClockConfig+0x20c>)
 8009d80:	6813      	ldr	r3, [r2, #0]
 8009d82:	f023 030f 	bic.w	r3, r3, #15
 8009d86:	430b      	orrs	r3, r1
 8009d88:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d8a:	6813      	ldr	r3, [r2, #0]
 8009d8c:	f003 030f 	and.w	r3, r3, #15
 8009d90:	428b      	cmp	r3, r1
 8009d92:	f040 815d 	bne.w	800a050 <HAL_RCC_ClockConfig+0x2ec>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	f013 0f10 	tst.w	r3, #16
 8009d9c:	d00c      	beq.n	8009db8 <HAL_RCC_ClockConfig+0x54>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009d9e:	6962      	ldr	r2, [r4, #20]
 8009da0:	4b74      	ldr	r3, [pc, #464]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d905      	bls.n	8009db8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8009dac:	4971      	ldr	r1, [pc, #452]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009dae:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8009db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009db4:	431a      	orrs	r2, r3
 8009db6:	624a      	str	r2, [r1, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	f013 0f08 	tst.w	r3, #8
 8009dbe:	d00e      	beq.n	8009dde <HAL_RCC_ClockConfig+0x7a>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009dc0:	6922      	ldr	r2, [r4, #16]
 8009dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	091b      	lsrs	r3, r3, #4
 8009dc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d906      	bls.n	8009dde <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009dd0:	4968      	ldr	r1, [pc, #416]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009dd2:	6a0b      	ldr	r3, [r1, #32]
 8009dd4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009dd8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009ddc:	620b      	str	r3, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	f013 0f04 	tst.w	r3, #4
 8009de4:	d00c      	beq.n	8009e00 <HAL_RCC_ClockConfig+0x9c>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009de6:	68e2      	ldr	r2, [r4, #12]
 8009de8:	4b62      	ldr	r3, [pc, #392]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009dea:	6a1b      	ldr	r3, [r3, #32]
 8009dec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d905      	bls.n	8009e00 <HAL_RCC_ClockConfig+0x9c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009df4:	495f      	ldr	r1, [pc, #380]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009df6:	6a0b      	ldr	r3, [r1, #32]
 8009df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	f013 0f02 	tst.w	r3, #2
 8009e06:	d00c      	beq.n	8009e22 <HAL_RCC_ClockConfig+0xbe>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009e08:	68a2      	ldr	r2, [r4, #8]
 8009e0a:	4b5a      	ldr	r3, [pc, #360]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009e0c:	6a1b      	ldr	r3, [r3, #32]
 8009e0e:	f003 030f 	and.w	r3, r3, #15
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d905      	bls.n	8009e22 <HAL_RCC_ClockConfig+0xbe>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8009e16:	4957      	ldr	r1, [pc, #348]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009e18:	6a0b      	ldr	r3, [r1, #32]
 8009e1a:	f023 030f 	bic.w	r3, r3, #15
 8009e1e:	431a      	orrs	r2, r3
 8009e20:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	f013 0f01 	tst.w	r3, #1
 8009e28:	f000 80a8 	beq.w	8009f7c <HAL_RCC_ClockConfig+0x218>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e2c:	6863      	ldr	r3, [r4, #4]
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d00a      	beq.n	8009e48 <HAL_RCC_ClockConfig+0xe4>
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d061      	beq.n	8009efa <HAL_RCC_ClockConfig+0x196>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d166      	bne.n	8009f08 <HAL_RCC_ClockConfig+0x1a4>
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009e3a:	4b4e      	ldr	r3, [pc, #312]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f013 0f04 	tst.w	r3, #4
 8009e42:	d126      	bne.n	8009e92 <HAL_RCC_ClockConfig+0x12e>
          return HAL_ERROR;
 8009e44:	2001      	movs	r0, #1
 8009e46:	e0ff      	b.n	800a048 <HAL_RCC_ClockConfig+0x2e4>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e48:	4b4a      	ldr	r3, [pc, #296]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e4e:	f013 0f04 	tst.w	r3, #4
 8009e52:	d10e      	bne.n	8009e72 <HAL_RCC_ClockConfig+0x10e>
        __HAL_RCC_PWR_CLK_ENABLE();
 8009e54:	4b47      	ldr	r3, [pc, #284]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009e56:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8009e5a:	f042 0204 	orr.w	r2, r2, #4
 8009e5e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8009e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e66:	f003 0304 	and.w	r3, r3, #4
 8009e6a:	9301      	str	r3, [sp, #4]
 8009e6c:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8009e6e:	2701      	movs	r7, #1
 8009e70:	e000      	b.n	8009e74 <HAL_RCC_ClockConfig+0x110>
    FlagStatus  pwrclkchanged = RESET;
 8009e72:	2700      	movs	r7, #0
      tickstart = HAL_GetTick();
 8009e74:	f7fa fc36 	bl	80046e4 <HAL_GetTick>
 8009e78:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8009e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8009f78 <HAL_RCC_ClockConfig+0x214>)
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8009e82:	d126      	bne.n	8009ed2 <HAL_RCC_ClockConfig+0x16e>
      if (pwrclkchanged == SET)
 8009e84:	bb8f      	cbnz	r7, 8009eea <HAL_RCC_ClockConfig+0x186>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009e86:	4b3b      	ldr	r3, [pc, #236]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8009e8e:	f000 80e1 	beq.w	800a054 <HAL_RCC_ClockConfig+0x2f0>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8009e92:	4a38      	ldr	r2, [pc, #224]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009e94:	69d3      	ldr	r3, [r2, #28]
 8009e96:	f023 0303 	bic.w	r3, r3, #3
 8009e9a:	6861      	ldr	r1, [r4, #4]
 8009e9c:	430b      	orrs	r3, r1
 8009e9e:	61d3      	str	r3, [r2, #28]
    tickstart = HAL_GetTick();
 8009ea0:	f7fa fc20 	bl	80046e4 <HAL_GetTick>
 8009ea4:	4606      	mov	r6, r0
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ea6:	6863      	ldr	r3, [r4, #4]
 8009ea8:	2b03      	cmp	r3, #3
 8009eaa:	d034      	beq.n	8009f16 <HAL_RCC_ClockConfig+0x1b2>
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d041      	beq.n	8009f34 <HAL_RCC_ClockConfig+0x1d0>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d04e      	beq.n	8009f52 <HAL_RCC_ClockConfig+0x1ee>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009eb6:	69db      	ldr	r3, [r3, #28]
 8009eb8:	f003 030c 	and.w	r3, r3, #12
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d05d      	beq.n	8009f7c <HAL_RCC_ClockConfig+0x218>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ec0:	f7fa fc10 	bl	80046e4 <HAL_GetTick>
 8009ec4:	1b80      	subs	r0, r0, r6
 8009ec6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009eca:	4298      	cmp	r0, r3
 8009ecc:	d9f2      	bls.n	8009eb4 <HAL_RCC_ClockConfig+0x150>
            return HAL_TIMEOUT;
 8009ece:	2003      	movs	r0, #3
 8009ed0:	e0ba      	b.n	800a048 <HAL_RCC_ClockConfig+0x2e4>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009ed2:	4b29      	ldr	r3, [pc, #164]	@ (8009f78 <HAL_RCC_ClockConfig+0x214>)
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8009eda:	d1d3      	bne.n	8009e84 <HAL_RCC_ClockConfig+0x120>
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8009edc:	f7fa fc02 	bl	80046e4 <HAL_GetTick>
 8009ee0:	1b80      	subs	r0, r0, r6
 8009ee2:	2802      	cmp	r0, #2
 8009ee4:	d9f5      	bls.n	8009ed2 <HAL_RCC_ClockConfig+0x16e>
            return HAL_TIMEOUT;
 8009ee6:	2003      	movs	r0, #3
 8009ee8:	e0ae      	b.n	800a048 <HAL_RCC_ClockConfig+0x2e4>
        __HAL_RCC_PWR_CLK_DISABLE();
 8009eea:	4a22      	ldr	r2, [pc, #136]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009eec:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8009ef0:	f023 0304 	bic.w	r3, r3, #4
 8009ef4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009ef8:	e7c5      	b.n	8009e86 <HAL_RCC_ClockConfig+0x122>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009efa:	4b1e      	ldr	r3, [pc, #120]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009f02:	d1c6      	bne.n	8009e92 <HAL_RCC_ClockConfig+0x12e>
          return HAL_ERROR;
 8009f04:	2001      	movs	r0, #1
 8009f06:	e09f      	b.n	800a048 <HAL_RCC_ClockConfig+0x2e4>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f08:	4b1a      	ldr	r3, [pc, #104]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8009f10:	d1bf      	bne.n	8009e92 <HAL_RCC_ClockConfig+0x12e>
          return HAL_ERROR;
 8009f12:	2001      	movs	r0, #1
 8009f14:	e098      	b.n	800a048 <HAL_RCC_ClockConfig+0x2e4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f16:	4b17      	ldr	r3, [pc, #92]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009f18:	69db      	ldr	r3, [r3, #28]
 8009f1a:	f003 030c 	and.w	r3, r3, #12
 8009f1e:	2b0c      	cmp	r3, #12
 8009f20:	d02c      	beq.n	8009f7c <HAL_RCC_ClockConfig+0x218>
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f22:	f7fa fbdf 	bl	80046e4 <HAL_GetTick>
 8009f26:	1b83      	subs	r3, r0, r6
 8009f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d9f2      	bls.n	8009f16 <HAL_RCC_ClockConfig+0x1b2>
          return HAL_TIMEOUT;
 8009f30:	2003      	movs	r0, #3
 8009f32:	e089      	b.n	800a048 <HAL_RCC_ClockConfig+0x2e4>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009f34:	4b0f      	ldr	r3, [pc, #60]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009f36:	69db      	ldr	r3, [r3, #28]
 8009f38:	f003 030c 	and.w	r3, r3, #12
 8009f3c:	2b08      	cmp	r3, #8
 8009f3e:	d01d      	beq.n	8009f7c <HAL_RCC_ClockConfig+0x218>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f40:	f7fa fbd0 	bl	80046e4 <HAL_GetTick>
 8009f44:	1b80      	subs	r0, r0, r6
 8009f46:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009f4a:	4298      	cmp	r0, r3
 8009f4c:	d9f2      	bls.n	8009f34 <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 8009f4e:	2003      	movs	r0, #3
 8009f50:	e07a      	b.n	800a048 <HAL_RCC_ClockConfig+0x2e4>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009f52:	4b08      	ldr	r3, [pc, #32]	@ (8009f74 <HAL_RCC_ClockConfig+0x210>)
 8009f54:	69db      	ldr	r3, [r3, #28]
 8009f56:	f013 0f0c 	tst.w	r3, #12
 8009f5a:	d00f      	beq.n	8009f7c <HAL_RCC_ClockConfig+0x218>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f5c:	f7fa fbc2 	bl	80046e4 <HAL_GetTick>
 8009f60:	1b80      	subs	r0, r0, r6
 8009f62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009f66:	4298      	cmp	r0, r3
 8009f68:	d9f3      	bls.n	8009f52 <HAL_RCC_ClockConfig+0x1ee>
            return HAL_TIMEOUT;
 8009f6a:	2003      	movs	r0, #3
 8009f6c:	e06c      	b.n	800a048 <HAL_RCC_ClockConfig+0x2e4>
 8009f6e:	bf00      	nop
 8009f70:	40022000 	.word	0x40022000
 8009f74:	46020c00 	.word	0x46020c00
 8009f78:	46020800 	.word	0x46020800
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	f013 0f02 	tst.w	r3, #2
 8009f82:	d00c      	beq.n	8009f9e <HAL_RCC_ClockConfig+0x23a>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009f84:	68a2      	ldr	r2, [r4, #8]
 8009f86:	4b35      	ldr	r3, [pc, #212]	@ (800a05c <HAL_RCC_ClockConfig+0x2f8>)
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	f003 030f 	and.w	r3, r3, #15
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d205      	bcs.n	8009f9e <HAL_RCC_ClockConfig+0x23a>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8009f92:	4932      	ldr	r1, [pc, #200]	@ (800a05c <HAL_RCC_ClockConfig+0x2f8>)
 8009f94:	6a0b      	ldr	r3, [r1, #32]
 8009f96:	f023 030f 	bic.w	r3, r3, #15
 8009f9a:	431a      	orrs	r2, r3
 8009f9c:	620a      	str	r2, [r1, #32]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009f9e:	4b30      	ldr	r3, [pc, #192]	@ (800a060 <HAL_RCC_ClockConfig+0x2fc>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 030f 	and.w	r3, r3, #15
 8009fa6:	42ab      	cmp	r3, r5
 8009fa8:	d90a      	bls.n	8009fc0 <HAL_RCC_ClockConfig+0x25c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009faa:	4a2d      	ldr	r2, [pc, #180]	@ (800a060 <HAL_RCC_ClockConfig+0x2fc>)
 8009fac:	6813      	ldr	r3, [r2, #0]
 8009fae:	f023 030f 	bic.w	r3, r3, #15
 8009fb2:	432b      	orrs	r3, r5
 8009fb4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fb6:	6813      	ldr	r3, [r2, #0]
 8009fb8:	f003 030f 	and.w	r3, r3, #15
 8009fbc:	42ab      	cmp	r3, r5
 8009fbe:	d14b      	bne.n	800a058 <HAL_RCC_ClockConfig+0x2f4>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	f013 0f04 	tst.w	r3, #4
 8009fc6:	d00c      	beq.n	8009fe2 <HAL_RCC_ClockConfig+0x27e>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009fc8:	68e2      	ldr	r2, [r4, #12]
 8009fca:	4b24      	ldr	r3, [pc, #144]	@ (800a05c <HAL_RCC_ClockConfig+0x2f8>)
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d205      	bcs.n	8009fe2 <HAL_RCC_ClockConfig+0x27e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009fd6:	4921      	ldr	r1, [pc, #132]	@ (800a05c <HAL_RCC_ClockConfig+0x2f8>)
 8009fd8:	6a0b      	ldr	r3, [r1, #32]
 8009fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fde:	431a      	orrs	r2, r3
 8009fe0:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	f013 0f08 	tst.w	r3, #8
 8009fe8:	d00e      	beq.n	800a008 <HAL_RCC_ClockConfig+0x2a4>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009fea:	6922      	ldr	r2, [r4, #16]
 8009fec:	4b1b      	ldr	r3, [pc, #108]	@ (800a05c <HAL_RCC_ClockConfig+0x2f8>)
 8009fee:	6a1b      	ldr	r3, [r3, #32]
 8009ff0:	091b      	lsrs	r3, r3, #4
 8009ff2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d206      	bcs.n	800a008 <HAL_RCC_ClockConfig+0x2a4>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009ffa:	4918      	ldr	r1, [pc, #96]	@ (800a05c <HAL_RCC_ClockConfig+0x2f8>)
 8009ffc:	6a0b      	ldr	r3, [r1, #32]
 8009ffe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800a002:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800a006:	620b      	str	r3, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	f013 0f10 	tst.w	r3, #16
 800a00e:	d00c      	beq.n	800a02a <HAL_RCC_ClockConfig+0x2c6>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a010:	6962      	ldr	r2, [r4, #20]
 800a012:	4b12      	ldr	r3, [pc, #72]	@ (800a05c <HAL_RCC_ClockConfig+0x2f8>)
 800a014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a016:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d205      	bcs.n	800a02a <HAL_RCC_ClockConfig+0x2c6>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800a01e:	490f      	ldr	r1, [pc, #60]	@ (800a05c <HAL_RCC_ClockConfig+0x2f8>)
 800a020:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800a022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a026:	431a      	orrs	r2, r3
 800a028:	624a      	str	r2, [r1, #36]	@ 0x24
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a02a:	f7ff fddd 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800a02e:	4b0b      	ldr	r3, [pc, #44]	@ (800a05c <HAL_RCC_ClockConfig+0x2f8>)
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	f003 030f 	and.w	r3, r3, #15
 800a036:	4a0b      	ldr	r2, [pc, #44]	@ (800a064 <HAL_RCC_ClockConfig+0x300>)
 800a038:	5cd3      	ldrb	r3, [r2, r3]
 800a03a:	40d8      	lsrs	r0, r3
 800a03c:	4b0a      	ldr	r3, [pc, #40]	@ (800a068 <HAL_RCC_ClockConfig+0x304>)
 800a03e:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800a040:	4b0a      	ldr	r3, [pc, #40]	@ (800a06c <HAL_RCC_ClockConfig+0x308>)
 800a042:	6818      	ldr	r0, [r3, #0]
 800a044:	f7f9 ff52 	bl	8003eec <HAL_InitTick>
}
 800a048:	b003      	add	sp, #12
 800a04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800a04c:	2001      	movs	r0, #1
}
 800a04e:	4770      	bx	lr
      return HAL_ERROR;
 800a050:	2001      	movs	r0, #1
 800a052:	e7f9      	b.n	800a048 <HAL_RCC_ClockConfig+0x2e4>
        return HAL_ERROR;
 800a054:	2001      	movs	r0, #1
 800a056:	e7f7      	b.n	800a048 <HAL_RCC_ClockConfig+0x2e4>
      return HAL_ERROR;
 800a058:	2001      	movs	r0, #1
 800a05a:	e7f5      	b.n	800a048 <HAL_RCC_ClockConfig+0x2e4>
 800a05c:	46020c00 	.word	0x46020c00
 800a060:	40022000 	.word	0x40022000
 800a064:	08017728 	.word	0x08017728
 800a068:	20000008 	.word	0x20000008
 800a06c:	20000010 	.word	0x20000010

0800a070 <HAL_RCC_GetHCLKFreq>:
{
 800a070:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a072:	f7ff fdb9 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800a076:	4b05      	ldr	r3, [pc, #20]	@ (800a08c <HAL_RCC_GetHCLKFreq+0x1c>)
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	f003 030f 	and.w	r3, r3, #15
 800a07e:	4a04      	ldr	r2, [pc, #16]	@ (800a090 <HAL_RCC_GetHCLKFreq+0x20>)
 800a080:	5cd3      	ldrb	r3, [r2, r3]
 800a082:	40d8      	lsrs	r0, r3
 800a084:	4b03      	ldr	r3, [pc, #12]	@ (800a094 <HAL_RCC_GetHCLKFreq+0x24>)
 800a086:	6018      	str	r0, [r3, #0]
}
 800a088:	bd08      	pop	{r3, pc}
 800a08a:	bf00      	nop
 800a08c:	46020c00 	.word	0x46020c00
 800a090:	08017728 	.word	0x08017728
 800a094:	20000008 	.word	0x20000008

0800a098 <HAL_RCC_OscConfig>:
  if (pRCC_OscInitStruct == NULL)
 800a098:	2800      	cmp	r0, #0
 800a09a:	f000 8529 	beq.w	800aaf0 <HAL_RCC_OscConfig+0xa58>
{
 800a09e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0a0:	b085      	sub	sp, #20
 800a0a2:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0a4:	4b9c      	ldr	r3, [pc, #624]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a0a6:	69dd      	ldr	r5, [r3, #28]
 800a0a8:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a0ac:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 800a0ae:	f006 0603 	and.w	r6, r6, #3
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a0b2:	6803      	ldr	r3, [r0, #0]
 800a0b4:	f013 0f10 	tst.w	r3, #16
 800a0b8:	f000 8094 	beq.w	800a1e4 <HAL_RCC_OscConfig+0x14c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a0bc:	b1ed      	cbz	r5, 800a0fa <HAL_RCC_OscConfig+0x62>
 800a0be:	2d0c      	cmp	r5, #12
 800a0c0:	d019      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x5e>
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a0c2:	69e3      	ldr	r3, [r4, #28]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f000 8111 	beq.w	800a2ec <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_MSI_ENABLE();
 800a0ca:	4a93      	ldr	r2, [pc, #588]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a0cc:	6813      	ldr	r3, [r2, #0]
 800a0ce:	f043 0301 	orr.w	r3, r3, #1
 800a0d2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a0d4:	f7fa fb06 	bl	80046e4 <HAL_GetTick>
 800a0d8:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a0da:	4b8f      	ldr	r3, [pc, #572]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f013 0f04 	tst.w	r3, #4
 800a0e2:	f040 80cd 	bne.w	800a280 <HAL_RCC_OscConfig+0x1e8>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a0e6:	f7fa fafd 	bl	80046e4 <HAL_GetTick>
 800a0ea:	1bc0      	subs	r0, r0, r7
 800a0ec:	2802      	cmp	r0, #2
 800a0ee:	d9f4      	bls.n	800a0da <HAL_RCC_OscConfig+0x42>
            return HAL_TIMEOUT;
 800a0f0:	2003      	movs	r0, #3
 800a0f2:	f000 bd00 	b.w	800aaf6 <HAL_RCC_OscConfig+0xa5e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a0f6:	2e01      	cmp	r6, #1
 800a0f8:	d1e3      	bne.n	800a0c2 <HAL_RCC_OscConfig+0x2a>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a0fa:	69e3      	ldr	r3, [r4, #28]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 84f9 	beq.w	800aaf4 <HAL_RCC_OscConfig+0xa5c>
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a102:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a104:	4b84      	ldr	r3, [pc, #528]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800a10c:	d01c      	beq.n	800a148 <HAL_RCC_OscConfig+0xb0>
 800a10e:	4b82      	ldr	r3, [pc, #520]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a116:	4298      	cmp	r0, r3
 800a118:	d944      	bls.n	800a1a4 <HAL_RCC_OscConfig+0x10c>
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a11a:	b1e5      	cbz	r5, 800a156 <HAL_RCC_OscConfig+0xbe>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a11c:	4a7e      	ldr	r2, [pc, #504]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a11e:	6893      	ldr	r3, [r2, #8]
 800a120:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a124:	6093      	str	r3, [r2, #8]
 800a126:	6893      	ldr	r3, [r2, #8]
 800a128:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a12c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a12e:	430b      	orrs	r3, r1
 800a130:	6093      	str	r3, [r2, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a132:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a134:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a138:	d314      	bcc.n	800a164 <HAL_RCC_OscConfig+0xcc>
 800a13a:	68d3      	ldr	r3, [r2, #12]
 800a13c:	f023 031f 	bic.w	r3, r3, #31
 800a140:	6a21      	ldr	r1, [r4, #32]
 800a142:	430b      	orrs	r3, r1
 800a144:	60d3      	str	r3, [r2, #12]
 800a146:	e044      	b.n	800a1d2 <HAL_RCC_OscConfig+0x13a>
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a148:	4b73      	ldr	r3, [pc, #460]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a14a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a14e:	041b      	lsls	r3, r3, #16
 800a150:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a154:	e7df      	b.n	800a116 <HAL_RCC_OscConfig+0x7e>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a156:	f7ff fce5 	bl	8009b24 <RCC_SetFlashLatencyFromMSIRange>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d0de      	beq.n	800a11c <HAL_RCC_OscConfig+0x84>
              return HAL_ERROR;
 800a15e:	2001      	movs	r0, #1
 800a160:	f000 bcc9 	b.w	800aaf6 <HAL_RCC_OscConfig+0xa5e>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a164:	2b00      	cmp	r3, #0
 800a166:	db0b      	blt.n	800a180 <HAL_RCC_OscConfig+0xe8>
 800a168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a16c:	d311      	bcc.n	800a192 <HAL_RCC_OscConfig+0xfa>
 800a16e:	4a6a      	ldr	r2, [pc, #424]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a170:	68d3      	ldr	r3, [r2, #12]
 800a172:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a176:	6a21      	ldr	r1, [r4, #32]
 800a178:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800a17c:	60d3      	str	r3, [r2, #12]
 800a17e:	e028      	b.n	800a1d2 <HAL_RCC_OscConfig+0x13a>
 800a180:	4a65      	ldr	r2, [pc, #404]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a182:	68d3      	ldr	r3, [r2, #12]
 800a184:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 800a188:	6a21      	ldr	r1, [r4, #32]
 800a18a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800a18e:	60d3      	str	r3, [r2, #12]
 800a190:	e01f      	b.n	800a1d2 <HAL_RCC_OscConfig+0x13a>
 800a192:	4a61      	ldr	r2, [pc, #388]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a194:	68d3      	ldr	r3, [r2, #12]
 800a196:	f423 2378 	bic.w	r3, r3, #1015808	@ 0xf8000
 800a19a:	6a21      	ldr	r1, [r4, #32]
 800a19c:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
 800a1a0:	60d3      	str	r3, [r2, #12]
 800a1a2:	e016      	b.n	800a1d2 <HAL_RCC_OscConfig+0x13a>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a1a4:	4a5c      	ldr	r2, [pc, #368]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a1a6:	6893      	ldr	r3, [r2, #8]
 800a1a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a1ac:	6093      	str	r3, [r2, #8]
 800a1ae:	6893      	ldr	r3, [r2, #8]
 800a1b0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a1b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a1b6:	430b      	orrs	r3, r1
 800a1b8:	6093      	str	r3, [r2, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a1ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a1bc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a1c0:	d336      	bcc.n	800a230 <HAL_RCC_OscConfig+0x198>
 800a1c2:	68d3      	ldr	r3, [r2, #12]
 800a1c4:	f023 031f 	bic.w	r3, r3, #31
 800a1c8:	6a21      	ldr	r1, [r4, #32]
 800a1ca:	430b      	orrs	r3, r1
 800a1cc:	60d3      	str	r3, [r2, #12]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a1ce:	2d00      	cmp	r5, #0
 800a1d0:	d04e      	beq.n	800a270 <HAL_RCC_OscConfig+0x1d8>
        (void) HAL_RCC_GetHCLKFreq();
 800a1d2:	f7ff ff4d 	bl	800a070 <HAL_RCC_GetHCLKFreq>
        status = HAL_InitTick(uwTickPrio);
 800a1d6:	4b51      	ldr	r3, [pc, #324]	@ (800a31c <HAL_RCC_OscConfig+0x284>)
 800a1d8:	6818      	ldr	r0, [r3, #0]
 800a1da:	f7f9 fe87 	bl	8003eec <HAL_InitTick>
        if (status != HAL_OK)
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	f040 8489 	bne.w	800aaf6 <HAL_RCC_OscConfig+0xa5e>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	f013 0f01 	tst.w	r3, #1
 800a1ea:	f000 80a0 	beq.w	800a32e <HAL_RCC_OscConfig+0x296>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a1ee:	2d08      	cmp	r5, #8
 800a1f0:	f000 8099 	beq.w	800a326 <HAL_RCC_OscConfig+0x28e>
 800a1f4:	2d0c      	cmp	r5, #12
 800a1f6:	f000 8093 	beq.w	800a320 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800a1fa:	6863      	ldr	r3, [r4, #4]
 800a1fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a200:	f000 80b6 	beq.w	800a370 <HAL_RCC_OscConfig+0x2d8>
 800a204:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a208:	f000 80c8 	beq.w	800a39c <HAL_RCC_OscConfig+0x304>
 800a20c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a210:	f000 80d2 	beq.w	800a3b8 <HAL_RCC_OscConfig+0x320>
 800a214:	4b40      	ldr	r3, [pc, #256]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800a22c:	601a      	str	r2, [r3, #0]
 800a22e:	e0a4      	b.n	800a37a <HAL_RCC_OscConfig+0x2e2>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a230:	2b00      	cmp	r3, #0
 800a232:	db0b      	blt.n	800a24c <HAL_RCC_OscConfig+0x1b4>
 800a234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a238:	d311      	bcc.n	800a25e <HAL_RCC_OscConfig+0x1c6>
 800a23a:	4a37      	ldr	r2, [pc, #220]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a23c:	68d3      	ldr	r3, [r2, #12]
 800a23e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a242:	6a21      	ldr	r1, [r4, #32]
 800a244:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800a248:	60d3      	str	r3, [r2, #12]
 800a24a:	e7c0      	b.n	800a1ce <HAL_RCC_OscConfig+0x136>
 800a24c:	4a32      	ldr	r2, [pc, #200]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a24e:	68d3      	ldr	r3, [r2, #12]
 800a250:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 800a254:	6a21      	ldr	r1, [r4, #32]
 800a256:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800a25a:	60d3      	str	r3, [r2, #12]
 800a25c:	e7b7      	b.n	800a1ce <HAL_RCC_OscConfig+0x136>
 800a25e:	4a2e      	ldr	r2, [pc, #184]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a260:	68d3      	ldr	r3, [r2, #12]
 800a262:	f423 2378 	bic.w	r3, r3, #1015808	@ 0xf8000
 800a266:	6a21      	ldr	r1, [r4, #32]
 800a268:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
 800a26c:	60d3      	str	r3, [r2, #12]
 800a26e:	e7ae      	b.n	800a1ce <HAL_RCC_OscConfig+0x136>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a270:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a272:	f7ff fc57 	bl	8009b24 <RCC_SetFlashLatencyFromMSIRange>
 800a276:	2800      	cmp	r0, #0
 800a278:	d0ab      	beq.n	800a1d2 <HAL_RCC_OscConfig+0x13a>
              return HAL_ERROR;
 800a27a:	2001      	movs	r0, #1
 800a27c:	f000 bc3b 	b.w	800aaf6 <HAL_RCC_OscConfig+0xa5e>
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a280:	4a25      	ldr	r2, [pc, #148]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a282:	6893      	ldr	r3, [r2, #8]
 800a284:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a288:	6093      	str	r3, [r2, #8]
 800a28a:	6893      	ldr	r3, [r2, #8]
 800a28c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a290:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a292:	430b      	orrs	r3, r1
 800a294:	6093      	str	r3, [r2, #8]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a296:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a298:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a29c:	d306      	bcc.n	800a2ac <HAL_RCC_OscConfig+0x214>
 800a29e:	68d3      	ldr	r3, [r2, #12]
 800a2a0:	f023 031f 	bic.w	r3, r3, #31
 800a2a4:	6a21      	ldr	r1, [r4, #32]
 800a2a6:	430b      	orrs	r3, r1
 800a2a8:	60d3      	str	r3, [r2, #12]
 800a2aa:	e79b      	b.n	800a1e4 <HAL_RCC_OscConfig+0x14c>
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	db0b      	blt.n	800a2c8 <HAL_RCC_OscConfig+0x230>
 800a2b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2b4:	d311      	bcc.n	800a2da <HAL_RCC_OscConfig+0x242>
 800a2b6:	4a18      	ldr	r2, [pc, #96]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a2b8:	68d3      	ldr	r3, [r2, #12]
 800a2ba:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a2be:	6a21      	ldr	r1, [r4, #32]
 800a2c0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800a2c4:	60d3      	str	r3, [r2, #12]
 800a2c6:	e78d      	b.n	800a1e4 <HAL_RCC_OscConfig+0x14c>
 800a2c8:	4a13      	ldr	r2, [pc, #76]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a2ca:	68d3      	ldr	r3, [r2, #12]
 800a2cc:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 800a2d0:	6a21      	ldr	r1, [r4, #32]
 800a2d2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800a2d6:	60d3      	str	r3, [r2, #12]
 800a2d8:	e784      	b.n	800a1e4 <HAL_RCC_OscConfig+0x14c>
 800a2da:	4a0f      	ldr	r2, [pc, #60]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a2dc:	68d3      	ldr	r3, [r2, #12]
 800a2de:	f423 2378 	bic.w	r3, r3, #1015808	@ 0xf8000
 800a2e2:	6a21      	ldr	r1, [r4, #32]
 800a2e4:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
 800a2e8:	60d3      	str	r3, [r2, #12]
 800a2ea:	e77b      	b.n	800a1e4 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_DISABLE();
 800a2ec:	4a0a      	ldr	r2, [pc, #40]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a2ee:	6813      	ldr	r3, [r2, #0]
 800a2f0:	f023 0301 	bic.w	r3, r3, #1
 800a2f4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a2f6:	f7fa f9f5 	bl	80046e4 <HAL_GetTick>
 800a2fa:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a2fc:	4b06      	ldr	r3, [pc, #24]	@ (800a318 <HAL_RCC_OscConfig+0x280>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f013 0f04 	tst.w	r3, #4
 800a304:	f43f af6e 	beq.w	800a1e4 <HAL_RCC_OscConfig+0x14c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a308:	f7fa f9ec 	bl	80046e4 <HAL_GetTick>
 800a30c:	1bc0      	subs	r0, r0, r7
 800a30e:	2802      	cmp	r0, #2
 800a310:	d9f4      	bls.n	800a2fc <HAL_RCC_OscConfig+0x264>
            return HAL_TIMEOUT;
 800a312:	2003      	movs	r0, #3
 800a314:	e3ef      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
 800a316:	bf00      	nop
 800a318:	46020c00 	.word	0x46020c00
 800a31c:	20000010 	.word	0x20000010
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a320:	2e03      	cmp	r6, #3
 800a322:	f47f af6a 	bne.w	800a1fa <HAL_RCC_OscConfig+0x162>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800a326:	6863      	ldr	r3, [r4, #4]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 83e6 	beq.w	800aafa <HAL_RCC_OscConfig+0xa62>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	f013 0f02 	tst.w	r3, #2
 800a334:	d06b      	beq.n	800a40e <HAL_RCC_OscConfig+0x376>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a336:	2d04      	cmp	r5, #4
 800a338:	d05d      	beq.n	800a3f6 <HAL_RCC_OscConfig+0x35e>
 800a33a:	2d0c      	cmp	r5, #12
 800a33c:	d059      	beq.n	800a3f2 <HAL_RCC_OscConfig+0x35a>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a33e:	68e3      	ldr	r3, [r4, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 80bf 	beq.w	800a4c4 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_HSI_ENABLE();
 800a346:	4aaa      	ldr	r2, [pc, #680]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a348:	6813      	ldr	r3, [r2, #0]
 800a34a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a34e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a350:	f7fa f9c8 	bl	80046e4 <HAL_GetTick>
 800a354:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a356:	4ba6      	ldr	r3, [pc, #664]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800a35e:	f040 80a8 	bne.w	800a4b2 <HAL_RCC_OscConfig+0x41a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a362:	f7fa f9bf 	bl	80046e4 <HAL_GetTick>
 800a366:	1b40      	subs	r0, r0, r5
 800a368:	2802      	cmp	r0, #2
 800a36a:	d9f4      	bls.n	800a356 <HAL_RCC_OscConfig+0x2be>
            return HAL_TIMEOUT;
 800a36c:	2003      	movs	r0, #3
 800a36e:	e3c2      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800a370:	4a9f      	ldr	r2, [pc, #636]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a372:	6813      	ldr	r3, [r2, #0]
 800a374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a378:	6013      	str	r3, [r2, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a37a:	6863      	ldr	r3, [r4, #4]
 800a37c:	b353      	cbz	r3, 800a3d4 <HAL_RCC_OscConfig+0x33c>
        tickstart = HAL_GetTick();
 800a37e:	f7fa f9b1 	bl	80046e4 <HAL_GetTick>
 800a382:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a384:	4b9a      	ldr	r3, [pc, #616]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800a38c:	d1cf      	bne.n	800a32e <HAL_RCC_OscConfig+0x296>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a38e:	f7fa f9a9 	bl	80046e4 <HAL_GetTick>
 800a392:	1bc0      	subs	r0, r0, r7
 800a394:	2864      	cmp	r0, #100	@ 0x64
 800a396:	d9f5      	bls.n	800a384 <HAL_RCC_OscConfig+0x2ec>
            return HAL_TIMEOUT;
 800a398:	2003      	movs	r0, #3
 800a39a:	e3ac      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800a39c:	4b94      	ldr	r3, [pc, #592]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a3a4:	601a      	str	r2, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a3b4:	601a      	str	r2, [r3, #0]
 800a3b6:	e7e0      	b.n	800a37a <HAL_RCC_OscConfig+0x2e2>
 800a3b8:	4b8d      	ldr	r3, [pc, #564]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a3c0:	601a      	str	r2, [r3, #0]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	e7d2      	b.n	800a37a <HAL_RCC_OscConfig+0x2e2>
        tickstart = HAL_GetTick();
 800a3d4:	f7fa f986 	bl	80046e4 <HAL_GetTick>
 800a3d8:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a3da:	4b85      	ldr	r3, [pc, #532]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800a3e2:	d0a4      	beq.n	800a32e <HAL_RCC_OscConfig+0x296>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3e4:	f7fa f97e 	bl	80046e4 <HAL_GetTick>
 800a3e8:	1bc0      	subs	r0, r0, r7
 800a3ea:	2864      	cmp	r0, #100	@ 0x64
 800a3ec:	d9f5      	bls.n	800a3da <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 800a3ee:	2003      	movs	r0, #3
 800a3f0:	e381      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a3f2:	2e02      	cmp	r6, #2
 800a3f4:	d1a3      	bne.n	800a33e <HAL_RCC_OscConfig+0x2a6>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a3f6:	68e3      	ldr	r3, [r4, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 8380 	beq.w	800aafe <HAL_RCC_OscConfig+0xa66>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a3fe:	4a7c      	ldr	r2, [pc, #496]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a400:	6913      	ldr	r3, [r2, #16]
 800a402:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a406:	6921      	ldr	r1, [r4, #16]
 800a408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a40c:	6113      	str	r3, [r2, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	f013 0f08 	tst.w	r3, #8
 800a414:	f000 80af 	beq.w	800a576 <HAL_RCC_OscConfig+0x4de>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a418:	4b75      	ldr	r3, [pc, #468]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a41a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a41e:	f013 0f04 	tst.w	r3, #4
 800a422:	d163      	bne.n	800a4ec <HAL_RCC_OscConfig+0x454>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a424:	4b72      	ldr	r3, [pc, #456]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a426:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800a42a:	f042 0204 	orr.w	r2, r2, #4
 800a42e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800a432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a436:	f003 0304 	and.w	r3, r3, #4
 800a43a:	9301      	str	r3, [sp, #4]
 800a43c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a43e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a440:	4b6c      	ldr	r3, [pc, #432]	@ (800a5f4 <HAL_RCC_OscConfig+0x55c>)
 800a442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a444:	f013 0f01 	tst.w	r3, #1
 800a448:	d052      	beq.n	800a4f0 <HAL_RCC_OscConfig+0x458>
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a44a:	6963      	ldr	r3, [r4, #20]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d07a      	beq.n	800a546 <HAL_RCC_OscConfig+0x4ae>
      uint32_t bdcr_temp = RCC->BDCR;
 800a450:	4b67      	ldr	r3, [pc, #412]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800a456:	69a1      	ldr	r1, [r4, #24]
 800a458:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800a45c:	4291      	cmp	r1, r2
 800a45e:	d011      	beq.n	800a484 <HAL_RCC_OscConfig+0x3ec>
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a460:	f003 6240 	and.w	r2, r3, #201326592	@ 0xc000000
 800a464:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 800a468:	f000 834b 	beq.w	800ab02 <HAL_RCC_OscConfig+0xa6a>
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800a46c:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800a470:	d152      	bne.n	800a518 <HAL_RCC_OscConfig+0x480>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800a472:	4a5f      	ldr	r2, [pc, #380]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a474:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800a478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a47c:	69a1      	ldr	r1, [r4, #24]
 800a47e:	430b      	orrs	r3, r1
 800a480:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      __HAL_RCC_LSI_ENABLE();
 800a484:	4a5a      	ldr	r2, [pc, #360]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a486:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800a48a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a48e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 800a492:	f7fa f927 	bl	80046e4 <HAL_GetTick>
 800a496:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a498:	4b55      	ldr	r3, [pc, #340]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a49a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a49e:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800a4a2:	d167      	bne.n	800a574 <HAL_RCC_OscConfig+0x4dc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4a4:	f7fa f91e 	bl	80046e4 <HAL_GetTick>
 800a4a8:	1b80      	subs	r0, r0, r6
 800a4aa:	2805      	cmp	r0, #5
 800a4ac:	d9f4      	bls.n	800a498 <HAL_RCC_OscConfig+0x400>
          return HAL_TIMEOUT;
 800a4ae:	2003      	movs	r0, #3
 800a4b0:	e321      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a4b2:	4a4f      	ldr	r2, [pc, #316]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a4b4:	6913      	ldr	r3, [r2, #16]
 800a4b6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a4ba:	6921      	ldr	r1, [r4, #16]
 800a4bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a4c0:	6113      	str	r3, [r2, #16]
 800a4c2:	e7a4      	b.n	800a40e <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_HSI_DISABLE();
 800a4c4:	4a4a      	ldr	r2, [pc, #296]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a4c6:	6813      	ldr	r3, [r2, #0]
 800a4c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4cc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a4ce:	f7fa f909 	bl	80046e4 <HAL_GetTick>
 800a4d2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a4d4:	4b46      	ldr	r3, [pc, #280]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800a4dc:	d097      	beq.n	800a40e <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4de:	f7fa f901 	bl	80046e4 <HAL_GetTick>
 800a4e2:	1b40      	subs	r0, r0, r5
 800a4e4:	2802      	cmp	r0, #2
 800a4e6:	d9f5      	bls.n	800a4d4 <HAL_RCC_OscConfig+0x43c>
            return HAL_TIMEOUT;
 800a4e8:	2003      	movs	r0, #3
 800a4ea:	e304      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
    FlagStatus  pwrclkchanged = RESET;
 800a4ec:	2500      	movs	r5, #0
 800a4ee:	e7a7      	b.n	800a440 <HAL_RCC_OscConfig+0x3a8>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a4f0:	4a40      	ldr	r2, [pc, #256]	@ (800a5f4 <HAL_RCC_OscConfig+0x55c>)
 800a4f2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800a4f4:	f043 0301 	orr.w	r3, r3, #1
 800a4f8:	6293      	str	r3, [r2, #40]	@ 0x28
      tickstart = HAL_GetTick();
 800a4fa:	f7fa f8f3 	bl	80046e4 <HAL_GetTick>
 800a4fe:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a500:	4b3c      	ldr	r3, [pc, #240]	@ (800a5f4 <HAL_RCC_OscConfig+0x55c>)
 800a502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a504:	f013 0f01 	tst.w	r3, #1
 800a508:	d19f      	bne.n	800a44a <HAL_RCC_OscConfig+0x3b2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a50a:	f7fa f8eb 	bl	80046e4 <HAL_GetTick>
 800a50e:	1b80      	subs	r0, r0, r6
 800a510:	2802      	cmp	r0, #2
 800a512:	d9f5      	bls.n	800a500 <HAL_RCC_OscConfig+0x468>
          return HAL_TIMEOUT;
 800a514:	2003      	movs	r0, #3
 800a516:	e2ee      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
          __HAL_RCC_LSI_DISABLE();
 800a518:	4a35      	ldr	r2, [pc, #212]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a51a:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800a51e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800a522:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
          tickstart = HAL_GetTick();
 800a526:	f7fa f8dd 	bl	80046e4 <HAL_GetTick>
 800a52a:	4606      	mov	r6, r0
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a52c:	4b30      	ldr	r3, [pc, #192]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a52e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a532:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800a536:	d09c      	beq.n	800a472 <HAL_RCC_OscConfig+0x3da>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a538:	f7fa f8d4 	bl	80046e4 <HAL_GetTick>
 800a53c:	1b80      	subs	r0, r0, r6
 800a53e:	2805      	cmp	r0, #5
 800a540:	d9f4      	bls.n	800a52c <HAL_RCC_OscConfig+0x494>
              return HAL_TIMEOUT;
 800a542:	2003      	movs	r0, #3
 800a544:	e2d7      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
      __HAL_RCC_LSI_DISABLE();
 800a546:	4a2a      	ldr	r2, [pc, #168]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a548:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800a54c:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800a550:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 800a554:	f7fa f8c6 	bl	80046e4 <HAL_GetTick>
 800a558:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a55a:	4b25      	ldr	r3, [pc, #148]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a55c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a560:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800a564:	d006      	beq.n	800a574 <HAL_RCC_OscConfig+0x4dc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a566:	f7fa f8bd 	bl	80046e4 <HAL_GetTick>
 800a56a:	1b80      	subs	r0, r0, r6
 800a56c:	2805      	cmp	r0, #5
 800a56e:	d9f4      	bls.n	800a55a <HAL_RCC_OscConfig+0x4c2>
          return HAL_TIMEOUT;
 800a570:	2003      	movs	r0, #3
 800a572:	e2c0      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
    if (pwrclkchanged == SET)
 800a574:	bb95      	cbnz	r5, 800a5dc <HAL_RCC_OscConfig+0x544>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	f013 0f04 	tst.w	r3, #4
 800a57c:	f000 80d9 	beq.w	800a732 <HAL_RCC_OscConfig+0x69a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a580:	4b1b      	ldr	r3, [pc, #108]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a586:	f013 0f04 	tst.w	r3, #4
 800a58a:	d12f      	bne.n	800a5ec <HAL_RCC_OscConfig+0x554>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a58c:	4b18      	ldr	r3, [pc, #96]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a58e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800a592:	f042 0204 	orr.w	r2, r2, #4
 800a596:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800a59a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a59e:	f003 0304 	and.w	r3, r3, #4
 800a5a2:	9302      	str	r3, [sp, #8]
 800a5a4:	9b02      	ldr	r3, [sp, #8]
      pwrclkchanged = SET;
 800a5a6:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a5a8:	4b12      	ldr	r3, [pc, #72]	@ (800a5f4 <HAL_RCC_OscConfig+0x55c>)
 800a5aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ac:	f013 0f01 	tst.w	r3, #1
 800a5b0:	d022      	beq.n	800a5f8 <HAL_RCC_OscConfig+0x560>
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a5b2:	68a3      	ldr	r3, [r4, #8]
 800a5b4:	f013 0f01 	tst.w	r3, #1
 800a5b8:	d03a      	beq.n	800a630 <HAL_RCC_OscConfig+0x598>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a5ba:	f013 0f04 	tst.w	r3, #4
 800a5be:	d02f      	beq.n	800a620 <HAL_RCC_OscConfig+0x588>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a5c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a5c2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800a5c6:	f042 0204 	orr.w	r2, r2, #4
 800a5ca:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a5ce:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800a5d2:	f042 0201 	orr.w	r2, r2, #1
 800a5d6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800a5da:	e036      	b.n	800a64a <HAL_RCC_OscConfig+0x5b2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5dc:	4a04      	ldr	r2, [pc, #16]	@ (800a5f0 <HAL_RCC_OscConfig+0x558>)
 800a5de:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800a5e2:	f023 0304 	bic.w	r3, r3, #4
 800a5e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a5ea:	e7c4      	b.n	800a576 <HAL_RCC_OscConfig+0x4de>
    FlagStatus pwrclkchanged = RESET;
 800a5ec:	2500      	movs	r5, #0
 800a5ee:	e7db      	b.n	800a5a8 <HAL_RCC_OscConfig+0x510>
 800a5f0:	46020c00 	.word	0x46020c00
 800a5f4:	46020800 	.word	0x46020800
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a5f8:	4aa8      	ldr	r2, [pc, #672]	@ (800a89c <HAL_RCC_OscConfig+0x804>)
 800a5fa:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800a5fc:	f043 0301 	orr.w	r3, r3, #1
 800a600:	6293      	str	r3, [r2, #40]	@ 0x28
      tickstart = HAL_GetTick();
 800a602:	f7fa f86f 	bl	80046e4 <HAL_GetTick>
 800a606:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a608:	4ba4      	ldr	r3, [pc, #656]	@ (800a89c <HAL_RCC_OscConfig+0x804>)
 800a60a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a60c:	f013 0f01 	tst.w	r3, #1
 800a610:	d1cf      	bne.n	800a5b2 <HAL_RCC_OscConfig+0x51a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a612:	f7fa f867 	bl	80046e4 <HAL_GetTick>
 800a616:	1b80      	subs	r0, r0, r6
 800a618:	2802      	cmp	r0, #2
 800a61a:	d9f5      	bls.n	800a608 <HAL_RCC_OscConfig+0x570>
          return HAL_TIMEOUT;
 800a61c:	2003      	movs	r0, #3
 800a61e:	e26a      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a620:	4a9f      	ldr	r2, [pc, #636]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a622:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800a626:	f043 0301 	orr.w	r3, r3, #1
 800a62a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a62e:	e00c      	b.n	800a64a <HAL_RCC_OscConfig+0x5b2>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a630:	4b9b      	ldr	r3, [pc, #620]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a632:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800a636:	f022 0201 	bic.w	r2, r2, #1
 800a63a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a63e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800a642:	f022 0204 	bic.w	r2, r2, #4
 800a646:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a64a:	68a3      	ldr	r3, [r4, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d041      	beq.n	800a6d4 <HAL_RCC_OscConfig+0x63c>
      tickstart = HAL_GetTick();
 800a650:	f7fa f848 	bl	80046e4 <HAL_GetTick>
 800a654:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a656:	4b92      	ldr	r3, [pc, #584]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a65c:	f013 0f02 	tst.w	r3, #2
 800a660:	d108      	bne.n	800a674 <HAL_RCC_OscConfig+0x5dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a662:	f7fa f83f 	bl	80046e4 <HAL_GetTick>
 800a666:	1b80      	subs	r0, r0, r6
 800a668:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a66c:	4298      	cmp	r0, r3
 800a66e:	d9f2      	bls.n	800a656 <HAL_RCC_OscConfig+0x5be>
          return HAL_TIMEOUT;
 800a670:	2003      	movs	r0, #3
 800a672:	e240      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a674:	68a3      	ldr	r3, [r4, #8]
 800a676:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a67a:	d015      	beq.n	800a6a8 <HAL_RCC_OscConfig+0x610>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a67c:	4a88      	ldr	r2, [pc, #544]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a67e:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800a682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a686:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a68a:	4b85      	ldr	r3, [pc, #532]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a68c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a690:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800a694:	d14c      	bne.n	800a730 <HAL_RCC_OscConfig+0x698>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a696:	f7fa f825 	bl	80046e4 <HAL_GetTick>
 800a69a:	1b80      	subs	r0, r0, r6
 800a69c:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a6a0:	4298      	cmp	r0, r3
 800a6a2:	d9f2      	bls.n	800a68a <HAL_RCC_OscConfig+0x5f2>
            return HAL_TIMEOUT;
 800a6a4:	2003      	movs	r0, #3
 800a6a6:	e226      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a6a8:	4a7d      	ldr	r2, [pc, #500]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a6aa:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800a6ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a6b6:	4b7a      	ldr	r3, [pc, #488]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a6b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6bc:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800a6c0:	d036      	beq.n	800a730 <HAL_RCC_OscConfig+0x698>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6c2:	f7fa f80f 	bl	80046e4 <HAL_GetTick>
 800a6c6:	1b80      	subs	r0, r0, r6
 800a6c8:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a6cc:	4298      	cmp	r0, r3
 800a6ce:	d9f2      	bls.n	800a6b6 <HAL_RCC_OscConfig+0x61e>
            return HAL_TIMEOUT;
 800a6d0:	2003      	movs	r0, #3
 800a6d2:	e210      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
      tickstart = HAL_GetTick();
 800a6d4:	f7fa f806 	bl	80046e4 <HAL_GetTick>
 800a6d8:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a6da:	4b71      	ldr	r3, [pc, #452]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a6dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6e0:	f013 0f02 	tst.w	r3, #2
 800a6e4:	d008      	beq.n	800a6f8 <HAL_RCC_OscConfig+0x660>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6e6:	f7f9 fffd 	bl	80046e4 <HAL_GetTick>
 800a6ea:	1b80      	subs	r0, r0, r6
 800a6ec:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a6f0:	4298      	cmp	r0, r3
 800a6f2:	d9f2      	bls.n	800a6da <HAL_RCC_OscConfig+0x642>
          return HAL_TIMEOUT;
 800a6f4:	2003      	movs	r0, #3
 800a6f6:	e1fe      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a6f8:	4b69      	ldr	r3, [pc, #420]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a6fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a702:	d015      	beq.n	800a730 <HAL_RCC_OscConfig+0x698>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a704:	4a66      	ldr	r2, [pc, #408]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a706:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800a70a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a70e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a712:	4b63      	ldr	r3, [pc, #396]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a718:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800a71c:	d008      	beq.n	800a730 <HAL_RCC_OscConfig+0x698>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a71e:	f7f9 ffe1 	bl	80046e4 <HAL_GetTick>
 800a722:	1b80      	subs	r0, r0, r6
 800a724:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a728:	4298      	cmp	r0, r3
 800a72a:	d9f2      	bls.n	800a712 <HAL_RCC_OscConfig+0x67a>
            return HAL_TIMEOUT;
 800a72c:	2003      	movs	r0, #3
 800a72e:	e1e2      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
    if (pwrclkchanged == SET)
 800a730:	b9cd      	cbnz	r5, 800a766 <HAL_RCC_OscConfig+0x6ce>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	f013 0f20 	tst.w	r3, #32
 800a738:	d031      	beq.n	800a79e <HAL_RCC_OscConfig+0x706>
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a73a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a73c:	b1db      	cbz	r3, 800a776 <HAL_RCC_OscConfig+0x6de>
      __HAL_RCC_HSI48_ENABLE();
 800a73e:	4a58      	ldr	r2, [pc, #352]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a740:	6813      	ldr	r3, [r2, #0]
 800a742:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a746:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800a748:	f7f9 ffcc 	bl	80046e4 <HAL_GetTick>
 800a74c:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a74e:	4b54      	ldr	r3, [pc, #336]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800a756:	d122      	bne.n	800a79e <HAL_RCC_OscConfig+0x706>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a758:	f7f9 ffc4 	bl	80046e4 <HAL_GetTick>
 800a75c:	1b40      	subs	r0, r0, r5
 800a75e:	2802      	cmp	r0, #2
 800a760:	d9f5      	bls.n	800a74e <HAL_RCC_OscConfig+0x6b6>
          return HAL_TIMEOUT;
 800a762:	2003      	movs	r0, #3
 800a764:	e1c7      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a766:	4a4e      	ldr	r2, [pc, #312]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a768:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800a76c:	f023 0304 	bic.w	r3, r3, #4
 800a770:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a774:	e7dd      	b.n	800a732 <HAL_RCC_OscConfig+0x69a>
      __HAL_RCC_HSI48_DISABLE();
 800a776:	4a4a      	ldr	r2, [pc, #296]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a778:	6813      	ldr	r3, [r2, #0]
 800a77a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a77e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800a780:	f7f9 ffb0 	bl	80046e4 <HAL_GetTick>
 800a784:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a786:	4b46      	ldr	r3, [pc, #280]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800a78e:	d006      	beq.n	800a79e <HAL_RCC_OscConfig+0x706>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a790:	f7f9 ffa8 	bl	80046e4 <HAL_GetTick>
 800a794:	1b40      	subs	r0, r0, r5
 800a796:	2802      	cmp	r0, #2
 800a798:	d9f5      	bls.n	800a786 <HAL_RCC_OscConfig+0x6ee>
          return HAL_TIMEOUT;
 800a79a:	2003      	movs	r0, #3
 800a79c:	e1ab      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a79e:	6823      	ldr	r3, [r4, #0]
 800a7a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7a4:	d029      	beq.n	800a7fa <HAL_RCC_OscConfig+0x762>
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a7a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a7a8:	b19b      	cbz	r3, 800a7d2 <HAL_RCC_OscConfig+0x73a>
      __HAL_RCC_SHSI_ENABLE();
 800a7aa:	4a3d      	ldr	r2, [pc, #244]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a7ac:	6813      	ldr	r3, [r2, #0]
 800a7ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a7b2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800a7b4:	f7f9 ff96 	bl	80046e4 <HAL_GetTick>
 800a7b8:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a7ba:	4b39      	ldr	r3, [pc, #228]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800a7c2:	d11a      	bne.n	800a7fa <HAL_RCC_OscConfig+0x762>
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a7c4:	f7f9 ff8e 	bl	80046e4 <HAL_GetTick>
 800a7c8:	1b40      	subs	r0, r0, r5
 800a7ca:	2802      	cmp	r0, #2
 800a7cc:	d9f5      	bls.n	800a7ba <HAL_RCC_OscConfig+0x722>
          return HAL_TIMEOUT;
 800a7ce:	2003      	movs	r0, #3
 800a7d0:	e191      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
      __HAL_RCC_SHSI_DISABLE();
 800a7d2:	4a33      	ldr	r2, [pc, #204]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a7d4:	6813      	ldr	r3, [r2, #0]
 800a7d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a7da:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800a7dc:	f7f9 ff82 	bl	80046e4 <HAL_GetTick>
 800a7e0:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a7e2:	4b2f      	ldr	r3, [pc, #188]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800a7ea:	d006      	beq.n	800a7fa <HAL_RCC_OscConfig+0x762>
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a7ec:	f7f9 ff7a 	bl	80046e4 <HAL_GetTick>
 800a7f0:	1b40      	subs	r0, r0, r5
 800a7f2:	2802      	cmp	r0, #2
 800a7f4:	d9f5      	bls.n	800a7e2 <HAL_RCC_OscConfig+0x74a>
          return HAL_TIMEOUT;
 800a7f6:	2003      	movs	r0, #3
 800a7f8:	e17d      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800a800:	d064      	beq.n	800a8cc <HAL_RCC_OscConfig+0x834>
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a802:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a804:	2b00      	cmp	r3, #0
 800a806:	d04d      	beq.n	800a8a4 <HAL_RCC_OscConfig+0x80c>
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a808:	4a25      	ldr	r2, [pc, #148]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a80a:	6893      	ldr	r3, [r2, #8]
 800a80c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a810:	6093      	str	r3, [r2, #8]
 800a812:	6893      	ldr	r3, [r2, #8]
 800a814:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800a818:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800a81a:	430b      	orrs	r3, r1
 800a81c:	6093      	str	r3, [r2, #8]
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a81e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a820:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a824:	d319      	bcc.n	800a85a <HAL_RCC_OscConfig+0x7c2>
 800a826:	68d3      	ldr	r3, [r2, #12]
 800a828:	f023 031f 	bic.w	r3, r3, #31
 800a82c:	6a21      	ldr	r1, [r4, #32]
 800a82e:	430b      	orrs	r3, r1
 800a830:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_MSIK_ENABLE();
 800a832:	4a1b      	ldr	r2, [pc, #108]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a834:	6813      	ldr	r3, [r2, #0]
 800a836:	f043 0310 	orr.w	r3, r3, #16
 800a83a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800a83c:	f7f9 ff52 	bl	80046e4 <HAL_GetTick>
 800a840:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a842:	4b17      	ldr	r3, [pc, #92]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f013 0f20 	tst.w	r3, #32
 800a84a:	d13f      	bne.n	800a8cc <HAL_RCC_OscConfig+0x834>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a84c:	f7f9 ff4a 	bl	80046e4 <HAL_GetTick>
 800a850:	1b40      	subs	r0, r0, r5
 800a852:	2802      	cmp	r0, #2
 800a854:	d9f5      	bls.n	800a842 <HAL_RCC_OscConfig+0x7aa>
          return HAL_TIMEOUT;
 800a856:	2003      	movs	r0, #3
 800a858:	e14d      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	db0b      	blt.n	800a876 <HAL_RCC_OscConfig+0x7de>
 800a85e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a862:	d311      	bcc.n	800a888 <HAL_RCC_OscConfig+0x7f0>
 800a864:	4a0e      	ldr	r2, [pc, #56]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a866:	68d3      	ldr	r3, [r2, #12]
 800a868:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a86c:	6a21      	ldr	r1, [r4, #32]
 800a86e:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800a872:	60d3      	str	r3, [r2, #12]
 800a874:	e7dd      	b.n	800a832 <HAL_RCC_OscConfig+0x79a>
 800a876:	4a0a      	ldr	r2, [pc, #40]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a878:	68d3      	ldr	r3, [r2, #12]
 800a87a:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 800a87e:	6a21      	ldr	r1, [r4, #32]
 800a880:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800a884:	60d3      	str	r3, [r2, #12]
 800a886:	e7d4      	b.n	800a832 <HAL_RCC_OscConfig+0x79a>
 800a888:	4a05      	ldr	r2, [pc, #20]	@ (800a8a0 <HAL_RCC_OscConfig+0x808>)
 800a88a:	68d3      	ldr	r3, [r2, #12]
 800a88c:	f423 2378 	bic.w	r3, r3, #1015808	@ 0xf8000
 800a890:	6a21      	ldr	r1, [r4, #32]
 800a892:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
 800a896:	60d3      	str	r3, [r2, #12]
 800a898:	e7cb      	b.n	800a832 <HAL_RCC_OscConfig+0x79a>
 800a89a:	bf00      	nop
 800a89c:	46020800 	.word	0x46020800
 800a8a0:	46020c00 	.word	0x46020c00
      __HAL_RCC_MSIK_DISABLE();
 800a8a4:	4aa1      	ldr	r2, [pc, #644]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800a8a6:	6813      	ldr	r3, [r2, #0]
 800a8a8:	f023 0310 	bic.w	r3, r3, #16
 800a8ac:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800a8ae:	f7f9 ff19 	bl	80046e4 <HAL_GetTick>
 800a8b2:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a8b4:	4b9d      	ldr	r3, [pc, #628]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f013 0f20 	tst.w	r3, #32
 800a8bc:	d006      	beq.n	800a8cc <HAL_RCC_OscConfig+0x834>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a8be:	f7f9 ff11 	bl	80046e4 <HAL_GetTick>
 800a8c2:	1b40      	subs	r0, r0, r5
 800a8c4:	2802      	cmp	r0, #2
 800a8c6:	d9f5      	bls.n	800a8b4 <HAL_RCC_OscConfig+0x81c>
          return HAL_TIMEOUT;
 800a8c8:	2003      	movs	r0, #3
 800a8ca:	e114      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8cc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f000 8119 	beq.w	800ab06 <HAL_RCC_OscConfig+0xa6e>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a8d4:	4a95      	ldr	r2, [pc, #596]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800a8d6:	69d2      	ldr	r2, [r2, #28]
 800a8d8:	f002 020c 	and.w	r2, r2, #12
 800a8dc:	2a0c      	cmp	r2, #12
 800a8de:	f000 80bb 	beq.w	800aa58 <HAL_RCC_OscConfig+0x9c0>
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d014      	beq.n	800a910 <HAL_RCC_OscConfig+0x878>
        __HAL_RCC_PLL_DISABLE();
 800a8e6:	4a91      	ldr	r2, [pc, #580]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800a8e8:	6813      	ldr	r3, [r2, #0]
 800a8ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a8ee:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a8f0:	f7f9 fef8 	bl	80046e4 <HAL_GetTick>
 800a8f4:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a8f6:	4b8d      	ldr	r3, [pc, #564]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800a8fe:	f000 80a2 	beq.w	800aa46 <HAL_RCC_OscConfig+0x9ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a902:	f7f9 feef 	bl	80046e4 <HAL_GetTick>
 800a906:	1b00      	subs	r0, r0, r4
 800a908:	2802      	cmp	r0, #2
 800a90a:	d9f4      	bls.n	800a8f6 <HAL_RCC_OscConfig+0x85e>
            return HAL_TIMEOUT;
 800a90c:	2003      	movs	r0, #3
 800a90e:	e0f2      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
        __HAL_RCC_PLL_DISABLE();
 800a910:	4a86      	ldr	r2, [pc, #536]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800a912:	6813      	ldr	r3, [r2, #0]
 800a914:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a918:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a91a:	f7f9 fee3 	bl	80046e4 <HAL_GetTick>
 800a91e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a920:	4b82      	ldr	r3, [pc, #520]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800a928:	d006      	beq.n	800a938 <HAL_RCC_OscConfig+0x8a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a92a:	f7f9 fedb 	bl	80046e4 <HAL_GetTick>
 800a92e:	1b40      	subs	r0, r0, r5
 800a930:	2802      	cmp	r0, #2
 800a932:	d9f5      	bls.n	800a920 <HAL_RCC_OscConfig+0x888>
            return HAL_TIMEOUT;
 800a934:	2003      	movs	r0, #3
 800a936:	e0de      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a938:	4b7c      	ldr	r3, [pc, #496]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800a93a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a93e:	f013 0f04 	tst.w	r3, #4
 800a942:	d16c      	bne.n	800aa1e <HAL_RCC_OscConfig+0x986>
          __HAL_RCC_PWR_CLK_ENABLE();
 800a944:	4b79      	ldr	r3, [pc, #484]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800a946:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800a94a:	f042 0204 	orr.w	r2, r2, #4
 800a94e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800a952:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a956:	f003 0304 	and.w	r3, r3, #4
 800a95a:	9303      	str	r3, [sp, #12]
 800a95c:	9b03      	ldr	r3, [sp, #12]
          pwrclkchanged = SET;
 800a95e:	2501      	movs	r5, #1
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a960:	4b73      	ldr	r3, [pc, #460]	@ (800ab30 <HAL_RCC_OscConfig+0xa98>)
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800a968:	d15b      	bne.n	800aa22 <HAL_RCC_OscConfig+0x98a>
  FlagStatus pwrboosten = RESET;
 800a96a:	2600      	movs	r6, #0
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a96c:	4a70      	ldr	r2, [pc, #448]	@ (800ab30 <HAL_RCC_OscConfig+0xa98>)
 800a96e:	68d3      	ldr	r3, [r2, #12]
 800a970:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a974:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a976:	4b6d      	ldr	r3, [pc, #436]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800a978:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a97a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800a97e:	f022 0203 	bic.w	r2, r2, #3
 800a982:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800a984:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800a986:	3801      	subs	r0, #1
 800a988:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800a98c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800a98e:	4301      	orrs	r1, r0
 800a990:	430a      	orrs	r2, r1
 800a992:	629a      	str	r2, [r3, #40]	@ 0x28
 800a994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a996:	4867      	ldr	r0, [pc, #412]	@ (800ab34 <HAL_RCC_OscConfig+0xa9c>)
 800a998:	4010      	ands	r0, r2
 800a99a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800a99c:	3a01      	subs	r2, #1
 800a99e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9a2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800a9a4:	3901      	subs	r1, #1
 800a9a6:	0249      	lsls	r1, r1, #9
 800a9a8:	b289      	uxth	r1, r1
 800a9aa:	430a      	orrs	r2, r1
 800a9ac:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800a9ae:	3901      	subs	r1, #1
 800a9b0:	0409      	lsls	r1, r1, #16
 800a9b2:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 800a9b6:	430a      	orrs	r2, r1
 800a9b8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800a9ba:	3901      	subs	r1, #1
 800a9bc:	0609      	lsls	r1, r1, #24
 800a9be:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 800a9c2:	430a      	orrs	r2, r1
 800a9c4:	4310      	orrs	r0, r2
 800a9c6:	6358      	str	r0, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a9c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a9ca:	f022 0210 	bic.w	r2, r2, #16
 800a9ce:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a9d0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800a9d2:	00d2      	lsls	r2, r2, #3
 800a9d4:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a9d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a9d8:	f042 0210 	orr.w	r2, r2, #16
 800a9dc:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800a9de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a9e0:	f022 020c 	bic.w	r2, r2, #12
 800a9e4:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800a9e6:	430a      	orrs	r2, r1
 800a9e8:	629a      	str	r2, [r3, #40]	@ 0x28
        if (pwrboosten == SET)
 800a9ea:	b9e6      	cbnz	r6, 800aa26 <HAL_RCC_OscConfig+0x98e>
        if (pwrclkchanged == SET)
 800a9ec:	bb0d      	cbnz	r5, 800aa32 <HAL_RCC_OscConfig+0x99a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a9ee:	4b4f      	ldr	r3, [pc, #316]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800a9f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a9f2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a9f6:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_RCC_PLL_ENABLE();
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800a9fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800aa00:	f7f9 fe70 	bl	80046e4 <HAL_GetTick>
 800aa04:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800aa06:	4b49      	ldr	r3, [pc, #292]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800aa0e:	d118      	bne.n	800aa42 <HAL_RCC_OscConfig+0x9aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa10:	f7f9 fe68 	bl	80046e4 <HAL_GetTick>
 800aa14:	1b00      	subs	r0, r0, r4
 800aa16:	2802      	cmp	r0, #2
 800aa18:	d9f5      	bls.n	800aa06 <HAL_RCC_OscConfig+0x96e>
            return HAL_TIMEOUT;
 800aa1a:	2003      	movs	r0, #3
 800aa1c:	e06b      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
    FlagStatus  pwrclkchanged = RESET;
 800aa1e:	2500      	movs	r5, #0
 800aa20:	e79e      	b.n	800a960 <HAL_RCC_OscConfig+0x8c8>
          pwrboosten = SET;
 800aa22:	2601      	movs	r6, #1
 800aa24:	e7a2      	b.n	800a96c <HAL_RCC_OscConfig+0x8d4>
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800aa26:	4a42      	ldr	r2, [pc, #264]	@ (800ab30 <HAL_RCC_OscConfig+0xa98>)
 800aa28:	68d3      	ldr	r3, [r2, #12]
 800aa2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800aa2e:	60d3      	str	r3, [r2, #12]
 800aa30:	e7dc      	b.n	800a9ec <HAL_RCC_OscConfig+0x954>
          __HAL_RCC_PWR_CLK_DISABLE();
 800aa32:	4a3e      	ldr	r2, [pc, #248]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800aa34:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800aa38:	f023 0304 	bic.w	r3, r3, #4
 800aa3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800aa40:	e7d5      	b.n	800a9ee <HAL_RCC_OscConfig+0x956>
  return HAL_OK;
 800aa42:	2000      	movs	r0, #0
 800aa44:	e057      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800aa46:	4a39      	ldr	r2, [pc, #228]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800aa48:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800aa4a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800aa4e:	f023 0303 	bic.w	r3, r3, #3
 800aa52:	6293      	str	r3, [r2, #40]	@ 0x28
  return HAL_OK;
 800aa54:	2000      	movs	r0, #0
 800aa56:	e04e      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
      temp1_pllckcfg = RCC->PLL1CFGR;
 800aa58:	4a34      	ldr	r2, [pc, #208]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800aa5a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aa5c:	6b50      	ldr	r0, [r2, #52]	@ 0x34
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d053      	beq.n	800ab0a <HAL_RCC_OscConfig+0xa72>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800aa62:	f001 0303 	and.w	r3, r1, #3
 800aa66:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d150      	bne.n	800ab0e <HAL_RCC_OscConfig+0xa76>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800aa6c:	f3c1 2203 	ubfx	r2, r1, #8, #4
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800aa70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa72:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d14c      	bne.n	800ab12 <HAL_RCC_OscConfig+0xa7a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800aa78:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa7c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800aa7e:	4299      	cmp	r1, r3
 800aa80:	d149      	bne.n	800ab16 <HAL_RCC_OscConfig+0xa7e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa82:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800aa86:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800aa88:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d145      	bne.n	800ab1a <HAL_RCC_OscConfig+0xa82>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800aa8e:	f3c0 2246 	ubfx	r2, r0, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aa92:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800aa94:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d141      	bne.n	800ab1e <HAL_RCC_OscConfig+0xa86>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800aa9a:	f3c0 4206 	ubfx	r2, r0, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aa9e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800aaa0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d13d      	bne.n	800ab22 <HAL_RCC_OscConfig+0xa8a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800aaa6:	f3c0 6006 	ubfx	r0, r0, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800aaaa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800aaac:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aaae:	4298      	cmp	r0, r3
 800aab0:	d139      	bne.n	800ab26 <HAL_RCC_OscConfig+0xa8e>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800aab2:	4b1e      	ldr	r3, [pc, #120]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800aab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aab6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800aaba:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d101      	bne.n	800aac4 <HAL_RCC_OscConfig+0xa2c>
  return HAL_OK;
 800aac0:	2000      	movs	r0, #0
 800aac2:	e018      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
        __HAL_RCC_PLL_FRACN_DISABLE();
 800aac4:	4a19      	ldr	r2, [pc, #100]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800aac6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800aac8:	f023 0310 	bic.w	r3, r3, #16
 800aacc:	6293      	str	r3, [r2, #40]	@ 0x28
        tickstart = HAL_GetTick();
 800aace:	f7f9 fe09 	bl	80046e4 <HAL_GetTick>
 800aad2:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800aad4:	f7f9 fe06 	bl	80046e4 <HAL_GetTick>
 800aad8:	42a8      	cmp	r0, r5
 800aada:	d0fb      	beq.n	800aad4 <HAL_RCC_OscConfig+0xa3c>
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800aadc:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800aade:	00d2      	lsls	r2, r2, #3
 800aae0:	4b12      	ldr	r3, [pc, #72]	@ (800ab2c <HAL_RCC_OscConfig+0xa94>)
 800aae2:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 800aae4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aae6:	f042 0210 	orr.w	r2, r2, #16
 800aaea:	629a      	str	r2, [r3, #40]	@ 0x28
  return HAL_OK;
 800aaec:	2000      	movs	r0, #0
 800aaee:	e002      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
    return HAL_ERROR;
 800aaf0:	2001      	movs	r0, #1
}
 800aaf2:	4770      	bx	lr
        return HAL_ERROR;
 800aaf4:	2001      	movs	r0, #1
}
 800aaf6:	b005      	add	sp, #20
 800aaf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800aafa:	2001      	movs	r0, #1
 800aafc:	e7fb      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
        return HAL_ERROR;
 800aafe:	2001      	movs	r0, #1
 800ab00:	e7f9      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
          return HAL_ERROR;
 800ab02:	2001      	movs	r0, #1
 800ab04:	e7f7      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
  return HAL_OK;
 800ab06:	2000      	movs	r0, #0
 800ab08:	e7f5      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
        return HAL_ERROR;
 800ab0a:	2001      	movs	r0, #1
 800ab0c:	e7f3      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
 800ab0e:	2001      	movs	r0, #1
 800ab10:	e7f1      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
 800ab12:	2001      	movs	r0, #1
 800ab14:	e7ef      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
 800ab16:	2001      	movs	r0, #1
 800ab18:	e7ed      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
 800ab1a:	2001      	movs	r0, #1
 800ab1c:	e7eb      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
 800ab1e:	2001      	movs	r0, #1
 800ab20:	e7e9      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
 800ab22:	2001      	movs	r0, #1
 800ab24:	e7e7      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
 800ab26:	2001      	movs	r0, #1
 800ab28:	e7e5      	b.n	800aaf6 <HAL_RCC_OscConfig+0xa5e>
 800ab2a:	bf00      	nop
 800ab2c:	46020c00 	.word	0x46020c00
 800ab30:	46020800 	.word	0x46020800
 800ab34:	80800000 	.word	0x80800000

0800ab38 <HAL_RCC_GetPCLK1Freq>:
{
 800ab38:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800ab3a:	f7ff fa99 	bl	800a070 <HAL_RCC_GetHCLKFreq>
 800ab3e:	4b04      	ldr	r3, [pc, #16]	@ (800ab50 <HAL_RCC_GetPCLK1Freq+0x18>)
 800ab40:	6a1b      	ldr	r3, [r3, #32]
 800ab42:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ab46:	4a03      	ldr	r2, [pc, #12]	@ (800ab54 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800ab48:	5cd3      	ldrb	r3, [r2, r3]
}
 800ab4a:	40d8      	lsrs	r0, r3
 800ab4c:	bd08      	pop	{r3, pc}
 800ab4e:	bf00      	nop
 800ab50:	46020c00 	.word	0x46020c00
 800ab54:	08017720 	.word	0x08017720

0800ab58 <HAL_RCC_GetPCLK2Freq>:
{
 800ab58:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800ab5a:	f7ff fa89 	bl	800a070 <HAL_RCC_GetHCLKFreq>
 800ab5e:	4b04      	ldr	r3, [pc, #16]	@ (800ab70 <HAL_RCC_GetPCLK2Freq+0x18>)
 800ab60:	6a1b      	ldr	r3, [r3, #32]
 800ab62:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800ab66:	4a03      	ldr	r2, [pc, #12]	@ (800ab74 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800ab68:	5cd3      	ldrb	r3, [r2, r3]
}
 800ab6a:	40d8      	lsrs	r0, r3
 800ab6c:	bd08      	pop	{r3, pc}
 800ab6e:	bf00      	nop
 800ab70:	46020c00 	.word	0x46020c00
 800ab74:	08017720 	.word	0x08017720

0800ab78 <HAL_RCC_GetPCLK3Freq>:
{
 800ab78:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800ab7a:	f7ff fa79 	bl	800a070 <HAL_RCC_GetHCLKFreq>
 800ab7e:	4b04      	ldr	r3, [pc, #16]	@ (800ab90 <HAL_RCC_GetPCLK3Freq+0x18>)
 800ab80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab82:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ab86:	4a03      	ldr	r2, [pc, #12]	@ (800ab94 <HAL_RCC_GetPCLK3Freq+0x1c>)
 800ab88:	5cd3      	ldrb	r3, [r2, r3]
}
 800ab8a:	40d8      	lsrs	r0, r3
 800ab8c:	bd08      	pop	{r3, pc}
 800ab8e:	bf00      	nop
 800ab90:	46020c00 	.word	0x46020c00
 800ab94:	08017720 	.word	0x08017720

0800ab98 <HAL_RCC_GetClockConfig>:
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800ab98:	231f      	movs	r3, #31
 800ab9a:	6003      	str	r3, [r0, #0]
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800ab9c:	4b0d      	ldr	r3, [pc, #52]	@ (800abd4 <HAL_RCC_GetClockConfig+0x3c>)
 800ab9e:	69da      	ldr	r2, [r3, #28]
 800aba0:	f002 0203 	and.w	r2, r2, #3
 800aba4:	6042      	str	r2, [r0, #4]
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800aba6:	6a1a      	ldr	r2, [r3, #32]
 800aba8:	f002 020f 	and.w	r2, r2, #15
 800abac:	6082      	str	r2, [r0, #8]
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800abae:	6a1a      	ldr	r2, [r3, #32]
 800abb0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800abb4:	60c2      	str	r2, [r0, #12]
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800abb6:	6a1a      	ldr	r2, [r3, #32]
 800abb8:	0912      	lsrs	r2, r2, #4
 800abba:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800abbe:	6102      	str	r2, [r0, #16]
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800abc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800abc6:	6143      	str	r3, [r0, #20]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800abc8:	4b03      	ldr	r3, [pc, #12]	@ (800abd8 <HAL_RCC_GetClockConfig+0x40>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 030f 	and.w	r3, r3, #15
 800abd0:	600b      	str	r3, [r1, #0]
}
 800abd2:	4770      	bx	lr
 800abd4:	46020c00 	.word	0x46020c00
 800abd8:	40022000 	.word	0x40022000

0800abdc <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800abdc:	4a02      	ldr	r2, [pc, #8]	@ (800abe8 <HAL_RCC_EnableCSS+0xc>)
 800abde:	6813      	ldr	r3, [r2, #0]
 800abe0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800abe4:	6013      	str	r3, [r2, #0]
}
 800abe6:	4770      	bx	lr
 800abe8:	46020c00 	.word	0x46020c00

0800abec <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	4605      	mov	r5, r0
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800abf0:	4a35      	ldr	r2, [pc, #212]	@ (800acc8 <RCCEx_PLL3_Config+0xdc>)
 800abf2:	6813      	ldr	r3, [r2, #0]
 800abf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abf8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800abfa:	f7f9 fd73 	bl	80046e4 <HAL_GetTick>
 800abfe:	4604      	mov	r4, r0

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac00:	4b31      	ldr	r3, [pc, #196]	@ (800acc8 <RCCEx_PLL3_Config+0xdc>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800ac08:	d006      	beq.n	800ac18 <RCCEx_PLL3_Config+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ac0a:	f7f9 fd6b 	bl	80046e4 <HAL_GetTick>
 800ac0e:	1b00      	subs	r0, r0, r4
 800ac10:	2802      	cmp	r0, #2
 800ac12:	d9f5      	bls.n	800ac00 <RCCEx_PLL3_Config+0x14>
    {
      return HAL_TIMEOUT;
 800ac14:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 800ac16:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ac18:	4b2b      	ldr	r3, [pc, #172]	@ (800acc8 <RCCEx_PLL3_Config+0xdc>)
 800ac1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac1c:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800ac20:	f022 0203 	bic.w	r2, r2, #3
 800ac24:	6829      	ldr	r1, [r5, #0]
 800ac26:	6868      	ldr	r0, [r5, #4]
 800ac28:	3801      	subs	r0, #1
 800ac2a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800ac2e:	430a      	orrs	r2, r1
 800ac30:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac34:	4825      	ldr	r0, [pc, #148]	@ (800accc <RCCEx_PLL3_Config+0xe0>)
 800ac36:	4010      	ands	r0, r2
 800ac38:	68aa      	ldr	r2, [r5, #8]
 800ac3a:	3a01      	subs	r2, #1
 800ac3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac40:	68e9      	ldr	r1, [r5, #12]
 800ac42:	3901      	subs	r1, #1
 800ac44:	0249      	lsls	r1, r1, #9
 800ac46:	b289      	uxth	r1, r1
 800ac48:	430a      	orrs	r2, r1
 800ac4a:	6929      	ldr	r1, [r5, #16]
 800ac4c:	3901      	subs	r1, #1
 800ac4e:	0409      	lsls	r1, r1, #16
 800ac50:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 800ac54:	430a      	orrs	r2, r1
 800ac56:	6969      	ldr	r1, [r5, #20]
 800ac58:	3901      	subs	r1, #1
 800ac5a:	0609      	lsls	r1, r1, #24
 800ac5c:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 800ac60:	430a      	orrs	r2, r1
 800ac62:	4310      	orrs	r0, r2
 800ac64:	6458      	str	r0, [r3, #68]	@ 0x44
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800ac66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac68:	f022 020c 	bic.w	r2, r2, #12
 800ac6c:	69a9      	ldr	r1, [r5, #24]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	631a      	str	r2, [r3, #48]	@ 0x30
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ac72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac74:	6a29      	ldr	r1, [r5, #32]
 800ac76:	430a      	orrs	r2, r1
 800ac78:	631a      	str	r2, [r3, #48]	@ 0x30
  __HAL_RCC_PLL3FRACN_DISABLE();
 800ac7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac7c:	f022 0210 	bic.w	r2, r2, #16
 800ac80:	631a      	str	r2, [r3, #48]	@ 0x30
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ac82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac84:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800ac88:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800ac8c:	69e9      	ldr	r1, [r5, #28]
 800ac8e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800ac92:	649a      	str	r2, [r3, #72]	@ 0x48
  __HAL_RCC_PLL3FRACN_ENABLE();
 800ac94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac96:	f042 0210 	orr.w	r2, r2, #16
 800ac9a:	631a      	str	r2, [r3, #48]	@ 0x30
  __HAL_RCC_PLL3_ENABLE();
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800aca2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800aca4:	f7f9 fd1e 	bl	80046e4 <HAL_GetTick>
 800aca8:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800acaa:	4b07      	ldr	r3, [pc, #28]	@ (800acc8 <RCCEx_PLL3_Config+0xdc>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800acb2:	d106      	bne.n	800acc2 <RCCEx_PLL3_Config+0xd6>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800acb4:	f7f9 fd16 	bl	80046e4 <HAL_GetTick>
 800acb8:	1b00      	subs	r0, r0, r4
 800acba:	2802      	cmp	r0, #2
 800acbc:	d9f5      	bls.n	800acaa <RCCEx_PLL3_Config+0xbe>
      return HAL_TIMEOUT;
 800acbe:	2003      	movs	r0, #3
 800acc0:	e7a9      	b.n	800ac16 <RCCEx_PLL3_Config+0x2a>
  return HAL_OK;
 800acc2:	2000      	movs	r0, #0
 800acc4:	e7a7      	b.n	800ac16 <RCCEx_PLL3_Config+0x2a>
 800acc6:	bf00      	nop
 800acc8:	46020c00 	.word	0x46020c00
 800accc:	80800000 	.word	0x80800000

0800acd0 <RCCEx_PLL2_Config>:
{
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4605      	mov	r5, r0
  __HAL_RCC_PLL2_DISABLE();
 800acd4:	4a35      	ldr	r2, [pc, #212]	@ (800adac <RCCEx_PLL2_Config+0xdc>)
 800acd6:	6813      	ldr	r3, [r2, #0]
 800acd8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800acdc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800acde:	f7f9 fd01 	bl	80046e4 <HAL_GetTick>
 800ace2:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ace4:	4b31      	ldr	r3, [pc, #196]	@ (800adac <RCCEx_PLL2_Config+0xdc>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800acec:	d006      	beq.n	800acfc <RCCEx_PLL2_Config+0x2c>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800acee:	f7f9 fcf9 	bl	80046e4 <HAL_GetTick>
 800acf2:	1b00      	subs	r0, r0, r4
 800acf4:	2802      	cmp	r0, #2
 800acf6:	d9f5      	bls.n	800ace4 <RCCEx_PLL2_Config+0x14>
      return HAL_TIMEOUT;
 800acf8:	2003      	movs	r0, #3
}
 800acfa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800acfc:	4b2b      	ldr	r3, [pc, #172]	@ (800adac <RCCEx_PLL2_Config+0xdc>)
 800acfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad00:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800ad04:	f022 0203 	bic.w	r2, r2, #3
 800ad08:	6829      	ldr	r1, [r5, #0]
 800ad0a:	6868      	ldr	r0, [r5, #4]
 800ad0c:	3801      	subs	r0, #1
 800ad0e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800ad12:	430a      	orrs	r2, r1
 800ad14:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ad16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad18:	4825      	ldr	r0, [pc, #148]	@ (800adb0 <RCCEx_PLL2_Config+0xe0>)
 800ad1a:	4010      	ands	r0, r2
 800ad1c:	68aa      	ldr	r2, [r5, #8]
 800ad1e:	3a01      	subs	r2, #1
 800ad20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad24:	68e9      	ldr	r1, [r5, #12]
 800ad26:	3901      	subs	r1, #1
 800ad28:	0249      	lsls	r1, r1, #9
 800ad2a:	b289      	uxth	r1, r1
 800ad2c:	430a      	orrs	r2, r1
 800ad2e:	6929      	ldr	r1, [r5, #16]
 800ad30:	3901      	subs	r1, #1
 800ad32:	0409      	lsls	r1, r1, #16
 800ad34:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 800ad38:	430a      	orrs	r2, r1
 800ad3a:	6969      	ldr	r1, [r5, #20]
 800ad3c:	3901      	subs	r1, #1
 800ad3e:	0609      	lsls	r1, r1, #24
 800ad40:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 800ad44:	430a      	orrs	r2, r1
 800ad46:	4310      	orrs	r0, r2
 800ad48:	63d8      	str	r0, [r3, #60]	@ 0x3c
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800ad4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad4c:	f022 020c 	bic.w	r2, r2, #12
 800ad50:	69a9      	ldr	r1, [r5, #24]
 800ad52:	430a      	orrs	r2, r1
 800ad54:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800ad56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad58:	6a29      	ldr	r1, [r5, #32]
 800ad5a:	430a      	orrs	r2, r1
 800ad5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_PLL2FRACN_DISABLE();
 800ad5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad60:	f022 0210 	bic.w	r2, r2, #16
 800ad64:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad68:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800ad6c:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800ad70:	69e9      	ldr	r1, [r5, #28]
 800ad72:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800ad76:	641a      	str	r2, [r3, #64]	@ 0x40
  __HAL_RCC_PLL2FRACN_ENABLE();
 800ad78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad7a:	f042 0210 	orr.w	r2, r2, #16
 800ad7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_PLL2_ENABLE();
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800ad86:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800ad88:	f7f9 fcac 	bl	80046e4 <HAL_GetTick>
 800ad8c:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad8e:	4b07      	ldr	r3, [pc, #28]	@ (800adac <RCCEx_PLL2_Config+0xdc>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800ad96:	d106      	bne.n	800ada6 <RCCEx_PLL2_Config+0xd6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ad98:	f7f9 fca4 	bl	80046e4 <HAL_GetTick>
 800ad9c:	1b00      	subs	r0, r0, r4
 800ad9e:	2802      	cmp	r0, #2
 800ada0:	d9f5      	bls.n	800ad8e <RCCEx_PLL2_Config+0xbe>
      return HAL_TIMEOUT;
 800ada2:	2003      	movs	r0, #3
 800ada4:	e7a9      	b.n	800acfa <RCCEx_PLL2_Config+0x2a>
  return HAL_OK;
 800ada6:	2000      	movs	r0, #0
 800ada8:	e7a7      	b.n	800acfa <RCCEx_PLL2_Config+0x2a>
 800adaa:	bf00      	nop
 800adac:	46020c00 	.word	0x46020c00
 800adb0:	80800000 	.word	0x80800000

0800adb4 <HAL_RCCEx_PeriphCLKConfig>:
{
 800adb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adb8:	b082      	sub	sp, #8
 800adba:	4604      	mov	r4, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800adbc:	6803      	ldr	r3, [r0, #0]
 800adbe:	f013 0f01 	tst.w	r3, #1
 800adc2:	d008      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x22>
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800adc4:	4ab0      	ldr	r2, [pc, #704]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800adc6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800adca:	f023 0303 	bic.w	r3, r3, #3
 800adce:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800add0:	430b      	orrs	r3, r1
 800add2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	f013 0f02 	tst.w	r3, #2
 800addc:	d008      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800adde:	4aaa      	ldr	r2, [pc, #680]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ade0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800ade4:	f023 030c 	bic.w	r3, r3, #12
 800ade8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800adea:	430b      	orrs	r3, r1
 800adec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800adf0:	6823      	ldr	r3, [r4, #0]
 800adf2:	f013 0f04 	tst.w	r3, #4
 800adf6:	d008      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x56>
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800adf8:	4aa3      	ldr	r2, [pc, #652]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800adfa:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800adfe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800ae02:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800ae04:	430b      	orrs	r3, r1
 800ae06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ae0a:	6823      	ldr	r3, [r4, #0]
 800ae0c:	f013 0f08 	tst.w	r3, #8
 800ae10:	d008      	beq.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x70>
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800ae12:	4a9d      	ldr	r2, [pc, #628]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae14:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800ae18:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ae1c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800ae1e:	430b      	orrs	r3, r1
 800ae20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	f013 0f10 	tst.w	r3, #16
 800ae2a:	d008      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800ae2c:	4a96      	ldr	r2, [pc, #600]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae2e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800ae32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae36:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800ae38:	430b      	orrs	r3, r1
 800ae3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800ae44:	d008      	beq.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800ae46:	4a90      	ldr	r2, [pc, #576]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae48:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800ae4c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800ae50:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800ae52:	430b      	orrs	r3, r1
 800ae54:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	f013 0f20 	tst.w	r3, #32
 800ae5e:	d008      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800ae60:	4a89      	ldr	r2, [pc, #548]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae62:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 800ae66:	f023 0307 	bic.w	r3, r3, #7
 800ae6a:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800ae6c:	430b      	orrs	r3, r1
 800ae6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ae72:	6823      	ldr	r3, [r4, #0]
 800ae74:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800ae78:	d008      	beq.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800ae7a:	4a83      	ldr	r2, [pc, #524]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae7c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800ae80:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800ae84:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800ae86:	430b      	orrs	r3, r1
 800ae88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ae8c:	6823      	ldr	r3, [r4, #0]
 800ae8e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae92:	d008      	beq.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800ae94:	4a7c      	ldr	r2, [pc, #496]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae96:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800ae9a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800ae9e:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800aea0:	430b      	orrs	r3, r1
 800aea2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aea6:	6823      	ldr	r3, [r4, #0]
 800aea8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800aeac:	d008      	beq.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800aeae:	4a76      	ldr	r2, [pc, #472]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aeb0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 800aeb4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800aeb8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800aeba:	430b      	orrs	r3, r1
 800aebc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aec0:	6823      	ldr	r3, [r4, #0]
 800aec2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800aec6:	d008      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800aec8:	4a6f      	ldr	r2, [pc, #444]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aeca:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800aece:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800aed2:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 800aed4:	430b      	orrs	r3, r1
 800aed6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aee0:	d008      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x140>
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800aee2:	4a69      	ldr	r2, [pc, #420]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aee4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800aee8:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800aeec:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800aeee:	430b      	orrs	r3, r1
 800aef0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800aef4:	6823      	ldr	r3, [r4, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	da09      	bge.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800aefa:	4a63      	ldr	r2, [pc, #396]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aefc:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800af00:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800af04:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800af08:	430b      	orrs	r3, r1
 800af0a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800af14:	d009      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800af16:	4a5c      	ldr	r2, [pc, #368]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af18:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 800af1c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800af20:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800af24:	430b      	orrs	r3, r1
 800af26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800af2a:	6823      	ldr	r3, [r4, #0]
 800af2c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800af30:	d009      	beq.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x192>
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800af32:	4a55      	ldr	r2, [pc, #340]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af34:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800af38:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800af3c:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 800af40:	430b      	orrs	r3, r1
 800af42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800af4c:	d009      	beq.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800af4e:	4a4e      	ldr	r2, [pc, #312]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af50:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 800af54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af58:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 800af5c:	430b      	orrs	r3, r1
 800af5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800af62:	6823      	ldr	r3, [r4, #0]
 800af64:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800af68:	d036      	beq.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x224>
    switch (pPeriphClkInit->Sai1ClockSelection)
 800af6a:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800af6e:	2b40      	cmp	r3, #64	@ 0x40
 800af70:	d020      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800af72:	d80b      	bhi.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800af74:	b32b      	cbz	r3, 800afc2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 800af76:	2b20      	cmp	r3, #32
 800af78:	d105      	bne.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800af7a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800af7e:	f7ff fe35 	bl	800abec <RCCEx_PLL3_Config>
 800af82:	4605      	mov	r5, r0
        break;
 800af84:	e022      	b.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x218>
    switch (pPeriphClkInit->Sai1ClockSelection)
 800af86:	2601      	movs	r6, #1
 800af88:	4635      	mov	r5, r6
 800af8a:	e027      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x228>
 800af8c:	2b60      	cmp	r3, #96	@ 0x60
 800af8e:	d021      	beq.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800af90:	2b80      	cmp	r3, #128	@ 0x80
 800af92:	d10c      	bne.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800af94:	2500      	movs	r5, #0
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800af96:	4a3c      	ldr	r2, [pc, #240]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af98:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800af9c:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800afa0:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800afa4:	430b      	orrs	r3, r1
 800afa6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800afaa:	2600      	movs	r6, #0
 800afac:	e016      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch (pPeriphClkInit->Sai1ClockSelection)
 800afae:	2601      	movs	r6, #1
 800afb0:	4635      	mov	r5, r6
 800afb2:	e013      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x228>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800afb4:	4a34      	ldr	r2, [pc, #208]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800afb6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800afb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800afbc:	6293      	str	r3, [r2, #40]	@ 0x28
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800afbe:	2500      	movs	r5, #0
 800afc0:	e7e9      	b.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800afc2:	f104 0008 	add.w	r0, r4, #8
 800afc6:	f7ff fe83 	bl	800acd0 <RCCEx_PLL2_Config>
 800afca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800afcc:	2d00      	cmp	r5, #0
 800afce:	d0e2      	beq.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800afd0:	462e      	mov	r6, r5
 800afd2:	e003      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch (pPeriphClkInit->Sai1ClockSelection)
 800afd4:	2500      	movs	r5, #0
 800afd6:	e7de      	b.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800afd8:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800afda:	4635      	mov	r5, r6
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800afdc:	6823      	ldr	r3, [r4, #0]
 800afde:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800afe2:	d025      	beq.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch (pPeriphClkInit->Sai2ClockSelection)
 800afe4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800afe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afec:	d045      	beq.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 800afee:	d80d      	bhi.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x258>
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d04b      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800aff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aff8:	d105      	bne.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800affa:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800affe:	f7ff fdf5 	bl	800abec <RCCEx_PLL3_Config>
 800b002:	4605      	mov	r5, r0
        break;
 800b004:	e008      	b.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x264>
    switch (pPeriphClkInit->Sai2ClockSelection)
 800b006:	2601      	movs	r6, #1
 800b008:	4635      	mov	r5, r6
 800b00a:	e011      	b.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b00c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b010:	d002      	beq.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800b012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b016:	d12d      	bne.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    if (ret == HAL_OK)
 800b018:	2d00      	cmp	r5, #0
 800b01a:	d13d      	bne.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b01c:	4a1a      	ldr	r2, [pc, #104]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b01e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800b022:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800b026:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800b02a:	430b      	orrs	r3, r1
 800b02c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b030:	6823      	ldr	r3, [r4, #0]
 800b032:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800b036:	d010      	beq.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    switch (pPeriphClkInit->AdcDacClockSelection)
 800b038:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800b03c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b040:	d033      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 800b042:	d92b      	bls.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800b044:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b048:	d034      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b04a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b04e:	d031      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b050:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b054:	d02e      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b056:	2601      	movs	r6, #1
 800b058:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800b060:	d046      	beq.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b062:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 800b066:	2b04      	cmp	r3, #4
 800b068:	d85d      	bhi.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b06a:	e8df f003 	tbb	[pc, r3]
 800b06e:	3136      	.short	0x3136
 800b070:	3656      	.short	0x3656
 800b072:	36          	.byte	0x36
 800b073:	00          	.byte	0x00
    switch (pPeriphClkInit->Sai2ClockSelection)
 800b074:	2601      	movs	r6, #1
 800b076:	4635      	mov	r5, r6
 800b078:	e7da      	b.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b07a:	4a03      	ldr	r2, [pc, #12]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b07c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800b07e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b082:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b084:	e7c8      	b.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800b086:	bf00      	nop
 800b088:	46020c00 	.word	0x46020c00
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b08c:	f104 0008 	add.w	r0, r4, #8
 800b090:	f7ff fe1e 	bl	800acd0 <RCCEx_PLL2_Config>
 800b094:	4605      	mov	r5, r0
        break;
 800b096:	e7bf      	b.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800b098:	462e      	mov	r6, r5
 800b09a:	e7c9      	b.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch (pPeriphClkInit->AdcDacClockSelection)
 800b09c:	b153      	cbz	r3, 800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b09e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0a2:	d007      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b0a4:	2601      	movs	r6, #1
 800b0a6:	4635      	mov	r5, r6
 800b0a8:	e7d7      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b0aa:	f104 0008 	add.w	r0, r4, #8
 800b0ae:	f7ff fe0f 	bl	800acd0 <RCCEx_PLL2_Config>
 800b0b2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b0b4:	b955      	cbnz	r5, 800b0cc <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b0b6:	4a80      	ldr	r2, [pc, #512]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b0b8:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 800b0bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0c0:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 800b0c4:	430b      	orrs	r3, r1
 800b0c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b0ca:	e7c6      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b0cc:	462e      	mov	r6, r5
 800b0ce:	e7c4      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b0d0:	4a79      	ldr	r2, [pc, #484]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b0d2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800b0d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b0d8:	6293      	str	r3, [r2, #40]	@ 0x28
    if (ret == HAL_OK)
 800b0da:	bb3d      	cbnz	r5, 800b12c <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b0dc:	4a76      	ldr	r2, [pc, #472]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b0de:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800b0e2:	f023 0307 	bic.w	r3, r3, #7
 800b0e6:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800b0ea:	430b      	orrs	r3, r1
 800b0ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800b0f0:	6823      	ldr	r3, [r4, #0]
 800b0f2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800b0f6:	d030      	beq.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b0f8:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800b0fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b100:	f000 8089 	beq.w	800b216 <HAL_RCCEx_PeriphCLKConfig+0x462>
 800b104:	d817      	bhi.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b106:	b1e3      	cbz	r3, 800b142 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800b108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b10c:	d110      	bne.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x37c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b10e:	4a6a      	ldr	r2, [pc, #424]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b110:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800b112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b116:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b118:	e013      	b.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x38e>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b11a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800b11e:	f7ff fd65 	bl	800abec <RCCEx_PLL3_Config>
 800b122:	4605      	mov	r5, r0
        break;
 800b124:	e7d9      	b.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x326>
    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b126:	2601      	movs	r6, #1
 800b128:	4635      	mov	r5, r6
 800b12a:	e7e1      	b.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b12c:	462e      	mov	r6, r5
 800b12e:	e7df      	b.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b130:	2601      	movs	r6, #1
 800b132:	4635      	mov	r5, r6
 800b134:	e011      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 800b136:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b13a:	d002      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800b13c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b140:	d166      	bne.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    if (ret == HAL_OK)
 800b142:	2d00      	cmp	r5, #0
 800b144:	d16d      	bne.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800b146:	4a5c      	ldr	r2, [pc, #368]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b148:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 800b14c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800b150:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800b154:	430b      	orrs	r3, r1
 800b156:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800b160:	d07a      	beq.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b162:	4b55      	ldr	r3, [pc, #340]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b168:	f013 0f04 	tst.w	r3, #4
 800b16c:	d15b      	bne.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x472>
      __HAL_RCC_PWR_CLK_ENABLE();
 800b16e:	4b52      	ldr	r3, [pc, #328]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b170:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800b174:	f042 0204 	orr.w	r2, r2, #4
 800b178:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800b17c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b180:	f003 0304 	and.w	r3, r3, #4
 800b184:	9301      	str	r3, [sp, #4]
 800b186:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800b188:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b18c:	4a4b      	ldr	r2, [pc, #300]	@ (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800b18e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800b190:	f043 0301 	orr.w	r3, r3, #1
 800b194:	6293      	str	r3, [r2, #40]	@ 0x28
    tickstart = HAL_GetTick();
 800b196:	f7f9 faa5 	bl	80046e4 <HAL_GetTick>
 800b19a:	4607      	mov	r7, r0
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b19c:	4b47      	ldr	r3, [pc, #284]	@ (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800b19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a0:	f013 0f01 	tst.w	r3, #1
 800b1a4:	d105      	bne.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1a6:	f7f9 fa9d 	bl	80046e4 <HAL_GetTick>
 800b1aa:	1bc3      	subs	r3, r0, r7
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d9f5      	bls.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
        ret = HAL_TIMEOUT;
 800b1b0:	2503      	movs	r5, #3
    if (ret == HAL_OK)
 800b1b2:	2d00      	cmp	r5, #0
 800b1b4:	d14c      	bne.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x49c>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b1b6:	4b40      	ldr	r3, [pc, #256]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b1b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b1bc:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800b1c0:	d016      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800b1c2:	f8d4 20d0 	ldr.w	r2, [r4, #208]	@ 0xd0
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d012      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b1ca:	4a3b      	ldr	r2, [pc, #236]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b1cc:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800b1d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800b1d4:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
 800b1d8:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800b1dc:	f8c2 10f0 	str.w	r1, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b1e0:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
 800b1e4:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800b1e8:	f8c2 10f0 	str.w	r1, [r2, #240]	@ 0xf0
        RCC->BDCR = tmpregister;
 800b1ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b1f0:	f013 0f01 	tst.w	r3, #1
 800b1f4:	d11a      	bne.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x478>
      if (ret == HAL_OK)
 800b1f6:	2d00      	cmp	r5, #0
 800b1f8:	d150      	bne.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b1fa:	4a2f      	ldr	r2, [pc, #188]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b1fc:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800b200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b204:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
 800b208:	430b      	orrs	r3, r1
 800b20a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b20e:	e020      	b.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x49e>
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b210:	2601      	movs	r6, #1
 800b212:	4635      	mov	r5, r6
 800b214:	e7a1      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b216:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800b21a:	f7ff fce7 	bl	800abec <RCCEx_PLL3_Config>
 800b21e:	4605      	mov	r5, r0
        break;
 800b220:	e78f      	b.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800b222:	462e      	mov	r6, r5
 800b224:	e799      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    FlagStatus       pwrclkchanged = RESET;
 800b226:	f04f 0800 	mov.w	r8, #0
 800b22a:	e7af      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
        tickstart = HAL_GetTick();
 800b22c:	f7f9 fa5a 	bl	80046e4 <HAL_GetTick>
 800b230:	4607      	mov	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b232:	4b21      	ldr	r3, [pc, #132]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b238:	f013 0f02 	tst.w	r3, #2
 800b23c:	d1db      	bne.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b23e:	f7f9 fa51 	bl	80046e4 <HAL_GetTick>
 800b242:	1bc0      	subs	r0, r0, r7
 800b244:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b248:	4298      	cmp	r0, r3
 800b24a:	d9f2      	bls.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x47e>
            ret = HAL_TIMEOUT;
 800b24c:	2503      	movs	r5, #3
 800b24e:	e7d2      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
      status = ret;
 800b250:	462e      	mov	r6, r5
    if (pwrclkchanged == SET)
 800b252:	f1b8 0f00 	cmp.w	r8, #0
 800b256:	d123      	bne.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b258:	6823      	ldr	r3, [r4, #0]
 800b25a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800b25e:	d034      	beq.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x516>
    switch (pPeriphClkInit->IclkClockSelection)
 800b260:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800b264:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b268:	f000 810b 	beq.w	800b482 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 800b26c:	d828      	bhi.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800b26e:	b13b      	cbz	r3, 800b280 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800b270:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b274:	d11c      	bne.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b276:	f104 0008 	add.w	r0, r4, #8
 800b27a:	f7ff fd29 	bl	800acd0 <RCCEx_PLL2_Config>
 800b27e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b280:	2d00      	cmp	r5, #0
 800b282:	f040 8104 	bne.w	800b48e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b286:	4a0c      	ldr	r2, [pc, #48]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b288:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800b28c:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800b290:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800b294:	430b      	orrs	r3, r1
 800b296:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b29a:	e016      	b.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x516>
        status = ret;
 800b29c:	462e      	mov	r6, r5
 800b29e:	e7d8      	b.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x49e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2a0:	4a05      	ldr	r2, [pc, #20]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b2a2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800b2a6:	f023 0304 	bic.w	r3, r3, #4
 800b2aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b2ae:	e7d3      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    switch (pPeriphClkInit->IclkClockSelection)
 800b2b0:	2601      	movs	r6, #1
 800b2b2:	4635      	mov	r5, r6
 800b2b4:	e009      	b.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x516>
 800b2b6:	bf00      	nop
 800b2b8:	46020c00 	.word	0x46020c00
 800b2bc:	46020800 	.word	0x46020800
 800b2c0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b2c4:	d0dc      	beq.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800b2c6:	2601      	movs	r6, #1
 800b2c8:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800b2d0:	d00e      	beq.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
    switch (pPeriphClkInit->RngClockSelection)
 800b2d2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800b2d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2da:	f000 80da 	beq.w	800b492 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 800b2de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2e2:	f000 80d6 	beq.w	800b492 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 80d3 	beq.w	800b492 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 800b2ec:	2601      	movs	r6, #1
 800b2ee:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b2f0:	6823      	ldr	r3, [r4, #0]
 800b2f2:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800b2f6:	d009      	beq.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0x558>
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b2f8:	4a94      	ldr	r2, [pc, #592]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b2fa:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800b2fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b302:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800b306:	430b      	orrs	r3, r1
 800b308:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b30c:	6823      	ldr	r3, [r4, #0]
 800b30e:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800b312:	d00f      	beq.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x580>
    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b314:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800b318:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b31c:	f000 80c5 	beq.w	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x6f6>
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b320:	4a8a      	ldr	r2, [pc, #552]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b322:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800b326:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b32a:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 800b32e:	430b      	orrs	r3, r1
 800b330:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b334:	6823      	ldr	r3, [r4, #0]
 800b336:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800b33a:	d009      	beq.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b33c:	4a83      	ldr	r2, [pc, #524]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b33e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800b342:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b346:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 800b34a:	430b      	orrs	r3, r1
 800b34c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800b356:	d009      	beq.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b358:	4a7c      	ldr	r2, [pc, #496]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b35a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800b35e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800b362:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
 800b366:	430b      	orrs	r3, r1
 800b368:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b36c:	6823      	ldr	r3, [r4, #0]
 800b36e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800b372:	d009      	beq.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b374:	4a75      	ldr	r2, [pc, #468]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b376:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 800b37a:	f023 0318 	bic.w	r3, r3, #24
 800b37e:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
 800b382:	430b      	orrs	r3, r1
 800b384:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b388:	6823      	ldr	r3, [r4, #0]
 800b38a:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800b38e:	d018      	beq.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b390:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 800b394:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b398:	f000 808d 	beq.w	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b39c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 800b3a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b3a4:	f000 808d 	beq.w	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    if (ret == HAL_OK)
 800b3a8:	2d00      	cmp	r5, #0
 800b3aa:	f040 8090 	bne.w	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x71a>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b3ae:	4a67      	ldr	r2, [pc, #412]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b3b0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800b3b4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b3b8:	f8d4 10bc 	ldr.w	r1, [r4, #188]	@ 0xbc
 800b3bc:	430b      	orrs	r3, r1
 800b3be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800b3c2:	6863      	ldr	r3, [r4, #4]
 800b3c4:	f013 0f01 	tst.w	r3, #1
 800b3c8:	d01c      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->HspiClockSelection)
 800b3ca:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 800b3ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b3d2:	f000 808d 	beq.w	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 800b3d6:	d87f      	bhi.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x724>
 800b3d8:	b13b      	cbz	r3, 800b3ea <HAL_RCCEx_PeriphCLKConfig+0x636>
 800b3da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3de:	d178      	bne.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x71e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3e0:	4a5a      	ldr	r2, [pc, #360]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b3e2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800b3e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b3e8:	6293      	str	r3, [r2, #40]	@ 0x28
    if (ret == HAL_OK)
 800b3ea:	2d00      	cmp	r5, #0
 800b3ec:	f040 8086 	bne.w	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x748>
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800b3f0:	4a56      	ldr	r2, [pc, #344]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b3f2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800b3f6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800b3fa:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 800b3fe:	430b      	orrs	r3, r1
 800b400:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800b404:	6823      	ldr	r3, [r4, #0]
 800b406:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800b40a:	d00c      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x672>
    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800b40c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800b410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b414:	d074      	beq.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800b416:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b41a:	f000 8082 	beq.w	800b522 <HAL_RCCEx_PeriphCLKConfig+0x76e>
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d073      	beq.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x756>
 800b422:	2601      	movs	r6, #1
 800b424:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800b42c:	d009      	beq.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800b42e:	4a47      	ldr	r2, [pc, #284]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b430:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 800b434:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b438:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 800b43c:	430b      	orrs	r3, r1
 800b43e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800b442:	6863      	ldr	r3, [r4, #4]
 800b444:	f013 0f08 	tst.w	r3, #8
 800b448:	d079      	beq.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x78a>
    switch (pPeriphClkInit->UsbPhyClockSelection)
 800b44a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 800b44e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b452:	d009      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 800b454:	d86f      	bhi.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x782>
 800b456:	b13b      	cbz	r3, 800b468 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 800b458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b45c:	d169      	bne.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b45e:	4a3b      	ldr	r2, [pc, #236]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b460:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800b462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b466:	6293      	str	r3, [r2, #40]	@ 0x28
    if (ret == HAL_OK)
 800b468:	2d00      	cmp	r5, #0
 800b46a:	d16c      	bne.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x792>
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800b46c:	4a37      	ldr	r2, [pc, #220]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b46e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800b472:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800b476:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
 800b47a:	430b      	orrs	r3, r1
 800b47c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b480:	e05d      	b.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b482:	4a32      	ldr	r2, [pc, #200]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b484:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800b486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b48a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b48c:	e6f8      	b.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800b48e:	462e      	mov	r6, r5
 800b490:	e71b      	b.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x516>
    if (ret == HAL_OK)
 800b492:	b945      	cbnz	r5, 800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b494:	492d      	ldr	r1, [pc, #180]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b496:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
 800b49a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b4a4:	e724      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 800b4a6:	462e      	mov	r6, r5
 800b4a8:	e722      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b4aa:	4a28      	ldr	r2, [pc, #160]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b4ac:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800b4ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4b2:	6293      	str	r3, [r2, #40]	@ 0x28
 800b4b4:	e734      	b.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4b6:	4a25      	ldr	r2, [pc, #148]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b4b8:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800b4ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4be:	6293      	str	r3, [r2, #40]	@ 0x28
 800b4c0:	e76c      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b4c2:	f104 0008 	add.w	r0, r4, #8
 800b4c6:	f7ff fc03 	bl	800acd0 <RCCEx_PLL2_Config>
 800b4ca:	4605      	mov	r5, r0
 800b4cc:	e76c      	b.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      status = ret;
 800b4ce:	462e      	mov	r6, r5
 800b4d0:	e777      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    switch (pPeriphClkInit->HspiClockSelection)
 800b4d2:	2601      	movs	r6, #1
 800b4d4:	4635      	mov	r5, r6
 800b4d6:	e795      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800b4d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b4dc:	d105      	bne.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x736>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b4de:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800b4e2:	f7ff fb83 	bl	800abec <RCCEx_PLL3_Config>
 800b4e6:	4605      	mov	r5, r0
        break;
 800b4e8:	e77f      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x636>
    switch (pPeriphClkInit->HspiClockSelection)
 800b4ea:	2601      	movs	r6, #1
 800b4ec:	4635      	mov	r5, r6
 800b4ee:	e789      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x650>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b4f0:	f104 0008 	add.w	r0, r4, #8
 800b4f4:	f7ff fbec 	bl	800acd0 <RCCEx_PLL2_Config>
 800b4f8:	4605      	mov	r5, r0
        break;
 800b4fa:	e776      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x636>
 800b4fc:	462e      	mov	r6, r5
 800b4fe:	e781      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x650>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b500:	4a12      	ldr	r2, [pc, #72]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b502:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800b504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b508:	6293      	str	r3, [r2, #40]	@ 0x28
    if (ret == HAL_OK)
 800b50a:	b985      	cbnz	r5, 800b52e <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800b50c:	4a0f      	ldr	r2, [pc, #60]	@ (800b54c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800b50e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800b512:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800b516:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800b51a:	430b      	orrs	r3, r1
 800b51c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b520:	e781      	b.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x672>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b522:	f104 0008 	add.w	r0, r4, #8
 800b526:	f7ff fbd3 	bl	800acd0 <RCCEx_PLL2_Config>
 800b52a:	4605      	mov	r5, r0
        break;
 800b52c:	e7ed      	b.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x756>
 800b52e:	462e      	mov	r6, r5
 800b530:	e779      	b.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x672>
    switch (pPeriphClkInit->UsbPhyClockSelection)
 800b532:	2601      	movs	r6, #1
 800b534:	e003      	b.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800b536:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b53a:	d090      	beq.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800b53c:	2601      	movs	r6, #1
}
 800b53e:	4630      	mov	r0, r6
 800b540:	b002      	add	sp, #8
 800b542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b546:	462e      	mov	r6, r5
 800b548:	e7f9      	b.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800b54a:	bf00      	nop
 800b54c:	46020c00 	.word	0x46020c00

0800b550 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 800b550:	b510      	push	{r4, lr}
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800b552:	4c82      	ldr	r4, [pc, #520]	@ (800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>)
 800b554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b556:	f3c1 0108 	ubfx	r1, r1, #0, #9
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b55a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b55c:	f003 0c03 	and.w	ip, r3, #3
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b560:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b562:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800b566:	1c5a      	adds	r2, r3, #1
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b568:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b56a:	f3c3 1e00 	ubfx	lr, r3, #4, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b56e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b570:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800b574:	fb0e f303 	mul.w	r3, lr, r3
 800b578:	ee07 3a90 	vmov	s15, r3
 800b57c:	eef8 7a67 	vcvt.f32.u32	s15, s15
  switch (pll1source)
 800b580:	f1bc 0f02 	cmp.w	ip, #2
 800b584:	d02e      	beq.n	800b5e4 <HAL_RCCEx_GetPLL1ClockFreq+0x94>
 800b586:	f1bc 0f03 	cmp.w	ip, #3
 800b58a:	f000 80ba 	beq.w	800b702 <HAL_RCCEx_GetPLL1ClockFreq+0x1b2>
 800b58e:	f1bc 0f01 	cmp.w	ip, #1
 800b592:	f000 808a 	beq.w	800b6aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b596:	4b71      	ldr	r3, [pc, #452]	@ (800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>)
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800b59e:	f000 80cd 	beq.w	800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800b5a2:	4b6e      	ldr	r3, [pc, #440]	@ (800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>)
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	0f1b      	lsrs	r3, r3, #28
 800b5a8:	4c6d      	ldr	r4, [pc, #436]	@ (800b760 <HAL_RCCEx_GetPLL1ClockFreq+0x210>)
 800b5aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b5ae:	ed93 6a00 	vldr	s12, [r3]
 800b5b2:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800b5b6:	ee07 2a10 	vmov	s14, r2
 800b5ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b5be:	eec6 6a07 	vdiv.f32	s13, s12, s14
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5c2:	ee07 1a10 	vmov	s14, r1
 800b5c6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b5ca:	ed9f 6a66 	vldr	s12, [pc, #408]	@ 800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
 800b5ce:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b5d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5da:	ee77 7a87 	vadd.f32	s15, s15, s14
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b5de:	ee66 7aa7 	vmul.f32	s15, s13, s15
      break;
 800b5e2:	e01b      	b.n	800b61c <HAL_RCCEx_GetPLL1ClockFreq+0xcc>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b5e4:	ee07 2a10 	vmov	s14, r2
 800b5e8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b5ec:	ed9f 6a5e 	vldr	s12, [pc, #376]	@ 800b768 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
 800b5f0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800b5f4:	4b59      	ldr	r3, [pc, #356]	@ (800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>)
 800b5f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5fc:	ee07 3a10 	vmov	s14, r3
 800b600:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b604:	ed9f 6a57 	vldr	s12, [pc, #348]	@ 800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
 800b608:	ee67 7a86 	vmul.f32	s15, s15, s12
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b60c:	ee77 7a27 	vadd.f32	s15, s14, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b610:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b614:	ee77 7a87 	vadd.f32	s15, s15, s14
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b618:	ee66 7aa7 	vmul.f32	s15, s13, s15
  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800b61c:	4b4f      	ldr	r3, [pc, #316]	@ (800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>)
 800b61e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b620:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800b624:	f000 8090 	beq.w	800b748 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b628:	4b4c      	ldr	r3, [pc, #304]	@ (800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>)
 800b62a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b62c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b630:	ee07 3a10 	vmov	s14, r3
 800b634:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800b638:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b63c:	ee37 7a26 	vadd.f32	s14, s14, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b640:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b644:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b648:	edc0 6a00 	vstr	s13, [r0]
  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800b64c:	4b43      	ldr	r3, [pc, #268]	@ (800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>)
 800b64e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b650:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800b654:	d07b      	beq.n	800b74e <HAL_RCCEx_GetPLL1ClockFreq+0x1fe>
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b656:	4b41      	ldr	r3, [pc, #260]	@ (800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>)
 800b658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b65a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b65e:	ee07 3a10 	vmov	s14, r3
 800b662:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800b666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b66a:	ee37 7a26 	vadd.f32	s14, s14, s13
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b66e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b672:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b676:	edc0 6a01 	vstr	s13, [r0, #4]
  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800b67a:	4b38      	ldr	r3, [pc, #224]	@ (800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>)
 800b67c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b67e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800b682:	d067      	beq.n	800b754 <HAL_RCCEx_GetPLL1ClockFreq+0x204>
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b684:	4b35      	ldr	r3, [pc, #212]	@ (800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>)
 800b686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b688:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b68c:	ee07 3a10 	vmov	s14, r3
 800b690:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800b694:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b698:	ee37 7a26 	vadd.f32	s14, s14, s13
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b69c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b6a0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b6a4:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800b6a8:	bd10      	pop	{r4, pc}
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b6aa:	4b2c      	ldr	r3, [pc, #176]	@ (800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>)
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800b6b2:	d020      	beq.n	800b6f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1a6>
 800b6b4:	4b29      	ldr	r3, [pc, #164]	@ (800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>)
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	0f1b      	lsrs	r3, r3, #28
 800b6ba:	4c29      	ldr	r4, [pc, #164]	@ (800b760 <HAL_RCCEx_GetPLL1ClockFreq+0x210>)
 800b6bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6c0:	ed93 6a00 	vldr	s12, [r3]
 800b6c4:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800b6c8:	ee07 2a10 	vmov	s14, r2
 800b6cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b6d0:	eec6 6a07 	vdiv.f32	s13, s12, s14
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6d4:	ee07 1a10 	vmov	s14, r1
 800b6d8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b6dc:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
 800b6e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b6e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6ec:	ee77 7a87 	vadd.f32	s15, s15, s14
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b6f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
      break;
 800b6f4:	e792      	b.n	800b61c <HAL_RCCEx_GetPLL1ClockFreq+0xcc>
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b6f6:	4b19      	ldr	r3, [pc, #100]	@ (800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>)
 800b6f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b6fc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 800b700:	e7db      	b.n	800b6ba <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b702:	ee07 2a10 	vmov	s14, r2
 800b706:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b70a:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 800b768 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
 800b70e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800b712:	4b12      	ldr	r3, [pc, #72]	@ (800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>)
 800b714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b71a:	ee07 3a10 	vmov	s14, r3
 800b71e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b722:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
 800b726:	ee67 7a86 	vmul.f32	s15, s15, s12
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b72a:	ee77 7a27 	vadd.f32	s15, s14, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b72e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b732:	ee77 7a87 	vadd.f32	s15, s15, s14
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b736:	ee66 7aa7 	vmul.f32	s15, s13, s15
      break;
 800b73a:	e76f      	b.n	800b61c <HAL_RCCEx_GetPLL1ClockFreq+0xcc>
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b73c:	4b07      	ldr	r3, [pc, #28]	@ (800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>)
 800b73e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b742:	f3c3 3303 	ubfx	r3, r3, #12, #4
 800b746:	e72f      	b.n	800b5a8 <HAL_RCCEx_GetPLL1ClockFreq+0x58>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b748:	2300      	movs	r3, #0
 800b74a:	6003      	str	r3, [r0, #0]
 800b74c:	e77e      	b.n	800b64c <HAL_RCCEx_GetPLL1ClockFreq+0xfc>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b74e:	2300      	movs	r3, #0
 800b750:	6043      	str	r3, [r0, #4]
 800b752:	e792      	b.n	800b67a <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b754:	2300      	movs	r3, #0
 800b756:	6083      	str	r3, [r0, #8]
}
 800b758:	e7a6      	b.n	800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 800b75a:	bf00      	nop
 800b75c:	46020c00 	.word	0x46020c00
 800b760:	080176e0 	.word	0x080176e0
 800b764:	39000000 	.word	0x39000000
 800b768:	4b742400 	.word	0x4b742400

0800b76c <HAL_RCCEx_GetPLL2ClockFreq>:
{
 800b76c:	b510      	push	{r4, lr}
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800b76e:	4c82      	ldr	r4, [pc, #520]	@ (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>)
 800b770:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800b772:	f3c1 0108 	ubfx	r1, r1, #0, #9
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800b776:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b778:	f003 0c03 	and.w	ip, r3, #3
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800b77c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b77e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800b782:	1c5a      	adds	r2, r3, #1
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800b784:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b786:	f3c3 1e00 	ubfx	lr, r3, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800b78a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b78c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800b790:	fb0e f303 	mul.w	r3, lr, r3
 800b794:	ee07 3a90 	vmov	s15, r3
 800b798:	eef8 7a67 	vcvt.f32.u32	s15, s15
  switch (pll2source)
 800b79c:	f1bc 0f02 	cmp.w	ip, #2
 800b7a0:	d02e      	beq.n	800b800 <HAL_RCCEx_GetPLL2ClockFreq+0x94>
 800b7a2:	f1bc 0f03 	cmp.w	ip, #3
 800b7a6:	f000 80ba 	beq.w	800b91e <HAL_RCCEx_GetPLL2ClockFreq+0x1b2>
 800b7aa:	f1bc 0f01 	cmp.w	ip, #1
 800b7ae:	f000 808a 	beq.w	800b8c6 <HAL_RCCEx_GetPLL2ClockFreq+0x15a>
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800b7b2:	4b71      	ldr	r3, [pc, #452]	@ (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>)
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800b7ba:	f000 80cd 	beq.w	800b958 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800b7be:	4b6e      	ldr	r3, [pc, #440]	@ (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>)
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	0f1b      	lsrs	r3, r3, #28
 800b7c4:	4c6d      	ldr	r4, [pc, #436]	@ (800b97c <HAL_RCCEx_GetPLL2ClockFreq+0x210>)
 800b7c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7ca:	ed93 6a00 	vldr	s12, [r3]
 800b7ce:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800b7d2:	ee07 2a10 	vmov	s14, r2
 800b7d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b7da:	eec6 6a07 	vdiv.f32	s13, s12, s14
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7de:	ee07 1a10 	vmov	s14, r1
 800b7e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b7e6:	ed9f 6a66 	vldr	s12, [pc, #408]	@ 800b980 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
 800b7ea:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b7ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b7f6:	ee77 7a87 	vadd.f32	s15, s15, s14
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800b7fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
      break;
 800b7fe:	e01b      	b.n	800b838 <HAL_RCCEx_GetPLL2ClockFreq+0xcc>
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b800:	ee07 2a10 	vmov	s14, r2
 800b804:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b808:	ed9f 6a5e 	vldr	s12, [pc, #376]	@ 800b984 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
 800b80c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800b810:	4b59      	ldr	r3, [pc, #356]	@ (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>)
 800b812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b818:	ee07 3a10 	vmov	s14, r3
 800b81c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b820:	ed9f 6a57 	vldr	s12, [pc, #348]	@ 800b980 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
 800b824:	ee67 7a86 	vmul.f32	s15, s15, s12
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b828:	ee77 7a27 	vadd.f32	s15, s14, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b82c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b830:	ee77 7a87 	vadd.f32	s15, s15, s14
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b834:	ee66 7aa7 	vmul.f32	s15, s13, s15
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800b838:	4b4f      	ldr	r3, [pc, #316]	@ (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>)
 800b83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b83c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800b840:	f000 8090 	beq.w	800b964 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b844:	4b4c      	ldr	r3, [pc, #304]	@ (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>)
 800b846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b848:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b84c:	ee07 3a10 	vmov	s14, r3
 800b850:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800b854:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b858:	ee37 7a26 	vadd.f32	s14, s14, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b85c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b860:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b864:	edc0 6a00 	vstr	s13, [r0]
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800b868:	4b43      	ldr	r3, [pc, #268]	@ (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>)
 800b86a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800b870:	d07b      	beq.n	800b96a <HAL_RCCEx_GetPLL2ClockFreq+0x1fe>
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b872:	4b41      	ldr	r3, [pc, #260]	@ (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>)
 800b874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b876:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b87a:	ee07 3a10 	vmov	s14, r3
 800b87e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800b882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b886:	ee37 7a26 	vadd.f32	s14, s14, s13
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b88a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b88e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b892:	edc0 6a01 	vstr	s13, [r0, #4]
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800b896:	4b38      	ldr	r3, [pc, #224]	@ (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>)
 800b898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b89a:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800b89e:	d067      	beq.n	800b970 <HAL_RCCEx_GetPLL2ClockFreq+0x204>
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b8a0:	4b35      	ldr	r3, [pc, #212]	@ (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>)
 800b8a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8a4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b8a8:	ee07 3a10 	vmov	s14, r3
 800b8ac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800b8b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8b4:	ee37 7a26 	vadd.f32	s14, s14, s13
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b8b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b8bc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b8c0:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800b8c4:	bd10      	pop	{r4, pc}
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800b8c6:	4b2c      	ldr	r3, [pc, #176]	@ (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>)
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800b8ce:	d020      	beq.n	800b912 <HAL_RCCEx_GetPLL2ClockFreq+0x1a6>
 800b8d0:	4b29      	ldr	r3, [pc, #164]	@ (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>)
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	0f1b      	lsrs	r3, r3, #28
 800b8d6:	4c29      	ldr	r4, [pc, #164]	@ (800b97c <HAL_RCCEx_GetPLL2ClockFreq+0x210>)
 800b8d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b8dc:	ed93 6a00 	vldr	s12, [r3]
 800b8e0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800b8e4:	ee07 2a10 	vmov	s14, r2
 800b8e8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b8ec:	eec6 6a07 	vdiv.f32	s13, s12, s14
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8f0:	ee07 1a10 	vmov	s14, r1
 800b8f4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b8f8:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 800b980 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
 800b8fc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b900:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b904:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b908:	ee77 7a87 	vadd.f32	s15, s15, s14
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800b90c:	ee66 7aa7 	vmul.f32	s15, s13, s15
      break;
 800b910:	e792      	b.n	800b838 <HAL_RCCEx_GetPLL2ClockFreq+0xcc>
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800b912:	4b19      	ldr	r3, [pc, #100]	@ (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>)
 800b914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b918:	f3c3 3303 	ubfx	r3, r3, #12, #4
 800b91c:	e7db      	b.n	800b8d6 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b91e:	ee07 2a10 	vmov	s14, r2
 800b922:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b926:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 800b984 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
 800b92a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800b92e:	4b12      	ldr	r3, [pc, #72]	@ (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>)
 800b930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b936:	ee07 3a10 	vmov	s14, r3
 800b93a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b93e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b980 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
 800b942:	ee67 7a86 	vmul.f32	s15, s15, s12
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b946:	ee77 7a27 	vadd.f32	s15, s14, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b94a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b94e:	ee77 7a87 	vadd.f32	s15, s15, s14
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b952:	ee66 7aa7 	vmul.f32	s15, s13, s15
      break;
 800b956:	e76f      	b.n	800b838 <HAL_RCCEx_GetPLL2ClockFreq+0xcc>
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800b958:	4b07      	ldr	r3, [pc, #28]	@ (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>)
 800b95a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b95e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 800b962:	e72f      	b.n	800b7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x58>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b964:	2300      	movs	r3, #0
 800b966:	6003      	str	r3, [r0, #0]
 800b968:	e77e      	b.n	800b868 <HAL_RCCEx_GetPLL2ClockFreq+0xfc>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b96a:	2300      	movs	r3, #0
 800b96c:	6043      	str	r3, [r0, #4]
 800b96e:	e792      	b.n	800b896 <HAL_RCCEx_GetPLL2ClockFreq+0x12a>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b970:	2300      	movs	r3, #0
 800b972:	6083      	str	r3, [r0, #8]
}
 800b974:	e7a6      	b.n	800b8c4 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 800b976:	bf00      	nop
 800b978:	46020c00 	.word	0x46020c00
 800b97c:	080176e0 	.word	0x080176e0
 800b980:	39000000 	.word	0x39000000
 800b984:	4b742400 	.word	0x4b742400

0800b988 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 800b988:	b510      	push	{r4, lr}
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800b98a:	4c82      	ldr	r4, [pc, #520]	@ (800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>)
 800b98c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b98e:	f3c1 0108 	ubfx	r1, r1, #0, #9
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800b992:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b994:	f003 0c03 	and.w	ip, r3, #3
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800b998:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b99a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800b99e:	1c5a      	adds	r2, r3, #1
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800b9a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b9a2:	f3c3 1e00 	ubfx	lr, r3, #4, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800b9a6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b9a8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800b9ac:	fb0e f303 	mul.w	r3, lr, r3
 800b9b0:	ee07 3a90 	vmov	s15, r3
 800b9b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
  switch (pll3source)
 800b9b8:	f1bc 0f02 	cmp.w	ip, #2
 800b9bc:	d02e      	beq.n	800ba1c <HAL_RCCEx_GetPLL3ClockFreq+0x94>
 800b9be:	f1bc 0f03 	cmp.w	ip, #3
 800b9c2:	f000 80ba 	beq.w	800bb3a <HAL_RCCEx_GetPLL3ClockFreq+0x1b2>
 800b9c6:	f1bc 0f01 	cmp.w	ip, #1
 800b9ca:	f000 808a 	beq.w	800bae2 <HAL_RCCEx_GetPLL3ClockFreq+0x15a>
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b9ce:	4b71      	ldr	r3, [pc, #452]	@ (800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>)
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800b9d6:	f000 80cd 	beq.w	800bb74 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800b9da:	4b6e      	ldr	r3, [pc, #440]	@ (800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>)
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	0f1b      	lsrs	r3, r3, #28
 800b9e0:	4c6d      	ldr	r4, [pc, #436]	@ (800bb98 <HAL_RCCEx_GetPLL3ClockFreq+0x210>)
 800b9e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9e6:	ed93 6a00 	vldr	s12, [r3]
 800b9ea:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800b9ee:	ee07 2a10 	vmov	s14, r2
 800b9f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b9f6:	eec6 6a07 	vdiv.f32	s13, s12, s14
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9fa:	ee07 1a10 	vmov	s14, r1
 800b9fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800ba02:	ed9f 6a66 	vldr	s12, [pc, #408]	@ 800bb9c <HAL_RCCEx_GetPLL3ClockFreq+0x214>
 800ba06:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ba0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba12:	ee77 7a87 	vadd.f32	s15, s15, s14
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ba16:	ee66 7aa7 	vmul.f32	s15, s13, s15
      break;
 800ba1a:	e01b      	b.n	800ba54 <HAL_RCCEx_GetPLL3ClockFreq+0xcc>
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ba1c:	ee07 2a10 	vmov	s14, r2
 800ba20:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800ba24:	ed9f 6a5e 	vldr	s12, [pc, #376]	@ 800bba0 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
 800ba28:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800ba2c:	4b59      	ldr	r3, [pc, #356]	@ (800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>)
 800ba2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba34:	ee07 3a10 	vmov	s14, r3
 800ba38:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba3c:	ed9f 6a57 	vldr	s12, [pc, #348]	@ 800bb9c <HAL_RCCEx_GetPLL3ClockFreq+0x214>
 800ba40:	ee67 7a86 	vmul.f32	s15, s15, s12
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ba44:	ee77 7a27 	vadd.f32	s15, s14, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba4c:	ee77 7a87 	vadd.f32	s15, s15, s14
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ba50:	ee66 7aa7 	vmul.f32	s15, s13, s15
  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800ba54:	4b4f      	ldr	r3, [pc, #316]	@ (800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>)
 800ba56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba58:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800ba5c:	f000 8090 	beq.w	800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ba60:	4b4c      	ldr	r3, [pc, #304]	@ (800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>)
 800ba62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba64:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ba68:	ee07 3a10 	vmov	s14, r3
 800ba6c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800ba70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba74:	ee37 7a26 	vadd.f32	s14, s14, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ba78:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ba7c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800ba80:	edc0 6a00 	vstr	s13, [r0]
  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ba84:	4b43      	ldr	r3, [pc, #268]	@ (800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>)
 800ba86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba88:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800ba8c:	d07b      	beq.n	800bb86 <HAL_RCCEx_GetPLL3ClockFreq+0x1fe>
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ba8e:	4b41      	ldr	r3, [pc, #260]	@ (800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>)
 800ba90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba92:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800ba96:	ee07 3a10 	vmov	s14, r3
 800ba9a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800ba9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800baa2:	ee37 7a26 	vadd.f32	s14, s14, s13
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800baa6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800baaa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800baae:	edc0 6a01 	vstr	s13, [r0, #4]
  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800bab2:	4b38      	ldr	r3, [pc, #224]	@ (800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>)
 800bab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bab6:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800baba:	d067      	beq.n	800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x204>
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800babc:	4b35      	ldr	r3, [pc, #212]	@ (800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>)
 800babe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bac0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800bac4:	ee07 3a10 	vmov	s14, r3
 800bac8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800bacc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bad0:	ee37 7a26 	vadd.f32	s14, s14, s13
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bad4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bad8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800badc:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800bae0:	bd10      	pop	{r4, pc}
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bae2:	4b2c      	ldr	r3, [pc, #176]	@ (800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>)
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800baea:	d020      	beq.n	800bb2e <HAL_RCCEx_GetPLL3ClockFreq+0x1a6>
 800baec:	4b29      	ldr	r3, [pc, #164]	@ (800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>)
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	0f1b      	lsrs	r3, r3, #28
 800baf2:	4c29      	ldr	r4, [pc, #164]	@ (800bb98 <HAL_RCCEx_GetPLL3ClockFreq+0x210>)
 800baf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800baf8:	ed93 6a00 	vldr	s12, [r3]
 800bafc:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800bb00:	ee07 2a10 	vmov	s14, r2
 800bb04:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800bb08:	eec6 6a07 	vdiv.f32	s13, s12, s14
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb0c:	ee07 1a10 	vmov	s14, r1
 800bb10:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800bb14:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 800bb9c <HAL_RCCEx_GetPLL3ClockFreq+0x214>
 800bb18:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bb1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb24:	ee77 7a87 	vadd.f32	s15, s15, s14
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bb28:	ee66 7aa7 	vmul.f32	s15, s13, s15
      break;
 800bb2c:	e792      	b.n	800ba54 <HAL_RCCEx_GetPLL3ClockFreq+0xcc>
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bb2e:	4b19      	ldr	r3, [pc, #100]	@ (800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>)
 800bb30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bb34:	f3c3 3303 	ubfx	r3, r3, #12, #4
 800bb38:	e7db      	b.n	800baf2 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bb3a:	ee07 2a10 	vmov	s14, r2
 800bb3e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800bb42:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 800bba0 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
 800bb46:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800bb4a:	4b12      	ldr	r3, [pc, #72]	@ (800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>)
 800bb4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb52:	ee07 3a10 	vmov	s14, r3
 800bb56:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb5a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800bb9c <HAL_RCCEx_GetPLL3ClockFreq+0x214>
 800bb5e:	ee67 7a86 	vmul.f32	s15, s15, s12
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bb62:	ee77 7a27 	vadd.f32	s15, s14, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb6a:	ee77 7a87 	vadd.f32	s15, s15, s14
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bb6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
      break;
 800bb72:	e76f      	b.n	800ba54 <HAL_RCCEx_GetPLL3ClockFreq+0xcc>
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bb74:	4b07      	ldr	r3, [pc, #28]	@ (800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>)
 800bb76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bb7a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 800bb7e:	e72f      	b.n	800b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x58>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bb80:	2300      	movs	r3, #0
 800bb82:	6003      	str	r3, [r0, #0]
 800bb84:	e77e      	b.n	800ba84 <HAL_RCCEx_GetPLL3ClockFreq+0xfc>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bb86:	2300      	movs	r3, #0
 800bb88:	6043      	str	r3, [r0, #4]
 800bb8a:	e792      	b.n	800bab2 <HAL_RCCEx_GetPLL3ClockFreq+0x12a>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	6083      	str	r3, [r0, #8]
}
 800bb90:	e7a6      	b.n	800bae0 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 800bb92:	bf00      	nop
 800bb94:	46020c00 	.word	0x46020c00
 800bb98:	080176e0 	.word	0x080176e0
 800bb9c:	39000000 	.word	0x39000000
 800bba0:	4b742400 	.word	0x4b742400

0800bba4 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 800bba4:	b500      	push	{lr}
 800bba6:	b08b      	sub	sp, #44	@ 0x2c
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800bba8:	f5a0 3300 	sub.w	r3, r0, #131072	@ 0x20000
 800bbac:	430b      	orrs	r3, r1
 800bbae:	f000 84e6 	beq.w	800c57e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 800bbb2:	4bb6      	ldr	r3, [pc, #728]	@ (800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800bbb4:	4298      	cmp	r0, r3
 800bbb6:	f171 0300 	sbcs.w	r3, r1, #0
 800bbba:	f080 8129 	bcs.w	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800bbbe:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 800bbc2:	430b      	orrs	r3, r1
 800bbc4:	f000 8570 	beq.w	800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
 800bbc8:	f240 1301 	movw	r3, #257	@ 0x101
 800bbcc:	4298      	cmp	r0, r3
 800bbce:	f171 0300 	sbcs.w	r3, r1, #0
 800bbd2:	d324      	bcc.n	800bc1e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800bbd4:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 800bbd8:	430b      	orrs	r3, r1
 800bbda:	f000 82a2 	beq.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 800bbde:	f242 0301 	movw	r3, #8193	@ 0x2001
 800bbe2:	4298      	cmp	r0, r3
 800bbe4:	f171 0300 	sbcs.w	r3, r1, #0
 800bbe8:	f0c0 809b 	bcc.w	800bd22 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800bbec:	f5a0 4300 	sub.w	r3, r0, #32768	@ 0x8000
 800bbf0:	430b      	orrs	r3, r1
 800bbf2:	f000 844b 	beq.w	800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800bbf6:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 800bbfa:	430b      	orrs	r3, r1
 800bbfc:	f040 80eb 	bne.w	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800bc00:	4ba3      	ldr	r3, [pc, #652]	@ (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800bc02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc06:	f003 0307 	and.w	r3, r3, #7
    switch (srcclk)
 800bc0a:	2b04      	cmp	r3, #4
 800bc0c:	f201 8071 	bhi.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
 800bc10:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bc14:	048c0498 	.word	0x048c0498
 800bc18:	04880492 	.word	0x04880492
 800bc1c:	049c      	.short	0x049c
 800bc1e:	2821      	cmp	r0, #33	@ 0x21
 800bc20:	f171 0300 	sbcs.w	r3, r1, #0
 800bc24:	d254      	bcs.n	800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800bc26:	ea50 0301 	orrs.w	r3, r0, r1
 800bc2a:	f000 87e9 	beq.w	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
 800bc2e:	3801      	subs	r0, #1
 800bc30:	f141 31ff 	adc.w	r1, r1, #4294967295
 800bc34:	2820      	cmp	r0, #32
 800bc36:	f171 0100 	sbcs.w	r1, r1, #0
 800bc3a:	d303      	bcc.n	800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = 0U;
 800bc3c:	2000      	movs	r0, #0
}
 800bc3e:	b00b      	add	sp, #44	@ 0x2c
 800bc40:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc44:	281f      	cmp	r0, #31
 800bc46:	d8f9      	bhi.n	800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 800bc48:	a301      	add	r3, pc, #4	@ (adr r3, 800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800bc4a:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 800bc4e:	bf00      	nop
 800bc50:	0800c299 	.word	0x0800c299
 800bc54:	0800c2dd 	.word	0x0800c2dd
 800bc58:	0800bc3d 	.word	0x0800bc3d
 800bc5c:	0800c321 	.word	0x0800c321
 800bc60:	0800bc3d 	.word	0x0800bc3d
 800bc64:	0800bc3d 	.word	0x0800bc3d
 800bc68:	0800bc3d 	.word	0x0800bc3d
 800bc6c:	0800c365 	.word	0x0800c365
 800bc70:	0800bc3d 	.word	0x0800bc3d
 800bc74:	0800bc3d 	.word	0x0800bc3d
 800bc78:	0800bc3d 	.word	0x0800bc3d
 800bc7c:	0800bc3d 	.word	0x0800bc3d
 800bc80:	0800bc3d 	.word	0x0800bc3d
 800bc84:	0800bc3d 	.word	0x0800bc3d
 800bc88:	0800bc3d 	.word	0x0800bc3d
 800bc8c:	0800c3a9 	.word	0x0800c3a9
 800bc90:	0800bc3d 	.word	0x0800bc3d
 800bc94:	0800bc3d 	.word	0x0800bc3d
 800bc98:	0800bc3d 	.word	0x0800bc3d
 800bc9c:	0800bc3d 	.word	0x0800bc3d
 800bca0:	0800bc3d 	.word	0x0800bc3d
 800bca4:	0800bc3d 	.word	0x0800bc3d
 800bca8:	0800bc3d 	.word	0x0800bc3d
 800bcac:	0800bc3d 	.word	0x0800bc3d
 800bcb0:	0800bc3d 	.word	0x0800bc3d
 800bcb4:	0800bc3d 	.word	0x0800bc3d
 800bcb8:	0800bc3d 	.word	0x0800bc3d
 800bcbc:	0800bc3d 	.word	0x0800bc3d
 800bcc0:	0800bc3d 	.word	0x0800bc3d
 800bcc4:	0800bc3d 	.word	0x0800bc3d
 800bcc8:	0800bc3d 	.word	0x0800bc3d
 800bccc:	0800c411 	.word	0x0800c411
 800bcd0:	f1a0 0340 	sub.w	r3, r0, #64	@ 0x40
 800bcd4:	430b      	orrs	r3, r1
 800bcd6:	f000 8495 	beq.w	800c604 <HAL_RCCEx_GetPeriphCLKFreq+0xa60>
 800bcda:	3880      	subs	r0, #128	@ 0x80
 800bcdc:	4308      	orrs	r0, r1
 800bcde:	d11e      	bne.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800bce0:	4b6b      	ldr	r3, [pc, #428]	@ (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800bce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800bce6:	f413 5340 	ands.w	r3, r3, #12288	@ 0x3000
 800bcea:	f000 84c3 	beq.w	800c674 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800bcee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcf2:	f000 84c3 	beq.w	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800bcf6:	4a66      	ldr	r2, [pc, #408]	@ (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800bcf8:	6812      	ldr	r2, [r2, #0]
 800bcfa:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800bcfe:	d003      	beq.n	800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 800bd00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd04:	f000 87ff 	beq.w	800cd06 <HAL_RCCEx_GetPeriphCLKFreq+0x1162>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800bd08:	4a61      	ldr	r2, [pc, #388]	@ (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800bd0a:	6810      	ldr	r0, [r2, #0]
 800bd0c:	f010 0020 	ands.w	r0, r0, #32
 800bd10:	d095      	beq.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800bd12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd16:	f000 84b5 	beq.w	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
      frequency = 0U;
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	e78f      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800bd1e:	2000      	movs	r0, #0
 800bd20:	e78d      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800bd22:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 800bd26:	430b      	orrs	r3, r1
 800bd28:	f000 8589 	beq.w	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800bd2c:	f640 0301 	movw	r3, #2049	@ 0x801
 800bd30:	4298      	cmp	r0, r3
 800bd32:	f171 0300 	sbcs.w	r3, r1, #0
 800bd36:	d31a      	bcc.n	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 800bd38:	f5a0 5080 	sub.w	r0, r0, #4096	@ 0x1000
 800bd3c:	4308      	orrs	r0, r1
 800bd3e:	d148      	bne.n	800bdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800bd40:	4a53      	ldr	r2, [pc, #332]	@ (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800bd42:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800bd46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800bd4a:	6812      	ldr	r2, [r2, #0]
 800bd4c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800bd50:	d002      	beq.n	800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f000 876d 	beq.w	800cc32 <HAL_RCCEx_GetPeriphCLKFreq+0x108e>
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800bd58:	4a4d      	ldr	r2, [pc, #308]	@ (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800bd5a:	6812      	ldr	r2, [r2, #0]
 800bd5c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800bd60:	f000 876a 	beq.w	800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f040 876a 	bne.w	800cc3e <HAL_RCCEx_GetPeriphCLKFreq+0x109a>
      frequency = 0U;
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	e767      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800bd6e:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 800bd72:	430b      	orrs	r3, r1
 800bd74:	f000 85ac 	beq.w	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 800bd78:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
 800bd7c:	4308      	orrs	r0, r1
 800bd7e:	d126      	bne.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800bd80:	4b43      	ldr	r3, [pc, #268]	@ (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800bd82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800bd86:	f413 2340 	ands.w	r3, r3, #786432	@ 0xc0000
 800bd8a:	f000 85ea 	beq.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800bd8e:	4a40      	ldr	r2, [pc, #256]	@ (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800bd90:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800bd94:	f012 6f00 	tst.w	r2, #134217728	@ 0x8000000
 800bd98:	d003      	beq.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 800bd9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bd9e:	f000 85e4 	beq.w	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0xdc6>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800bda2:	4a3b      	ldr	r2, [pc, #236]	@ (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800bda4:	6812      	ldr	r2, [r2, #0]
 800bda6:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800bdaa:	d003      	beq.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 800bdac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bdb0:	f000 87d5 	beq.w	800cd5e <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800bdb4:	4a36      	ldr	r2, [pc, #216]	@ (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800bdb6:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800bdba:	f012 0f02 	tst.w	r2, #2
 800bdbe:	f000 87d1 	beq.w	800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800bdc2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800bdc6:	f000 87d0 	beq.w	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
      frequency = 0U;
 800bdca:	2000      	movs	r0, #0
 800bdcc:	e737      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800bdce:	2000      	movs	r0, #0
 800bdd0:	e735      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	e733      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800bdd6:	f5a0 4080 	sub.w	r0, r0, #16384	@ 0x4000
 800bdda:	4308      	orrs	r0, r1
 800bddc:	d116      	bne.n	800be0c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800bdde:	4b2c      	ldr	r3, [pc, #176]	@ (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800bde0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bde4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    switch (srcclk)
 800bde8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdec:	f000 81de 	beq.w	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x608>
 800bdf0:	f200 81cb 	bhi.w	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f000 81de 	beq.w	800c1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 800bdfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdfe:	f040 81c2 	bne.w	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be02:	a801      	add	r0, sp, #4
 800be04:	f7ff fdc0 	bl	800b988 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800be08:	9801      	ldr	r0, [sp, #4]
        break;
 800be0a:	e718      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800be0c:	2000      	movs	r0, #0
 800be0e:	e716      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800be10:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
 800be14:	430b      	orrs	r3, r1
 800be16:	f000 865d 	beq.w	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800be1a:	4b1e      	ldr	r3, [pc, #120]	@ (800be94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800be1c:	4298      	cmp	r0, r3
 800be1e:	f171 0300 	sbcs.w	r3, r1, #0
 800be22:	d33b      	bcc.n	800be9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
 800be24:	f100 4340 	add.w	r3, r0, #3221225472	@ 0xc0000000
 800be28:	430b      	orrs	r3, r1
 800be2a:	f000 84b6 	beq.w	800c79a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 800be2e:	4b1a      	ldr	r3, [pc, #104]	@ (800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800be30:	4298      	cmp	r0, r3
 800be32:	f171 0300 	sbcs.w	r3, r1, #0
 800be36:	f0c0 80db 	bcc.w	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
 800be3a:	2901      	cmp	r1, #1
 800be3c:	bf08      	it	eq
 800be3e:	2800      	cmpeq	r0, #0
 800be40:	f000 8685 	beq.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xfaa>
 800be44:	2908      	cmp	r1, #8
 800be46:	bf08      	it	eq
 800be48:	2800      	cmpeq	r0, #0
 800be4a:	f040 8117 	bne.w	800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800be4e:	4a10      	ldr	r2, [pc, #64]	@ (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800be50:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800be54:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800be58:	6812      	ldr	r2, [r2, #0]
 800be5a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800be5e:	d002      	beq.n	800be66 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800be60:	2b00      	cmp	r3, #0
 800be62:	f000 87a6 	beq.w	800cdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800be66:	4a0a      	ldr	r2, [pc, #40]	@ (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800be68:	6812      	ldr	r2, [r2, #0]
 800be6a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800be6e:	d003      	beq.n	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800be70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be74:	f000 87a0 	beq.w	800cdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800be78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be7c:	f000 86b3 	beq.w	800cbe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1042>
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800be80:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800be84:	f000 86b5 	beq.w	800cbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x104e>
      frequency = 0U;
 800be88:	2000      	movs	r0, #0
  return (frequency);
 800be8a:	e6d8      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800be8c:	00020001 	.word	0x00020001
 800be90:	46020c00 	.word	0x46020c00
 800be94:	04000001 	.word	0x04000001
 800be98:	40000001 	.word	0x40000001
 800be9c:	f5a0 0380 	sub.w	r3, r0, #4194304	@ 0x400000
 800bea0:	430b      	orrs	r3, r1
 800bea2:	f000 8442 	beq.w	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800bea6:	4ba8      	ldr	r3, [pc, #672]	@ (800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800bea8:	4298      	cmp	r0, r3
 800beaa:	f171 0300 	sbcs.w	r3, r1, #0
 800beae:	d32b      	bcc.n	800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800beb0:	f100 437f 	add.w	r3, r0, #4278190080	@ 0xff000000
 800beb4:	430b      	orrs	r3, r1
 800beb6:	f000 85a3 	beq.w	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 800beba:	f100 437e 	add.w	r3, r0, #4261412864	@ 0xfe000000
 800bebe:	430b      	orrs	r3, r1
 800bec0:	d17b      	bne.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800bec2:	4ba2      	ldr	r3, [pc, #648]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800bec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bec8:	f003 0318 	and.w	r3, r3, #24
    switch (srcclk)
 800becc:	2b18      	cmp	r3, #24
 800bece:	f200 8753 	bhi.w	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x11d4>
 800bed2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bed6:	05d5      	.short	0x05d5
 800bed8:	07510751 	.word	0x07510751
 800bedc:	07510751 	.word	0x07510751
 800bee0:	07510751 	.word	0x07510751
 800bee4:	05d90751 	.word	0x05d90751
 800bee8:	07510751 	.word	0x07510751
 800beec:	07510751 	.word	0x07510751
 800bef0:	07510751 	.word	0x07510751
 800bef4:	05dd0751 	.word	0x05dd0751
 800bef8:	07510751 	.word	0x07510751
 800befc:	07510751 	.word	0x07510751
 800bf00:	07510751 	.word	0x07510751
 800bf04:	05e60751 	.word	0x05e60751
 800bf08:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
 800bf0c:	430b      	orrs	r3, r1
 800bf0e:	f000 8157 	beq.w	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800bf12:	4b8f      	ldr	r3, [pc, #572]	@ (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800bf14:	4298      	cmp	r0, r3
 800bf16:	f171 0300 	sbcs.w	r3, r1, #0
 800bf1a:	d320      	bcc.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800bf1c:	f5a0 1000 	sub.w	r0, r0, #2097152	@ 0x200000
 800bf20:	4308      	orrs	r0, r1
 800bf22:	d148      	bne.n	800bfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bf24:	4b89      	ldr	r3, [pc, #548]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800bf26:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800bf2a:	f410 4080 	ands.w	r0, r0, #16384	@ 0x4000
 800bf2e:	f040 81ae 	bne.w	800c28e <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800bf32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf36:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
      switch (srcclk)
 800bf3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf3e:	f000 8193 	beq.w	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800bf42:	f200 817b 	bhi.w	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f000 8193 	beq.w	800c272 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 800bf4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bf50:	f47f ae75 	bne.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf54:	a804      	add	r0, sp, #16
 800bf56:	f7ff fc09 	bl	800b76c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf5a:	9805      	ldr	r0, [sp, #20]
          break;
 800bf5c:	e66f      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800bf5e:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
 800bf62:	430b      	orrs	r3, r1
 800bf64:	f000 80b1 	beq.w	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0x526>
 800bf68:	f5a0 2000 	sub.w	r0, r0, #524288	@ 0x80000
 800bf6c:	4308      	orrs	r0, r1
 800bf6e:	d120      	bne.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800bf70:	4a76      	ldr	r2, [pc, #472]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800bf72:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800bf76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800bf7a:	6812      	ldr	r2, [r2, #0]
 800bf7c:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800bf80:	d002      	beq.n	800bf88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	f000 8709 	beq.w	800cd9a <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800bf88:	4a70      	ldr	r2, [pc, #448]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800bf8a:	6812      	ldr	r2, [r2, #0]
 800bf8c:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800bf90:	d003      	beq.n	800bf9a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 800bf92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf96:	f000 8703 	beq.w	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0x11fc>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800bf9a:	4a6c      	ldr	r2, [pc, #432]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800bf9c:	6812      	ldr	r2, [r2, #0]
 800bf9e:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800bfa2:	f000 8700 	beq.w	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 800bfa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bfaa:	f000 86ff 	beq.w	800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      frequency = 0U;
 800bfae:	2000      	movs	r0, #0
 800bfb0:	e645      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	e643      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800bfb6:	2000      	movs	r0, #0
 800bfb8:	e641      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800bfba:	f5a0 0000 	sub.w	r0, r0, #8388608	@ 0x800000
 800bfbe:	4308      	orrs	r0, r1
 800bfc0:	d114      	bne.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x448>
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800bfc2:	4b62      	ldr	r3, [pc, #392]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800bfc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bfc8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    switch (srcclk)
 800bfcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bfd0:	f000 8507 	beq.w	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
 800bfd4:	f200 84e8 	bhi.w	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f000 84fe 	beq.w	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
 800bfde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bfe2:	f040 84d8 	bne.w	800c996 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
        frequency = HAL_RCC_GetSysClockFreq();
 800bfe6:	f7fd fdff 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
        break;
 800bfea:	e628      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800bfec:	2000      	movs	r0, #0
 800bfee:	e626      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800bff0:	f100 4370 	add.w	r3, r0, #4026531840	@ 0xf0000000
 800bff4:	430b      	orrs	r3, r1
 800bff6:	f000 85d6 	beq.w	800cba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1002>
 800bffa:	f100 4360 	add.w	r3, r0, #3758096384	@ 0xe0000000
 800bffe:	430b      	orrs	r3, r1
 800c000:	d120      	bne.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800c002:	4b52      	ldr	r3, [pc, #328]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c004:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800c008:	f413 3340 	ands.w	r3, r3, #196608	@ 0x30000
 800c00c:	f000 81f1 	beq.w	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800c010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c014:	f000 81f0 	beq.w	800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800c018:	4a4c      	ldr	r2, [pc, #304]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c01a:	6812      	ldr	r2, [r2, #0]
 800c01c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c020:	d003      	beq.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800c022:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c026:	f000 863f 	beq.w	800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800c02a:	4a48      	ldr	r2, [pc, #288]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c02c:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800c030:	f012 0f02 	tst.w	r2, #2
 800c034:	f000 8646 	beq.w	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
 800c038:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c03c:	f000 8645 	beq.w	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x1126>
      frequency = 0U;
 800c040:	2000      	movs	r0, #0
 800c042:	e5fc      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c044:	f100 4078 	add.w	r0, r0, #4160749568	@ 0xf8000000
 800c048:	4308      	orrs	r0, r1
 800c04a:	d115      	bne.n	800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800c04c:	4a3f      	ldr	r2, [pc, #252]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c04e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800c052:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800c056:	6812      	ldr	r2, [r2, #0]
 800c058:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800c05c:	d002      	beq.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f000 8687 	beq.w	800cd72 <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800c064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c068:	f000 8489 	beq.w	800c97e <HAL_RCCEx_GetPeriphCLKFreq+0xdda>
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800c06c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c070:	f000 848b 	beq.w	800c98a <HAL_RCCEx_GetPeriphCLKFreq+0xde6>
      frequency = 0U;
 800c074:	2000      	movs	r0, #0
 800c076:	e5e2      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800c078:	2000      	movs	r0, #0
 800c07a:	e5e0      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c07c:	2900      	cmp	r1, #0
 800c07e:	bf08      	it	eq
 800c080:	f1b0 4f00 	cmpeq.w	r0, #2147483648	@ 0x80000000
 800c084:	d11f      	bne.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800c086:	4b31      	ldr	r3, [pc, #196]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c088:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800c08c:	f013 6340 	ands.w	r3, r3, #201326592	@ 0xc000000
 800c090:	f000 83bb 	beq.w	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800c094:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c098:	f000 83bb 	beq.w	800c812 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800c09c:	4a2b      	ldr	r2, [pc, #172]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c09e:	6812      	ldr	r2, [r2, #0]
 800c0a0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c0a4:	d003      	beq.n	800c0ae <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800c0a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c0aa:	f000 8635 	beq.w	800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x1174>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800c0ae:	4a27      	ldr	r2, [pc, #156]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c0b0:	6810      	ldr	r0, [r2, #0]
 800c0b2:	f010 0020 	ands.w	r0, r0, #32
 800c0b6:	f43f adc2 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c0ba:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c0be:	f000 83ac 	beq.w	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
      frequency = 0U;
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	e5bb      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	e5b9      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c0ca:	4a20      	ldr	r2, [pc, #128]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c0cc:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800c0d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c0d4:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800c0d8:	f012 0f02 	tst.w	r2, #2
 800c0dc:	d003      	beq.n	800c0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 800c0de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0e2:	f000 8590 	beq.w	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c0e6:	4a19      	ldr	r2, [pc, #100]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c0e8:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800c0ec:	f012 6f00 	tst.w	r2, #134217728	@ 0x8000000
 800c0f0:	d002      	beq.n	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800c0f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0f6:	d00b      	beq.n	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800c0f8:	4a14      	ldr	r2, [pc, #80]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c0fa:	6812      	ldr	r2, [r2, #0]
 800c0fc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800c100:	f000 8589 	beq.w	800cc16 <HAL_RCCEx_GetPeriphCLKFreq+0x1072>
 800c104:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c108:	f000 8588 	beq.w	800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0x1078>
      frequency = 0U;
 800c10c:	2000      	movs	r0, #0
 800c10e:	e596      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c110:	4b0e      	ldr	r3, [pc, #56]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c112:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c116:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800c11a:	f000 8578 	beq.w	800cc0e <HAL_RCCEx_GetPeriphCLKFreq+0x106a>
        frequency = LSI_VALUE / 128U;
 800c11e:	20fa      	movs	r0, #250	@ 0xfa
 800c120:	e58d      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c122:	4b0a      	ldr	r3, [pc, #40]	@ (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c124:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c128:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
    switch (srcclk)
 800c12c:	2b40      	cmp	r3, #64	@ 0x40
 800c12e:	d020      	beq.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x5ce>
 800c130:	d810      	bhi.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 800c132:	b31b      	cbz	r3, 800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 800c134:	2b20      	cmp	r3, #32
 800c136:	d104      	bne.n	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c138:	a801      	add	r0, sp, #4
 800c13a:	f7ff fc25 	bl	800b988 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c13e:	9801      	ldr	r0, [sp, #4]
        break;
 800c140:	e57d      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = 0U;
 800c142:	2000      	movs	r0, #0
 800c144:	e57b      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c146:	bf00      	nop
 800c148:	00400001 	.word	0x00400001
 800c14c:	46020c00 	.word	0x46020c00
 800c150:	00100001 	.word	0x00100001
    switch (srcclk)
 800c154:	2b60      	cmp	r3, #96	@ 0x60
 800c156:	f000 8564 	beq.w	800cc22 <HAL_RCCEx_GetPeriphCLKFreq+0x107e>
 800c15a:	2b80      	cmp	r3, #128	@ 0x80
 800c15c:	d107      	bne.n	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c15e:	4ba8      	ldr	r3, [pc, #672]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c160:	6818      	ldr	r0, [r3, #0]
 800c162:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 800c166:	f43f ad6a 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = HSI_VALUE;
 800c16a:	48a6      	ldr	r0, [pc, #664]	@ (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 800c16c:	e567      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = 0U;
 800c16e:	2000      	movs	r0, #0
 800c170:	e565      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c172:	a807      	add	r0, sp, #28
 800c174:	f7ff f9ec 	bl	800b550 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c178:	9807      	ldr	r0, [sp, #28]
        break;
 800c17a:	e560      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c17c:	a804      	add	r0, sp, #16
 800c17e:	f7ff faf5 	bl	800b76c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c182:	9804      	ldr	r0, [sp, #16]
        break;
 800c184:	e55b      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = 0U;
 800c186:	2000      	movs	r0, #0
 800c188:	e559      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800c18a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c18e:	f000 854c 	beq.w	800cc2a <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800c192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c196:	d107      	bne.n	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c198:	4b99      	ldr	r3, [pc, #612]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c19a:	6818      	ldr	r0, [r3, #0]
 800c19c:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 800c1a0:	f43f ad4d 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = HSI_VALUE;
 800c1a4:	4897      	ldr	r0, [pc, #604]	@ (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 800c1a6:	e54a      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = 0U;
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	e548      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1ac:	a807      	add	r0, sp, #28
 800c1ae:	f7ff f9cf 	bl	800b550 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c1b2:	9807      	ldr	r0, [sp, #28]
        break;
 800c1b4:	e543      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1b6:	a804      	add	r0, sp, #16
 800c1b8:	f7ff fad8 	bl	800b76c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c1bc:	9804      	ldr	r0, [sp, #16]
        break;
 800c1be:	e53e      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c1c0:	4b8f      	ldr	r3, [pc, #572]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c1c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c1c6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
    switch (srcclk)
 800c1ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1ce:	d022      	beq.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 800c1d0:	d80a      	bhi.n	800c1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c1d2:	b32b      	cbz	r3, 800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c1d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c1d8:	d104      	bne.n	800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1da:	a804      	add	r0, sp, #16
 800c1dc:	f7ff fac6 	bl	800b76c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c1e0:	9805      	ldr	r0, [sp, #20]
        break;
 800c1e2:	e52c      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	e52a      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c1e8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c1ec:	d111      	bne.n	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c1ee:	4b84      	ldr	r3, [pc, #528]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c1f0:	6818      	ldr	r0, [r3, #0]
 800c1f2:	f010 0020 	ands.w	r0, r0, #32
 800c1f6:	f43f ad22 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c200:	d016      	beq.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c202:	4b7f      	ldr	r3, [pc, #508]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800c20a:	4a7f      	ldr	r2, [pc, #508]	@ (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800c20c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c210:	e515      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800c212:	2000      	movs	r0, #0
 800c214:	e513      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c216:	a807      	add	r0, sp, #28
 800c218:	f7ff f99a 	bl	800b550 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c21c:	9808      	ldr	r0, [sp, #32]
        break;
 800c21e:	e50e      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c220:	4b77      	ldr	r3, [pc, #476]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c222:	6818      	ldr	r0, [r3, #0]
 800c224:	f410 5000 	ands.w	r0, r0, #8192	@ 0x2000
 800c228:	f43f ad09 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = HSI48_VALUE;
 800c22c:	4877      	ldr	r0, [pc, #476]	@ (800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 800c22e:	e506      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c230:	4b73      	ldr	r3, [pc, #460]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c232:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c236:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c23a:	e7e6      	b.n	800c20a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
      switch (srcclk)
 800c23c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c240:	f47f acfd 	bne.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c244:	4b6e      	ldr	r3, [pc, #440]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c246:	6818      	ldr	r0, [r3, #0]
 800c248:	f010 0020 	ands.w	r0, r0, #32
 800c24c:	f43f acf7 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c256:	d014      	beq.n	800c282 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800c258:	4b69      	ldr	r3, [pc, #420]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800c260:	4a69      	ldr	r2, [pc, #420]	@ (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800c262:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c266:	e4ea      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c268:	a807      	add	r0, sp, #28
 800c26a:	f7ff f971 	bl	800b550 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c26e:	9808      	ldr	r0, [sp, #32]
          break;
 800c270:	e4e5      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c272:	4b63      	ldr	r3, [pc, #396]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c274:	6818      	ldr	r0, [r3, #0]
 800c276:	f410 5000 	ands.w	r0, r0, #8192	@ 0x2000
 800c27a:	f43f ace0 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            frequency = HSI48_VALUE;
 800c27e:	4863      	ldr	r0, [pc, #396]	@ (800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 800c280:	e4dd      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c282:	4b5f      	ldr	r3, [pc, #380]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c288:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c28c:	e7e8      	b.n	800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c28e:	a807      	add	r0, sp, #28
 800c290:	f7ff f95e 	bl	800b550 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c294:	9807      	ldr	r0, [sp, #28]
 800c296:	e4d2      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c298:	4b59      	ldr	r3, [pc, #356]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c29a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c29e:	f013 0303 	ands.w	r3, r3, #3
 800c2a2:	d015      	beq.n	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d016      	beq.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800c2a8:	4a55      	ldr	r2, [pc, #340]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c2aa:	6812      	ldr	r2, [r2, #0]
 800c2ac:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c2b0:	d002      	beq.n	800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	f000 84c6 	beq.w	800cc44 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800c2b8:	4a51      	ldr	r2, [pc, #324]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c2ba:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800c2be:	f012 0f02 	tst.w	r2, #2
 800c2c2:	f000 84c2 	beq.w	800cc4a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800c2c6:	2b03      	cmp	r3, #3
 800c2c8:	f000 84c2 	beq.w	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
      frequency = 0U;
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	e4b6      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetPCLK2Freq();
 800c2d0:	f7fe fc42 	bl	800ab58 <HAL_RCC_GetPCLK2Freq>
 800c2d4:	e4b3      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetSysClockFreq();
 800c2d6:	f7fd fc87 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800c2da:	e4b0      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c2dc:	4b48      	ldr	r3, [pc, #288]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c2de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800c2e2:	f013 030c 	ands.w	r3, r3, #12
 800c2e6:	d015      	beq.n	800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800c2e8:	2b04      	cmp	r3, #4
 800c2ea:	d016      	beq.n	800c31a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800c2ec:	4a44      	ldr	r2, [pc, #272]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c2ee:	6812      	ldr	r2, [r2, #0]
 800c2f0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c2f4:	d002      	beq.n	800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 800c2f6:	2b08      	cmp	r3, #8
 800c2f8:	f000 84ae 	beq.w	800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800c2fc:	4a40      	ldr	r2, [pc, #256]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c2fe:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800c302:	f012 0f02 	tst.w	r2, #2
 800c306:	f000 84aa 	beq.w	800cc5e <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 800c30a:	2b0c      	cmp	r3, #12
 800c30c:	f000 84aa 	beq.w	800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      frequency = 0U;
 800c310:	2000      	movs	r0, #0
 800c312:	e494      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetPCLK1Freq();
 800c314:	f7fe fc10 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>
 800c318:	e491      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetSysClockFreq();
 800c31a:	f7fd fc65 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800c31e:	e48e      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c320:	4b37      	ldr	r3, [pc, #220]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800c326:	f013 0330 	ands.w	r3, r3, #48	@ 0x30
 800c32a:	d015      	beq.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800c32c:	2b10      	cmp	r3, #16
 800c32e:	d016      	beq.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800c330:	4a33      	ldr	r2, [pc, #204]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c332:	6812      	ldr	r2, [r2, #0]
 800c334:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c338:	d002      	beq.n	800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
 800c33a:	2b20      	cmp	r3, #32
 800c33c:	f000 8496 	beq.w	800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800c340:	4a2f      	ldr	r2, [pc, #188]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c342:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800c346:	f012 0f02 	tst.w	r2, #2
 800c34a:	f000 8492 	beq.w	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
 800c34e:	2b30      	cmp	r3, #48	@ 0x30
 800c350:	f000 8492 	beq.w	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
      frequency = 0U;
 800c354:	2000      	movs	r0, #0
 800c356:	e472      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetPCLK1Freq();
 800c358:	f7fe fbee 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>
 800c35c:	e46f      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetSysClockFreq();
 800c35e:	f7fd fc43 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800c362:	e46c      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c364:	4b26      	ldr	r3, [pc, #152]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800c36a:	f013 03c0 	ands.w	r3, r3, #192	@ 0xc0
 800c36e:	d015      	beq.n	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800c370:	2b40      	cmp	r3, #64	@ 0x40
 800c372:	d016      	beq.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800c374:	4a22      	ldr	r2, [pc, #136]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c376:	6812      	ldr	r2, [r2, #0]
 800c378:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c37c:	d002      	beq.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 800c37e:	2b80      	cmp	r3, #128	@ 0x80
 800c380:	f000 847e 	beq.w	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x10dc>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800c384:	4a1e      	ldr	r2, [pc, #120]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c386:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800c38a:	f012 0f02 	tst.w	r2, #2
 800c38e:	f000 847a 	beq.w	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0x10e2>
 800c392:	2bc0      	cmp	r3, #192	@ 0xc0
 800c394:	f000 847a 	beq.w	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x10e8>
      frequency = 0U;
 800c398:	2000      	movs	r0, #0
 800c39a:	e450      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetPCLK1Freq();
 800c39c:	f7fe fbcc 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>
 800c3a0:	e44d      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetSysClockFreq();
 800c3a2:	f7fd fc21 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800c3a6:	e44a      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c3a8:	4b15      	ldr	r3, [pc, #84]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c3aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800c3ae:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800c3b2:	d018      	beq.n	800c3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800c3b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3b8:	d018      	beq.n	800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800c3ba:	4a11      	ldr	r2, [pc, #68]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c3bc:	6812      	ldr	r2, [r2, #0]
 800c3be:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c3c2:	d003      	beq.n	800c3cc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800c3c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3c8:	f000 8464 	beq.w	800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800c3cc:	4a0c      	ldr	r2, [pc, #48]	@ (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800c3ce:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800c3d2:	f012 0f02 	tst.w	r2, #2
 800c3d6:	f000 8460 	beq.w	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
 800c3da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c3de:	f000 845f 	beq.w	800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
      frequency = 0U;
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	e42b      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetPCLK1Freq();
 800c3e6:	f7fe fba7 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>
 800c3ea:	e428      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetSysClockFreq();
 800c3ec:	f7fd fbfc 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800c3f0:	e425      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetPCLK1Freq();
 800c3f2:	f7fe fba1 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>
 800c3f6:	e422      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetSysClockFreq();
 800c3f8:	f7fd fbf6 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800c3fc:	e41f      	b.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c3fe:	bf00      	nop
 800c400:	46020c00 	.word	0x46020c00
 800c404:	00f42400 	.word	0x00f42400
 800c408:	080176e0 	.word	0x080176e0
 800c40c:	02dc6c00 	.word	0x02dc6c00
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c410:	4bae      	ldr	r3, [pc, #696]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800c416:	f013 0307 	ands.w	r3, r3, #7
 800c41a:	d01d      	beq.n	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d01f      	beq.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800c420:	4aaa      	ldr	r2, [pc, #680]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c422:	6812      	ldr	r2, [r2, #0]
 800c424:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c428:	d002      	beq.n	800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	f000 8451 	beq.w	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0x112e>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800c430:	4aa6      	ldr	r2, [pc, #664]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c432:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800c436:	f012 0f02 	tst.w	r2, #2
 800c43a:	d002      	beq.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800c43c:	2b03      	cmp	r3, #3
 800c43e:	f000 844b 	beq.w	800ccd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1134>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800c442:	4aa2      	ldr	r2, [pc, #648]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c444:	6810      	ldr	r0, [r2, #0]
 800c446:	f010 0020 	ands.w	r0, r0, #32
 800c44a:	f43f abf8 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c44e:	2b04      	cmp	r3, #4
 800c450:	d00a      	beq.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
      frequency = 0U;
 800c452:	2000      	movs	r0, #0
 800c454:	f7ff bbf3 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetPCLK3Freq();
 800c458:	f7fe fb8e 	bl	800ab78 <HAL_RCC_GetPCLK3Freq>
 800c45c:	f7ff bbef 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetSysClockFreq();
 800c460:	f7fd fbc2 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800c464:	f7ff bbeb 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c468:	6893      	ldr	r3, [r2, #8]
 800c46a:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c46e:	d007      	beq.n	800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
 800c470:	6893      	ldr	r3, [r2, #8]
 800c472:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800c476:	4a96      	ldr	r2, [pc, #600]	@ (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800c478:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c47c:	f7ff bbdf 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c480:	4b92      	ldr	r3, [pc, #584]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c486:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c48a:	e7f4      	b.n	800c476 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800c48c:	4b8f      	ldr	r3, [pc, #572]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c48e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c492:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800c496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c49a:	d01c      	beq.n	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800c49c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4a0:	d01d      	beq.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800c4a2:	b313      	cbz	r3, 800c4ea <HAL_RCCEx_GetPeriphCLKFreq+0x946>
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800c4a4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c4a8:	d023      	beq.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800c4aa:	4a88      	ldr	r2, [pc, #544]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c4ac:	6812      	ldr	r2, [r2, #0]
 800c4ae:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800c4b2:	d003      	beq.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800c4b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c4b8:	f000 8412 	beq.w	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800c4bc:	4a83      	ldr	r2, [pc, #524]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c4be:	6812      	ldr	r2, [r2, #0]
 800c4c0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c4c4:	f000 840f 	beq.w	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1142>
 800c4c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c4cc:	f000 840e 	beq.w	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0x1148>
      frequency = 0U;
 800c4d0:	2000      	movs	r0, #0
 800c4d2:	f7ff bbb4 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetSysClockFreq();
 800c4d6:	f7fd fb87 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800c4da:	f7ff bbb0 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4de:	a804      	add	r0, sp, #16
 800c4e0:	f7ff f944 	bl	800b76c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800c4e4:	9806      	ldr	r0, [sp, #24]
 800c4e6:	f7ff bbaa 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetHCLKFreq();
 800c4ea:	f7fd fdc1 	bl	800a070 <HAL_RCC_GetHCLKFreq>
 800c4ee:	f7ff bba6 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c4f2:	4b76      	ldr	r3, [pc, #472]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c4f4:	6818      	ldr	r0, [r3, #0]
 800c4f6:	f010 0020 	ands.w	r0, r0, #32
 800c4fa:	f43f aba0 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c504:	d008      	beq.n	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 800c506:	4b71      	ldr	r3, [pc, #452]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800c50e:	4a70      	ldr	r2, [pc, #448]	@ (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800c510:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c514:	f7ff bb93 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c518:	4b6c      	ldr	r3, [pc, #432]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c51a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c51e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c522:	e7f4      	b.n	800c50e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
    switch (srcclk)
 800c524:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 800c528:	f7ff bb89 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c52c:	a807      	add	r0, sp, #28
 800c52e:	f7ff f80f 	bl	800b550 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c532:	9807      	ldr	r0, [sp, #28]
        break;
 800c534:	f7ff bb83 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c538:	a801      	add	r0, sp, #4
 800c53a:	f7ff fa25 	bl	800b988 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c53e:	9802      	ldr	r0, [sp, #8]
        break;
 800c540:	f7ff bb7d 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = HAL_RCC_GetHCLKFreq();
 800c544:	f7fd fd94 	bl	800a070 <HAL_RCC_GetHCLKFreq>
        break;
 800c548:	f7ff bb79 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c54c:	4b5f      	ldr	r3, [pc, #380]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c54e:	6818      	ldr	r0, [r3, #0]
 800c550:	f010 0020 	ands.w	r0, r0, #32
 800c554:	f43f ab73 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c55e:	d008      	beq.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800c560:	4b5a      	ldr	r3, [pc, #360]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800c568:	4a59      	ldr	r2, [pc, #356]	@ (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800c56a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c56e:	f7ff bb66 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c572:	4b56      	ldr	r3, [pc, #344]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c574:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c578:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c57c:	e7f4      	b.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800c57e:	4b53      	ldr	r3, [pc, #332]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c584:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 800c588:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c58c:	d02a      	beq.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
 800c58e:	d80c      	bhi.n	800c5aa <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
 800c590:	b373      	cbz	r3, 800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800c592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c596:	d105      	bne.n	800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c598:	a807      	add	r0, sp, #28
 800c59a:	f7fe ffd9 	bl	800b550 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c59e:	9807      	ldr	r0, [sp, #28]
        break;
 800c5a0:	f7ff bb4d 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = 0U;
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	f7ff bb4a 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800c5aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c5ae:	f000 83a3 	beq.w	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
 800c5b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c5b6:	d112      	bne.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c5b8:	4b44      	ldr	r3, [pc, #272]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c5ba:	6818      	ldr	r0, [r3, #0]
 800c5bc:	f010 0020 	ands.w	r0, r0, #32
 800c5c0:	f43f ab3d 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c5ca:	d015      	beq.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800c5cc:	4b3f      	ldr	r3, [pc, #252]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800c5d4:	4a3e      	ldr	r2, [pc, #248]	@ (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800c5d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c5da:	f7ff bb30 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = 0U;
 800c5de:	2000      	movs	r0, #0
 800c5e0:	f7ff bb2d 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5e4:	a801      	add	r0, sp, #4
 800c5e6:	f7ff f9cf 	bl	800b988 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c5ea:	9802      	ldr	r0, [sp, #8]
        break;
 800c5ec:	f7ff bb27 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = HAL_RCC_GetHCLKFreq();
 800c5f0:	f7fd fd3e 	bl	800a070 <HAL_RCC_GetHCLKFreq>
        break;
 800c5f4:	f7ff bb23 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c5f8:	4b34      	ldr	r3, [pc, #208]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c5fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c5fe:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c602:	e7e7      	b.n	800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c604:	4b31      	ldr	r3, [pc, #196]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800c60a:	f413 6340 	ands.w	r3, r3, #3072	@ 0xc00
 800c60e:	d017      	beq.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800c610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c614:	d018      	beq.n	800c648 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800c616:	4a2d      	ldr	r2, [pc, #180]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c618:	6812      	ldr	r2, [r2, #0]
 800c61a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c61e:	d003      	beq.n	800c628 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800c620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c624:	f000 836c 	beq.w	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x115c>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800c628:	4a28      	ldr	r2, [pc, #160]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c62a:	6810      	ldr	r0, [r2, #0]
 800c62c:	f010 0020 	ands.w	r0, r0, #32
 800c630:	f43f ab05 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c634:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c638:	d00a      	beq.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
      frequency = 0U;
 800c63a:	2000      	movs	r0, #0
 800c63c:	f7ff baff 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetPCLK1Freq();
 800c640:	f7fe fa7a 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>
 800c644:	f7ff bafb 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetSysClockFreq();
 800c648:	f7fd face 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800c64c:	f7ff baf7 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c650:	6893      	ldr	r3, [r2, #8]
 800c652:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c656:	d007      	beq.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 800c658:	6893      	ldr	r3, [r2, #8]
 800c65a:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800c65e:	4a1c      	ldr	r2, [pc, #112]	@ (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800c660:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c664:	f7ff baeb 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c668:	4b18      	ldr	r3, [pc, #96]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c66a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c66e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c672:	e7f4      	b.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      frequency = HAL_RCC_GetPCLK1Freq();
 800c674:	f7fe fa60 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>
 800c678:	f7ff bae1 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetSysClockFreq();
 800c67c:	f7fd fab4 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800c680:	f7ff badd 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c684:	6893      	ldr	r3, [r2, #8]
 800c686:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c68a:	d007      	beq.n	800c69c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800c68c:	6893      	ldr	r3, [r2, #8]
 800c68e:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800c692:	4a0f      	ldr	r2, [pc, #60]	@ (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800c694:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c698:	f7ff bad1 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c69c:	4b0b      	ldr	r3, [pc, #44]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c69e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c6a2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c6a6:	e7f4      	b.n	800c692 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800c6a8:	4b08      	ldr	r3, [pc, #32]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800c6aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c6ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
    switch (srcclk)
 800c6b2:	2b80      	cmp	r3, #128	@ 0x80
 800c6b4:	d02a      	beq.n	800c70c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800c6b6:	d80d      	bhi.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800c6b8:	b323      	cbz	r3, 800c704 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800c6ba:	2b40      	cmp	r3, #64	@ 0x40
 800c6bc:	d103      	bne.n	800c6c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
        frequency = HAL_RCC_GetSysClockFreq();
 800c6be:	f7fd fa93 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
        break;
 800c6c2:	f7ff babc 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	f7ff bab9 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c6cc:	46020c00 	.word	0x46020c00
 800c6d0:	080176e0 	.word	0x080176e0
 800c6d4:	2bc0      	cmp	r3, #192	@ 0xc0
 800c6d6:	d112      	bne.n	800c6fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c6d8:	4bb0      	ldr	r3, [pc, #704]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c6da:	6818      	ldr	r0, [r3, #0]
 800c6dc:	f010 0020 	ands.w	r0, r0, #32
 800c6e0:	f43f aaad 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c6e4:	689b      	ldr	r3, [r3, #8]
 800c6e6:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c6ea:	d018      	beq.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
 800c6ec:	4bab      	ldr	r3, [pc, #684]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800c6f4:	4aaa      	ldr	r2, [pc, #680]	@ (800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>)
 800c6f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c6fa:	f7ff baa0 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800c6fe:	2000      	movs	r0, #0
 800c700:	f7ff ba9d 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = HAL_RCC_GetPCLK3Freq();
 800c704:	f7fe fa38 	bl	800ab78 <HAL_RCC_GetPCLK3Freq>
        break;
 800c708:	f7ff ba99 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c70c:	4ba3      	ldr	r3, [pc, #652]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c70e:	6818      	ldr	r0, [r3, #0]
 800c710:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 800c714:	f43f aa93 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = HSI_VALUE;
 800c718:	48a2      	ldr	r0, [pc, #648]	@ (800c9a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c71a:	f7ff ba90 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c71e:	4b9f      	ldr	r3, [pc, #636]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c724:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c728:	e7e4      	b.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800c72a:	4b9c      	ldr	r3, [pc, #624]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c72c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800c730:	f413 4340 	ands.w	r3, r3, #49152	@ 0xc000
 800c734:	d017      	beq.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800c736:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c73a:	d018      	beq.n	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800c73c:	4a97      	ldr	r2, [pc, #604]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c73e:	6812      	ldr	r2, [r2, #0]
 800c740:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c744:	d003      	beq.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800c746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c74a:	f000 82df 	beq.w	800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800c74e:	4a93      	ldr	r2, [pc, #588]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c750:	6810      	ldr	r0, [r2, #0]
 800c752:	f010 0020 	ands.w	r0, r0, #32
 800c756:	f43f aa72 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c75a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c75e:	d00a      	beq.n	800c776 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
      frequency = 0U;
 800c760:	2000      	movs	r0, #0
 800c762:	f7ff ba6c 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetPCLK1Freq();
 800c766:	f7fe f9e7 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>
 800c76a:	f7ff ba68 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetSysClockFreq();
 800c76e:	f7fd fa3b 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800c772:	f7ff ba64 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c776:	6893      	ldr	r3, [r2, #8]
 800c778:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c77c:	d007      	beq.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800c77e:	6893      	ldr	r3, [r2, #8]
 800c780:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800c784:	4a86      	ldr	r2, [pc, #536]	@ (800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>)
 800c786:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c78a:	f7ff ba58 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c78e:	4b83      	ldr	r3, [pc, #524]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c790:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c794:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c798:	e7f4      	b.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800c79a:	4b80      	ldr	r3, [pc, #512]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c79c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800c7a0:	f013 7340 	ands.w	r3, r3, #50331648	@ 0x3000000
 800c7a4:	d017      	beq.n	800c7d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc32>
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800c7a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c7aa:	d018      	beq.n	800c7de <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800c7ac:	4a7b      	ldr	r2, [pc, #492]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c7ae:	6812      	ldr	r2, [r2, #0]
 800c7b0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c7b4:	d003      	beq.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
 800c7b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c7ba:	f000 82aa 	beq.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0x116e>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800c7be:	4a77      	ldr	r2, [pc, #476]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c7c0:	6810      	ldr	r0, [r2, #0]
 800c7c2:	f010 0020 	ands.w	r0, r0, #32
 800c7c6:	f43f aa3a 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c7ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c7ce:	d00a      	beq.n	800c7e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
      frequency = 0U;
 800c7d0:	2000      	movs	r0, #0
 800c7d2:	f7ff ba34 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetPCLK1Freq();
 800c7d6:	f7fe f9af 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>
 800c7da:	f7ff ba30 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetSysClockFreq();
 800c7de:	f7fd fa03 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800c7e2:	f7ff ba2c 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c7e6:	6893      	ldr	r3, [r2, #8]
 800c7e8:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c7ec:	d007      	beq.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 800c7ee:	6893      	ldr	r3, [r2, #8]
 800c7f0:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800c7f4:	4a6a      	ldr	r2, [pc, #424]	@ (800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>)
 800c7f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c7fa:	f7ff ba20 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c7fe:	4b67      	ldr	r3, [pc, #412]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c800:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c804:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c808:	e7f4      	b.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc50>
      frequency = HAL_RCC_GetPCLK1Freq();
 800c80a:	f7fe f995 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>
 800c80e:	f7ff ba16 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetSysClockFreq();
 800c812:	f7fd f9e9 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800c816:	f7ff ba12 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c81a:	6893      	ldr	r3, [r2, #8]
 800c81c:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c820:	d007      	beq.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 800c822:	6893      	ldr	r3, [r2, #8]
 800c824:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800c828:	4a5d      	ldr	r2, [pc, #372]	@ (800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>)
 800c82a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c82e:	f7ff ba06 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c832:	4b5a      	ldr	r3, [pc, #360]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c838:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c83c:	e7f4      	b.n	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800c83e:	4b57      	ldr	r3, [pc, #348]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c840:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800c844:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800c848:	d118      	bne.n	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c84a:	4b54      	ldr	r3, [pc, #336]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c84c:	6818      	ldr	r0, [r3, #0]
 800c84e:	f010 0020 	ands.w	r0, r0, #32
 800c852:	f43f a9f4 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c85c:	d008      	beq.n	800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 800c85e:	4b4f      	ldr	r3, [pc, #316]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800c866:	4a4e      	ldr	r2, [pc, #312]	@ (800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>)
 800c868:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c86c:	f7ff b9e7 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c870:	4b4a      	ldr	r3, [pc, #296]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c872:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c876:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c87a:	e7f4      	b.n	800c866 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800c87c:	4a47      	ldr	r2, [pc, #284]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c87e:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800c882:	f012 6f00 	tst.w	r2, #134217728	@ 0x8000000
 800c886:	d002      	beq.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 800c888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c88c:	d016      	beq.n	800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800c88e:	4a43      	ldr	r2, [pc, #268]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c890:	6812      	ldr	r2, [r2, #0]
 800c892:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c896:	d003      	beq.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 800c898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c89c:	f000 8243 	beq.w	800cd26 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800c8a0:	4a3e      	ldr	r2, [pc, #248]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c8a2:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800c8a6:	f012 0f02 	tst.w	r2, #2
 800c8aa:	f000 823f 	beq.w	800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800c8ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c8b2:	f000 823e 	beq.w	800cd32 <HAL_RCCEx_GetPeriphCLKFreq+0x118e>
      frequency = 0U;
 800c8b6:	2000      	movs	r0, #0
 800c8b8:	f7ff b9c1 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c8bc:	4b37      	ldr	r3, [pc, #220]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c8be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c8c2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800c8c6:	f000 822a 	beq.w	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        frequency = LSI_VALUE / 128U;
 800c8ca:	20fa      	movs	r0, #250	@ 0xfa
 800c8cc:	f7ff b9b7 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c8d0:	4b32      	ldr	r3, [pc, #200]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c8d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800c8d6:	f413 6340 	ands.w	r3, r3, #3072	@ 0xc00
 800c8da:	d118      	bne.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c8dc:	4b2f      	ldr	r3, [pc, #188]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c8de:	6818      	ldr	r0, [r3, #0]
 800c8e0:	f010 0020 	ands.w	r0, r0, #32
 800c8e4:	f43f a9ab 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c8ee:	d008      	beq.n	800c902 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 800c8f0:	4b2a      	ldr	r3, [pc, #168]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800c8f8:	4a29      	ldr	r2, [pc, #164]	@ (800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>)
 800c8fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c8fe:	f7ff b99e 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c902:	4b26      	ldr	r3, [pc, #152]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c904:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c908:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c90c:	e7f4      	b.n	800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800c90e:	4a23      	ldr	r2, [pc, #140]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c910:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800c914:	f012 6f00 	tst.w	r2, #134217728	@ 0x8000000
 800c918:	d002      	beq.n	800c920 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>
 800c91a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c91e:	d016      	beq.n	800c94e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800c920:	4a1e      	ldr	r2, [pc, #120]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c922:	6812      	ldr	r2, [r2, #0]
 800c924:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c928:	d003      	beq.n	800c932 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800c92a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c92e:	f000 8208 	beq.w	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x119e>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800c932:	4a1a      	ldr	r2, [pc, #104]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c934:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800c938:	f012 0f02 	tst.w	r2, #2
 800c93c:	f000 8204 	beq.w	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x11a4>
 800c940:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c944:	f000 8203 	beq.w	800cd4e <HAL_RCCEx_GetPeriphCLKFreq+0x11aa>
      frequency = 0U;
 800c948:	2000      	movs	r0, #0
 800c94a:	f7ff b978 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c94e:	4b13      	ldr	r3, [pc, #76]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c950:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c954:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800c958:	f000 81ef 	beq.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0x1196>
        frequency = LSI_VALUE / 128U;
 800c95c:	20fa      	movs	r0, #250	@ 0xfa
 800c95e:	f7ff b96e 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HAL_RCC_GetPCLK1Freq();
 800c962:	f7fe f8e9 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>
 800c966:	f7ff b96a 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c96a:	4b0c      	ldr	r3, [pc, #48]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>)
 800c96c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c970:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800c974:	f000 81ef 	beq.w	800cd56 <HAL_RCCEx_GetPeriphCLKFreq+0x11b2>
        frequency = LSI_VALUE / 128U;
 800c978:	20fa      	movs	r0, #250	@ 0xfa
 800c97a:	f7ff b960 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c97e:	a807      	add	r0, sp, #28
 800c980:	f7fe fde6 	bl	800b550 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800c984:	9808      	ldr	r0, [sp, #32]
 800c986:	f7ff b95a 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c98a:	a804      	add	r0, sp, #16
 800c98c:	f7fe feee 	bl	800b76c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800c990:	9804      	ldr	r0, [sp, #16]
 800c992:	f7ff b954 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800c996:	2000      	movs	r0, #0
 800c998:	f7ff b951 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c99c:	46020c00 	.word	0x46020c00
 800c9a0:	080176e0 	.word	0x080176e0
 800c9a4:	00f42400 	.word	0x00f42400
 800c9a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c9ac:	d112      	bne.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c9ae:	4bc0      	ldr	r3, [pc, #768]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800c9b0:	6818      	ldr	r0, [r3, #0]
 800c9b2:	f010 0020 	ands.w	r0, r0, #32
 800c9b6:	f43f a942 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c9c0:	d018      	beq.n	800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
 800c9c2:	4bbb      	ldr	r3, [pc, #748]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800c9ca:	4aba      	ldr	r2, [pc, #744]	@ (800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>)
 800c9cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c9d0:	f7ff b935 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800c9d4:	2000      	movs	r0, #0
 800c9d6:	f7ff b932 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = HAL_RCC_GetPCLK2Freq();
 800c9da:	f7fe f8bd 	bl	800ab58 <HAL_RCC_GetPCLK2Freq>
        break;
 800c9de:	f7ff b92e 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c9e2:	4bb3      	ldr	r3, [pc, #716]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800c9e4:	6818      	ldr	r0, [r3, #0]
 800c9e6:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 800c9ea:	f43f a928 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = HSI_VALUE;
 800c9ee:	48b2      	ldr	r0, [pc, #712]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>)
 800c9f0:	f7ff b925 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c9f4:	4bae      	ldr	r3, [pc, #696]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800c9f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c9fa:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c9fe:	e7e4      	b.n	800c9ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800ca00:	4bab      	ldr	r3, [pc, #684]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800ca02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 800ca0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca0e:	d028      	beq.n	800ca62 <HAL_RCCEx_GetPeriphCLKFreq+0xebe>
 800ca10:	d80a      	bhi.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
 800ca12:	b313      	cbz	r3, 800ca5a <HAL_RCCEx_GetPeriphCLKFreq+0xeb6>
 800ca14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca18:	d103      	bne.n	800ca22 <HAL_RCCEx_GetPeriphCLKFreq+0xe7e>
        frequency = HAL_RCC_GetSysClockFreq();
 800ca1a:	f7fd f8e5 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
        break;
 800ca1e:	f7ff b90e 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800ca22:	2000      	movs	r0, #0
 800ca24:	f7ff b90b 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800ca28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ca2c:	d112      	bne.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0xeb0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ca2e:	4ba0      	ldr	r3, [pc, #640]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800ca30:	6818      	ldr	r0, [r3, #0]
 800ca32:	f010 0020 	ands.w	r0, r0, #32
 800ca36:	f43f a902 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800ca40:	d018      	beq.n	800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
 800ca42:	4b9b      	ldr	r3, [pc, #620]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800ca4a:	4a9a      	ldr	r2, [pc, #616]	@ (800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>)
 800ca4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ca50:	f7ff b8f5 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800ca54:	2000      	movs	r0, #0
 800ca56:	f7ff b8f2 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = HAL_RCC_GetPCLK1Freq();
 800ca5a:	f7fe f86d 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>
        break;
 800ca5e:	f7ff b8ee 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca62:	4b93      	ldr	r3, [pc, #588]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800ca64:	6818      	ldr	r0, [r3, #0]
 800ca66:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 800ca6a:	f43f a8e8 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = HSI_VALUE;
 800ca6e:	4892      	ldr	r0, [pc, #584]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>)
 800ca70:	f7ff b8e5 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ca74:	4b8e      	ldr	r3, [pc, #568]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800ca76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ca7a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800ca7e:	e7e4      	b.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0xea6>
        frequency = HAL_RCC_GetPCLK3Freq();
 800ca80:	f7fe f87a 	bl	800ab78 <HAL_RCC_GetPCLK3Freq>
        break;
 800ca84:	f7ff b8db 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = HAL_RCC_GetSysClockFreq();
 800ca88:	f7fd f8ae 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
        break;
 800ca8c:	f7ff b8d7 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca90:	4b87      	ldr	r3, [pc, #540]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800ca92:	6818      	ldr	r0, [r3, #0]
 800ca94:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 800ca98:	f43f a8d1 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = HSI_VALUE;
 800ca9c:	4886      	ldr	r0, [pc, #536]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>)
 800ca9e:	f7ff b8ce 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800caa2:	4b83      	ldr	r3, [pc, #524]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800caa4:	6818      	ldr	r0, [r3, #0]
 800caa6:	f010 0020 	ands.w	r0, r0, #32
 800caaa:	f43f a8c8 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800cab4:	d008      	beq.n	800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 800cab6:	4b7e      	ldr	r3, [pc, #504]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800cabe:	4a7d      	ldr	r2, [pc, #500]	@ (800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>)
 800cac0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cac4:	f7ff b8bb 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800cac8:	4b79      	ldr	r3, [pc, #484]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800caca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cace:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800cad2:	e7f4      	b.n	800cabe <HAL_RCCEx_GetPeriphCLKFreq+0xf1a>
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800cad4:	4b76      	ldr	r3, [pc, #472]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800cad6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cada:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    switch (srcclk)
 800cade:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cae2:	d024      	beq.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0xf8a>
 800cae4:	d819      	bhi.n	800cb1a <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
 800cae6:	b343      	cbz	r3, 800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0xf96>
 800cae8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800caec:	d112      	bne.n	800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800caee:	4b70      	ldr	r3, [pc, #448]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800caf0:	6818      	ldr	r0, [r3, #0]
 800caf2:	f010 0020 	ands.w	r0, r0, #32
 800caf6:	f43f a8a2 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cafa:	689b      	ldr	r3, [r3, #8]
 800cafc:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800cb00:	d01f      	beq.n	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0xf9e>
 800cb02:	4b6b      	ldr	r3, [pc, #428]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800cb04:	689b      	ldr	r3, [r3, #8]
 800cb06:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800cb0a:	4a6a      	ldr	r2, [pc, #424]	@ (800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>)
 800cb0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cb10:	f7ff b895 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800cb14:	2000      	movs	r0, #0
 800cb16:	f7ff b892 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800cb1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cb1e:	f040 812e 	bne.w	800cd7e <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb22:	a804      	add	r0, sp, #16
 800cb24:	f7fe fe22 	bl	800b76c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb28:	9805      	ldr	r0, [sp, #20]
        break;
 800cb2a:	f7ff b888 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb2e:	a807      	add	r0, sp, #28
 800cb30:	f7fe fd0e 	bl	800b550 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb34:	9808      	ldr	r0, [sp, #32]
        break;
 800cb36:	f7ff b882 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = HAL_RCC_GetSysClockFreq();
 800cb3a:	f7fd f855 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
        break;
 800cb3e:	f7ff b87e 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cb42:	4b5b      	ldr	r3, [pc, #364]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800cb44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cb48:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800cb4c:	e7dd      	b.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800cb4e:	4b58      	ldr	r3, [pc, #352]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800cb50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cb54:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
    switch (srcclk)
 800cb58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cb5c:	d01d      	beq.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0xff6>
 800cb5e:	d80c      	bhi.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
 800cb60:	b1bb      	cbz	r3, 800cb92 <HAL_RCCEx_GetPeriphCLKFreq+0xfee>
 800cb62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cb66:	d105      	bne.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb68:	a807      	add	r0, sp, #28
 800cb6a:	f7fe fcf1 	bl	800b550 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb6e:	9808      	ldr	r0, [sp, #32]
        break;
 800cb70:	f7ff b865 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800cb74:	2000      	movs	r0, #0
 800cb76:	f7ff b862 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800cb7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cb7e:	d105      	bne.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb80:	a801      	add	r0, sp, #4
 800cb82:	f7fe ff01 	bl	800b988 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800cb86:	9803      	ldr	r0, [sp, #12]
        break;
 800cb88:	f7ff b859 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	f7ff b856 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = HAL_RCC_GetSysClockFreq();
 800cb92:	f7fd f829 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
        break;
 800cb96:	f7ff b852 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb9a:	a804      	add	r0, sp, #16
 800cb9c:	f7fe fde6 	bl	800b76c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800cba0:	9805      	ldr	r0, [sp, #20]
        break;
 800cba2:	f7ff b84c 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800cba6:	4a42      	ldr	r2, [pc, #264]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800cba8:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 800cbac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800cbb0:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800cbb4:	f012 0f02 	tst.w	r2, #2
 800cbb8:	d002      	beq.n	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f000 80e2 	beq.w	800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800cbc0:	4a3b      	ldr	r2, [pc, #236]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>)
 800cbc2:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 800cbc6:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800cbca:	f43f a838 	beq.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f000 80dc 	beq.w	800cd8c <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cbd4:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800cbd8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800cbdc:	f000 80d9 	beq.w	800cd92 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
        frequency = LSI_VALUE / 128U;
 800cbe0:	20fa      	movs	r0, #250	@ 0xfa
 800cbe2:	f7ff b82c 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbe6:	a807      	add	r0, sp, #28
 800cbe8:	f7fe fcb2 	bl	800b550 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800cbec:	9807      	ldr	r0, [sp, #28]
 800cbee:	f7ff b826 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbf2:	a807      	add	r0, sp, #28
 800cbf4:	f7fe fcac 	bl	800b550 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800cbf8:	9807      	ldr	r0, [sp, #28]
 800cbfa:	0840      	lsrs	r0, r0, #1
 800cbfc:	f7ff b81f 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800cc00:	2000      	movs	r0, #0
 800cc02:	f7ff b81c 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = LSE_VALUE;
 800cc06:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cc0a:	f7ff b818 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = LSI_VALUE;
 800cc0e:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 800cc12:	f7ff b814 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800cc16:	2000      	movs	r0, #0
 800cc18:	f7ff b811 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSE_VALUE / 32U;
 800cc1c:	4827      	ldr	r0, [pc, #156]	@ (800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x1118>)
 800cc1e:	f7ff b80e 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800cc22:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 800cc26:	f7ff b80a 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800cc2a:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 800cc2e:	f7ff b806 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cc32:	4821      	ldr	r0, [pc, #132]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>)
 800cc34:	f7ff b803 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800cc38:	2000      	movs	r0, #0
 800cc3a:	f7ff b800 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE >> 1U;
 800cc3e:	4820      	ldr	r0, [pc, #128]	@ (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>)
 800cc40:	f7fe bffd 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cc44:	481c      	ldr	r0, [pc, #112]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>)
 800cc46:	f7fe bffa 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800cc4a:	2000      	movs	r0, #0
 800cc4c:	f7fe bff7 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = LSE_VALUE;
 800cc50:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cc54:	f7fe bff3 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cc58:	4817      	ldr	r0, [pc, #92]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>)
 800cc5a:	f7fe bff0 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800cc5e:	2000      	movs	r0, #0
 800cc60:	f7fe bfed 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = LSE_VALUE;
 800cc64:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cc68:	f7fe bfe9 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cc6c:	4812      	ldr	r0, [pc, #72]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>)
 800cc6e:	f7fe bfe6 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800cc72:	2000      	movs	r0, #0
 800cc74:	f7fe bfe3 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = LSE_VALUE;
 800cc78:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cc7c:	f7fe bfdf 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cc80:	480d      	ldr	r0, [pc, #52]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>)
 800cc82:	f7fe bfdc 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800cc86:	2000      	movs	r0, #0
 800cc88:	f7fe bfd9 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = LSE_VALUE;
 800cc8c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cc90:	f7fe bfd5 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cc94:	4808      	ldr	r0, [pc, #32]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>)
 800cc96:	f7fe bfd2 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800cc9a:	2000      	movs	r0, #0
 800cc9c:	f7fe bfcf 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = LSE_VALUE;
 800cca0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cca4:	f7fe bfcb 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cca8:	4803      	ldr	r0, [pc, #12]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>)
 800ccaa:	f7fe bfc8 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800ccae:	bf00      	nop
 800ccb0:	46020c00 	.word	0x46020c00
 800ccb4:	080176e0 	.word	0x080176e0
 800ccb8:	00f42400 	.word	0x00f42400
 800ccbc:	0007a120 	.word	0x0007a120
 800ccc0:	007a1200 	.word	0x007a1200
      frequency = 0U;
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	f7fe bfba 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = LSE_VALUE;
 800ccca:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800ccce:	f7fe bfb6 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800ccd2:	483b      	ldr	r0, [pc, #236]	@ (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800ccd4:	f7fe bfb3 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = LSE_VALUE;
 800ccd8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800ccdc:	f7fe bfaf 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSE_VALUE;
 800cce0:	4837      	ldr	r0, [pc, #220]	@ (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800cce2:	f7fe bfac 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800cce6:	2000      	movs	r0, #0
 800cce8:	f7fe bfa9 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800ccec:	4834      	ldr	r0, [pc, #208]	@ (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800ccee:	f7fe bfa6 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = 0U;
 800ccf2:	2000      	movs	r0, #0
 800ccf4:	f7fe bfa3 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800ccf8:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 800ccfc:	f7fe bf9f 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cd00:	482f      	ldr	r0, [pc, #188]	@ (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800cd02:	f7fe bf9c 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cd06:	482e      	ldr	r0, [pc, #184]	@ (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800cd08:	f7fe bf99 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cd0c:	482c      	ldr	r0, [pc, #176]	@ (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800cd0e:	f7fe bf96 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cd12:	482b      	ldr	r0, [pc, #172]	@ (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800cd14:	f7fe bf93 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cd18:	4829      	ldr	r0, [pc, #164]	@ (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800cd1a:	f7fe bf90 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = LSI_VALUE;
 800cd1e:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 800cd22:	f7fe bf8c 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cd26:	4826      	ldr	r0, [pc, #152]	@ (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800cd28:	f7fe bf89 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	f7fe bf86 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = LSE_VALUE;
 800cd32:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cd36:	f7fe bf82 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = LSI_VALUE;
 800cd3a:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 800cd3e:	f7fe bf7e 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cd42:	481f      	ldr	r0, [pc, #124]	@ (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800cd44:	f7fe bf7b 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800cd48:	2000      	movs	r0, #0
 800cd4a:	f7fe bf78 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = LSE_VALUE;
 800cd4e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cd52:	f7fe bf74 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = LSI_VALUE;
 800cd56:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 800cd5a:	f7fe bf70 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cd5e:	4818      	ldr	r0, [pc, #96]	@ (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800cd60:	f7fe bf6d 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800cd64:	2000      	movs	r0, #0
 800cd66:	f7fe bf6a 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = LSE_VALUE;
 800cd6a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cd6e:	f7fe bf66 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSE_VALUE;
 800cd72:	4813      	ldr	r0, [pc, #76]	@ (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800cd74:	f7fe bf63 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800cd78:	2000      	movs	r0, #0
 800cd7a:	f7fe bf60 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch (srcclk)
 800cd7e:	2000      	movs	r0, #0
 800cd80:	f7fe bf5d 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = LSE_VALUE;
 800cd84:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cd88:	f7fe bf59 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7fe bf56 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = LSI_VALUE;
 800cd92:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 800cd96:	f7fe bf52 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI48_VALUE;
 800cd9a:	480a      	ldr	r0, [pc, #40]	@ (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>)
 800cd9c:	f7fe bf4f 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI48_VALUE >> 1U ;
 800cda0:	4809      	ldr	r0, [pc, #36]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800cda2:	f7fe bf4c 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = 0U;
 800cda6:	2000      	movs	r0, #0
 800cda8:	f7fe bf49 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSI_VALUE;
 800cdac:	4804      	ldr	r0, [pc, #16]	@ (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800cdae:	f7fe bf46 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSE_VALUE;
 800cdb2:	4803      	ldr	r0, [pc, #12]	@ (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800cdb4:	f7fe bf43 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      frequency = HSE_VALUE >> 1U ;
 800cdb8:	4804      	ldr	r0, [pc, #16]	@ (800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 800cdba:	f7fe bf40 	b.w	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800cdbe:	bf00      	nop
 800cdc0:	00f42400 	.word	0x00f42400
 800cdc4:	02dc6c00 	.word	0x02dc6c00
 800cdc8:	016e3600 	.word	0x016e3600
 800cdcc:	007a1200 	.word	0x007a1200

0800cdd0 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800cdd0:	6803      	ldr	r3, [r0, #0]
 800cdd2:	695a      	ldr	r2, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cdd4:	6999      	ldr	r1, [r3, #24]
 800cdd6:	f041 0108 	orr.w	r1, r1, #8
 800cdda:	6199      	str	r1, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cddc:	6801      	ldr	r1, [r0, #0]
 800cdde:	698b      	ldr	r3, [r1, #24]
 800cde0:	f043 0310 	orr.w	r3, r3, #16
 800cde4:	618b      	str	r3, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cde6:	6801      	ldr	r1, [r0, #0]
 800cde8:	680b      	ldr	r3, [r1, #0]
 800cdea:	f023 0301 	bic.w	r3, r3, #1
 800cdee:	600b      	str	r3, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cdf0:	6801      	ldr	r1, [r0, #0]
 800cdf2:	690b      	ldr	r3, [r1, #16]
 800cdf4:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800cdf8:	f023 0303 	bic.w	r3, r3, #3
 800cdfc:	610b      	str	r3, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cdfe:	6801      	ldr	r1, [r0, #0]
 800ce00:	688b      	ldr	r3, [r1, #8]
 800ce02:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800ce06:	608b      	str	r3, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ce08:	f890 3089 	ldrb.w	r3, [r0, #137]	@ 0x89
 800ce0c:	b2db      	uxtb	r3, r3
 800ce0e:	2b04      	cmp	r3, #4
 800ce10:	d00d      	beq.n	800ce2e <SPI_CloseTransfer+0x5e>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ce12:	f012 0f20 	tst.w	r2, #32
 800ce16:	d00a      	beq.n	800ce2e <SPI_CloseTransfer+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ce18:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800ce1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce20:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ce24:	6801      	ldr	r1, [r0, #0]
 800ce26:	698b      	ldr	r3, [r1, #24]
 800ce28:	f043 0320 	orr.w	r3, r3, #32
 800ce2c:	618b      	str	r3, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ce2e:	f890 3089 	ldrb.w	r3, [r0, #137]	@ 0x89
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	2b03      	cmp	r3, #3
 800ce36:	d00d      	beq.n	800ce54 <SPI_CloseTransfer+0x84>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ce38:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800ce3c:	d00a      	beq.n	800ce54 <SPI_CloseTransfer+0x84>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ce3e:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800ce42:	f043 0304 	orr.w	r3, r3, #4
 800ce46:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce4a:	6801      	ldr	r1, [r0, #0]
 800ce4c:	698b      	ldr	r3, [r1, #24]
 800ce4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce52:	618b      	str	r3, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ce54:	f412 7f00 	tst.w	r2, #512	@ 0x200
 800ce58:	d00a      	beq.n	800ce70 <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ce5a:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800ce5e:	f043 0301 	orr.w	r3, r3, #1
 800ce62:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ce66:	6801      	ldr	r1, [r0, #0]
 800ce68:	698b      	ldr	r3, [r1, #24]
 800ce6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ce6e:	618b      	str	r3, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ce70:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800ce74:	d00a      	beq.n	800ce8c <SPI_CloseTransfer+0xbc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ce76:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800ce7a:	f043 0308 	orr.w	r3, r3, #8
 800ce7e:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ce82:	6802      	ldr	r2, [r0, #0]
 800ce84:	6993      	ldr	r3, [r2, #24]
 800ce86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce8a:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800ce92:	f8a0 3072 	strh.w	r3, [r0, #114]	@ 0x72
}
 800ce96:	4770      	bx	lr

0800ce98 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ce98:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800ce9a:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ce9c:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ce9e:	3008      	adds	r0, #8
 800cea0:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800cea2:	fb03 0000 	mla	r0, r3, r0, r0
 800cea6:	4770      	bx	lr

0800cea8 <HAL_SPI_Init>:
  if (hspi == NULL)
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	f000 80a9 	beq.w	800d000 <HAL_SPI_Init+0x158>
{
 800ceae:	b538      	push	{r3, r4, r5, lr}
 800ceb0:	4604      	mov	r4, r0
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800ceb2:	6805      	ldr	r5, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	6283      	str	r3, [r0, #40]	@ 0x28
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ceb8:	4b53      	ldr	r3, [pc, #332]	@ (800d008 <HAL_SPI_Init+0x160>)
 800ceba:	429d      	cmp	r5, r3
 800cebc:	d040      	beq.n	800cf40 <HAL_SPI_Init+0x98>
 800cebe:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 800cec2:	429d      	cmp	r5, r3
 800cec4:	d03c      	beq.n	800cf40 <HAL_SPI_Init+0x98>
  packet_length = SPI_GetPacketSize(hspi);
 800cec6:	4620      	mov	r0, r4
 800cec8:	f7ff ffe6 	bl	800ce98 <SPI_GetPacketSize>
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cecc:	4b4e      	ldr	r3, [pc, #312]	@ (800d008 <HAL_SPI_Init+0x160>)
 800cece:	429d      	cmp	r5, r3
 800ced0:	d03b      	beq.n	800cf4a <HAL_SPI_Init+0xa2>
 800ced2:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 800ced6:	429d      	cmp	r5, r3
 800ced8:	d037      	beq.n	800cf4a <HAL_SPI_Init+0xa2>
 800ceda:	4b4c      	ldr	r3, [pc, #304]	@ (800d00c <HAL_SPI_Init+0x164>)
 800cedc:	429d      	cmp	r5, r3
 800cede:	d00a      	beq.n	800cef6 <HAL_SPI_Init+0x4e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cee0:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 800cee4:	429d      	cmp	r5, r3
 800cee6:	d006      	beq.n	800cef6 <HAL_SPI_Init+0x4e>
 800cee8:	4b49      	ldr	r3, [pc, #292]	@ (800d010 <HAL_SPI_Init+0x168>)
 800ceea:	429d      	cmp	r5, r3
 800ceec:	d003      	beq.n	800cef6 <HAL_SPI_Init+0x4e>
 800ceee:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 800cef2:	429d      	cmp	r5, r3
 800cef4:	d102      	bne.n	800cefc <HAL_SPI_Init+0x54>
 800cef6:	2810      	cmp	r0, #16
 800cef8:	f200 8084 	bhi.w	800d004 <HAL_SPI_Init+0x15c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800cefc:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 800cf00:	b33b      	cbz	r3, 800cf52 <HAL_SPI_Init+0xaa>
  hspi->State = HAL_SPI_STATE_BUSY;
 800cf02:	2302      	movs	r3, #2
 800cf04:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
  __HAL_SPI_DISABLE(hspi);
 800cf08:	6822      	ldr	r2, [r4, #0]
 800cf0a:	6813      	ldr	r3, [r2, #0]
 800cf0c:	f023 0301 	bic.w	r3, r3, #1
 800cf10:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cf12:	6823      	ldr	r3, [r4, #0]
 800cf14:	689a      	ldr	r2, [r3, #8]
 800cf16:	f402 12f8 	and.w	r2, r2, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cf1a:	69a1      	ldr	r1, [r4, #24]
 800cf1c:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 800cf20:	d01d      	beq.n	800cf5e <HAL_SPI_Init+0xb6>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cf22:	6863      	ldr	r3, [r4, #4]
 800cf24:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800cf28:	d02c      	beq.n	800cf84 <HAL_SPI_Init+0xdc>
 800cf2a:	68e3      	ldr	r3, [r4, #12]
 800cf2c:	2b06      	cmp	r3, #6
 800cf2e:	d929      	bls.n	800cf84 <HAL_SPI_Init+0xdc>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cf30:	6821      	ldr	r1, [r4, #0]
 800cf32:	680b      	ldr	r3, [r1, #0]
 800cf34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf38:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800cf3a:	4303      	orrs	r3, r0
 800cf3c:	600b      	str	r3, [r1, #0]
 800cf3e:	e026      	b.n	800cf8e <HAL_SPI_Init+0xe6>
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cf40:	68e3      	ldr	r3, [r4, #12]
 800cf42:	2b0f      	cmp	r3, #15
 800cf44:	d9bf      	bls.n	800cec6 <HAL_SPI_Init+0x1e>
    return HAL_ERROR;
 800cf46:	2001      	movs	r0, #1
 800cf48:	e059      	b.n	800cffe <HAL_SPI_Init+0x156>
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cf4a:	2808      	cmp	r0, #8
 800cf4c:	d9c5      	bls.n	800ceda <HAL_SPI_Init+0x32>
    return HAL_ERROR;
 800cf4e:	2001      	movs	r0, #1
 800cf50:	e055      	b.n	800cffe <HAL_SPI_Init+0x156>
    hspi->Lock = HAL_UNLOCKED;
 800cf52:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
    HAL_SPI_MspInit(hspi);
 800cf56:	4620      	mov	r0, r4
 800cf58:	f7f6 fddc 	bl	8003b14 <HAL_SPI_MspInit>
 800cf5c:	e7d1      	b.n	800cf02 <HAL_SPI_Init+0x5a>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cf5e:	6861      	ldr	r1, [r4, #4]
 800cf60:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 800cf64:	d006      	beq.n	800cf74 <HAL_SPI_Init+0xcc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cf66:	2900      	cmp	r1, #0
 800cf68:	d1db      	bne.n	800cf22 <HAL_SPI_Init+0x7a>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cf6a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cf6c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800cf70:	d1d7      	bne.n	800cf22 <HAL_SPI_Init+0x7a>
 800cf72:	e002      	b.n	800cf7a <HAL_SPI_Init+0xd2>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cf74:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cf76:	2800      	cmp	r0, #0
 800cf78:	d1f5      	bne.n	800cf66 <HAL_SPI_Init+0xbe>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cf7a:	6819      	ldr	r1, [r3, #0]
 800cf7c:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 800cf80:	6019      	str	r1, [r3, #0]
 800cf82:	e7ce      	b.n	800cf22 <HAL_SPI_Init+0x7a>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cf84:	6821      	ldr	r1, [r4, #0]
 800cf86:	680b      	ldr	r3, [r1, #0]
 800cf88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf8c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cf8e:	69e3      	ldr	r3, [r4, #28]
 800cf90:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800cf92:	430b      	orrs	r3, r1
 800cf94:	4313      	orrs	r3, r2
 800cf96:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	68e1      	ldr	r1, [r4, #12]
 800cf9c:	6822      	ldr	r2, [r4, #0]
 800cf9e:	430b      	orrs	r3, r1
 800cfa0:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cfa2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cfa4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	69a2      	ldr	r2, [r4, #24]
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	6922      	ldr	r2, [r4, #16]
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	6962      	ldr	r2, [r4, #20]
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	6a22      	ldr	r2, [r4, #32]
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	6862      	ldr	r2, [r4, #4]
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	68a2      	ldr	r2, [r4, #8]
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800cfd6:	6822      	ldr	r2, [r4, #0]
 800cfd8:	430b      	orrs	r3, r1
 800cfda:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cfdc:	6863      	ldr	r3, [r4, #4]
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cfde:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800cfe2:	d006      	beq.n	800cff2 <HAL_SPI_Init+0x14a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cfe4:	6822      	ldr	r2, [r4, #0]
 800cfe6:	68d3      	ldr	r3, [r2, #12]
 800cfe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cfec:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800cfee:	430b      	orrs	r3, r1
 800cff0:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cff2:	2000      	movs	r0, #0
 800cff4:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800cff8:	2301      	movs	r3, #1
 800cffa:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
}
 800cffe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d000:	2001      	movs	r0, #1
}
 800d002:	4770      	bx	lr
    return HAL_ERROR;
 800d004:	2001      	movs	r0, #1
 800d006:	e7fa      	b.n	800cffe <HAL_SPI_Init+0x156>
 800d008:	46002000 	.word	0x46002000
 800d00c:	40013000 	.word	0x40013000
 800d010:	40003800 	.word	0x40003800

0800d014 <HAL_SPI_Receive_DMA>:
{
 800d014:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hspi);
 800d016:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	f000 8138 	beq.w	800d290 <HAL_SPI_Receive_DMA+0x27c>
 800d020:	4604      	mov	r4, r0
 800d022:	4616      	mov	r6, r2
 800d024:	2301      	movs	r3, #1
 800d026:	f880 3088 	strb.w	r3, [r0, #136]	@ 0x88
  if (hspi->State != HAL_SPI_STATE_READY)
 800d02a:	f890 5089 	ldrb.w	r5, [r0, #137]	@ 0x89
 800d02e:	b2ed      	uxtb	r5, r5
 800d030:	429d      	cmp	r5, r3
 800d032:	f040 80bd 	bne.w	800d1b0 <HAL_SPI_Receive_DMA+0x19c>
  if ((pData == NULL) || (Size == 0UL))
 800d036:	2900      	cmp	r1, #0
 800d038:	f000 80c0 	beq.w	800d1bc <HAL_SPI_Receive_DMA+0x1a8>
 800d03c:	2a00      	cmp	r2, #0
 800d03e:	f000 80bd 	beq.w	800d1bc <HAL_SPI_Receive_DMA+0x1a8>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d042:	2304      	movs	r3, #4
 800d044:	f880 3089 	strb.w	r3, [r0, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d048:	2300      	movs	r3, #0
 800d04a:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d04e:	66c1      	str	r1, [r0, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800d050:	f8a4 2070 	strh.w	r2, [r4, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800d054:	f8a4 2072 	strh.w	r2, [r4, #114]	@ 0x72
  hspi->RxISR       = NULL;
 800d058:	6783      	str	r3, [r0, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800d05a:	67c3      	str	r3, [r0, #124]	@ 0x7c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d05c:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800d060:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d064:	6883      	ldr	r3, [r0, #8]
 800d066:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d06a:	f000 80ab 	beq.w	800d1c4 <HAL_SPI_Receive_DMA+0x1b0>
    SPI_2LINES_RX(hspi);
 800d06e:	6802      	ldr	r2, [r0, #0]
 800d070:	68d3      	ldr	r3, [r2, #12]
 800d072:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 800d076:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d07a:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) &&  \
 800d07c:	68e3      	ldr	r3, [r4, #12]
 800d07e:	2b0f      	cmp	r3, #15
 800d080:	d918      	bls.n	800d0b4 <HAL_SPI_Receive_DMA+0xa0>
 800d082:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800d086:	69d2      	ldr	r2, [r2, #28]
 800d088:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 800d08c:	d012      	beq.n	800d0b4 <HAL_SPI_Receive_DMA+0xa0>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800d08e:	6822      	ldr	r2, [r4, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) &&  \
 800d090:	4980      	ldr	r1, [pc, #512]	@ (800d294 <HAL_SPI_Receive_DMA+0x280>)
 800d092:	428a      	cmp	r2, r1
 800d094:	f000 809c 	beq.w	800d1d0 <HAL_SPI_Receive_DMA+0x1bc>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800d098:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 800d09c:	428a      	cmp	r2, r1
 800d09e:	f000 8097 	beq.w	800d1d0 <HAL_SPI_Receive_DMA+0x1bc>
 800d0a2:	497d      	ldr	r1, [pc, #500]	@ (800d298 <HAL_SPI_Receive_DMA+0x284>)
 800d0a4:	428a      	cmp	r2, r1
 800d0a6:	f000 8093 	beq.w	800d1d0 <HAL_SPI_Receive_DMA+0x1bc>
 800d0aa:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 800d0ae:	428a      	cmp	r2, r1
 800d0b0:	f000 808e 	beq.w	800d1d0 <HAL_SPI_Receive_DMA+0x1bc>
 800d0b4:	2b07      	cmp	r3, #7
 800d0b6:	d905      	bls.n	800d0c4 <HAL_SPI_Receive_DMA+0xb0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE)))
 800d0b8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d0bc:	69db      	ldr	r3, [r3, #28]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	f000 8086 	beq.w	800d1d0 <HAL_SPI_Receive_DMA+0x1bc>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800d0c4:	6822      	ldr	r2, [r4, #0]
 800d0c6:	6893      	ldr	r3, [r2, #8]
 800d0c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d0cc:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d0ce:	68e3      	ldr	r3, [r4, #12]
 800d0d0:	2b07      	cmp	r3, #7
 800d0d2:	f200 8091 	bhi.w	800d1f8 <HAL_SPI_Receive_DMA+0x1e4>
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_HALFWORD)
 800d0d6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d0da:	69da      	ldr	r2, [r3, #28]
 800d0dc:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800d0e0:	d07a      	beq.n	800d1d8 <HAL_SPI_Receive_DMA+0x1c4>
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800d0e2:	69db      	ldr	r3, [r3, #28]
 800d0e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0e8:	d07e      	beq.n	800d1e8 <HAL_SPI_Receive_DMA+0x1d4>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d0ea:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d0ee:	4a6b      	ldr	r2, [pc, #428]	@ (800d29c <HAL_SPI_Receive_DMA+0x288>)
 800d0f0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800d0f2:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d0f6:	4a6a      	ldr	r2, [pc, #424]	@ (800d2a0 <HAL_SPI_Receive_DMA+0x28c>)
 800d0f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d0fa:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d0fe:	4a69      	ldr	r2, [pc, #420]	@ (800d2a4 <HAL_SPI_Receive_DMA+0x290>)
 800d100:	669a      	str	r2, [r3, #104]	@ 0x68
  hspi->hdmarx->XferAbortCallback = NULL;
 800d102:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d106:	2200      	movs	r2, #0
 800d108:	66da      	str	r2, [r3, #108]	@ 0x6c
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d10a:	68e3      	ldr	r3, [r4, #12]
 800d10c:	2b07      	cmp	r3, #7
 800d10e:	f200 8085 	bhi.w	800d21c <HAL_SPI_Receive_DMA+0x208>
    hspi->RxXferCount = Size;
 800d112:	f8a4 6072 	strh.w	r6, [r4, #114]	@ 0x72
  if ((hspi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800d116:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800d11a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800d11c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d120:	f000 8095 	beq.w	800d24e <HAL_SPI_Receive_DMA+0x23a>
    if (hspi->hdmarx->LinkedListQueue != NULL)
 800d124:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 800d126:	2a00      	cmp	r2, #0
 800d128:	f000 8084 	beq.w	800d234 <HAL_SPI_Receive_DMA+0x220>
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->RxXferCount;
 800d12c:	f8b4 3072 	ldrh.w	r3, [r4, #114]	@ 0x72
 800d130:	b29b      	uxth	r3, r3
 800d132:	6812      	ldr	r2, [r2, #0]
 800d134:	6093      	str	r3, [r2, #8]
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->RXDR;
 800d136:	6823      	ldr	r3, [r4, #0]
 800d138:	3330      	adds	r3, #48	@ 0x30
 800d13a:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800d13e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800d140:	6812      	ldr	r2, [r2, #0]
 800d142:	60d3      	str	r3, [r2, #12]
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hspi->pRxBuffPtr;
 800d144:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800d146:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d14a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	611a      	str	r2, [r3, #16]
      errorcode = HAL_DMAEx_List_Start_IT(hspi->hdmarx);
 800d150:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800d154:	f7f9 fd0d 	bl	8006b72 <HAL_DMAEx_List_Start_IT>
  if (errorcode != HAL_OK)
 800d158:	2800      	cmp	r0, #0
 800d15a:	f040 8081 	bne.w	800d260 <HAL_SPI_Receive_DMA+0x24c>
  if (hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800d15e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d164:	2b81      	cmp	r3, #129	@ 0x81
 800d166:	f000 8088 	beq.w	800d27a <HAL_SPI_Receive_DMA+0x266>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d16a:	6821      	ldr	r1, [r4, #0]
 800d16c:	684b      	ldr	r3, [r1, #4]
 800d16e:	0c1b      	lsrs	r3, r3, #16
 800d170:	041b      	lsls	r3, r3, #16
 800d172:	4333      	orrs	r3, r6
 800d174:	604b      	str	r3, [r1, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800d176:	6822      	ldr	r2, [r4, #0]
 800d178:	6893      	ldr	r3, [r2, #8]
 800d17a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d17e:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800d180:	6822      	ldr	r2, [r4, #0]
 800d182:	6913      	ldr	r3, [r2, #16]
 800d184:	f443 7350 	orr.w	r3, r3, #832	@ 0x340
 800d188:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800d18a:	6822      	ldr	r2, [r4, #0]
 800d18c:	6813      	ldr	r3, [r2, #0]
 800d18e:	f043 0301 	orr.w	r3, r3, #1
 800d192:	6013      	str	r3, [r2, #0]
  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	69da      	ldr	r2, [r3, #28]
 800d198:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
 800d19c:	d103      	bne.n	800d1a6 <HAL_SPI_Receive_DMA+0x192>
 800d19e:	6862      	ldr	r2, [r4, #4]
 800d1a0:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 800d1a4:	d06f      	beq.n	800d286 <HAL_SPI_Receive_DMA+0x272>
  __HAL_UNLOCK(hspi);
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
  return errorcode;
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	e003      	b.n	800d1b8 <HAL_SPI_Receive_DMA+0x1a4>
    __HAL_UNLOCK(hspi);
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	f880 3088 	strb.w	r3, [r0, #136]	@ 0x88
    return errorcode;
 800d1b6:	2502      	movs	r5, #2
}
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 800d1bc:	2300      	movs	r3, #0
 800d1be:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
    return errorcode;
 800d1c2:	e7f9      	b.n	800d1b8 <HAL_SPI_Receive_DMA+0x1a4>
    SPI_1LINE_RX(hspi);
 800d1c4:	6802      	ldr	r2, [r0, #0]
 800d1c6:	6813      	ldr	r3, [r2, #0]
 800d1c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d1cc:	6013      	str	r3, [r2, #0]
 800d1ce:	e755      	b.n	800d07c <HAL_SPI_Receive_DMA+0x68>
    __HAL_UNLOCK(hspi);
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
    return errorcode;
 800d1d6:	e7ef      	b.n	800d1b8 <HAL_SPI_Receive_DMA+0x1a4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800d1d8:	f8b4 2072 	ldrh.w	r2, [r4, #114]	@ 0x72
 800d1dc:	b292      	uxth	r2, r2
 800d1de:	3201      	adds	r2, #1
 800d1e0:	0852      	lsrs	r2, r2, #1
 800d1e2:	f8a4 2072 	strh.w	r2, [r4, #114]	@ 0x72
 800d1e6:	e77c      	b.n	800d0e2 <HAL_SPI_Receive_DMA+0xce>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800d1e8:	f8b4 3072 	ldrh.w	r3, [r4, #114]	@ 0x72
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	3303      	adds	r3, #3
 800d1f0:	089b      	lsrs	r3, r3, #2
 800d1f2:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 800d1f6:	e778      	b.n	800d0ea <HAL_SPI_Receive_DMA+0xd6>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800d1f8:	2b0f      	cmp	r3, #15
 800d1fa:	f63f af76 	bhi.w	800d0ea <HAL_SPI_Receive_DMA+0xd6>
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800d1fe:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d202:	69db      	ldr	r3, [r3, #28]
 800d204:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d208:	f47f af6f 	bne.w	800d0ea <HAL_SPI_Receive_DMA+0xd6>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800d20c:	f8b4 3072 	ldrh.w	r3, [r4, #114]	@ 0x72
 800d210:	b29b      	uxth	r3, r3
 800d212:	3301      	adds	r3, #1
 800d214:	085b      	lsrs	r3, r3, #1
 800d216:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 800d21a:	e766      	b.n	800d0ea <HAL_SPI_Receive_DMA+0xd6>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800d21c:	2b0f      	cmp	r3, #15
 800d21e:	d804      	bhi.n	800d22a <HAL_SPI_Receive_DMA+0x216>
    hspi->RxXferCount = Size * 2U;
 800d220:	0073      	lsls	r3, r6, #1
 800d222:	b29b      	uxth	r3, r3
 800d224:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 800d228:	e775      	b.n	800d116 <HAL_SPI_Receive_DMA+0x102>
    hspi->RxXferCount = Size * 4U;
 800d22a:	00b3      	lsls	r3, r6, #2
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 800d232:	e770      	b.n	800d116 <HAL_SPI_Receive_DMA+0x102>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d234:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800d238:	f043 0310 	orr.w	r3, r3, #16
 800d23c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(hspi);
 800d240:	2300      	movs	r3, #0
 800d242:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
      hspi->State = HAL_SPI_STATE_READY;
 800d246:	2301      	movs	r3, #1
 800d248:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
      return errorcode;
 800d24c:	e7b4      	b.n	800d1b8 <HAL_SPI_Receive_DMA+0x1a4>
    errorcode = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800d24e:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount);
 800d250:	f8b4 3072 	ldrh.w	r3, [r4, #114]	@ 0x72
    errorcode = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800d254:	b29b      	uxth	r3, r3
 800d256:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800d258:	3130      	adds	r1, #48	@ 0x30
 800d25a:	f7f9 f83b 	bl	80062d4 <HAL_DMA_Start_IT>
 800d25e:	e77b      	b.n	800d158 <HAL_SPI_Receive_DMA+0x144>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d260:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800d264:	f043 0310 	orr.w	r3, r3, #16
 800d268:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    __HAL_UNLOCK(hspi);
 800d26c:	2300      	movs	r3, #0
 800d26e:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
    hspi->State = HAL_SPI_STATE_READY;
 800d272:	2301      	movs	r3, #1
 800d274:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
    return errorcode;
 800d278:	e79e      	b.n	800d1b8 <HAL_SPI_Receive_DMA+0x1a4>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800d27a:	6822      	ldr	r2, [r4, #0]
 800d27c:	6853      	ldr	r3, [r2, #4]
 800d27e:	0c1b      	lsrs	r3, r3, #16
 800d280:	041b      	lsls	r3, r3, #16
 800d282:	6053      	str	r3, [r2, #4]
 800d284:	e777      	b.n	800d176 <HAL_SPI_Receive_DMA+0x162>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d286:	681a      	ldr	r2, [r3, #0]
 800d288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d28c:	601a      	str	r2, [r3, #0]
 800d28e:	e78a      	b.n	800d1a6 <HAL_SPI_Receive_DMA+0x192>
  __HAL_LOCK(hspi);
 800d290:	2502      	movs	r5, #2
 800d292:	e791      	b.n	800d1b8 <HAL_SPI_Receive_DMA+0x1a4>
 800d294:	40013000 	.word	0x40013000
 800d298:	40003800 	.word	0x40003800
 800d29c:	0800d2d7 	.word	0x0800d2d7
 800d2a0:	0800d2ab 	.word	0x0800d2ab
 800d2a4:	0800d2e1 	.word	0x0800d2e1

0800d2a8 <HAL_SPI_TxCpltCallback>:
}
 800d2a8:	4770      	bx	lr

0800d2aa <SPI_DMAReceiveCplt>:
{
 800d2aa:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d2ac:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800d2ae:	f890 3089 	ldrb.w	r3, [r0, #137]	@ 0x89
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	2b07      	cmp	r3, #7
 800d2b6:	d009      	beq.n	800d2cc <SPI_DMAReceiveCplt+0x22>
    if (hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800d2b8:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800d2bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2be:	2b81      	cmp	r3, #129	@ 0x81
 800d2c0:	d005      	beq.n	800d2ce <SPI_DMAReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800d2c2:	6802      	ldr	r2, [r0, #0]
 800d2c4:	6913      	ldr	r3, [r2, #16]
 800d2c6:	f043 0308 	orr.w	r3, r3, #8
 800d2ca:	6113      	str	r3, [r2, #16]
}
 800d2cc:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800d2ce:	f7f5 ff69 	bl	80031a4 <HAL_SPI_RxCpltCallback>
 800d2d2:	e7fb      	b.n	800d2cc <SPI_DMAReceiveCplt+0x22>

0800d2d4 <HAL_SPI_TxRxCpltCallback>:
}
 800d2d4:	4770      	bx	lr

0800d2d6 <SPI_DMAHalfReceiveCplt>:
{
 800d2d6:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d2d8:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 800d2da:	f7f5 ff5f 	bl	800319c <HAL_SPI_RxHalfCpltCallback>
}
 800d2de:	bd08      	pop	{r3, pc}

0800d2e0 <SPI_DMAError>:
{
 800d2e0:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d2e2:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 800d2e4:	f7f9 f991 	bl	800660a <HAL_DMA_GetError>
 800d2e8:	b900      	cbnz	r0, 800d2ec <SPI_DMAError+0xc>
}
 800d2ea:	bd10      	pop	{r4, pc}
    SPI_CloseTransfer(hspi);
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f7ff fd6f 	bl	800cdd0 <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d2f2:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800d2f6:	f043 0310 	orr.w	r3, r3, #16
 800d2fa:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800d2fe:	2301      	movs	r3, #1
 800d300:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
    HAL_SPI_ErrorCallback(hspi);
 800d304:	4620      	mov	r0, r4
 800d306:	f7f5 ff51 	bl	80031ac <HAL_SPI_ErrorCallback>
}
 800d30a:	e7ee      	b.n	800d2ea <SPI_DMAError+0xa>

0800d30c <SPI_DMAAbortOnError>:
{
 800d30c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d30e:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  hspi->RxXferCount = (uint16_t) 0UL;
 800d310:	2300      	movs	r3, #0
 800d312:	f8a0 3072 	strh.w	r3, [r0, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800d316:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
  hspi->State = HAL_SPI_STATE_READY;
 800d31a:	2301      	movs	r3, #1
 800d31c:	f880 3089 	strb.w	r3, [r0, #137]	@ 0x89
  HAL_SPI_ErrorCallback(hspi);
 800d320:	f7f5 ff44 	bl	80031ac <HAL_SPI_ErrorCallback>
}
 800d324:	bd08      	pop	{r3, pc}

0800d326 <HAL_SPI_SuspendCallback>:
}
 800d326:	4770      	bx	lr

0800d328 <HAL_SPI_IRQHandler>:
{
 800d328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d32c:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800d32e:	6806      	ldr	r6, [r0, #0]
 800d330:	6932      	ldr	r2, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800d332:	6973      	ldr	r3, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 800d334:	ea02 0503 	and.w	r5, r2, r3
  uint32_t cfg1     = hspi->Instance->CFG1;
 800d338:	f8d6 9008 	ldr.w	r9, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 800d33c:	f890 7089 	ldrb.w	r7, [r0, #137]	@ 0x89
 800d340:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d342:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800d346:	d002      	beq.n	800d34e <HAL_SPI_IRQHandler+0x26>
 800d348:	f012 0f08 	tst.w	r2, #8
 800d34c:	d13f      	bne.n	800d3ce <HAL_SPI_IRQHandler+0xa6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d34e:	f005 0364 	and.w	r3, r5, #100	@ 0x64
 800d352:	2b04      	cmp	r3, #4
 800d354:	d042      	beq.n	800d3dc <HAL_SPI_IRQHandler+0xb4>
  uint32_t handled  = 0UL;
 800d356:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d358:	f005 0845 	and.w	r8, r5, #69	@ 0x45
 800d35c:	f1b8 0f01 	cmp.w	r8, #1
 800d360:	d044      	beq.n	800d3ec <HAL_SPI_IRQHandler+0xc4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d362:	f005 0226 	and.w	r2, r5, #38	@ 0x26
 800d366:	2a02      	cmp	r2, #2
 800d368:	d045      	beq.n	800d3f6 <HAL_SPI_IRQHandler+0xce>
  if (handled != 0UL)
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d146      	bne.n	800d3fc <HAL_SPI_IRQHandler+0xd4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800d36e:	f015 0f08 	tst.w	r5, #8
 800d372:	d079      	beq.n	800d468 <HAL_SPI_IRQHandler+0x140>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d374:	6822      	ldr	r2, [r4, #0]
 800d376:	6993      	ldr	r3, [r2, #24]
 800d378:	f043 0308 	orr.w	r3, r3, #8
 800d37c:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d37e:	6822      	ldr	r2, [r4, #0]
 800d380:	6993      	ldr	r3, [r2, #24]
 800d382:	f043 0310 	orr.w	r3, r3, #16
 800d386:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d388:	6822      	ldr	r2, [r4, #0]
 800d38a:	6993      	ldr	r3, [r2, #24]
 800d38c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d390:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800d392:	6822      	ldr	r2, [r4, #0]
 800d394:	6913      	ldr	r3, [r2, #16]
 800d396:	f023 0308 	bic.w	r3, r3, #8
 800d39a:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d39c:	6823      	ldr	r3, [r4, #0]
 800d39e:	689b      	ldr	r3, [r3, #8]
 800d3a0:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 800d3a4:	d03b      	beq.n	800d41e <HAL_SPI_IRQHandler+0xf6>
    SPI_CloseTransfer(hspi);
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	f7ff fd12 	bl	800cdd0 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d3b2:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d14a      	bne.n	800d450 <HAL_SPI_IRQHandler+0x128>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d3ba:	2f05      	cmp	r7, #5
 800d3bc:	d04c      	beq.n	800d458 <HAL_SPI_IRQHandler+0x130>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d3be:	2f04      	cmp	r7, #4
 800d3c0:	d04e      	beq.n	800d460 <HAL_SPI_IRQHandler+0x138>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d3c2:	2f03      	cmp	r7, #3
 800d3c4:	d11a      	bne.n	800d3fc <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxCpltCallback(hspi);
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	f7ff ff6e 	bl	800d2a8 <HAL_SPI_TxCpltCallback>
    return;
 800d3cc:	e016      	b.n	800d3fc <HAL_SPI_IRQHandler+0xd4>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d3ce:	69b3      	ldr	r3, [r6, #24]
 800d3d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d3d4:	61b3      	str	r3, [r6, #24]
    HAL_SPI_SuspendCallback(hspi);
 800d3d6:	f7ff ffa6 	bl	800d326 <HAL_SPI_SuspendCallback>
    return;
 800d3da:	e00f      	b.n	800d3fc <HAL_SPI_IRQHandler+0xd4>
    hspi->TxISR(hspi);
 800d3dc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800d3de:	4620      	mov	r0, r4
 800d3e0:	4798      	blx	r3
    hspi->RxISR(hspi);
 800d3e2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	4798      	blx	r3
    handled = 1UL;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e7b5      	b.n	800d358 <HAL_SPI_IRQHandler+0x30>
    hspi->RxISR(hspi);
 800d3ec:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	4798      	blx	r3
    handled = 1UL;
 800d3f2:	4643      	mov	r3, r8
 800d3f4:	e7b5      	b.n	800d362 <HAL_SPI_IRQHandler+0x3a>
    hspi->TxISR(hspi);
 800d3f6:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	4798      	blx	r3
}
 800d3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d400:	2b07      	cmp	r3, #7
 800d402:	d91c      	bls.n	800d43e <HAL_SPI_IRQHandler+0x116>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d404:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d406:	8e32      	ldrh	r2, [r6, #48]	@ 0x30
 800d408:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d40a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d40c:	3302      	adds	r3, #2
 800d40e:	66e3      	str	r3, [r4, #108]	@ 0x6c
        hspi->RxXferCount--;
 800d410:	f8b4 3072 	ldrh.w	r3, [r4, #114]	@ 0x72
 800d414:	b29b      	uxth	r3, r3
 800d416:	3b01      	subs	r3, #1
 800d418:	b29b      	uxth	r3, r3
 800d41a:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800d41e:	f8b4 3072 	ldrh.w	r3, [r4, #114]	@ 0x72
 800d422:	b29b      	uxth	r3, r3
 800d424:	2b00      	cmp	r3, #0
 800d426:	d0be      	beq.n	800d3a6 <HAL_SPI_IRQHandler+0x7e>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d428:	68e3      	ldr	r3, [r4, #12]
 800d42a:	2b0f      	cmp	r3, #15
 800d42c:	d9e8      	bls.n	800d400 <HAL_SPI_IRQHandler+0xd8>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d42e:	6822      	ldr	r2, [r4, #0]
 800d430:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d432:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d434:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d436:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d438:	3304      	adds	r3, #4
 800d43a:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800d43c:	e7e8      	b.n	800d410 <HAL_SPI_IRQHandler+0xe8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d43e:	6822      	ldr	r2, [r4, #0]
 800d440:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d442:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800d446:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d448:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d44a:	3301      	adds	r3, #1
 800d44c:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800d44e:	e7df      	b.n	800d410 <HAL_SPI_IRQHandler+0xe8>
      HAL_SPI_ErrorCallback(hspi);
 800d450:	4620      	mov	r0, r4
 800d452:	f7f5 feab 	bl	80031ac <HAL_SPI_ErrorCallback>
      return;
 800d456:	e7d1      	b.n	800d3fc <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxRxCpltCallback(hspi);
 800d458:	4620      	mov	r0, r4
 800d45a:	f7ff ff3b 	bl	800d2d4 <HAL_SPI_TxRxCpltCallback>
 800d45e:	e7cd      	b.n	800d3fc <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_RxCpltCallback(hspi);
 800d460:	4620      	mov	r0, r4
 800d462:	f7f5 fe9f 	bl	80031a4 <HAL_SPI_RxCpltCallback>
 800d466:	e7c9      	b.n	800d3fc <HAL_SPI_IRQHandler+0xd4>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d468:	f415 7f58 	tst.w	r5, #864	@ 0x360
 800d46c:	d0c6      	beq.n	800d3fc <HAL_SPI_IRQHandler+0xd4>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d46e:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800d472:	d00a      	beq.n	800d48a <HAL_SPI_IRQHandler+0x162>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d474:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800d478:	f043 0304 	orr.w	r3, r3, #4
 800d47c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d480:	6822      	ldr	r2, [r4, #0]
 800d482:	6993      	ldr	r3, [r2, #24]
 800d484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d488:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d48a:	f415 7f00 	tst.w	r5, #512	@ 0x200
 800d48e:	d00a      	beq.n	800d4a6 <HAL_SPI_IRQHandler+0x17e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d490:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800d494:	f043 0301 	orr.w	r3, r3, #1
 800d498:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d49c:	6822      	ldr	r2, [r4, #0]
 800d49e:	6993      	ldr	r3, [r2, #24]
 800d4a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d4a4:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d4a6:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800d4aa:	d00a      	beq.n	800d4c2 <HAL_SPI_IRQHandler+0x19a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d4ac:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800d4b0:	f043 0308 	orr.w	r3, r3, #8
 800d4b4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d4b8:	6822      	ldr	r2, [r4, #0]
 800d4ba:	6993      	ldr	r3, [r2, #24]
 800d4bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d4c0:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d4c2:	f015 0f20 	tst.w	r5, #32
 800d4c6:	d00a      	beq.n	800d4de <HAL_SPI_IRQHandler+0x1b6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d4c8:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800d4cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4d0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d4d4:	6822      	ldr	r2, [r4, #0]
 800d4d6:	6993      	ldr	r3, [r2, #24]
 800d4d8:	f043 0320 	orr.w	r3, r3, #32
 800d4dc:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d4de:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d08a      	beq.n	800d3fc <HAL_SPI_IRQHandler+0xd4>
      __HAL_SPI_DISABLE(hspi);
 800d4e6:	6822      	ldr	r2, [r4, #0]
 800d4e8:	6813      	ldr	r3, [r2, #0]
 800d4ea:	f023 0301 	bic.w	r3, r3, #1
 800d4ee:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d4f0:	6822      	ldr	r2, [r4, #0]
 800d4f2:	6913      	ldr	r3, [r2, #16]
 800d4f4:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800d4f8:	f023 0303 	bic.w	r3, r3, #3
 800d4fc:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d4fe:	f409 4940 	and.w	r9, r9, #49152	@ 0xc000
 800d502:	f5b9 4f40 	cmp.w	r9, #49152	@ 0xc000
 800d506:	d129      	bne.n	800d55c <HAL_SPI_IRQHandler+0x234>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d508:	6822      	ldr	r2, [r4, #0]
 800d50a:	6893      	ldr	r3, [r2, #8]
 800d50c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800d510:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800d512:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d516:	b163      	cbz	r3, 800d532 <HAL_SPI_IRQHandler+0x20a>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d518:	4a14      	ldr	r2, [pc, #80]	@ (800d56c <HAL_SPI_IRQHandler+0x244>)
 800d51a:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d51c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800d520:	f7f8 ff6b 	bl	80063fa <HAL_DMA_Abort_IT>
 800d524:	b128      	cbz	r0, 800d532 <HAL_SPI_IRQHandler+0x20a>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d526:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800d52a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d52e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        if (hspi->hdmatx != NULL)
 800d532:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d536:	2b00      	cmp	r3, #0
 800d538:	f43f af60 	beq.w	800d3fc <HAL_SPI_IRQHandler+0xd4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d53c:	4a0b      	ldr	r2, [pc, #44]	@ (800d56c <HAL_SPI_IRQHandler+0x244>)
 800d53e:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d540:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800d544:	f7f8 ff59 	bl	80063fa <HAL_DMA_Abort_IT>
 800d548:	2800      	cmp	r0, #0
 800d54a:	f43f af57 	beq.w	800d3fc <HAL_SPI_IRQHandler+0xd4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d54e:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800d552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d556:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 800d55a:	e74f      	b.n	800d3fc <HAL_SPI_IRQHandler+0xd4>
        hspi->State = HAL_SPI_STATE_READY;
 800d55c:	2301      	movs	r3, #1
 800d55e:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800d562:	4620      	mov	r0, r4
 800d564:	f7f5 fe22 	bl	80031ac <HAL_SPI_ErrorCallback>
    return;
 800d568:	e748      	b.n	800d3fc <HAL_SPI_IRQHandler+0xd4>
 800d56a:	bf00      	nop
 800d56c:	0800d30d 	.word	0x0800d30d

0800d570 <HAL_SPIEx_SetConfigAutonomousMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
  if (hspi->State == HAL_SPI_STATE_READY)
 800d570:	f890 3089 	ldrb.w	r3, [r0, #137]	@ 0x89
 800d574:	b2db      	uxtb	r3, r3
 800d576:	2b01      	cmp	r3, #1
 800d578:	d11f      	bne.n	800d5ba <HAL_SPIEx_SetConfigAutonomousMode+0x4a>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800d57a:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d01d      	beq.n	800d5be <HAL_SPIEx_SetConfigAutonomousMode+0x4e>
 800d582:	f04f 0c01 	mov.w	ip, #1
 800d586:	f880 c088 	strb.w	ip, [r0, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800d58a:	2302      	movs	r3, #2
 800d58c:	f880 3089 	strb.w	r3, [r0, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800d590:	6802      	ldr	r2, [r0, #0]
 800d592:	6813      	ldr	r3, [r2, #0]
 800d594:	f023 0301 	bic.w	r3, r3, #1
 800d598:	6013      	str	r3, [r2, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800d59a:	680b      	ldr	r3, [r1, #0]
 800d59c:	684a      	ldr	r2, [r1, #4]
 800d59e:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	6889      	ldr	r1, [r1, #8]
 800d5a6:	6802      	ldr	r2, [r0, #0]
 800d5a8:	430b      	orrs	r3, r1
 800d5aa:	61d3      	str	r3, [r2, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800d5ac:	f880 c089 	strb.w	ip, [r0, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	f880 3088 	strb.w	r3, [r0, #136]	@ 0x88

    return HAL_OK;
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	4770      	bx	lr
  }
  else
  {
    return HAL_ERROR;
 800d5ba:	2001      	movs	r0, #1
 800d5bc:	4770      	bx	lr
    __HAL_LOCK(hspi);
 800d5be:	2002      	movs	r0, #2
  }
}
 800d5c0:	4770      	bx	lr

0800d5c2 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d5c2:	4770      	bx	lr

0800d5c4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d5c4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d14c      	bne.n	800d668 <HAL_TIM_Base_Start_IT+0xa4>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5ce:	2302      	movs	r3, #2
 800d5d0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d5d4:	6802      	ldr	r2, [r0, #0]
 800d5d6:	68d3      	ldr	r3, [r2, #12]
 800d5d8:	f043 0301 	orr.w	r3, r3, #1
 800d5dc:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5de:	6803      	ldr	r3, [r0, #0]
 800d5e0:	4a24      	ldr	r2, [pc, #144]	@ (800d674 <HAL_TIM_Base_Start_IT+0xb0>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d032      	beq.n	800d64c <HAL_TIM_Base_Start_IT+0x88>
 800d5e6:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d02e      	beq.n	800d64c <HAL_TIM_Base_Start_IT+0x88>
 800d5ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5f2:	d02b      	beq.n	800d64c <HAL_TIM_Base_Start_IT+0x88>
 800d5f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d5f8:	d028      	beq.n	800d64c <HAL_TIM_Base_Start_IT+0x88>
 800d5fa:	4a1f      	ldr	r2, [pc, #124]	@ (800d678 <HAL_TIM_Base_Start_IT+0xb4>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d025      	beq.n	800d64c <HAL_TIM_Base_Start_IT+0x88>
 800d600:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d604:	4293      	cmp	r3, r2
 800d606:	d021      	beq.n	800d64c <HAL_TIM_Base_Start_IT+0x88>
 800d608:	4a1c      	ldr	r2, [pc, #112]	@ (800d67c <HAL_TIM_Base_Start_IT+0xb8>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d01e      	beq.n	800d64c <HAL_TIM_Base_Start_IT+0x88>
 800d60e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d612:	4293      	cmp	r3, r2
 800d614:	d01a      	beq.n	800d64c <HAL_TIM_Base_Start_IT+0x88>
 800d616:	4a1a      	ldr	r2, [pc, #104]	@ (800d680 <HAL_TIM_Base_Start_IT+0xbc>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d017      	beq.n	800d64c <HAL_TIM_Base_Start_IT+0x88>
 800d61c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d620:	4293      	cmp	r3, r2
 800d622:	d013      	beq.n	800d64c <HAL_TIM_Base_Start_IT+0x88>
 800d624:	4a17      	ldr	r2, [pc, #92]	@ (800d684 <HAL_TIM_Base_Start_IT+0xc0>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d010      	beq.n	800d64c <HAL_TIM_Base_Start_IT+0x88>
 800d62a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d62e:	4293      	cmp	r3, r2
 800d630:	d00c      	beq.n	800d64c <HAL_TIM_Base_Start_IT+0x88>
 800d632:	4a15      	ldr	r2, [pc, #84]	@ (800d688 <HAL_TIM_Base_Start_IT+0xc4>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d009      	beq.n	800d64c <HAL_TIM_Base_Start_IT+0x88>
 800d638:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d005      	beq.n	800d64c <HAL_TIM_Base_Start_IT+0x88>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	f042 0201 	orr.w	r2, r2, #1
 800d646:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d648:	2000      	movs	r0, #0
 800d64a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d64c:	6899      	ldr	r1, [r3, #8]
 800d64e:	4a0f      	ldr	r2, [pc, #60]	@ (800d68c <HAL_TIM_Base_Start_IT+0xc8>)
 800d650:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d652:	2a06      	cmp	r2, #6
 800d654:	d00a      	beq.n	800d66c <HAL_TIM_Base_Start_IT+0xa8>
 800d656:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800d65a:	d009      	beq.n	800d670 <HAL_TIM_Base_Start_IT+0xac>
      __HAL_TIM_ENABLE(htim);
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	f042 0201 	orr.w	r2, r2, #1
 800d662:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800d664:	2000      	movs	r0, #0
 800d666:	4770      	bx	lr
    return HAL_ERROR;
 800d668:	2001      	movs	r0, #1
 800d66a:	4770      	bx	lr
  return HAL_OK;
 800d66c:	2000      	movs	r0, #0
 800d66e:	4770      	bx	lr
 800d670:	2000      	movs	r0, #0
}
 800d672:	4770      	bx	lr
 800d674:	40012c00 	.word	0x40012c00
 800d678:	40000400 	.word	0x40000400
 800d67c:	40000800 	.word	0x40000800
 800d680:	40000c00 	.word	0x40000c00
 800d684:	40013400 	.word	0x40013400
 800d688:	40014000 	.word	0x40014000
 800d68c:	00010007 	.word	0x00010007

0800d690 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d690:	4770      	bx	lr

0800d692 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d692:	4770      	bx	lr

0800d694 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d694:	4770      	bx	lr

0800d696 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d696:	4770      	bx	lr

0800d698 <HAL_TIM_IRQHandler>:
{
 800d698:	b570      	push	{r4, r5, r6, lr}
 800d69a:	4605      	mov	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 800d69c:	6803      	ldr	r3, [r0, #0]
 800d69e:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d6a0:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d6a2:	f014 0f02 	tst.w	r4, #2
 800d6a6:	d010      	beq.n	800d6ca <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d6a8:	f016 0f02 	tst.w	r6, #2
 800d6ac:	d00d      	beq.n	800d6ca <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d6ae:	f06f 0202 	mvn.w	r2, #2
 800d6b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6b8:	6803      	ldr	r3, [r0, #0]
 800d6ba:	699b      	ldr	r3, [r3, #24]
 800d6bc:	f013 0f03 	tst.w	r3, #3
 800d6c0:	d07c      	beq.n	800d7bc <HAL_TIM_IRQHandler+0x124>
          HAL_TIM_IC_CaptureCallback(htim);
 800d6c2:	f7ff ffe6 	bl	800d692 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d6ca:	f014 0f04 	tst.w	r4, #4
 800d6ce:	d012      	beq.n	800d6f6 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d6d0:	f016 0f04 	tst.w	r6, #4
 800d6d4:	d00f      	beq.n	800d6f6 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d6d6:	682b      	ldr	r3, [r5, #0]
 800d6d8:	f06f 0204 	mvn.w	r2, #4
 800d6dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d6de:	2302      	movs	r3, #2
 800d6e0:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d6e2:	682b      	ldr	r3, [r5, #0]
 800d6e4:	699b      	ldr	r3, [r3, #24]
 800d6e6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800d6ea:	d06d      	beq.n	800d7c8 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 800d6ec:	4628      	mov	r0, r5
 800d6ee:	f7ff ffd0 	bl	800d692 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d6f6:	f014 0f08 	tst.w	r4, #8
 800d6fa:	d012      	beq.n	800d722 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d6fc:	f016 0f08 	tst.w	r6, #8
 800d700:	d00f      	beq.n	800d722 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d702:	682b      	ldr	r3, [r5, #0]
 800d704:	f06f 0208 	mvn.w	r2, #8
 800d708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d70a:	2304      	movs	r3, #4
 800d70c:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d70e:	682b      	ldr	r3, [r5, #0]
 800d710:	69db      	ldr	r3, [r3, #28]
 800d712:	f013 0f03 	tst.w	r3, #3
 800d716:	d05e      	beq.n	800d7d6 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 800d718:	4628      	mov	r0, r5
 800d71a:	f7ff ffba 	bl	800d692 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d71e:	2300      	movs	r3, #0
 800d720:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d722:	f014 0f10 	tst.w	r4, #16
 800d726:	d012      	beq.n	800d74e <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d728:	f016 0f10 	tst.w	r6, #16
 800d72c:	d00f      	beq.n	800d74e <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d72e:	682b      	ldr	r3, [r5, #0]
 800d730:	f06f 0210 	mvn.w	r2, #16
 800d734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d736:	2308      	movs	r3, #8
 800d738:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d73a:	682b      	ldr	r3, [r5, #0]
 800d73c:	69db      	ldr	r3, [r3, #28]
 800d73e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800d742:	d04f      	beq.n	800d7e4 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_IC_CaptureCallback(htim);
 800d744:	4628      	mov	r0, r5
 800d746:	f7ff ffa4 	bl	800d692 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d74a:	2300      	movs	r3, #0
 800d74c:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d74e:	f014 0f01 	tst.w	r4, #1
 800d752:	d002      	beq.n	800d75a <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d754:	f016 0f01 	tst.w	r6, #1
 800d758:	d14b      	bne.n	800d7f2 <HAL_TIM_IRQHandler+0x15a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d75a:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
 800d75e:	d002      	beq.n	800d766 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d760:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800d764:	d14d      	bne.n	800d802 <HAL_TIM_IRQHandler+0x16a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d766:	f414 7f80 	tst.w	r4, #256	@ 0x100
 800d76a:	d002      	beq.n	800d772 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d76c:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800d770:	d14f      	bne.n	800d812 <HAL_TIM_IRQHandler+0x17a>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d772:	f014 0f40 	tst.w	r4, #64	@ 0x40
 800d776:	d002      	beq.n	800d77e <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d778:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800d77c:	d151      	bne.n	800d822 <HAL_TIM_IRQHandler+0x18a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d77e:	f014 0f20 	tst.w	r4, #32
 800d782:	d002      	beq.n	800d78a <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d784:	f016 0f20 	tst.w	r6, #32
 800d788:	d153      	bne.n	800d832 <HAL_TIM_IRQHandler+0x19a>
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d78a:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
 800d78e:	d002      	beq.n	800d796 <HAL_TIM_IRQHandler+0xfe>
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d790:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800d794:	d155      	bne.n	800d842 <HAL_TIM_IRQHandler+0x1aa>
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d796:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
 800d79a:	d002      	beq.n	800d7a2 <HAL_TIM_IRQHandler+0x10a>
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d79c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 800d7a0:	d157      	bne.n	800d852 <HAL_TIM_IRQHandler+0x1ba>
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d7a2:	f414 0f80 	tst.w	r4, #4194304	@ 0x400000
 800d7a6:	d002      	beq.n	800d7ae <HAL_TIM_IRQHandler+0x116>
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d7a8:	f416 0f80 	tst.w	r6, #4194304	@ 0x400000
 800d7ac:	d159      	bne.n	800d862 <HAL_TIM_IRQHandler+0x1ca>
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d7ae:	f414 0f00 	tst.w	r4, #8388608	@ 0x800000
 800d7b2:	d002      	beq.n	800d7ba <HAL_TIM_IRQHandler+0x122>
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d7b4:	f416 0f00 	tst.w	r6, #8388608	@ 0x800000
 800d7b8:	d15b      	bne.n	800d872 <HAL_TIM_IRQHandler+0x1da>
}
 800d7ba:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7bc:	f7ff ff68 	bl	800d690 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7c0:	4628      	mov	r0, r5
 800d7c2:	f7ff ff67 	bl	800d694 <HAL_TIM_PWM_PulseFinishedCallback>
 800d7c6:	e77e      	b.n	800d6c6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	f7ff ff61 	bl	800d690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	f7ff ff60 	bl	800d694 <HAL_TIM_PWM_PulseFinishedCallback>
 800d7d4:	e78d      	b.n	800d6f2 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	f7ff ff5a 	bl	800d690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7dc:	4628      	mov	r0, r5
 800d7de:	f7ff ff59 	bl	800d694 <HAL_TIM_PWM_PulseFinishedCallback>
 800d7e2:	e79c      	b.n	800d71e <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	f7ff ff53 	bl	800d690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	f7ff ff52 	bl	800d694 <HAL_TIM_PWM_PulseFinishedCallback>
 800d7f0:	e7ab      	b.n	800d74a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d7f2:	682b      	ldr	r3, [r5, #0]
 800d7f4:	f06f 0201 	mvn.w	r2, #1
 800d7f8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800d7fa:	4628      	mov	r0, r5
 800d7fc:	f7f5 fcc2 	bl	8003184 <HAL_TIM_PeriodElapsedCallback>
 800d800:	e7ab      	b.n	800d75a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d802:	682b      	ldr	r3, [r5, #0]
 800d804:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d808:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800d80a:	4628      	mov	r0, r5
 800d80c:	f000 f91d 	bl	800da4a <HAL_TIMEx_BreakCallback>
 800d810:	e7a9      	b.n	800d766 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d812:	682b      	ldr	r3, [r5, #0]
 800d814:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d818:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800d81a:	4628      	mov	r0, r5
 800d81c:	f000 f916 	bl	800da4c <HAL_TIMEx_Break2Callback>
 800d820:	e7a7      	b.n	800d772 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d822:	682b      	ldr	r3, [r5, #0]
 800d824:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d828:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800d82a:	4628      	mov	r0, r5
 800d82c:	f7ff ff33 	bl	800d696 <HAL_TIM_TriggerCallback>
 800d830:	e7a5      	b.n	800d77e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d832:	682b      	ldr	r3, [r5, #0]
 800d834:	f06f 0220 	mvn.w	r2, #32
 800d838:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800d83a:	4628      	mov	r0, r5
 800d83c:	f000 f904 	bl	800da48 <HAL_TIMEx_CommutCallback>
 800d840:	e7a3      	b.n	800d78a <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800d842:	682b      	ldr	r3, [r5, #0]
 800d844:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800d848:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d84a:	4628      	mov	r0, r5
 800d84c:	f000 f8ff 	bl	800da4e <HAL_TIMEx_EncoderIndexCallback>
 800d850:	e7a1      	b.n	800d796 <HAL_TIM_IRQHandler+0xfe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800d852:	682b      	ldr	r3, [r5, #0]
 800d854:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800d858:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d85a:	4628      	mov	r0, r5
 800d85c:	f000 f8f8 	bl	800da50 <HAL_TIMEx_DirectionChangeCallback>
 800d860:	e79f      	b.n	800d7a2 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800d862:	682b      	ldr	r3, [r5, #0]
 800d864:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800d868:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 800d86a:	4628      	mov	r0, r5
 800d86c:	f000 f8f1 	bl	800da52 <HAL_TIMEx_IndexErrorCallback>
 800d870:	e79d      	b.n	800d7ae <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800d872:	682b      	ldr	r3, [r5, #0]
 800d874:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800d878:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d87a:	4628      	mov	r0, r5
 800d87c:	f000 f8ea 	bl	800da54 <HAL_TIMEx_TransitionErrorCallback>
}
 800d880:	e79b      	b.n	800d7ba <HAL_TIM_IRQHandler+0x122>
	...

0800d884 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d884:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d886:	4a50      	ldr	r2, [pc, #320]	@ (800d9c8 <TIM_Base_SetConfig+0x144>)
 800d888:	4290      	cmp	r0, r2
 800d88a:	d025      	beq.n	800d8d8 <TIM_Base_SetConfig+0x54>
 800d88c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d890:	4290      	cmp	r0, r2
 800d892:	d021      	beq.n	800d8d8 <TIM_Base_SetConfig+0x54>
 800d894:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800d898:	d01e      	beq.n	800d8d8 <TIM_Base_SetConfig+0x54>
 800d89a:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
 800d89e:	d01b      	beq.n	800d8d8 <TIM_Base_SetConfig+0x54>
 800d8a0:	4a4a      	ldr	r2, [pc, #296]	@ (800d9cc <TIM_Base_SetConfig+0x148>)
 800d8a2:	4290      	cmp	r0, r2
 800d8a4:	d018      	beq.n	800d8d8 <TIM_Base_SetConfig+0x54>
 800d8a6:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d8aa:	4290      	cmp	r0, r2
 800d8ac:	d014      	beq.n	800d8d8 <TIM_Base_SetConfig+0x54>
 800d8ae:	4a48      	ldr	r2, [pc, #288]	@ (800d9d0 <TIM_Base_SetConfig+0x14c>)
 800d8b0:	4290      	cmp	r0, r2
 800d8b2:	d011      	beq.n	800d8d8 <TIM_Base_SetConfig+0x54>
 800d8b4:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d8b8:	4290      	cmp	r0, r2
 800d8ba:	d00d      	beq.n	800d8d8 <TIM_Base_SetConfig+0x54>
 800d8bc:	4a45      	ldr	r2, [pc, #276]	@ (800d9d4 <TIM_Base_SetConfig+0x150>)
 800d8be:	4290      	cmp	r0, r2
 800d8c0:	d00a      	beq.n	800d8d8 <TIM_Base_SetConfig+0x54>
 800d8c2:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d8c6:	4290      	cmp	r0, r2
 800d8c8:	d006      	beq.n	800d8d8 <TIM_Base_SetConfig+0x54>
 800d8ca:	4a43      	ldr	r2, [pc, #268]	@ (800d9d8 <TIM_Base_SetConfig+0x154>)
 800d8cc:	4290      	cmp	r0, r2
 800d8ce:	d003      	beq.n	800d8d8 <TIM_Base_SetConfig+0x54>
 800d8d0:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d8d4:	4290      	cmp	r0, r2
 800d8d6:	d103      	bne.n	800d8e0 <TIM_Base_SetConfig+0x5c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d8d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800d8dc:	684a      	ldr	r2, [r1, #4]
 800d8de:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d8e0:	4a39      	ldr	r2, [pc, #228]	@ (800d9c8 <TIM_Base_SetConfig+0x144>)
 800d8e2:	4290      	cmp	r0, r2
 800d8e4:	d03a      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d8e6:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d8ea:	4290      	cmp	r0, r2
 800d8ec:	d036      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d8ee:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800d8f2:	d033      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d8f4:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
 800d8f8:	d030      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d8fa:	4a34      	ldr	r2, [pc, #208]	@ (800d9cc <TIM_Base_SetConfig+0x148>)
 800d8fc:	4290      	cmp	r0, r2
 800d8fe:	d02d      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d900:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d904:	4290      	cmp	r0, r2
 800d906:	d029      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d908:	4a31      	ldr	r2, [pc, #196]	@ (800d9d0 <TIM_Base_SetConfig+0x14c>)
 800d90a:	4290      	cmp	r0, r2
 800d90c:	d026      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d90e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d912:	4290      	cmp	r0, r2
 800d914:	d022      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d916:	4a2f      	ldr	r2, [pc, #188]	@ (800d9d4 <TIM_Base_SetConfig+0x150>)
 800d918:	4290      	cmp	r0, r2
 800d91a:	d01f      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d91c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d920:	4290      	cmp	r0, r2
 800d922:	d01b      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d924:	4a2c      	ldr	r2, [pc, #176]	@ (800d9d8 <TIM_Base_SetConfig+0x154>)
 800d926:	4290      	cmp	r0, r2
 800d928:	d018      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d92a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d92e:	4290      	cmp	r0, r2
 800d930:	d014      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d932:	4a2a      	ldr	r2, [pc, #168]	@ (800d9dc <TIM_Base_SetConfig+0x158>)
 800d934:	4290      	cmp	r0, r2
 800d936:	d011      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d938:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d93c:	4290      	cmp	r0, r2
 800d93e:	d00d      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d940:	4a27      	ldr	r2, [pc, #156]	@ (800d9e0 <TIM_Base_SetConfig+0x15c>)
 800d942:	4290      	cmp	r0, r2
 800d944:	d00a      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d946:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d94a:	4290      	cmp	r0, r2
 800d94c:	d006      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d94e:	4a25      	ldr	r2, [pc, #148]	@ (800d9e4 <TIM_Base_SetConfig+0x160>)
 800d950:	4290      	cmp	r0, r2
 800d952:	d003      	beq.n	800d95c <TIM_Base_SetConfig+0xd8>
 800d954:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800d958:	4290      	cmp	r0, r2
 800d95a:	d103      	bne.n	800d964 <TIM_Base_SetConfig+0xe0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d95c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d960:	68ca      	ldr	r2, [r1, #12]
 800d962:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d964:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d968:	694a      	ldr	r2, [r1, #20]
 800d96a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800d96c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d96e:	688b      	ldr	r3, [r1, #8]
 800d970:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d972:	680b      	ldr	r3, [r1, #0]
 800d974:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d976:	4b14      	ldr	r3, [pc, #80]	@ (800d9c8 <TIM_Base_SetConfig+0x144>)
 800d978:	4298      	cmp	r0, r3
 800d97a:	d01f      	beq.n	800d9bc <TIM_Base_SetConfig+0x138>
 800d97c:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 800d980:	4298      	cmp	r0, r3
 800d982:	d01b      	beq.n	800d9bc <TIM_Base_SetConfig+0x138>
 800d984:	4b14      	ldr	r3, [pc, #80]	@ (800d9d8 <TIM_Base_SetConfig+0x154>)
 800d986:	4298      	cmp	r0, r3
 800d988:	d018      	beq.n	800d9bc <TIM_Base_SetConfig+0x138>
 800d98a:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 800d98e:	4298      	cmp	r0, r3
 800d990:	d014      	beq.n	800d9bc <TIM_Base_SetConfig+0x138>
 800d992:	4b12      	ldr	r3, [pc, #72]	@ (800d9dc <TIM_Base_SetConfig+0x158>)
 800d994:	4298      	cmp	r0, r3
 800d996:	d011      	beq.n	800d9bc <TIM_Base_SetConfig+0x138>
 800d998:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 800d99c:	4298      	cmp	r0, r3
 800d99e:	d00d      	beq.n	800d9bc <TIM_Base_SetConfig+0x138>
 800d9a0:	4b0f      	ldr	r3, [pc, #60]	@ (800d9e0 <TIM_Base_SetConfig+0x15c>)
 800d9a2:	4298      	cmp	r0, r3
 800d9a4:	d00a      	beq.n	800d9bc <TIM_Base_SetConfig+0x138>
 800d9a6:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 800d9aa:	4298      	cmp	r0, r3
 800d9ac:	d006      	beq.n	800d9bc <TIM_Base_SetConfig+0x138>
 800d9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d9e4 <TIM_Base_SetConfig+0x160>)
 800d9b0:	4298      	cmp	r0, r3
 800d9b2:	d003      	beq.n	800d9bc <TIM_Base_SetConfig+0x138>
 800d9b4:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 800d9b8:	4298      	cmp	r0, r3
 800d9ba:	d101      	bne.n	800d9c0 <TIM_Base_SetConfig+0x13c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d9bc:	690b      	ldr	r3, [r1, #16]
 800d9be:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	6143      	str	r3, [r0, #20]
}
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop
 800d9c8:	40012c00 	.word	0x40012c00
 800d9cc:	40000400 	.word	0x40000400
 800d9d0:	40000800 	.word	0x40000800
 800d9d4:	40000c00 	.word	0x40000c00
 800d9d8:	40013400 	.word	0x40013400
 800d9dc:	40014000 	.word	0x40014000
 800d9e0:	40014400 	.word	0x40014400
 800d9e4:	40014800 	.word	0x40014800

0800d9e8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800d9e8:	b360      	cbz	r0, 800da44 <HAL_TIM_Base_Init+0x5c>
{
 800d9ea:	b510      	push	{r4, lr}
 800d9ec:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800d9ee:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800d9f2:	b313      	cbz	r3, 800da3a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	f851 0b04 	ldr.w	r0, [r1], #4
 800da00:	f7ff ff40 	bl	800d884 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da04:	2301      	movs	r3, #1
 800da06:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da0a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800da0e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800da12:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800da16:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800da1a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800da1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da22:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800da26:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800da2a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800da2e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800da32:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800da36:	2000      	movs	r0, #0
}
 800da38:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800da3a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800da3e:	f7ff fdc0 	bl	800d5c2 <HAL_TIM_Base_MspInit>
 800da42:	e7d7      	b.n	800d9f4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800da44:	2001      	movs	r0, #1
}
 800da46:	4770      	bx	lr

0800da48 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da48:	4770      	bx	lr

0800da4a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da4a:	4770      	bx	lr

0800da4c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800da4c:	4770      	bx	lr

0800da4e <HAL_TIMEx_EncoderIndexCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800da4e:	4770      	bx	lr

0800da50 <HAL_TIMEx_DirectionChangeCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800da50:	4770      	bx	lr

0800da52 <HAL_TIMEx_IndexErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800da52:	4770      	bx	lr

0800da54 <HAL_TIMEx_TransitionErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800da54:	4770      	bx	lr

0800da56 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800da56:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da58:	e852 3f00 	ldrex	r3, [r2]
 800da5c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da60:	e842 3100 	strex	r1, r3, [r2]
 800da64:	2900      	cmp	r1, #0
 800da66:	d1f6      	bne.n	800da56 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800da68:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da6a:	f102 0308 	add.w	r3, r2, #8
 800da6e:	e853 3f00 	ldrex	r3, [r3]
 800da72:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da76:	3208      	adds	r2, #8
 800da78:	e842 3100 	strex	r1, r3, [r2]
 800da7c:	2900      	cmp	r1, #0
 800da7e:	d1f3      	bne.n	800da68 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da80:	2320      	movs	r3, #32
 800da82:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 800da86:	4770      	bx	lr

0800da88 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da88:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8a:	e852 3f00 	ldrex	r3, [r2]
 800da8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da92:	e842 3100 	strex	r1, r3, [r2]
 800da96:	2900      	cmp	r1, #0
 800da98:	d1f6      	bne.n	800da88 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da9a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da9c:	f102 0308 	add.w	r3, r2, #8
 800daa0:	e853 3f00 	ldrex	r3, [r3]
 800daa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800daa8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daac:	3208      	adds	r2, #8
 800daae:	e842 3100 	strex	r1, r3, [r2]
 800dab2:	2900      	cmp	r1, #0
 800dab4:	d1f1      	bne.n	800da9a <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dab6:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d006      	beq.n	800daca <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dabc:	2320      	movs	r3, #32
 800dabe:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dac2:	2300      	movs	r3, #0
 800dac4:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dac6:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800dac8:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800daca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dacc:	e852 3f00 	ldrex	r3, [r2]
 800dad0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dad4:	e842 3100 	strex	r1, r3, [r2]
 800dad8:	2900      	cmp	r1, #0
 800dada:	d1f6      	bne.n	800daca <UART_EndRxTransfer+0x42>
 800dadc:	e7ee      	b.n	800dabc <UART_EndRxTransfer+0x34>

0800dade <HAL_UART_DeInit>:
  if (huart == NULL)
 800dade:	b1f0      	cbz	r0, 800db1e <HAL_UART_DeInit+0x40>
{
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	4605      	mov	r5, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800dae4:	2324      	movs	r3, #36	@ 0x24
 800dae6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800daea:	6802      	ldr	r2, [r0, #0]
 800daec:	6813      	ldr	r3, [r2, #0]
 800daee:	f023 0301 	bic.w	r3, r3, #1
 800daf2:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 800daf4:	6803      	ldr	r3, [r0, #0]
 800daf6:	2400      	movs	r4, #0
 800daf8:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800dafa:	6803      	ldr	r3, [r0, #0]
 800dafc:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800dafe:	6803      	ldr	r3, [r0, #0]
 800db00:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800db02:	f7f5 ffe7 	bl	8003ad4 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db06:	f8c5 4090 	str.w	r4, [r5, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800db0a:	f8c5 4088 	str.w	r4, [r5, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800db0e:	f8c5 408c 	str.w	r4, [r5, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db12:	66ec      	str	r4, [r5, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db14:	672c      	str	r4, [r5, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 800db16:	f885 4084 	strb.w	r4, [r5, #132]	@ 0x84
  return HAL_OK;
 800db1a:	4620      	mov	r0, r4
}
 800db1c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800db1e:	2001      	movs	r0, #1
}
 800db20:	4770      	bx	lr
	...

0800db24 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 800db24:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800db28:	2b20      	cmp	r3, #32
 800db2a:	d162      	bne.n	800dbf2 <HAL_UART_Transmit_DMA+0xce>
{
 800db2c:	b510      	push	{r4, lr}
 800db2e:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800db30:	2900      	cmp	r1, #0
 800db32:	d060      	beq.n	800dbf6 <HAL_UART_Transmit_DMA+0xd2>
 800db34:	2a00      	cmp	r2, #0
 800db36:	d060      	beq.n	800dbfa <HAL_UART_Transmit_DMA+0xd6>
    huart->pTxBuffPtr  = pData;
 800db38:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800db3a:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 800db3e:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db42:	2300      	movs	r3, #0
 800db44:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db48:	2321      	movs	r3, #33	@ 0x21
 800db4a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 800db4e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800db50:	2b00      	cmp	r3, #0
 800db52:	d03d      	beq.n	800dbd0 <HAL_UART_Transmit_DMA+0xac>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800db54:	492a      	ldr	r1, [pc, #168]	@ (800dc00 <HAL_UART_Transmit_DMA+0xdc>)
 800db56:	6619      	str	r1, [r3, #96]	@ 0x60
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800db58:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800db5a:	492a      	ldr	r1, [pc, #168]	@ (800dc04 <HAL_UART_Transmit_DMA+0xe0>)
 800db5c:	6659      	str	r1, [r3, #100]	@ 0x64
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800db5e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800db60:	4929      	ldr	r1, [pc, #164]	@ (800dc08 <HAL_UART_Transmit_DMA+0xe4>)
 800db62:	6699      	str	r1, [r3, #104]	@ 0x68
      huart->hdmatx->XferAbortCallback = NULL;
 800db64:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800db66:	2100      	movs	r1, #0
 800db68:	66d9      	str	r1, [r3, #108]	@ 0x6c
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db6a:	6883      	ldr	r3, [r0, #8]
 800db6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db70:	d020      	beq.n	800dbb4 <HAL_UART_Transmit_DMA+0x90>
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800db72:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800db74:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800db76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db7a:	d021      	beq.n	800dbc0 <HAL_UART_Transmit_DMA+0x9c>
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 800db7c:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800db7e:	b18b      	cbz	r3, 800dba4 <HAL_UART_Transmit_DMA+0x80>
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	b17b      	cbz	r3, 800dba4 <HAL_UART_Transmit_DMA+0x80>
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800db84:	609a      	str	r2, [r3, #8]
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 800db86:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800db88:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800db8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	60da      	str	r2, [r3, #12]
            (uint32_t)&huart->Instance->TDR;
 800db90:	6823      	ldr	r3, [r4, #0]
 800db92:	3328      	adds	r3, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800db94:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800db96:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800db98:	6812      	ldr	r2, [r2, #0]
 800db9a:	6113      	str	r3, [r2, #16]
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 800db9c:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800db9e:	f7f8 ffe8 	bl	8006b72 <HAL_DMAEx_List_Start_IT>
      if (status != HAL_OK)
 800dba2:	b1a8      	cbz	r0, 800dbd0 <HAL_UART_Transmit_DMA+0xac>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dba4:	2310      	movs	r3, #16
 800dba6:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 800dbaa:	2320      	movs	r3, #32
 800dbac:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_ERROR;
 800dbb0:	2001      	movs	r0, #1
}
 800dbb2:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbb4:	6903      	ldr	r3, [r0, #16]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1db      	bne.n	800db72 <HAL_UART_Transmit_DMA+0x4e>
        nbByte = Size * 2U;
 800dbba:	0052      	lsls	r2, r2, #1
 800dbbc:	b292      	uxth	r2, r2
 800dbbe:	e7d8      	b.n	800db72 <HAL_UART_Transmit_DMA+0x4e>
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 800dbc0:	6821      	ldr	r1, [r4, #0]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	f101 0228 	add.w	r2, r1, #40	@ 0x28
 800dbc8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800dbca:	f7f8 fb83 	bl	80062d4 <HAL_DMA_Start_IT>
 800dbce:	e7e8      	b.n	800dba2 <HAL_UART_Transmit_DMA+0x7e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800dbd0:	6823      	ldr	r3, [r4, #0]
 800dbd2:	2240      	movs	r2, #64	@ 0x40
 800dbd4:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dbd6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd8:	f102 0308 	add.w	r3, r2, #8
 800dbdc:	e853 3f00 	ldrex	r3, [r3]
 800dbe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe4:	3208      	adds	r2, #8
 800dbe6:	e842 3100 	strex	r1, r3, [r2]
 800dbea:	2900      	cmp	r1, #0
 800dbec:	d1f3      	bne.n	800dbd6 <HAL_UART_Transmit_DMA+0xb2>
    return HAL_OK;
 800dbee:	2000      	movs	r0, #0
 800dbf0:	e7df      	b.n	800dbb2 <HAL_UART_Transmit_DMA+0x8e>
    return HAL_BUSY;
 800dbf2:	2002      	movs	r0, #2
}
 800dbf4:	4770      	bx	lr
      return HAL_ERROR;
 800dbf6:	2001      	movs	r0, #1
 800dbf8:	e7db      	b.n	800dbb2 <HAL_UART_Transmit_DMA+0x8e>
 800dbfa:	2001      	movs	r0, #1
 800dbfc:	e7d9      	b.n	800dbb2 <HAL_UART_Transmit_DMA+0x8e>
 800dbfe:	bf00      	nop
 800dc00:	0800dc0d 	.word	0x0800dc0d
 800dc04:	0800dc77 	.word	0x0800dc77
 800dc08:	0800dc81 	.word	0x0800dc81

0800dc0c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dc0c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc0e:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800dc10:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800dc12:	2b81      	cmp	r3, #129	@ 0x81
 800dc14:	d018      	beq.n	800dc48 <UART_DMATransmitCplt+0x3c>
  {
    huart->TxXferCount = 0U;
 800dc16:	2300      	movs	r3, #0
 800dc18:	f8a1 3056 	strh.w	r3, [r1, #86]	@ 0x56

#if !defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dc1c:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc1e:	f102 0308 	add.w	r3, r2, #8
 800dc22:	e853 3f00 	ldrex	r3, [r3]
 800dc26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc2a:	3208      	adds	r2, #8
 800dc2c:	e842 3000 	strex	r0, r3, [r2]
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d1f3      	bne.n	800dc1c <UART_DMATransmitCplt+0x10>

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc34:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc36:	e852 3f00 	ldrex	r3, [r2]
 800dc3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3e:	e842 3000 	strex	r0, r3, [r2]
 800dc42:	2800      	cmp	r0, #0
 800dc44:	d1f6      	bne.n	800dc34 <UART_DMATransmitCplt+0x28>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dc46:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800dc48:	4608      	mov	r0, r1
 800dc4a:	f007 fb1d 	bl	8015288 <HAL_UART_TxCpltCallback>
}
 800dc4e:	e7fa      	b.n	800dc46 <UART_DMATransmitCplt+0x3a>

0800dc50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc50:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc52:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc54:	e852 3f00 	ldrex	r3, [r2]
 800dc58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc5c:	e842 3100 	strex	r1, r3, [r2]
 800dc60:	2900      	cmp	r1, #0
 800dc62:	d1f6      	bne.n	800dc52 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc64:	2320      	movs	r3, #32
 800dc66:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc6e:	f007 fb0b 	bl	8015288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc72:	bd08      	pop	{r3, pc}

0800dc74 <HAL_UART_TxHalfCpltCallback>:
}
 800dc74:	4770      	bx	lr

0800dc76 <UART_DMATxHalfCplt>:
{
 800dc76:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800dc78:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 800dc7a:	f7ff fffb 	bl	800dc74 <HAL_UART_TxHalfCpltCallback>
}
 800dc7e:	bd08      	pop	{r3, pc}

0800dc80 <UART_DMAError>:
{
 800dc80:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc82:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dc84:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dc88:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dc8c:	6823      	ldr	r3, [r4, #0]
 800dc8e:	689b      	ldr	r3, [r3, #8]
 800dc90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc94:	d001      	beq.n	800dc9a <UART_DMAError+0x1a>
 800dc96:	2a21      	cmp	r2, #33	@ 0x21
 800dc98:	d010      	beq.n	800dcbc <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dc9a:	6823      	ldr	r3, [r4, #0]
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800dca2:	d001      	beq.n	800dca8 <UART_DMAError+0x28>
 800dca4:	2d22      	cmp	r5, #34	@ 0x22
 800dca6:	d010      	beq.n	800dcca <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dca8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800dcac:	f043 0310 	orr.w	r3, r3, #16
 800dcb0:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  HAL_UART_ErrorCallback(huart);
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f007 fb23 	bl	8015300 <HAL_UART_ErrorCallback>
}
 800dcba:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	f7ff fec7 	bl	800da56 <UART_EndTxTransfer>
 800dcc8:	e7e7      	b.n	800dc9a <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800dcca:	2300      	movs	r3, #0
 800dccc:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f7ff fed9 	bl	800da88 <UART_EndRxTransfer>
 800dcd6:	e7e7      	b.n	800dca8 <UART_DMAError+0x28>

0800dcd8 <UART_DMAAbortOnError>:
{
 800dcd8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcda:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  huart->RxXferCount = 0U;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800dce2:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 800dce6:	f007 fb0b 	bl	8015300 <HAL_UART_ErrorCallback>
}
 800dcea:	bd08      	pop	{r3, pc}

0800dcec <HAL_UARTEx_RxEventCallback>:
}
 800dcec:	4770      	bx	lr
	...

0800dcf0 <HAL_UART_IRQHandler>:
{
 800dcf0:	b570      	push	{r4, r5, r6, lr}
 800dcf2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dcf4:	6802      	ldr	r2, [r0, #0]
 800dcf6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dcf8:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dcfa:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 800dcfc:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 800dd00:	ea13 0f0c 	tst.w	r3, ip
 800dd04:	d10d      	bne.n	800dd22 <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dd06:	f013 0f20 	tst.w	r3, #32
 800dd0a:	d010      	beq.n	800dd2e <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dd0c:	f011 0f20 	tst.w	r1, #32
 800dd10:	d102      	bne.n	800dd18 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dd12:	f010 5f80 	tst.w	r0, #268435456	@ 0x10000000
 800dd16:	d00a      	beq.n	800dd2e <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 800dd18:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800dd1a:	b35b      	cbz	r3, 800dd74 <HAL_UART_IRQHandler+0x84>
        huart->RxISR(huart);
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	4798      	blx	r3
      return;
 800dd20:	e028      	b.n	800dd74 <HAL_UART_IRQHandler+0x84>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dd22:	4db3      	ldr	r5, [pc, #716]	@ (800dff0 <HAL_UART_IRQHandler+0x300>)
 800dd24:	4005      	ands	r5, r0
 800dd26:	d126      	bne.n	800dd76 <HAL_UART_IRQHandler+0x86>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dd28:	4eb2      	ldr	r6, [pc, #712]	@ (800dff4 <HAL_UART_IRQHandler+0x304>)
 800dd2a:	4231      	tst	r1, r6
 800dd2c:	d123      	bne.n	800dd76 <HAL_UART_IRQHandler+0x86>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd2e:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 800dd30:	2d01      	cmp	r5, #1
 800dd32:	f000 80b9 	beq.w	800dea8 <HAL_UART_IRQHandler+0x1b8>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dd36:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd3a:	d007      	beq.n	800dd4c <HAL_UART_IRQHandler+0x5c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dd3c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800dd40:	f040 814f 	bne.w	800dfe2 <HAL_UART_IRQHandler+0x2f2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dd44:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 800dd48:	f040 814b 	bne.w	800dfe2 <HAL_UART_IRQHandler+0x2f2>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dd4c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800dd50:	d003      	beq.n	800dd5a <HAL_UART_IRQHandler+0x6a>
 800dd52:	f011 0f40 	tst.w	r1, #64	@ 0x40
 800dd56:	f040 8151 	bne.w	800dffc <HAL_UART_IRQHandler+0x30c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dd5a:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800dd5e:	d003      	beq.n	800dd68 <HAL_UART_IRQHandler+0x78>
 800dd60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800dd64:	f040 814e 	bne.w	800e004 <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dd68:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800dd6c:	d002      	beq.n	800dd74 <HAL_UART_IRQHandler+0x84>
 800dd6e:	2900      	cmp	r1, #0
 800dd70:	f2c0 814c 	blt.w	800e00c <HAL_UART_IRQHandler+0x31c>
}
 800dd74:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd76:	f013 0f01 	tst.w	r3, #1
 800dd7a:	d009      	beq.n	800dd90 <HAL_UART_IRQHandler+0xa0>
 800dd7c:	f411 7f80 	tst.w	r1, #256	@ 0x100
 800dd80:	d006      	beq.n	800dd90 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dd82:	2601      	movs	r6, #1
 800dd84:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd86:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800dd8a:	4332      	orrs	r2, r6
 800dd8c:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd90:	f013 0f02 	tst.w	r3, #2
 800dd94:	d00b      	beq.n	800ddae <HAL_UART_IRQHandler+0xbe>
 800dd96:	f010 0f01 	tst.w	r0, #1
 800dd9a:	d008      	beq.n	800ddae <HAL_UART_IRQHandler+0xbe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dd9c:	6822      	ldr	r2, [r4, #0]
 800dd9e:	2602      	movs	r6, #2
 800dda0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dda2:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800dda6:	f042 0204 	orr.w	r2, r2, #4
 800ddaa:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddae:	f013 0f04 	tst.w	r3, #4
 800ddb2:	d00b      	beq.n	800ddcc <HAL_UART_IRQHandler+0xdc>
 800ddb4:	f010 0f01 	tst.w	r0, #1
 800ddb8:	d008      	beq.n	800ddcc <HAL_UART_IRQHandler+0xdc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ddba:	6822      	ldr	r2, [r4, #0]
 800ddbc:	2604      	movs	r6, #4
 800ddbe:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ddc0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800ddc4:	f042 0202 	orr.w	r2, r2, #2
 800ddc8:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ddcc:	f013 0f08 	tst.w	r3, #8
 800ddd0:	d00b      	beq.n	800ddea <HAL_UART_IRQHandler+0xfa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ddd2:	f011 0f20 	tst.w	r1, #32
 800ddd6:	d100      	bne.n	800ddda <HAL_UART_IRQHandler+0xea>
 800ddd8:	b13d      	cbz	r5, 800ddea <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ddda:	6822      	ldr	r2, [r4, #0]
 800dddc:	2508      	movs	r5, #8
 800ddde:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dde0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800dde4:	432a      	orrs	r2, r5
 800dde6:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ddea:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800ddee:	d00c      	beq.n	800de0a <HAL_UART_IRQHandler+0x11a>
 800ddf0:	f011 6f80 	tst.w	r1, #67108864	@ 0x4000000
 800ddf4:	d009      	beq.n	800de0a <HAL_UART_IRQHandler+0x11a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ddf6:	6822      	ldr	r2, [r4, #0]
 800ddf8:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800ddfc:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ddfe:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800de02:	f042 0220 	orr.w	r2, r2, #32
 800de06:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de0a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800de0e:	2a00      	cmp	r2, #0
 800de10:	d0b0      	beq.n	800dd74 <HAL_UART_IRQHandler+0x84>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800de12:	f013 0f20 	tst.w	r3, #32
 800de16:	d009      	beq.n	800de2c <HAL_UART_IRQHandler+0x13c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800de18:	f011 0f20 	tst.w	r1, #32
 800de1c:	d102      	bne.n	800de24 <HAL_UART_IRQHandler+0x134>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800de1e:	f010 5f80 	tst.w	r0, #268435456	@ 0x10000000
 800de22:	d003      	beq.n	800de2c <HAL_UART_IRQHandler+0x13c>
        if (huart->RxISR != NULL)
 800de24:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800de26:	b10b      	cbz	r3, 800de2c <HAL_UART_IRQHandler+0x13c>
          huart->RxISR(huart);
 800de28:	4620      	mov	r0, r4
 800de2a:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800de2c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800de30:	6823      	ldr	r3, [r4, #0]
 800de32:	689b      	ldr	r3, [r3, #8]
 800de34:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800de38:	d102      	bne.n	800de40 <HAL_UART_IRQHandler+0x150>
 800de3a:	f012 0f28 	tst.w	r2, #40	@ 0x28
 800de3e:	d02c      	beq.n	800de9a <HAL_UART_IRQHandler+0x1aa>
        UART_EndRxTransfer(huart);
 800de40:	4620      	mov	r0, r4
 800de42:	f7ff fe21 	bl	800da88 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de46:	6823      	ldr	r3, [r4, #0]
 800de48:	689b      	ldr	r3, [r3, #8]
 800de4a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800de4e:	d020      	beq.n	800de92 <HAL_UART_IRQHandler+0x1a2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de50:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de52:	f102 0308 	add.w	r3, r2, #8
 800de56:	e853 3f00 	ldrex	r3, [r3]
 800de5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de5e:	3208      	adds	r2, #8
 800de60:	e842 3100 	strex	r1, r3, [r2]
 800de64:	2900      	cmp	r1, #0
 800de66:	d1f3      	bne.n	800de50 <HAL_UART_IRQHandler+0x160>
          if (huart->hdmarx != NULL)
 800de68:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800de6c:	b16b      	cbz	r3, 800de8a <HAL_UART_IRQHandler+0x19a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800de6e:	4a62      	ldr	r2, [pc, #392]	@ (800dff8 <HAL_UART_IRQHandler+0x308>)
 800de70:	66da      	str	r2, [r3, #108]	@ 0x6c
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800de72:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800de76:	f7f8 fac0 	bl	80063fa <HAL_DMA_Abort_IT>
 800de7a:	2800      	cmp	r0, #0
 800de7c:	f43f af7a 	beq.w	800dd74 <HAL_UART_IRQHandler+0x84>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de80:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800de84:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800de86:	4798      	blx	r3
 800de88:	e774      	b.n	800dd74 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 800de8a:	4620      	mov	r0, r4
 800de8c:	f007 fa38 	bl	8015300 <HAL_UART_ErrorCallback>
 800de90:	e770      	b.n	800dd74 <HAL_UART_IRQHandler+0x84>
          HAL_UART_ErrorCallback(huart);
 800de92:	4620      	mov	r0, r4
 800de94:	f007 fa34 	bl	8015300 <HAL_UART_ErrorCallback>
 800de98:	e76c      	b.n	800dd74 <HAL_UART_IRQHandler+0x84>
        HAL_UART_ErrorCallback(huart);
 800de9a:	4620      	mov	r0, r4
 800de9c:	f007 fa30 	bl	8015300 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dea0:	2300      	movs	r3, #0
 800dea2:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 800dea6:	e765      	b.n	800dd74 <HAL_UART_IRQHandler+0x84>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dea8:	f013 0f10 	tst.w	r3, #16
 800deac:	f43f af43 	beq.w	800dd36 <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800deb0:	f011 0f10 	tst.w	r1, #16
 800deb4:	f43f af3f 	beq.w	800dd36 <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800deb8:	2310      	movs	r3, #16
 800deba:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800debc:	6823      	ldr	r3, [r4, #0]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800dec4:	d051      	beq.n	800df6a <HAL_UART_IRQHandler+0x27a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dec6:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800deca:	6813      	ldr	r3, [r2, #0]
 800decc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dece:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	f43f af4f 	beq.w	800dd74 <HAL_UART_IRQHandler+0x84>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ded6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800deda:	4299      	cmp	r1, r3
 800dedc:	f67f af4a 	bls.w	800dd74 <HAL_UART_IRQHandler+0x84>
        huart->RxXferCount = nb_remaining_rx_data;
 800dee0:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800dee4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800dee6:	2b81      	cmp	r3, #129	@ 0x81
 800dee8:	d032      	beq.n	800df50 <HAL_UART_IRQHandler+0x260>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800deea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deec:	e852 3f00 	ldrex	r3, [r2]
 800def0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def4:	e842 3100 	strex	r1, r3, [r2]
 800def8:	2900      	cmp	r1, #0
 800defa:	d1f6      	bne.n	800deea <HAL_UART_IRQHandler+0x1fa>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800defc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defe:	f102 0308 	add.w	r3, r2, #8
 800df02:	e853 3f00 	ldrex	r3, [r3]
 800df06:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df0a:	3208      	adds	r2, #8
 800df0c:	e842 3100 	strex	r1, r3, [r2]
 800df10:	2900      	cmp	r1, #0
 800df12:	d1f3      	bne.n	800defc <HAL_UART_IRQHandler+0x20c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df14:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df16:	f102 0308 	add.w	r3, r2, #8
 800df1a:	e853 3f00 	ldrex	r3, [r3]
 800df1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df22:	3208      	adds	r2, #8
 800df24:	e842 3100 	strex	r1, r3, [r2]
 800df28:	2900      	cmp	r1, #0
 800df2a:	d1f3      	bne.n	800df14 <HAL_UART_IRQHandler+0x224>
          huart->RxState = HAL_UART_STATE_READY;
 800df2c:	2320      	movs	r3, #32
 800df2e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df32:	2300      	movs	r3, #0
 800df34:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df36:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df38:	e852 3f00 	ldrex	r3, [r2]
 800df3c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df40:	e842 3100 	strex	r1, r3, [r2]
 800df44:	2900      	cmp	r1, #0
 800df46:	d1f6      	bne.n	800df36 <HAL_UART_IRQHandler+0x246>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800df48:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800df4c:	f7f8 f9ff 	bl	800634e <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800df50:	2302      	movs	r3, #2
 800df52:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800df54:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800df58:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	1ac9      	subs	r1, r1, r3
 800df60:	b289      	uxth	r1, r1
 800df62:	4620      	mov	r0, r4
 800df64:	f7ff fec2 	bl	800dcec <HAL_UARTEx_RxEventCallback>
      return;
 800df68:	e704      	b.n	800dd74 <HAL_UART_IRQHandler+0x84>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800df6a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800df6e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800df72:	b29b      	uxth	r3, r3
 800df74:	1ac9      	subs	r1, r1, r3
 800df76:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800df78:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	2b00      	cmp	r3, #0
 800df80:	f43f aef8 	beq.w	800dd74 <HAL_UART_IRQHandler+0x84>
          && (nb_rx_data > 0U))
 800df84:	2900      	cmp	r1, #0
 800df86:	f43f aef5 	beq.w	800dd74 <HAL_UART_IRQHandler+0x84>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df8a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df8c:	e852 3f00 	ldrex	r3, [r2]
 800df90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df94:	e842 3000 	strex	r0, r3, [r2]
 800df98:	2800      	cmp	r0, #0
 800df9a:	d1f6      	bne.n	800df8a <HAL_UART_IRQHandler+0x29a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df9c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df9e:	f102 0308 	add.w	r3, r2, #8
 800dfa2:	e853 3f00 	ldrex	r3, [r3]
 800dfa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dfaa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfae:	3208      	adds	r2, #8
 800dfb0:	e842 3000 	strex	r0, r3, [r2]
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	d1f1      	bne.n	800df9c <HAL_UART_IRQHandler+0x2ac>
        huart->RxState = HAL_UART_STATE_READY;
 800dfb8:	2320      	movs	r3, #32
 800dfba:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 800dfc2:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfc4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfc6:	e852 3f00 	ldrex	r3, [r2]
 800dfca:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfce:	e842 3000 	strex	r0, r3, [r2]
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d1f6      	bne.n	800dfc4 <HAL_UART_IRQHandler+0x2d4>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dfd6:	2302      	movs	r3, #2
 800dfd8:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f7ff fe86 	bl	800dcec <HAL_UARTEx_RxEventCallback>
      return;
 800dfe0:	e6c8      	b.n	800dd74 <HAL_UART_IRQHandler+0x84>
    if (huart->TxISR != NULL)
 800dfe2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	f43f aec5 	beq.w	800dd74 <HAL_UART_IRQHandler+0x84>
      huart->TxISR(huart);
 800dfea:	4620      	mov	r0, r4
 800dfec:	4798      	blx	r3
    return;
 800dfee:	e6c1      	b.n	800dd74 <HAL_UART_IRQHandler+0x84>
 800dff0:	10000001 	.word	0x10000001
 800dff4:	04000120 	.word	0x04000120
 800dff8:	0800dcd9 	.word	0x0800dcd9
    UART_EndTransmit_IT(huart);
 800dffc:	4620      	mov	r0, r4
 800dffe:	f7ff fe27 	bl	800dc50 <UART_EndTransmit_IT>
    return;
 800e002:	e6b7      	b.n	800dd74 <HAL_UART_IRQHandler+0x84>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e004:	4620      	mov	r0, r4
 800e006:	f000 fde2 	bl	800ebce <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800e00a:	e6b3      	b.n	800dd74 <HAL_UART_IRQHandler+0x84>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e00c:	4620      	mov	r0, r4
 800e00e:	f000 fddd 	bl	800ebcc <HAL_UARTEx_RxFifoFullCallback>
    return;
 800e012:	e6af      	b.n	800dd74 <HAL_UART_IRQHandler+0x84>

0800e014 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e014:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800e016:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e01a:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 800e01e:	2a22      	cmp	r2, #34	@ 0x22
 800e020:	d005      	beq.n	800e02e <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e022:	6802      	ldr	r2, [r0, #0]
 800e024:	6993      	ldr	r3, [r2, #24]
 800e026:	f043 0308 	orr.w	r3, r3, #8
 800e02a:	6193      	str	r3, [r2, #24]
  }
}
 800e02c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e02e:	6802      	ldr	r2, [r0, #0]
 800e030:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e032:	b2db      	uxtb	r3, r3
 800e034:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800e036:	400b      	ands	r3, r1
 800e038:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800e03a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800e03c:	3301      	adds	r3, #1
 800e03e:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 800e040:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800e044:	b29b      	uxth	r3, r3
 800e046:	3b01      	subs	r3, #1
 800e048:	b29b      	uxth	r3, r3
 800e04a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 800e04e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800e052:	b29b      	uxth	r3, r3
 800e054:	2b00      	cmp	r3, #0
 800e056:	d1e9      	bne.n	800e02c <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e058:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e05a:	e852 3f00 	ldrex	r3, [r2]
 800e05e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e062:	e842 3100 	strex	r1, r3, [r2]
 800e066:	2900      	cmp	r1, #0
 800e068:	d1f6      	bne.n	800e058 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e06a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e06c:	f102 0308 	add.w	r3, r2, #8
 800e070:	e853 3f00 	ldrex	r3, [r3]
 800e074:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e078:	3208      	adds	r2, #8
 800e07a:	e842 3100 	strex	r1, r3, [r2]
 800e07e:	2900      	cmp	r1, #0
 800e080:	d1f3      	bne.n	800e06a <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800e082:	2320      	movs	r3, #32
 800e084:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 800e088:	2300      	movs	r3, #0
 800e08a:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e08c:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e08e:	6803      	ldr	r3, [r0, #0]
 800e090:	4a18      	ldr	r2, [pc, #96]	@ (800e0f4 <UART_RxISR_8BIT+0xe0>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d010      	beq.n	800e0b8 <UART_RxISR_8BIT+0xa4>
 800e096:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d00c      	beq.n	800e0b8 <UART_RxISR_8BIT+0xa4>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800e0a4:	d008      	beq.n	800e0b8 <UART_RxISR_8BIT+0xa4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e0a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0a8:	e852 3f00 	ldrex	r3, [r2]
 800e0ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b0:	e842 3100 	strex	r1, r3, [r2]
 800e0b4:	2900      	cmp	r1, #0
 800e0b6:	d1f6      	bne.n	800e0a6 <UART_RxISR_8BIT+0x92>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0b8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d116      	bne.n	800e0ec <UART_RxISR_8BIT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0c2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c4:	e852 3f00 	ldrex	r3, [r2]
 800e0c8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0cc:	e842 3100 	strex	r1, r3, [r2]
 800e0d0:	2900      	cmp	r1, #0
 800e0d2:	d1f6      	bne.n	800e0c2 <UART_RxISR_8BIT+0xae>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e0d4:	6803      	ldr	r3, [r0, #0]
 800e0d6:	69da      	ldr	r2, [r3, #28]
 800e0d8:	f012 0f10 	tst.w	r2, #16
 800e0dc:	d001      	beq.n	800e0e2 <UART_RxISR_8BIT+0xce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e0de:	2210      	movs	r2, #16
 800e0e0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e0e2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800e0e6:	f7ff fe01 	bl	800dcec <HAL_UARTEx_RxEventCallback>
 800e0ea:	e79f      	b.n	800e02c <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800e0ec:	f007 f8da 	bl	80152a4 <HAL_UART_RxCpltCallback>
 800e0f0:	e79c      	b.n	800e02c <UART_RxISR_8BIT+0x18>
 800e0f2:	bf00      	nop
 800e0f4:	46002400 	.word	0x46002400

0800e0f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e0f8:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e0fa:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e0fe:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800e102:	2b22      	cmp	r3, #34	@ 0x22
 800e104:	d005      	beq.n	800e112 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e106:	6802      	ldr	r2, [r0, #0]
 800e108:	6993      	ldr	r3, [r2, #24]
 800e10a:	f043 0308 	orr.w	r3, r3, #8
 800e10e:	6193      	str	r3, [r2, #24]
  }
}
 800e110:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e112:	6803      	ldr	r3, [r0, #0]
 800e114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e116:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800e118:	4013      	ands	r3, r2
 800e11a:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800e11c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800e11e:	3302      	adds	r3, #2
 800e120:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 800e122:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800e126:	b29b      	uxth	r3, r3
 800e128:	3b01      	subs	r3, #1
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 800e130:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800e134:	b29b      	uxth	r3, r3
 800e136:	2b00      	cmp	r3, #0
 800e138:	d1ea      	bne.n	800e110 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e13a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e13c:	e852 3f00 	ldrex	r3, [r2]
 800e140:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e144:	e842 3100 	strex	r1, r3, [r2]
 800e148:	2900      	cmp	r1, #0
 800e14a:	d1f6      	bne.n	800e13a <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e14c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e14e:	f102 0308 	add.w	r3, r2, #8
 800e152:	e853 3f00 	ldrex	r3, [r3]
 800e156:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e15a:	3208      	adds	r2, #8
 800e15c:	e842 3100 	strex	r1, r3, [r2]
 800e160:	2900      	cmp	r1, #0
 800e162:	d1f3      	bne.n	800e14c <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 800e164:	2320      	movs	r3, #32
 800e166:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 800e16a:	2300      	movs	r3, #0
 800e16c:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e16e:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e170:	6803      	ldr	r3, [r0, #0]
 800e172:	4a18      	ldr	r2, [pc, #96]	@ (800e1d4 <UART_RxISR_16BIT+0xdc>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d010      	beq.n	800e19a <UART_RxISR_16BIT+0xa2>
 800e178:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d00c      	beq.n	800e19a <UART_RxISR_16BIT+0xa2>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800e186:	d008      	beq.n	800e19a <UART_RxISR_16BIT+0xa2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e188:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e18a:	e852 3f00 	ldrex	r3, [r2]
 800e18e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e192:	e842 3100 	strex	r1, r3, [r2]
 800e196:	2900      	cmp	r1, #0
 800e198:	d1f6      	bne.n	800e188 <UART_RxISR_16BIT+0x90>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e19a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d116      	bne.n	800e1ce <UART_RxISR_16BIT+0xd6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1a4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a6:	e852 3f00 	ldrex	r3, [r2]
 800e1aa:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ae:	e842 3100 	strex	r1, r3, [r2]
 800e1b2:	2900      	cmp	r1, #0
 800e1b4:	d1f6      	bne.n	800e1a4 <UART_RxISR_16BIT+0xac>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e1b6:	6803      	ldr	r3, [r0, #0]
 800e1b8:	69da      	ldr	r2, [r3, #28]
 800e1ba:	f012 0f10 	tst.w	r2, #16
 800e1be:	d001      	beq.n	800e1c4 <UART_RxISR_16BIT+0xcc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e1c0:	2210      	movs	r2, #16
 800e1c2:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e1c4:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800e1c8:	f7ff fd90 	bl	800dcec <HAL_UARTEx_RxEventCallback>
 800e1cc:	e7a0      	b.n	800e110 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800e1ce:	f007 f869 	bl	80152a4 <HAL_UART_RxCpltCallback>
 800e1d2:	e79d      	b.n	800e110 <UART_RxISR_16BIT+0x18>
 800e1d4:	46002400 	.word	0x46002400

0800e1d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 800e1dc:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e1e0:	6803      	ldr	r3, [r0, #0]
 800e1e2:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e1e4:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e1e8:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e1ec:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 800e1f0:	2a22      	cmp	r2, #34	@ 0x22
 800e1f2:	d005      	beq.n	800e200 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e1f4:	699a      	ldr	r2, [r3, #24]
 800e1f6:	f042 0208 	orr.w	r2, r2, #8
 800e1fa:	619a      	str	r2, [r3, #24]
  }
}
 800e1fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e200:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800e202:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e206:	e008      	b.n	800e21a <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e208:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d14c      	bne.n	800e2aa <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 800e210:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800e214:	b29b      	uxth	r3, r3
 800e216:	2b00      	cmp	r3, #0
 800e218:	d04e      	beq.n	800e2b8 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e21a:	2f00      	cmp	r7, #0
 800e21c:	f000 809e 	beq.w	800e35c <UART_RxISR_8BIT_FIFOEN+0x184>
 800e220:	f015 0f20 	tst.w	r5, #32
 800e224:	f000 809a 	beq.w	800e35c <UART_RxISR_8BIT_FIFOEN+0x184>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e228:	6823      	ldr	r3, [r4, #0]
 800e22a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e22c:	b2f3      	uxtb	r3, r6
 800e22e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e230:	400b      	ands	r3, r1
 800e232:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800e234:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e236:	3301      	adds	r3, #1
 800e238:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 800e23a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800e23e:	b29b      	uxth	r3, r3
 800e240:	3b01      	subs	r3, #1
 800e242:	b29b      	uxth	r3, r3
 800e244:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e248:	6823      	ldr	r3, [r4, #0]
 800e24a:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e24c:	f015 0f07 	tst.w	r5, #7
 800e250:	d0de      	beq.n	800e210 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e252:	f015 0f01 	tst.w	r5, #1
 800e256:	d009      	beq.n	800e26c <UART_RxISR_8BIT_FIFOEN+0x94>
 800e258:	f419 7f80 	tst.w	r9, #256	@ 0x100
 800e25c:	d006      	beq.n	800e26c <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e25e:	2201      	movs	r2, #1
 800e260:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e262:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800e266:	4313      	orrs	r3, r2
 800e268:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e26c:	f015 0f02 	tst.w	r5, #2
 800e270:	d00b      	beq.n	800e28a <UART_RxISR_8BIT_FIFOEN+0xb2>
 800e272:	f018 0f01 	tst.w	r8, #1
 800e276:	d008      	beq.n	800e28a <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e278:	6823      	ldr	r3, [r4, #0]
 800e27a:	2202      	movs	r2, #2
 800e27c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e27e:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800e282:	f043 0304 	orr.w	r3, r3, #4
 800e286:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e28a:	f015 0f04 	tst.w	r5, #4
 800e28e:	d0bb      	beq.n	800e208 <UART_RxISR_8BIT_FIFOEN+0x30>
 800e290:	f018 0f01 	tst.w	r8, #1
 800e294:	d0b8      	beq.n	800e208 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e296:	6823      	ldr	r3, [r4, #0]
 800e298:	2204      	movs	r2, #4
 800e29a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e29c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800e2a0:	f043 0302 	orr.w	r3, r3, #2
 800e2a4:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800e2a8:	e7ae      	b.n	800e208 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	f007 f828 	bl	8015300 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800e2b6:	e7ab      	b.n	800e210 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e2b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ba:	e852 3f00 	ldrex	r3, [r2]
 800e2be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c2:	e842 3100 	strex	r1, r3, [r2]
 800e2c6:	2900      	cmp	r1, #0
 800e2c8:	d1f6      	bne.n	800e2b8 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e2ca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2cc:	f102 0308 	add.w	r3, r2, #8
 800e2d0:	e853 3f00 	ldrex	r3, [r3]
 800e2d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e2d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2dc:	3208      	adds	r2, #8
 800e2de:	e842 3100 	strex	r1, r3, [r2]
 800e2e2:	2900      	cmp	r1, #0
 800e2e4:	d1f1      	bne.n	800e2ca <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 800e2e6:	2320      	movs	r3, #32
 800e2e8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e2f0:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e2f2:	6823      	ldr	r3, [r4, #0]
 800e2f4:	4a2b      	ldr	r2, [pc, #172]	@ (800e3a4 <UART_RxISR_8BIT_FIFOEN+0x1cc>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d007      	beq.n	800e30a <UART_RxISR_8BIT_FIFOEN+0x132>
 800e2fa:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d003      	beq.n	800e30a <UART_RxISR_8BIT_FIFOEN+0x132>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800e308:	d106      	bne.n	800e318 <UART_RxISR_8BIT_FIFOEN+0x140>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e30a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d00d      	beq.n	800e32c <UART_RxISR_8BIT_FIFOEN+0x154>
          HAL_UART_RxCpltCallback(huart);
 800e310:	4620      	mov	r0, r4
 800e312:	f006 ffc7 	bl	80152a4 <HAL_UART_RxCpltCallback>
 800e316:	e780      	b.n	800e21a <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e318:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e31a:	e852 3f00 	ldrex	r3, [r2]
 800e31e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e322:	e842 3100 	strex	r1, r3, [r2]
 800e326:	2900      	cmp	r1, #0
 800e328:	d1f6      	bne.n	800e318 <UART_RxISR_8BIT_FIFOEN+0x140>
 800e32a:	e7ee      	b.n	800e30a <UART_RxISR_8BIT_FIFOEN+0x132>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e32c:	2300      	movs	r3, #0
 800e32e:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e330:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e332:	e852 3f00 	ldrex	r3, [r2]
 800e336:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e33a:	e842 3100 	strex	r1, r3, [r2]
 800e33e:	2900      	cmp	r1, #0
 800e340:	d1f6      	bne.n	800e330 <UART_RxISR_8BIT_FIFOEN+0x158>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e342:	6823      	ldr	r3, [r4, #0]
 800e344:	69da      	ldr	r2, [r3, #28]
 800e346:	f012 0f10 	tst.w	r2, #16
 800e34a:	d001      	beq.n	800e350 <UART_RxISR_8BIT_FIFOEN+0x178>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e34c:	2210      	movs	r2, #16
 800e34e:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e350:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800e354:	4620      	mov	r0, r4
 800e356:	f7ff fcc9 	bl	800dcec <HAL_UARTEx_RxEventCallback>
 800e35a:	e75e      	b.n	800e21a <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800e35c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800e360:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e362:	2b00      	cmp	r3, #0
 800e364:	f43f af4a 	beq.w	800e1fc <UART_RxISR_8BIT_FIFOEN+0x24>
 800e368:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 800e36c:	429a      	cmp	r2, r3
 800e36e:	f67f af45 	bls.w	800e1fc <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e372:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e374:	f102 0308 	add.w	r3, r2, #8
 800e378:	e853 3f00 	ldrex	r3, [r3]
 800e37c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e380:	3208      	adds	r2, #8
 800e382:	e842 3100 	strex	r1, r3, [r2]
 800e386:	2900      	cmp	r1, #0
 800e388:	d1f3      	bne.n	800e372 <UART_RxISR_8BIT_FIFOEN+0x19a>
      huart->RxISR = UART_RxISR_8BIT;
 800e38a:	4b07      	ldr	r3, [pc, #28]	@ (800e3a8 <UART_RxISR_8BIT_FIFOEN+0x1d0>)
 800e38c:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e38e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e390:	e852 3f00 	ldrex	r3, [r2]
 800e394:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e398:	e842 3100 	strex	r1, r3, [r2]
 800e39c:	2900      	cmp	r1, #0
 800e39e:	d1f6      	bne.n	800e38e <UART_RxISR_8BIT_FIFOEN+0x1b6>
 800e3a0:	e72c      	b.n	800e1fc <UART_RxISR_8BIT_FIFOEN+0x24>
 800e3a2:	bf00      	nop
 800e3a4:	46002400 	.word	0x46002400
 800e3a8:	0800e015 	.word	0x0800e015

0800e3ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e3b0:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e3b4:	6803      	ldr	r3, [r0, #0]
 800e3b6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e3b8:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e3bc:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e3c0:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 800e3c4:	2a22      	cmp	r2, #34	@ 0x22
 800e3c6:	d005      	beq.n	800e3d4 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e3c8:	699a      	ldr	r2, [r3, #24]
 800e3ca:	f042 0208 	orr.w	r2, r2, #8
 800e3ce:	619a      	str	r2, [r3, #24]
  }
}
 800e3d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3d4:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800e3d6:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e3da:	e008      	b.n	800e3ee <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e3dc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d14b      	bne.n	800e47c <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 800e3e4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d04d      	beq.n	800e48a <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e3ee:	2f00      	cmp	r7, #0
 800e3f0:	f000 809d 	beq.w	800e52e <UART_RxISR_16BIT_FIFOEN+0x182>
 800e3f4:	f015 0f20 	tst.w	r5, #32
 800e3f8:	f000 8099 	beq.w	800e52e <UART_RxISR_16BIT_FIFOEN+0x182>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e3fc:	6823      	ldr	r3, [r4, #0]
 800e3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e400:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800e402:	4033      	ands	r3, r6
 800e404:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800e406:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e408:	3302      	adds	r3, #2
 800e40a:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 800e40c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800e410:	b29b      	uxth	r3, r3
 800e412:	3b01      	subs	r3, #1
 800e414:	b29b      	uxth	r3, r3
 800e416:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e41a:	6823      	ldr	r3, [r4, #0]
 800e41c:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e41e:	f015 0f07 	tst.w	r5, #7
 800e422:	d0df      	beq.n	800e3e4 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e424:	f015 0f01 	tst.w	r5, #1
 800e428:	d009      	beq.n	800e43e <UART_RxISR_16BIT_FIFOEN+0x92>
 800e42a:	f419 7f80 	tst.w	r9, #256	@ 0x100
 800e42e:	d006      	beq.n	800e43e <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e430:	2201      	movs	r2, #1
 800e432:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e434:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800e438:	4313      	orrs	r3, r2
 800e43a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e43e:	f015 0f02 	tst.w	r5, #2
 800e442:	d00b      	beq.n	800e45c <UART_RxISR_16BIT_FIFOEN+0xb0>
 800e444:	f018 0f01 	tst.w	r8, #1
 800e448:	d008      	beq.n	800e45c <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e44a:	6823      	ldr	r3, [r4, #0]
 800e44c:	2202      	movs	r2, #2
 800e44e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e450:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800e454:	f043 0304 	orr.w	r3, r3, #4
 800e458:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e45c:	f015 0f04 	tst.w	r5, #4
 800e460:	d0bc      	beq.n	800e3dc <UART_RxISR_16BIT_FIFOEN+0x30>
 800e462:	f018 0f01 	tst.w	r8, #1
 800e466:	d0b9      	beq.n	800e3dc <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e468:	6823      	ldr	r3, [r4, #0]
 800e46a:	2204      	movs	r2, #4
 800e46c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e46e:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800e472:	f043 0302 	orr.w	r3, r3, #2
 800e476:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800e47a:	e7af      	b.n	800e3dc <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800e47c:	4620      	mov	r0, r4
 800e47e:	f006 ff3f 	bl	8015300 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e482:	2300      	movs	r3, #0
 800e484:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800e488:	e7ac      	b.n	800e3e4 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e48a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e48c:	e852 3f00 	ldrex	r3, [r2]
 800e490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e494:	e842 3100 	strex	r1, r3, [r2]
 800e498:	2900      	cmp	r1, #0
 800e49a:	d1f6      	bne.n	800e48a <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e49c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e49e:	f102 0308 	add.w	r3, r2, #8
 800e4a2:	e853 3f00 	ldrex	r3, [r3]
 800e4a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e4aa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ae:	3208      	adds	r2, #8
 800e4b0:	e842 3100 	strex	r1, r3, [r2]
 800e4b4:	2900      	cmp	r1, #0
 800e4b6:	d1f1      	bne.n	800e49c <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 800e4b8:	2320      	movs	r3, #32
 800e4ba:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e4c2:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e4c4:	6823      	ldr	r3, [r4, #0]
 800e4c6:	4a2b      	ldr	r2, [pc, #172]	@ (800e574 <UART_RxISR_16BIT_FIFOEN+0x1c8>)
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d007      	beq.n	800e4dc <UART_RxISR_16BIT_FIFOEN+0x130>
 800e4cc:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	d003      	beq.n	800e4dc <UART_RxISR_16BIT_FIFOEN+0x130>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800e4da:	d106      	bne.n	800e4ea <UART_RxISR_16BIT_FIFOEN+0x13e>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4dc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d00d      	beq.n	800e4fe <UART_RxISR_16BIT_FIFOEN+0x152>
          HAL_UART_RxCpltCallback(huart);
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	f006 fede 	bl	80152a4 <HAL_UART_RxCpltCallback>
 800e4e8:	e781      	b.n	800e3ee <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e4ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ec:	e852 3f00 	ldrex	r3, [r2]
 800e4f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f4:	e842 3100 	strex	r1, r3, [r2]
 800e4f8:	2900      	cmp	r1, #0
 800e4fa:	d1f6      	bne.n	800e4ea <UART_RxISR_16BIT_FIFOEN+0x13e>
 800e4fc:	e7ee      	b.n	800e4dc <UART_RxISR_16BIT_FIFOEN+0x130>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4fe:	2300      	movs	r3, #0
 800e500:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e502:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e504:	e852 3f00 	ldrex	r3, [r2]
 800e508:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e50c:	e842 3100 	strex	r1, r3, [r2]
 800e510:	2900      	cmp	r1, #0
 800e512:	d1f6      	bne.n	800e502 <UART_RxISR_16BIT_FIFOEN+0x156>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e514:	6823      	ldr	r3, [r4, #0]
 800e516:	69da      	ldr	r2, [r3, #28]
 800e518:	f012 0f10 	tst.w	r2, #16
 800e51c:	d001      	beq.n	800e522 <UART_RxISR_16BIT_FIFOEN+0x176>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e51e:	2210      	movs	r2, #16
 800e520:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e522:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800e526:	4620      	mov	r0, r4
 800e528:	f7ff fbe0 	bl	800dcec <HAL_UARTEx_RxEventCallback>
 800e52c:	e75f      	b.n	800e3ee <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800e52e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800e532:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e534:	2b00      	cmp	r3, #0
 800e536:	f43f af4b 	beq.w	800e3d0 <UART_RxISR_16BIT_FIFOEN+0x24>
 800e53a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 800e53e:	429a      	cmp	r2, r3
 800e540:	f67f af46 	bls.w	800e3d0 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e544:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e546:	f102 0308 	add.w	r3, r2, #8
 800e54a:	e853 3f00 	ldrex	r3, [r3]
 800e54e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e552:	3208      	adds	r2, #8
 800e554:	e842 3100 	strex	r1, r3, [r2]
 800e558:	2900      	cmp	r1, #0
 800e55a:	d1f3      	bne.n	800e544 <UART_RxISR_16BIT_FIFOEN+0x198>
      huart->RxISR = UART_RxISR_16BIT;
 800e55c:	4b06      	ldr	r3, [pc, #24]	@ (800e578 <UART_RxISR_16BIT_FIFOEN+0x1cc>)
 800e55e:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e560:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e562:	e852 3f00 	ldrex	r3, [r2]
 800e566:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e56a:	e842 3100 	strex	r1, r3, [r2]
 800e56e:	2900      	cmp	r1, #0
 800e570:	d1f6      	bne.n	800e560 <UART_RxISR_16BIT_FIFOEN+0x1b4>
 800e572:	e72d      	b.n	800e3d0 <UART_RxISR_16BIT_FIFOEN+0x24>
 800e574:	46002400 	.word	0x46002400
 800e578:	0800e0f9 	.word	0x0800e0f9

0800e57c <UART_SetConfig>:
{
 800e57c:	b570      	push	{r4, r5, r6, lr}
 800e57e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800e580:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e582:	6883      	ldr	r3, [r0, #8]
 800e584:	6902      	ldr	r2, [r0, #16]
 800e586:	4313      	orrs	r3, r2
 800e588:	6942      	ldr	r2, [r0, #20]
 800e58a:	4313      	orrs	r3, r2
 800e58c:	69c2      	ldr	r2, [r0, #28]
 800e58e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e590:	6808      	ldr	r0, [r1, #0]
 800e592:	4a6e      	ldr	r2, [pc, #440]	@ (800e74c <UART_SetConfig+0x1d0>)
 800e594:	4002      	ands	r2, r0
 800e596:	431a      	orrs	r2, r3
 800e598:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e59a:	6822      	ldr	r2, [r4, #0]
 800e59c:	6853      	ldr	r3, [r2, #4]
 800e59e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800e5a2:	68e1      	ldr	r1, [r4, #12]
 800e5a4:	430b      	orrs	r3, r1
 800e5a6:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e5a8:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e5aa:	6822      	ldr	r2, [r4, #0]
 800e5ac:	4b68      	ldr	r3, [pc, #416]	@ (800e750 <UART_SetConfig+0x1d4>)
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d005      	beq.n	800e5be <UART_SetConfig+0x42>
 800e5b2:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d001      	beq.n	800e5be <UART_SetConfig+0x42>
    tmpreg |= huart->Init.OneBitSampling;
 800e5ba:	6a23      	ldr	r3, [r4, #32]
 800e5bc:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e5be:	6893      	ldr	r3, [r2, #8]
 800e5c0:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800e5c4:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800e5c8:	430b      	orrs	r3, r1
 800e5ca:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e5cc:	6822      	ldr	r2, [r4, #0]
 800e5ce:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e5d0:	f023 030f 	bic.w	r3, r3, #15
 800e5d4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e5d6:	430b      	orrs	r3, r1
 800e5d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e5da:	6823      	ldr	r3, [r4, #0]
 800e5dc:	4a5d      	ldr	r2, [pc, #372]	@ (800e754 <UART_SetConfig+0x1d8>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d01a      	beq.n	800e618 <UART_SetConfig+0x9c>
 800e5e2:	f5a2 4274 	sub.w	r2, r2, #62464	@ 0xf400
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d03e      	beq.n	800e668 <UART_SetConfig+0xec>
 800e5ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d03c      	beq.n	800e66c <UART_SetConfig+0xf0>
 800e5f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d03a      	beq.n	800e670 <UART_SetConfig+0xf4>
 800e5fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d038      	beq.n	800e674 <UART_SetConfig+0xf8>
 800e602:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 800e606:	4293      	cmp	r3, r2
 800e608:	d036      	beq.n	800e678 <UART_SetConfig+0xfc>
 800e60a:	4a51      	ldr	r2, [pc, #324]	@ (800e750 <UART_SetConfig+0x1d4>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d001      	beq.n	800e614 <UART_SetConfig+0x98>
 800e610:	2000      	movs	r0, #0
 800e612:	e002      	b.n	800e61a <UART_SetConfig+0x9e>
 800e614:	2020      	movs	r0, #32
 800e616:	e000      	b.n	800e61a <UART_SetConfig+0x9e>
 800e618:	2001      	movs	r0, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 800e61a:	4a4d      	ldr	r2, [pc, #308]	@ (800e750 <UART_SetConfig+0x1d4>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d02e      	beq.n	800e67e <UART_SetConfig+0x102>
 800e620:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800e624:	4293      	cmp	r3, r2
 800e626:	d02a      	beq.n	800e67e <UART_SetConfig+0x102>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e628:	69e3      	ldr	r3, [r4, #28]
 800e62a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e62e:	d055      	beq.n	800e6dc <UART_SetConfig+0x160>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e630:	2100      	movs	r1, #0
 800e632:	f7fd fab7 	bl	800bba4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800e636:	2800      	cmp	r0, #0
 800e638:	f000 8084 	beq.w	800e744 <UART_SetConfig+0x1c8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e63c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e63e:	4a46      	ldr	r2, [pc, #280]	@ (800e758 <UART_SetConfig+0x1dc>)
 800e640:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800e644:	fbb0 f3f2 	udiv	r3, r0, r2
 800e648:	6862      	ldr	r2, [r4, #4]
 800e64a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e64e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e652:	f1a3 0110 	sub.w	r1, r3, #16
 800e656:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800e65a:	4291      	cmp	r1, r2
 800e65c:	d874      	bhi.n	800e748 <UART_SetConfig+0x1cc>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e65e:	6822      	ldr	r2, [r4, #0]
 800e660:	b29b      	uxth	r3, r3
 800e662:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800e664:	2000      	movs	r0, #0
 800e666:	e05a      	b.n	800e71e <UART_SetConfig+0x1a2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e668:	2002      	movs	r0, #2
 800e66a:	e7d6      	b.n	800e61a <UART_SetConfig+0x9e>
 800e66c:	2004      	movs	r0, #4
 800e66e:	e7d4      	b.n	800e61a <UART_SetConfig+0x9e>
 800e670:	2008      	movs	r0, #8
 800e672:	e7d2      	b.n	800e61a <UART_SetConfig+0x9e>
 800e674:	2010      	movs	r0, #16
 800e676:	e7d0      	b.n	800e61a <UART_SetConfig+0x9e>
 800e678:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 800e67c:	e7cd      	b.n	800e61a <UART_SetConfig+0x9e>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e67e:	2100      	movs	r1, #0
 800e680:	f7fd fa90 	bl	800bba4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800e684:	4601      	mov	r1, r0
 800e686:	2800      	cmp	r0, #0
 800e688:	d048      	beq.n	800e71c <UART_SetConfig+0x1a0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e68a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e68c:	4b32      	ldr	r3, [pc, #200]	@ (800e758 <UART_SetConfig+0x1dc>)
 800e68e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e692:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e696:	6865      	ldr	r5, [r4, #4]
 800e698:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800e69c:	4298      	cmp	r0, r3
 800e69e:	d847      	bhi.n	800e730 <UART_SetConfig+0x1b4>
 800e6a0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800e6a4:	d846      	bhi.n	800e734 <UART_SetConfig+0x1b8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e6a6:	2600      	movs	r6, #0
 800e6a8:	4633      	mov	r3, r6
 800e6aa:	4608      	mov	r0, r1
 800e6ac:	4631      	mov	r1, r6
 800e6ae:	f7f2 f81f 	bl	80006f0 <__aeabi_uldivmod>
 800e6b2:	0209      	lsls	r1, r1, #8
 800e6b4:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800e6b8:	0200      	lsls	r0, r0, #8
 800e6ba:	086b      	lsrs	r3, r5, #1
 800e6bc:	18c0      	adds	r0, r0, r3
 800e6be:	462a      	mov	r2, r5
 800e6c0:	4633      	mov	r3, r6
 800e6c2:	f141 0100 	adc.w	r1, r1, #0
 800e6c6:	f7f2 f813 	bl	80006f0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e6ca:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800e6ce:	4b23      	ldr	r3, [pc, #140]	@ (800e75c <UART_SetConfig+0x1e0>)
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d831      	bhi.n	800e738 <UART_SetConfig+0x1bc>
          huart->Instance->BRR = usartdiv;
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800e6d8:	4630      	mov	r0, r6
 800e6da:	e020      	b.n	800e71e <UART_SetConfig+0x1a2>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e6dc:	2100      	movs	r1, #0
 800e6de:	f7fd fa61 	bl	800bba4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800e6e2:	b358      	cbz	r0, 800e73c <UART_SetConfig+0x1c0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e6e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e6e6:	4a1c      	ldr	r2, [pc, #112]	@ (800e758 <UART_SetConfig+0x1dc>)
 800e6e8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800e6ec:	fbb0 f2f2 	udiv	r2, r0, r2
 800e6f0:	6861      	ldr	r1, [r4, #4]
 800e6f2:	084b      	lsrs	r3, r1, #1
 800e6f4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800e6f8:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e6fc:	f1a3 0110 	sub.w	r1, r3, #16
 800e700:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800e704:	4291      	cmp	r1, r2
 800e706:	d81b      	bhi.n	800e740 <UART_SetConfig+0x1c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e708:	b29a      	uxth	r2, r3
 800e70a:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e70e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800e712:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800e714:	6822      	ldr	r2, [r4, #0]
 800e716:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800e718:	2000      	movs	r0, #0
 800e71a:	e000      	b.n	800e71e <UART_SetConfig+0x1a2>
 800e71c:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800e71e:	2301      	movs	r3, #1
 800e720:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e724:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800e728:	2300      	movs	r3, #0
 800e72a:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 800e72c:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800e72e:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 800e730:	2001      	movs	r0, #1
 800e732:	e7f4      	b.n	800e71e <UART_SetConfig+0x1a2>
 800e734:	2001      	movs	r0, #1
 800e736:	e7f2      	b.n	800e71e <UART_SetConfig+0x1a2>
          ret = HAL_ERROR;
 800e738:	2001      	movs	r0, #1
 800e73a:	e7f0      	b.n	800e71e <UART_SetConfig+0x1a2>
  HAL_StatusTypeDef ret               = HAL_OK;
 800e73c:	2000      	movs	r0, #0
 800e73e:	e7ee      	b.n	800e71e <UART_SetConfig+0x1a2>
        ret = HAL_ERROR;
 800e740:	2001      	movs	r0, #1
 800e742:	e7ec      	b.n	800e71e <UART_SetConfig+0x1a2>
  HAL_StatusTypeDef ret               = HAL_OK;
 800e744:	2000      	movs	r0, #0
 800e746:	e7ea      	b.n	800e71e <UART_SetConfig+0x1a2>
        ret = HAL_ERROR;
 800e748:	2001      	movs	r0, #1
 800e74a:	e7e8      	b.n	800e71e <UART_SetConfig+0x1a2>
 800e74c:	cfff69f3 	.word	0xcfff69f3
 800e750:	46002400 	.word	0x46002400
 800e754:	40013800 	.word	0x40013800
 800e758:	080177f0 	.word	0x080177f0
 800e75c:	000ffcff 	.word	0x000ffcff

0800e760 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e760:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e762:	f013 0f08 	tst.w	r3, #8
 800e766:	d006      	beq.n	800e776 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e768:	6802      	ldr	r2, [r0, #0]
 800e76a:	6853      	ldr	r3, [r2, #4]
 800e76c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e770:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800e772:	430b      	orrs	r3, r1
 800e774:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e776:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e778:	f013 0f01 	tst.w	r3, #1
 800e77c:	d006      	beq.n	800e78c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e77e:	6802      	ldr	r2, [r0, #0]
 800e780:	6853      	ldr	r3, [r2, #4]
 800e782:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e786:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800e788:	430b      	orrs	r3, r1
 800e78a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e78c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e78e:	f013 0f02 	tst.w	r3, #2
 800e792:	d006      	beq.n	800e7a2 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e794:	6802      	ldr	r2, [r0, #0]
 800e796:	6853      	ldr	r3, [r2, #4]
 800e798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e79c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800e79e:	430b      	orrs	r3, r1
 800e7a0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e7a2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e7a4:	f013 0f04 	tst.w	r3, #4
 800e7a8:	d006      	beq.n	800e7b8 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e7aa:	6802      	ldr	r2, [r0, #0]
 800e7ac:	6853      	ldr	r3, [r2, #4]
 800e7ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e7b2:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800e7b4:	430b      	orrs	r3, r1
 800e7b6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e7b8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e7ba:	f013 0f10 	tst.w	r3, #16
 800e7be:	d006      	beq.n	800e7ce <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e7c0:	6802      	ldr	r2, [r0, #0]
 800e7c2:	6893      	ldr	r3, [r2, #8]
 800e7c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e7c8:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800e7ca:	430b      	orrs	r3, r1
 800e7cc:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e7ce:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e7d0:	f013 0f20 	tst.w	r3, #32
 800e7d4:	d006      	beq.n	800e7e4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e7d6:	6802      	ldr	r2, [r0, #0]
 800e7d8:	6893      	ldr	r3, [r2, #8]
 800e7da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e7de:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800e7e0:	430b      	orrs	r3, r1
 800e7e2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e7e4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e7e6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800e7ea:	d00a      	beq.n	800e802 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e7ec:	6802      	ldr	r2, [r0, #0]
 800e7ee:	6853      	ldr	r3, [r2, #4]
 800e7f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e7f4:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800e7f6:	430b      	orrs	r3, r1
 800e7f8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e7fa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800e7fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e800:	d00b      	beq.n	800e81a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e802:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e804:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e808:	d006      	beq.n	800e818 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e80a:	6802      	ldr	r2, [r0, #0]
 800e80c:	6853      	ldr	r3, [r2, #4]
 800e80e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800e812:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800e814:	430b      	orrs	r3, r1
 800e816:	6053      	str	r3, [r2, #4]
}
 800e818:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e81a:	6802      	ldr	r2, [r0, #0]
 800e81c:	6853      	ldr	r3, [r2, #4]
 800e81e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800e822:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800e824:	430b      	orrs	r3, r1
 800e826:	6053      	str	r3, [r2, #4]
 800e828:	e7eb      	b.n	800e802 <UART_AdvFeatureConfig+0xa2>

0800e82a <UART_WaitOnFlagUntilTimeout>:
{
 800e82a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e82e:	4605      	mov	r5, r0
 800e830:	460f      	mov	r7, r1
 800e832:	4616      	mov	r6, r2
 800e834:	4699      	mov	r9, r3
 800e836:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e83a:	682b      	ldr	r3, [r5, #0]
 800e83c:	69dc      	ldr	r4, [r3, #28]
 800e83e:	ea37 0404 	bics.w	r4, r7, r4
 800e842:	bf0c      	ite	eq
 800e844:	2401      	moveq	r4, #1
 800e846:	2400      	movne	r4, #0
 800e848:	42b4      	cmp	r4, r6
 800e84a:	d132      	bne.n	800e8b2 <UART_WaitOnFlagUntilTimeout+0x88>
    if (Timeout != HAL_MAX_DELAY)
 800e84c:	f1b8 3fff 	cmp.w	r8, #4294967295
 800e850:	d0f3      	beq.n	800e83a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e852:	f7f5 ff47 	bl	80046e4 <HAL_GetTick>
 800e856:	eba0 0009 	sub.w	r0, r0, r9
 800e85a:	4540      	cmp	r0, r8
 800e85c:	d82c      	bhi.n	800e8b8 <UART_WaitOnFlagUntilTimeout+0x8e>
 800e85e:	f1b8 0f00 	cmp.w	r8, #0
 800e862:	d02b      	beq.n	800e8bc <UART_WaitOnFlagUntilTimeout+0x92>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e864:	682b      	ldr	r3, [r5, #0]
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	f012 0f04 	tst.w	r2, #4
 800e86c:	d0e5      	beq.n	800e83a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e86e:	69da      	ldr	r2, [r3, #28]
 800e870:	f012 0f08 	tst.w	r2, #8
 800e874:	d111      	bne.n	800e89a <UART_WaitOnFlagUntilTimeout+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e876:	69da      	ldr	r2, [r3, #28]
 800e878:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800e87c:	d0dd      	beq.n	800e83a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e87e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e882:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800e884:	4628      	mov	r0, r5
 800e886:	f7ff f8ff 	bl	800da88 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e88a:	2320      	movs	r3, #32
 800e88c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800e890:	2300      	movs	r3, #0
 800e892:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 800e896:	2003      	movs	r0, #3
 800e898:	e00c      	b.n	800e8b4 <UART_WaitOnFlagUntilTimeout+0x8a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e89a:	2408      	movs	r4, #8
 800e89c:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 800e89e:	4628      	mov	r0, r5
 800e8a0:	f7ff f8f2 	bl	800da88 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e8a4:	f8c5 4090 	str.w	r4, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_ERROR;
 800e8ae:	2001      	movs	r0, #1
 800e8b0:	e000      	b.n	800e8b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  return HAL_OK;
 800e8b2:	2000      	movs	r0, #0
}
 800e8b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800e8b8:	2003      	movs	r0, #3
 800e8ba:	e7fb      	b.n	800e8b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800e8bc:	2003      	movs	r0, #3
 800e8be:	e7f9      	b.n	800e8b4 <UART_WaitOnFlagUntilTimeout+0x8a>

0800e8c0 <UART_CheckIdleState>:
{
 800e8c0:	b530      	push	{r4, r5, lr}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800e8cc:	f7f5 ff0a 	bl	80046e4 <HAL_GetTick>
 800e8d0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e8d2:	6822      	ldr	r2, [r4, #0]
 800e8d4:	6812      	ldr	r2, [r2, #0]
 800e8d6:	f012 0f08 	tst.w	r2, #8
 800e8da:	d110      	bne.n	800e8fe <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e8dc:	6823      	ldr	r3, [r4, #0]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f013 0f04 	tst.w	r3, #4
 800e8e4:	d128      	bne.n	800e938 <UART_CheckIdleState+0x78>
  huart->gState = HAL_UART_STATE_READY;
 800e8e6:	2320      	movs	r3, #32
 800e8e8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e8ec:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e8f4:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 800e8f6:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800e8fa:	b003      	add	sp, #12
 800e8fc:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e8fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	4603      	mov	r3, r0
 800e906:	2200      	movs	r2, #0
 800e908:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e90c:	4620      	mov	r0, r4
 800e90e:	f7ff ff8c 	bl	800e82a <UART_WaitOnFlagUntilTimeout>
 800e912:	2800      	cmp	r0, #0
 800e914:	d0e2      	beq.n	800e8dc <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e916:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e918:	e852 3f00 	ldrex	r3, [r2]
 800e91c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e920:	e842 3100 	strex	r1, r3, [r2]
 800e924:	2900      	cmp	r1, #0
 800e926:	d1f6      	bne.n	800e916 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 800e928:	2320      	movs	r3, #32
 800e92a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      __HAL_UNLOCK(huart);
 800e92e:	2300      	movs	r3, #0
 800e930:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 800e934:	2003      	movs	r0, #3
 800e936:	e7e0      	b.n	800e8fa <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e938:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	462b      	mov	r3, r5
 800e940:	2200      	movs	r2, #0
 800e942:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e946:	4620      	mov	r0, r4
 800e948:	f7ff ff6f 	bl	800e82a <UART_WaitOnFlagUntilTimeout>
 800e94c:	2800      	cmp	r0, #0
 800e94e:	d0ca      	beq.n	800e8e6 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e950:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e952:	e852 3f00 	ldrex	r3, [r2]
 800e956:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95a:	e842 3100 	strex	r1, r3, [r2]
 800e95e:	2900      	cmp	r1, #0
 800e960:	d1f6      	bne.n	800e950 <UART_CheckIdleState+0x90>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e962:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e964:	f102 0308 	add.w	r3, r2, #8
 800e968:	e853 3f00 	ldrex	r3, [r3]
 800e96c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e970:	3208      	adds	r2, #8
 800e972:	e842 3100 	strex	r1, r3, [r2]
 800e976:	2900      	cmp	r1, #0
 800e978:	d1f3      	bne.n	800e962 <UART_CheckIdleState+0xa2>
      huart->RxState = HAL_UART_STATE_READY;
 800e97a:	2320      	movs	r3, #32
 800e97c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 800e980:	2300      	movs	r3, #0
 800e982:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 800e986:	2003      	movs	r0, #3
 800e988:	e7b7      	b.n	800e8fa <UART_CheckIdleState+0x3a>

0800e98a <HAL_UART_Init>:
  if (huart == NULL)
 800e98a:	b378      	cbz	r0, 800e9ec <HAL_UART_Init+0x62>
{
 800e98c:	b510      	push	{r4, lr}
 800e98e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800e990:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800e994:	b30b      	cbz	r3, 800e9da <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800e996:	2324      	movs	r3, #36	@ 0x24
 800e998:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800e99c:	6822      	ldr	r2, [r4, #0]
 800e99e:	6813      	ldr	r3, [r2, #0]
 800e9a0:	f023 0301 	bic.w	r3, r3, #1
 800e9a4:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e9a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e9a8:	b9e3      	cbnz	r3, 800e9e4 <HAL_UART_Init+0x5a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	f7ff fde6 	bl	800e57c <UART_SetConfig>
 800e9b0:	2801      	cmp	r0, #1
 800e9b2:	d011      	beq.n	800e9d8 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e9b4:	6822      	ldr	r2, [r4, #0]
 800e9b6:	6853      	ldr	r3, [r2, #4]
 800e9b8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800e9bc:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e9be:	6822      	ldr	r2, [r4, #0]
 800e9c0:	6893      	ldr	r3, [r2, #8]
 800e9c2:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800e9c6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800e9c8:	6822      	ldr	r2, [r4, #0]
 800e9ca:	6813      	ldr	r3, [r2, #0]
 800e9cc:	f043 0301 	orr.w	r3, r3, #1
 800e9d0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	f7ff ff74 	bl	800e8c0 <UART_CheckIdleState>
}
 800e9d8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800e9da:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800e9de:	f7f4 ffe9 	bl	80039b4 <HAL_UART_MspInit>
 800e9e2:	e7d8      	b.n	800e996 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	f7ff febb 	bl	800e760 <UART_AdvFeatureConfig>
 800e9ea:	e7de      	b.n	800e9aa <HAL_UART_Init+0x20>
    return HAL_ERROR;
 800e9ec:	2001      	movs	r0, #1
}
 800e9ee:	4770      	bx	lr

0800e9f0 <UART_Start_Receive_IT>:
{
 800e9f0:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 800e9f2:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e9f4:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e9f8:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 800ea00:	6883      	ldr	r3, [r0, #8]
 800ea02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea06:	d006      	beq.n	800ea16 <UART_Start_Receive_IT+0x26>
 800ea08:	b9a3      	cbnz	r3, 800ea34 <UART_Start_Receive_IT+0x44>
 800ea0a:	6903      	ldr	r3, [r0, #16]
 800ea0c:	b973      	cbnz	r3, 800ea2c <UART_Start_Receive_IT+0x3c>
 800ea0e:	23ff      	movs	r3, #255	@ 0xff
 800ea10:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800ea14:	e014      	b.n	800ea40 <UART_Start_Receive_IT+0x50>
 800ea16:	6903      	ldr	r3, [r0, #16]
 800ea18:	b923      	cbnz	r3, 800ea24 <UART_Start_Receive_IT+0x34>
 800ea1a:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800ea1e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800ea22:	e00d      	b.n	800ea40 <UART_Start_Receive_IT+0x50>
 800ea24:	23ff      	movs	r3, #255	@ 0xff
 800ea26:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800ea2a:	e009      	b.n	800ea40 <UART_Start_Receive_IT+0x50>
 800ea2c:	237f      	movs	r3, #127	@ 0x7f
 800ea2e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800ea32:	e005      	b.n	800ea40 <UART_Start_Receive_IT+0x50>
 800ea34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea38:	d02e      	beq.n	800ea98 <UART_Start_Receive_IT+0xa8>
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea40:	2300      	movs	r3, #0
 800ea42:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ea46:	2322      	movs	r3, #34	@ 0x22
 800ea48:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea4c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea4e:	f101 0308 	add.w	r3, r1, #8
 800ea52:	e853 3f00 	ldrex	r3, [r3]
 800ea56:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea5a:	3108      	adds	r1, #8
 800ea5c:	e841 3400 	strex	r4, r3, [r1]
 800ea60:	2c00      	cmp	r4, #0
 800ea62:	d1f3      	bne.n	800ea4c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ea64:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800ea66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea6a:	d01f      	beq.n	800eaac <UART_Start_Receive_IT+0xbc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea6c:	6883      	ldr	r3, [r0, #8]
 800ea6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea72:	d043      	beq.n	800eafc <UART_Start_Receive_IT+0x10c>
      huart->RxISR = UART_RxISR_8BIT;
 800ea74:	4b29      	ldr	r3, [pc, #164]	@ (800eb1c <UART_Start_Receive_IT+0x12c>)
 800ea76:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ea78:	6903      	ldr	r3, [r0, #16]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d044      	beq.n	800eb08 <UART_Start_Receive_IT+0x118>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ea7e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea80:	e852 3f00 	ldrex	r3, [r2]
 800ea84:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea88:	e842 3100 	strex	r1, r3, [r2]
 800ea8c:	2900      	cmp	r1, #0
 800ea8e:	d1f6      	bne.n	800ea7e <UART_Start_Receive_IT+0x8e>
}
 800ea90:	2000      	movs	r0, #0
 800ea92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea96:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800ea98:	6903      	ldr	r3, [r0, #16]
 800ea9a:	b91b      	cbnz	r3, 800eaa4 <UART_Start_Receive_IT+0xb4>
 800ea9c:	237f      	movs	r3, #127	@ 0x7f
 800ea9e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800eaa2:	e7cd      	b.n	800ea40 <UART_Start_Receive_IT+0x50>
 800eaa4:	233f      	movs	r3, #63	@ 0x3f
 800eaa6:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800eaaa:	e7c9      	b.n	800ea40 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800eaac:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d8db      	bhi.n	800ea6c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eab4:	6883      	ldr	r3, [r0, #8]
 800eab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eaba:	d019      	beq.n	800eaf0 <UART_Start_Receive_IT+0x100>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800eabc:	4b18      	ldr	r3, [pc, #96]	@ (800eb20 <UART_Start_Receive_IT+0x130>)
 800eabe:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800eac0:	6903      	ldr	r3, [r0, #16]
 800eac2:	b143      	cbz	r3, 800ead6 <UART_Start_Receive_IT+0xe6>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eac4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac6:	e852 3f00 	ldrex	r3, [r2]
 800eaca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eace:	e842 3100 	strex	r1, r3, [r2]
 800ead2:	2900      	cmp	r1, #0
 800ead4:	d1f6      	bne.n	800eac4 <UART_Start_Receive_IT+0xd4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ead6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead8:	f102 0308 	add.w	r3, r2, #8
 800eadc:	e853 3f00 	ldrex	r3, [r3]
 800eae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae4:	3208      	adds	r2, #8
 800eae6:	e842 3100 	strex	r1, r3, [r2]
 800eaea:	2900      	cmp	r1, #0
 800eaec:	d1f3      	bne.n	800ead6 <UART_Start_Receive_IT+0xe6>
 800eaee:	e7cf      	b.n	800ea90 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eaf0:	6903      	ldr	r3, [r0, #16]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1e2      	bne.n	800eabc <UART_Start_Receive_IT+0xcc>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800eaf6:	4b0b      	ldr	r3, [pc, #44]	@ (800eb24 <UART_Start_Receive_IT+0x134>)
 800eaf8:	6743      	str	r3, [r0, #116]	@ 0x74
 800eafa:	e7e1      	b.n	800eac0 <UART_Start_Receive_IT+0xd0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eafc:	6903      	ldr	r3, [r0, #16]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d1b8      	bne.n	800ea74 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 800eb02:	4b09      	ldr	r3, [pc, #36]	@ (800eb28 <UART_Start_Receive_IT+0x138>)
 800eb04:	6743      	str	r3, [r0, #116]	@ 0x74
 800eb06:	e7b7      	b.n	800ea78 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eb08:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb0a:	e852 3f00 	ldrex	r3, [r2]
 800eb0e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb12:	e842 3100 	strex	r1, r3, [r2]
 800eb16:	2900      	cmp	r1, #0
 800eb18:	d1f6      	bne.n	800eb08 <UART_Start_Receive_IT+0x118>
 800eb1a:	e7b9      	b.n	800ea90 <UART_Start_Receive_IT+0xa0>
 800eb1c:	0800e015 	.word	0x0800e015
 800eb20:	0800e1d9 	.word	0x0800e1d9
 800eb24:	0800e3ad 	.word	0x0800e3ad
 800eb28:	0800e0f9 	.word	0x0800e0f9

0800eb2c <HAL_UART_Receive_IT>:
{
 800eb2c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800eb2e:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800eb32:	2b20      	cmp	r3, #32
 800eb34:	d11b      	bne.n	800eb6e <HAL_UART_Receive_IT+0x42>
    if ((pData == NULL) || (Size == 0U))
 800eb36:	b1e1      	cbz	r1, 800eb72 <HAL_UART_Receive_IT+0x46>
 800eb38:	b1ea      	cbz	r2, 800eb76 <HAL_UART_Receive_IT+0x4a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eb3e:	6803      	ldr	r3, [r0, #0]
 800eb40:	4c0e      	ldr	r4, [pc, #56]	@ (800eb7c <HAL_UART_Receive_IT+0x50>)
 800eb42:	42a3      	cmp	r3, r4
 800eb44:	d010      	beq.n	800eb68 <HAL_UART_Receive_IT+0x3c>
 800eb46:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 800eb4a:	42a3      	cmp	r3, r4
 800eb4c:	d00c      	beq.n	800eb68 <HAL_UART_Receive_IT+0x3c>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800eb54:	d008      	beq.n	800eb68 <HAL_UART_Receive_IT+0x3c>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eb56:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb58:	e854 3f00 	ldrex	r3, [r4]
 800eb5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb60:	e844 3500 	strex	r5, r3, [r4]
 800eb64:	2d00      	cmp	r5, #0
 800eb66:	d1f6      	bne.n	800eb56 <HAL_UART_Receive_IT+0x2a>
    return (UART_Start_Receive_IT(huart, pData, Size));
 800eb68:	f7ff ff42 	bl	800e9f0 <UART_Start_Receive_IT>
 800eb6c:	e000      	b.n	800eb70 <HAL_UART_Receive_IT+0x44>
    return HAL_BUSY;
 800eb6e:	2002      	movs	r0, #2
}
 800eb70:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800eb72:	2001      	movs	r0, #1
 800eb74:	e7fc      	b.n	800eb70 <HAL_UART_Receive_IT+0x44>
 800eb76:	2001      	movs	r0, #1
 800eb78:	e7fa      	b.n	800eb70 <HAL_UART_Receive_IT+0x44>
 800eb7a:	bf00      	nop
 800eb7c:	46002400 	.word	0x46002400

0800eb80 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eb80:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800eb82:	b92b      	cbnz	r3, 800eb90 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800eb84:	2301      	movs	r3, #1
 800eb86:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800eb8a:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 800eb8e:	4770      	bx	lr
{
 800eb90:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eb92:	6803      	ldr	r3, [r0, #0]
 800eb94:	689a      	ldr	r2, [r3, #8]
 800eb96:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eb9a:	6899      	ldr	r1, [r3, #8]
 800eb9c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eb9e:	4d09      	ldr	r5, [pc, #36]	@ (800ebc4 <UARTEx_SetNbDataToProcess+0x44>)
 800eba0:	5c6b      	ldrb	r3, [r5, r1]
 800eba2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eba4:	4c08      	ldr	r4, [pc, #32]	@ (800ebc8 <UARTEx_SetNbDataToProcess+0x48>)
 800eba6:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eba8:	fb93 f3f1 	sdiv	r3, r3, r1
 800ebac:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ebb0:	5cab      	ldrb	r3, [r5, r2]
 800ebb2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ebb4:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ebb6:	fb93 f3f2 	sdiv	r3, r3, r2
 800ebba:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 800ebbe:	bc30      	pop	{r4, r5}
 800ebc0:	4770      	bx	lr
 800ebc2:	bf00      	nop
 800ebc4:	08017810 	.word	0x08017810
 800ebc8:	08017808 	.word	0x08017808

0800ebcc <HAL_UARTEx_RxFifoFullCallback>:
}
 800ebcc:	4770      	bx	lr

0800ebce <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800ebce:	4770      	bx	lr

0800ebd0 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800ebd0:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d018      	beq.n	800ec0a <HAL_UARTEx_DisableFifoMode+0x3a>
 800ebd8:	2301      	movs	r3, #1
 800ebda:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800ebde:	2324      	movs	r3, #36	@ 0x24
 800ebe0:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebe4:	6803      	ldr	r3, [r0, #0]
 800ebe6:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800ebe8:	6819      	ldr	r1, [r3, #0]
 800ebea:	f021 0101 	bic.w	r1, r1, #1
 800ebee:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ebf0:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebf8:	6801      	ldr	r1, [r0, #0]
 800ebfa:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ebfc:	2220      	movs	r2, #32
 800ebfe:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800ec02:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 800ec06:	4618      	mov	r0, r3
 800ec08:	4770      	bx	lr
  __HAL_LOCK(huart);
 800ec0a:	2002      	movs	r0, #2
}
 800ec0c:	4770      	bx	lr

0800ec0e <HAL_UARTEx_SetTxFifoThreshold>:
{
 800ec0e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800ec10:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d01d      	beq.n	800ec54 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800ec18:	4604      	mov	r4, r0
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800ec20:	2324      	movs	r3, #36	@ 0x24
 800ec22:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec26:	6803      	ldr	r3, [r0, #0]
 800ec28:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	f022 0201 	bic.w	r2, r2, #1
 800ec30:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ec32:	6802      	ldr	r2, [r0, #0]
 800ec34:	6893      	ldr	r3, [r2, #8]
 800ec36:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800ec3a:	4319      	orrs	r1, r3
 800ec3c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800ec3e:	f7ff ff9f 	bl	800eb80 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec42:	6823      	ldr	r3, [r4, #0]
 800ec44:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ec46:	2320      	movs	r3, #32
 800ec48:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800ec4c:	2000      	movs	r0, #0
 800ec4e:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800ec52:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800ec54:	2002      	movs	r0, #2
 800ec56:	e7fc      	b.n	800ec52 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800ec58 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800ec58:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800ec5a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d01d      	beq.n	800ec9e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800ec62:	4604      	mov	r4, r0
 800ec64:	2301      	movs	r3, #1
 800ec66:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800ec6a:	2324      	movs	r3, #36	@ 0x24
 800ec6c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec70:	6803      	ldr	r3, [r0, #0]
 800ec72:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800ec74:	681a      	ldr	r2, [r3, #0]
 800ec76:	f022 0201 	bic.w	r2, r2, #1
 800ec7a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ec7c:	6802      	ldr	r2, [r0, #0]
 800ec7e:	6893      	ldr	r3, [r2, #8]
 800ec80:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800ec84:	4319      	orrs	r1, r3
 800ec86:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800ec88:	f7ff ff7a 	bl	800eb80 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec8c:	6823      	ldr	r3, [r4, #0]
 800ec8e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ec90:	2320      	movs	r3, #32
 800ec92:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800ec96:	2000      	movs	r0, #0
 800ec98:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800ec9c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800ec9e:	2002      	movs	r0, #2
 800eca0:	e7fc      	b.n	800ec9c <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800eca2 <LL_DLYB_SetDelay>:
{
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800eca2:	6803      	ldr	r3, [r0, #0]
 800eca4:	f043 0302 	orr.w	r3, r3, #2
 800eca8:	6003      	str	r3, [r0, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800ecaa:	684b      	ldr	r3, [r1, #4]
 800ecac:	680a      	ldr	r2, [r1, #0]
 800ecae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ecb2:	6043      	str	r3, [r0, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ecb4:	6803      	ldr	r3, [r0, #0]
 800ecb6:	f023 0302 	bic.w	r3, r3, #2
 800ecba:	6003      	str	r3, [r0, #0]
}
 800ecbc:	4770      	bx	lr
	...

0800ecc0 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800ecc0:	b410      	push	{r4}
 800ecc2:	b083      	sub	sp, #12
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800ecc4:	4b13      	ldr	r3, [pc, #76]	@ (800ed14 <LL_UCPD_Init+0x54>)
 800ecc6:	4298      	cmp	r0, r3
 800ecc8:	d016      	beq.n	800ecf8 <LL_UCPD_Init+0x38>
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800ecca:	6803      	ldr	r3, [r0, #0]
 800eccc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ecd0:	6003      	str	r3, [r0, #0]


  LL_UCPD_Disable(UCPDx);

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800ecd2:	6803      	ldr	r3, [r0, #0]
 800ecd4:	4a10      	ldr	r2, [pc, #64]	@ (800ed18 <LL_UCPD_Init+0x58>)
 800ecd6:	401a      	ands	r2, r3
 800ecd8:	680b      	ldr	r3, [r1, #0]
 800ecda:	684c      	ldr	r4, [r1, #4]
 800ecdc:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
 800ece0:	688c      	ldr	r4, [r1, #8]
 800ece2:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 800ece6:	68c9      	ldr	r1, [r1, #12]
 800ece8:	430b      	orrs	r3, r1
 800ecea:	431a      	orrs	r2, r3
 800ecec:	6002      	str	r2, [r0, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
}
 800ecee:	2000      	movs	r0, #0
 800ecf0:	b003      	add	sp, #12
 800ecf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecf6:	4770      	bx	lr
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800ecf8:	4b08      	ldr	r3, [pc, #32]	@ (800ed1c <LL_UCPD_Init+0x5c>)
 800ecfa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ecfe:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800ed02:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800ed06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ed0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed0e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800ed10:	9b01      	ldr	r3, [sp, #4]
}
 800ed12:	e7da      	b.n	800ecca <LL_UCPD_Init+0xa>
 800ed14:	4000dc00 	.word	0x4000dc00
 800ed18:	fff10000 	.word	0xfff10000
 800ed1c:	46020c00 	.word	0x46020c00

0800ed20 <LL_UCPD_StructInit>:
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800ed20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ed24:	6003      	str	r3, [r0, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800ed26:	2307      	movs	r3, #7
 800ed28:	6043      	str	r3, [r0, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800ed2a:	2310      	movs	r3, #16
 800ed2c:	6083      	str	r3, [r0, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800ed2e:	230d      	movs	r3, #13
 800ed30:	60c3      	str	r3, [r0, #12]
}
 800ed32:	4770      	bx	lr

0800ed34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ed34:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800ed36:	2300      	movs	r3, #0
 800ed38:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ed3a:	9b01      	ldr	r3, [sp, #4]
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	9301      	str	r3, [sp, #4]

    if (count > 200000U)
 800ed40:	9a01      	ldr	r2, [sp, #4]
 800ed42:	4b0f      	ldr	r3, [pc, #60]	@ (800ed80 <USB_CoreReset+0x4c>)
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d815      	bhi.n	800ed74 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ed48:	6903      	ldr	r3, [r0, #16]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	daf5      	bge.n	800ed3a <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ed52:	6903      	ldr	r3, [r0, #16]
 800ed54:	f043 0301 	orr.w	r3, r3, #1
 800ed58:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 800ed5a:	9b01      	ldr	r3, [sp, #4]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	9301      	str	r3, [sp, #4]

    if (count > 200000U)
 800ed60:	9a01      	ldr	r2, [sp, #4]
 800ed62:	4b07      	ldr	r3, [pc, #28]	@ (800ed80 <USB_CoreReset+0x4c>)
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d808      	bhi.n	800ed7a <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ed68:	6903      	ldr	r3, [r0, #16]
 800ed6a:	f013 0f01 	tst.w	r3, #1
 800ed6e:	d1f4      	bne.n	800ed5a <USB_CoreReset+0x26>

  return HAL_OK;
 800ed70:	2000      	movs	r0, #0
 800ed72:	e000      	b.n	800ed76 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 800ed74:	2003      	movs	r0, #3
}
 800ed76:	b002      	add	sp, #8
 800ed78:	4770      	bx	lr
      return HAL_TIMEOUT;
 800ed7a:	2003      	movs	r0, #3
 800ed7c:	e7fb      	b.n	800ed76 <USB_CoreReset+0x42>
 800ed7e:	bf00      	nop
 800ed80:	00030d40 	.word	0x00030d40

0800ed84 <USB_CoreInit>:
{
 800ed84:	b084      	sub	sp, #16
 800ed86:	b510      	push	{r4, lr}
 800ed88:	4604      	mov	r4, r0
 800ed8a:	a803      	add	r0, sp, #12
 800ed8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800ed90:	9b08      	ldr	r3, [sp, #32]
 800ed92:	2b03      	cmp	r3, #3
 800ed94:	d009      	beq.n	800edaa <USB_CoreInit+0x26>
  ret = USB_CoreReset(USBx);
 800ed96:	4620      	mov	r0, r4
 800ed98:	f7ff ffcc 	bl	800ed34 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800ed9c:	9b05      	ldr	r3, [sp, #20]
 800ed9e:	2b01      	cmp	r3, #1
 800eda0:	d008      	beq.n	800edb4 <USB_CoreInit+0x30>
}
 800eda2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eda6:	b004      	add	sp, #16
 800eda8:	4770      	bx	lr
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 800edaa:	68e3      	ldr	r3, [r4, #12]
 800edac:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800edb0:	60e3      	str	r3, [r4, #12]
 800edb2:	e7f0      	b.n	800ed96 <USB_CoreInit+0x12>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800edb4:	68a3      	ldr	r3, [r4, #8]
 800edb6:	f043 0308 	orr.w	r3, r3, #8
 800edba:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800edbc:	68a3      	ldr	r3, [r4, #8]
 800edbe:	f043 0320 	orr.w	r3, r3, #32
 800edc2:	60a3      	str	r3, [r4, #8]
 800edc4:	e7ed      	b.n	800eda2 <USB_CoreInit+0x1e>
	...

0800edc8 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800edc8:	2a02      	cmp	r2, #2
 800edca:	d00a      	beq.n	800ede2 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800edcc:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800edce:	68c3      	ldr	r3, [r0, #12]
 800edd0:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800edd4:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800edd6:	68c3      	ldr	r3, [r0, #12]
 800edd8:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800eddc:	60c3      	str	r3, [r0, #12]
}
 800edde:	2000      	movs	r0, #0
 800ede0:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ede2:	4b23      	ldr	r3, [pc, #140]	@ (800ee70 <USB_SetTurnaroundTime+0xa8>)
 800ede4:	440b      	add	r3, r1
 800ede6:	4a23      	ldr	r2, [pc, #140]	@ (800ee74 <USB_SetTurnaroundTime+0xac>)
 800ede8:	4293      	cmp	r3, r2
 800edea:	d92f      	bls.n	800ee4c <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800edec:	4b22      	ldr	r3, [pc, #136]	@ (800ee78 <USB_SetTurnaroundTime+0xb0>)
 800edee:	440b      	add	r3, r1
 800edf0:	4a22      	ldr	r2, [pc, #136]	@ (800ee7c <USB_SetTurnaroundTime+0xb4>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d92c      	bls.n	800ee50 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800edf6:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 800edfa:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 800edfe:	4a20      	ldr	r2, [pc, #128]	@ (800ee80 <USB_SetTurnaroundTime+0xb8>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d927      	bls.n	800ee54 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ee04:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 800ee08:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 800ee0c:	4a1d      	ldr	r2, [pc, #116]	@ (800ee84 <USB_SetTurnaroundTime+0xbc>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d322      	bcc.n	800ee58 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ee12:	4b1d      	ldr	r3, [pc, #116]	@ (800ee88 <USB_SetTurnaroundTime+0xc0>)
 800ee14:	440b      	add	r3, r1
 800ee16:	4a1d      	ldr	r2, [pc, #116]	@ (800ee8c <USB_SetTurnaroundTime+0xc4>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d91f      	bls.n	800ee5c <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ee1c:	4b1c      	ldr	r3, [pc, #112]	@ (800ee90 <USB_SetTurnaroundTime+0xc8>)
 800ee1e:	440b      	add	r3, r1
 800ee20:	4a1c      	ldr	r2, [pc, #112]	@ (800ee94 <USB_SetTurnaroundTime+0xcc>)
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d31c      	bcc.n	800ee60 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ee26:	4b1c      	ldr	r3, [pc, #112]	@ (800ee98 <USB_SetTurnaroundTime+0xd0>)
 800ee28:	440b      	add	r3, r1
 800ee2a:	4a1c      	ldr	r2, [pc, #112]	@ (800ee9c <USB_SetTurnaroundTime+0xd4>)
 800ee2c:	4293      	cmp	r3, r2
 800ee2e:	d319      	bcc.n	800ee64 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ee30:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 800ee34:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 800ee38:	4a19      	ldr	r2, [pc, #100]	@ (800eea0 <USB_SetTurnaroundTime+0xd8>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d314      	bcc.n	800ee68 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ee3e:	4b19      	ldr	r3, [pc, #100]	@ (800eea4 <USB_SetTurnaroundTime+0xdc>)
 800ee40:	440b      	add	r3, r1
 800ee42:	4a19      	ldr	r2, [pc, #100]	@ (800eea8 <USB_SetTurnaroundTime+0xe0>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d211      	bcs.n	800ee6c <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 800ee48:	2207      	movs	r2, #7
 800ee4a:	e7c0      	b.n	800edce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 800ee4c:	220f      	movs	r2, #15
 800ee4e:	e7be      	b.n	800edce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 800ee50:	220e      	movs	r2, #14
 800ee52:	e7bc      	b.n	800edce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 800ee54:	220d      	movs	r2, #13
 800ee56:	e7ba      	b.n	800edce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800ee58:	220c      	movs	r2, #12
 800ee5a:	e7b8      	b.n	800edce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 800ee5c:	220b      	movs	r2, #11
 800ee5e:	e7b6      	b.n	800edce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 800ee60:	220a      	movs	r2, #10
 800ee62:	e7b4      	b.n	800edce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 800ee64:	2209      	movs	r2, #9
 800ee66:	e7b2      	b.n	800edce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800ee68:	2208      	movs	r2, #8
 800ee6a:	e7b0      	b.n	800edce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 800ee6c:	2206      	movs	r2, #6
 800ee6e:	e7ae      	b.n	800edce <USB_SetTurnaroundTime+0x6>
 800ee70:	ff275340 	.word	0xff275340
 800ee74:	000c34ff 	.word	0x000c34ff
 800ee78:	ff1b1e40 	.word	0xff1b1e40
 800ee7c:	000f423f 	.word	0x000f423f
 800ee80:	00124f7f 	.word	0x00124f7f
 800ee84:	0013d620 	.word	0x0013d620
 800ee88:	fee5b660 	.word	0xfee5b660
 800ee8c:	0016e35f 	.word	0x0016e35f
 800ee90:	feced300 	.word	0xfeced300
 800ee94:	001b7740 	.word	0x001b7740
 800ee98:	feb35bc0 	.word	0xfeb35bc0
 800ee9c:	002191c0 	.word	0x002191c0
 800eea0:	00387520 	.word	0x00387520
 800eea4:	fe5954e0 	.word	0xfe5954e0
 800eea8:	00419ce0 	.word	0x00419ce0

0800eeac <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800eeac:	6883      	ldr	r3, [r0, #8]
 800eeae:	f043 0301 	orr.w	r3, r3, #1
 800eeb2:	6083      	str	r3, [r0, #8]
}
 800eeb4:	2000      	movs	r0, #0
 800eeb6:	4770      	bx	lr

0800eeb8 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800eeb8:	6883      	ldr	r3, [r0, #8]
 800eeba:	f023 0301 	bic.w	r3, r3, #1
 800eebe:	6083      	str	r3, [r0, #8]
}
 800eec0:	2000      	movs	r0, #0
 800eec2:	4770      	bx	lr

0800eec4 <USB_FlushTxFifo>:
{
 800eec4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800eec6:	2300      	movs	r3, #0
 800eec8:	9301      	str	r3, [sp, #4]
    count++;
 800eeca:	9b01      	ldr	r3, [sp, #4]
 800eecc:	3301      	adds	r3, #1
 800eece:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800eed0:	9a01      	ldr	r2, [sp, #4]
 800eed2:	4b0f      	ldr	r3, [pc, #60]	@ (800ef10 <USB_FlushTxFifo+0x4c>)
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d815      	bhi.n	800ef04 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eed8:	6903      	ldr	r3, [r0, #16]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	daf5      	bge.n	800eeca <USB_FlushTxFifo+0x6>
  count = 0U;
 800eede:	2300      	movs	r3, #0
 800eee0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800eee2:	0189      	lsls	r1, r1, #6
 800eee4:	f041 0120 	orr.w	r1, r1, #32
 800eee8:	6101      	str	r1, [r0, #16]
    count++;
 800eeea:	9b01      	ldr	r3, [sp, #4]
 800eeec:	3301      	adds	r3, #1
 800eeee:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800eef0:	9a01      	ldr	r2, [sp, #4]
 800eef2:	4b07      	ldr	r3, [pc, #28]	@ (800ef10 <USB_FlushTxFifo+0x4c>)
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d808      	bhi.n	800ef0a <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800eef8:	6903      	ldr	r3, [r0, #16]
 800eefa:	f013 0f20 	tst.w	r3, #32
 800eefe:	d1f4      	bne.n	800eeea <USB_FlushTxFifo+0x26>
  return HAL_OK;
 800ef00:	2000      	movs	r0, #0
 800ef02:	e000      	b.n	800ef06 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 800ef04:	2003      	movs	r0, #3
}
 800ef06:	b002      	add	sp, #8
 800ef08:	4770      	bx	lr
      return HAL_TIMEOUT;
 800ef0a:	2003      	movs	r0, #3
 800ef0c:	e7fb      	b.n	800ef06 <USB_FlushTxFifo+0x42>
 800ef0e:	bf00      	nop
 800ef10:	00030d40 	.word	0x00030d40

0800ef14 <USB_FlushRxFifo>:
{
 800ef14:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800ef16:	2300      	movs	r3, #0
 800ef18:	9301      	str	r3, [sp, #4]
    count++;
 800ef1a:	9b01      	ldr	r3, [sp, #4]
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800ef20:	9a01      	ldr	r2, [sp, #4]
 800ef22:	4b0e      	ldr	r3, [pc, #56]	@ (800ef5c <USB_FlushRxFifo+0x48>)
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d813      	bhi.n	800ef50 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ef28:	6903      	ldr	r3, [r0, #16]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	daf5      	bge.n	800ef1a <USB_FlushRxFifo+0x6>
  count = 0U;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ef32:	2310      	movs	r3, #16
 800ef34:	6103      	str	r3, [r0, #16]
    count++;
 800ef36:	9b01      	ldr	r3, [sp, #4]
 800ef38:	3301      	adds	r3, #1
 800ef3a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800ef3c:	9a01      	ldr	r2, [sp, #4]
 800ef3e:	4b07      	ldr	r3, [pc, #28]	@ (800ef5c <USB_FlushRxFifo+0x48>)
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d808      	bhi.n	800ef56 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ef44:	6903      	ldr	r3, [r0, #16]
 800ef46:	f013 0f10 	tst.w	r3, #16
 800ef4a:	d1f4      	bne.n	800ef36 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 800ef4c:	2000      	movs	r0, #0
 800ef4e:	e000      	b.n	800ef52 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 800ef50:	2003      	movs	r0, #3
}
 800ef52:	b002      	add	sp, #8
 800ef54:	4770      	bx	lr
      return HAL_TIMEOUT;
 800ef56:	2003      	movs	r0, #3
 800ef58:	e7fb      	b.n	800ef52 <USB_FlushRxFifo+0x3e>
 800ef5a:	bf00      	nop
 800ef5c:	00030d40 	.word	0x00030d40

0800ef60 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800ef60:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800ef64:	4319      	orrs	r1, r3
 800ef66:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 800ef6a:	2000      	movs	r0, #0
 800ef6c:	4770      	bx	lr
	...

0800ef70 <USB_DevInit>:
{
 800ef70:	b084      	sub	sp, #16
 800ef72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef74:	4604      	mov	r4, r0
 800ef76:	a807      	add	r0, sp, #28
 800ef78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	e006      	b.n	800ef8e <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 800ef80:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800ef84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ef88:	2100      	movs	r1, #0
 800ef8a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	2b0e      	cmp	r3, #14
 800ef90:	d9f6      	bls.n	800ef80 <USB_DevInit+0x10>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 800ef92:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ef94:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ef98:	63a3      	str	r3, [r4, #56]	@ 0x38
  if (cfg.vbus_sensing_enable == 0U)
 800ef9a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800ef9c:	b9f6      	cbnz	r6, 800efdc <USB_DevInit+0x6c>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ef9e:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 800efa2:	f043 0302 	orr.w	r3, r3, #2
 800efa6:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800efaa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800efac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800efb0:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 800efb2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800efb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800efb8:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 800efba:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800efbc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800efc0:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 800efc2:	2300      	movs	r3, #0
 800efc4:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800efc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800efca:	2b03      	cmp	r3, #3
 800efcc:	d118      	bne.n	800f000 <USB_DevInit+0x90>
    if (cfg.speed == USBD_HS_SPEED)
 800efce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efd0:	b98b      	cbnz	r3, 800eff6 <USB_DevInit+0x86>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800efd2:	2100      	movs	r1, #0
 800efd4:	4620      	mov	r0, r4
 800efd6:	f7ff ffc3 	bl	800ef60 <USB_SetDevSpeed>
 800efda:	e015      	b.n	800f008 <USB_DevInit+0x98>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 800efdc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800efde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800efe2:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 800efe4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800efe6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800efea:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800efec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800efee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eff2:	63a3      	str	r3, [r4, #56]	@ 0x38
 800eff4:	e7e5      	b.n	800efc2 <USB_DevInit+0x52>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eff6:	2101      	movs	r1, #1
 800eff8:	4620      	mov	r0, r4
 800effa:	f7ff ffb1 	bl	800ef60 <USB_SetDevSpeed>
 800effe:	e003      	b.n	800f008 <USB_DevInit+0x98>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f000:	2103      	movs	r1, #3
 800f002:	4620      	mov	r0, r4
 800f004:	f7ff ffac 	bl	800ef60 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f008:	2110      	movs	r1, #16
 800f00a:	4620      	mov	r0, r4
 800f00c:	f7ff ff5a 	bl	800eec4 <USB_FlushTxFifo>
 800f010:	4605      	mov	r5, r0
 800f012:	b100      	cbz	r0, 800f016 <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 800f014:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f016:	4620      	mov	r0, r4
 800f018:	f7ff ff7c 	bl	800ef14 <USB_FlushRxFifo>
 800f01c:	b100      	cbz	r0, 800f020 <USB_DevInit+0xb0>
    ret = HAL_ERROR;
 800f01e:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800f020:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 800f024:	2300      	movs	r3, #0
 800f026:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f02a:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f02e:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f032:	e00a      	b.n	800f04a <USB_DevInit+0xda>
      if (i == 0U)
 800f034:	b9c3      	cbnz	r3, 800f068 <USB_DevInit+0xf8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f036:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800f03a:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f03e:	2200      	movs	r2, #0
 800f040:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f042:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 800f046:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f048:	3301      	adds	r3, #1
 800f04a:	9907      	ldr	r1, [sp, #28]
 800f04c:	4299      	cmp	r1, r3
 800f04e:	d910      	bls.n	800f072 <USB_DevInit+0x102>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f050:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800f054:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 800f058:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 800f05c:	2800      	cmp	r0, #0
 800f05e:	dbe9      	blt.n	800f034 <USB_DevInit+0xc4>
      USBx_INEP(i)->DIEPCTL = 0U;
 800f060:	2000      	movs	r0, #0
 800f062:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 800f066:	e7ea      	b.n	800f03e <USB_DevInit+0xce>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f068:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f06c:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 800f070:	e7e5      	b.n	800f03e <USB_DevInit+0xce>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f072:	2300      	movs	r3, #0
 800f074:	e00a      	b.n	800f08c <USB_DevInit+0x11c>
      if (i == 0U)
 800f076:	b1bb      	cbz	r3, 800f0a8 <USB_DevInit+0x138>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f078:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 800f07c:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f080:	2200      	movs	r2, #0
 800f082:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f084:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 800f088:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f08a:	3301      	adds	r3, #1
 800f08c:	4299      	cmp	r1, r3
 800f08e:	d910      	bls.n	800f0b2 <USB_DevInit+0x142>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f090:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800f094:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 800f098:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 800f09c:	2f00      	cmp	r7, #0
 800f09e:	dbea      	blt.n	800f076 <USB_DevInit+0x106>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f0a0:	2700      	movs	r7, #0
 800f0a2:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 800f0a6:	e7eb      	b.n	800f080 <USB_DevInit+0x110>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f0a8:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 800f0ac:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 800f0b0:	e7e6      	b.n	800f080 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f0b2:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800f0b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f0ba:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f0c2:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 800f0c6:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800f0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0ca:	b91b      	cbnz	r3, 800f0d4 <USB_DevInit+0x164>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f0cc:	69a3      	ldr	r3, [r4, #24]
 800f0ce:	f043 0310 	orr.w	r3, r3, #16
 800f0d2:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f0d4:	69a2      	ldr	r2, [r4, #24]
 800f0d6:	4b0b      	ldr	r3, [pc, #44]	@ (800f104 <USB_DevInit+0x194>)
 800f0d8:	4313      	orrs	r3, r2
 800f0da:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800f0dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f0de:	b11b      	cbz	r3, 800f0e8 <USB_DevInit+0x178>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f0e0:	69a3      	ldr	r3, [r4, #24]
 800f0e2:	f043 0308 	orr.w	r3, r3, #8
 800f0e6:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800f0e8:	2e01      	cmp	r6, #1
 800f0ea:	d004      	beq.n	800f0f6 <USB_DevInit+0x186>
}
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f0f2:	b004      	add	sp, #16
 800f0f4:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f0f6:	69a3      	ldr	r3, [r4, #24]
 800f0f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f0fc:	f043 0304 	orr.w	r3, r3, #4
 800f100:	61a3      	str	r3, [r4, #24]
 800f102:	e7f3      	b.n	800f0ec <USB_DevInit+0x17c>
 800f104:	803c3800 	.word	0x803c3800

0800f108 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f108:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f10c:	f013 0306 	ands.w	r3, r3, #6
 800f110:	d007      	beq.n	800f122 <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f112:	2b02      	cmp	r3, #2
 800f114:	d007      	beq.n	800f126 <USB_GetDevSpeed+0x1e>
 800f116:	2b06      	cmp	r3, #6
 800f118:	d001      	beq.n	800f11e <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 800f11a:	200f      	movs	r0, #15
}
 800f11c:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 800f11e:	2002      	movs	r0, #2
 800f120:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 800f122:	2000      	movs	r0, #0
 800f124:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 800f126:	2002      	movs	r0, #2
 800f128:	4770      	bx	lr

0800f12a <USB_ActivateEndpoint>:
{
 800f12a:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800f12c:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800f130:	784b      	ldrb	r3, [r1, #1]
 800f132:	2b01      	cmp	r3, #1
 800f134:	d023      	beq.n	800f17e <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f136:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 800f13a:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 800f13e:	f00c 040f 	and.w	r4, ip, #15
 800f142:	2201      	movs	r2, #1
 800f144:	40a2      	lsls	r2, r4
 800f146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f14a:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f14e:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800f152:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800f156:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800f15a:	d10e      	bne.n	800f17a <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f15c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800f160:	688a      	ldr	r2, [r1, #8]
 800f162:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f166:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f168:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800f16c:	4313      	orrs	r3, r2
 800f16e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f176:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800f17a:	2000      	movs	r0, #0
 800f17c:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f17e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800f182:	f00c 0e0f 	and.w	lr, ip, #15
 800f186:	fa03 f30e 	lsl.w	r3, r3, lr
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	4313      	orrs	r3, r2
 800f18e:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f192:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800f196:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800f19a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800f19e:	d1ec      	bne.n	800f17a <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f1a0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800f1a4:	688a      	ldr	r2, [r1, #8]
 800f1a6:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f1aa:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f1ac:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f1b0:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f1b4:	4313      	orrs	r3, r2
 800f1b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f1ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f1be:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 800f1c2:	e7da      	b.n	800f17a <USB_ActivateEndpoint+0x50>

0800f1c4 <USB_DeactivateEndpoint>:
{
 800f1c4:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800f1c6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f1c8:	784a      	ldrb	r2, [r1, #1]
 800f1ca:	2a01      	cmp	r2, #1
 800f1cc:	d026      	beq.n	800f21c <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f1ce:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800f1d2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800f1d6:	2a00      	cmp	r2, #0
 800f1d8:	db52      	blt.n	800f280 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f1da:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 800f1de:	780a      	ldrb	r2, [r1, #0]
 800f1e0:	f002 020f 	and.w	r2, r2, #15
 800f1e4:	f04f 0c01 	mov.w	ip, #1
 800f1e8:	fa0c f202 	lsl.w	r2, ip, r2
 800f1ec:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 800f1f0:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f1f4:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800f1f8:	7809      	ldrb	r1, [r1, #0]
 800f1fa:	f001 010f 	and.w	r1, r1, #15
 800f1fe:	fa0c fc01 	lsl.w	ip, ip, r1
 800f202:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 800f206:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f20a:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800f20e:	4a23      	ldr	r2, [pc, #140]	@ (800f29c <USB_DeactivateEndpoint+0xd8>)
 800f210:	400a      	ands	r2, r1
 800f212:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 800f216:	2000      	movs	r0, #0
 800f218:	bc30      	pop	{r4, r5}
 800f21a:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f21c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800f220:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800f224:	2a00      	cmp	r2, #0
 800f226:	db1e      	blt.n	800f266 <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f228:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 800f22c:	780a      	ldrb	r2, [r1, #0]
 800f22e:	f002 020f 	and.w	r2, r2, #15
 800f232:	2401      	movs	r4, #1
 800f234:	fa04 f202 	lsl.w	r2, r4, r2
 800f238:	b292      	uxth	r2, r2
 800f23a:	ea25 0202 	bic.w	r2, r5, r2
 800f23e:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f242:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800f246:	7809      	ldrb	r1, [r1, #0]
 800f248:	f001 010f 	and.w	r1, r1, #15
 800f24c:	408c      	lsls	r4, r1
 800f24e:	b2a4      	uxth	r4, r4
 800f250:	ea22 0204 	bic.w	r2, r2, r4
 800f254:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f258:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 800f25c:	4a10      	ldr	r2, [pc, #64]	@ (800f2a0 <USB_DeactivateEndpoint+0xdc>)
 800f25e:	400a      	ands	r2, r1
 800f260:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 800f264:	e7d7      	b.n	800f216 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f266:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800f26a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800f26e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f272:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800f276:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800f27a:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 800f27e:	e7d3      	b.n	800f228 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f280:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800f284:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800f288:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f28c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800f290:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800f294:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 800f298:	e79f      	b.n	800f1da <USB_DeactivateEndpoint+0x16>
 800f29a:	bf00      	nop
 800f29c:	eff37800 	.word	0xeff37800
 800f2a0:	ec337800 	.word	0xec337800

0800f2a4 <USB_EPStopXfer>:
{
 800f2a4:	b410      	push	{r4}
 800f2a6:	b083      	sub	sp, #12
 800f2a8:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 800f2ae:	7848      	ldrb	r0, [r1, #1]
 800f2b0:	2801      	cmp	r0, #1
 800f2b2:	d00b      	beq.n	800f2cc <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f2b4:	780b      	ldrb	r3, [r1, #0]
 800f2b6:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800f2ba:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	db2d      	blt.n	800f31e <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 800f2c2:	2000      	movs	r0, #0
}
 800f2c4:	b003      	add	sp, #12
 800f2c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2ca:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f2cc:	780b      	ldrb	r3, [r1, #0]
 800f2ce:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800f2d2:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800f2d6:	2c00      	cmp	r4, #0
 800f2d8:	db01      	blt.n	800f2de <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 800f2da:	2000      	movs	r0, #0
 800f2dc:	e7f2      	b.n	800f2c4 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f2de:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800f2e2:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 800f2e6:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f2ea:	780b      	ldrb	r3, [r1, #0]
 800f2ec:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800f2f0:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800f2f4:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 800f2f8:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 800f2fc:	9b01      	ldr	r3, [sp, #4]
 800f2fe:	3301      	adds	r3, #1
 800f300:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800f302:	9c01      	ldr	r4, [sp, #4]
 800f304:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f308:	429c      	cmp	r4, r3
 800f30a:	d8db      	bhi.n	800f2c4 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f30c:	780b      	ldrb	r3, [r1, #0]
 800f30e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800f312:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800f316:	2b00      	cmp	r3, #0
 800f318:	dbf0      	blt.n	800f2fc <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 800f31a:	2000      	movs	r0, #0
 800f31c:	e7d2      	b.n	800f2c4 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f31e:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 800f322:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 800f326:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f32a:	780b      	ldrb	r3, [r1, #0]
 800f32c:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800f330:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 800f334:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 800f338:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 800f33c:	9b01      	ldr	r3, [sp, #4]
 800f33e:	3301      	adds	r3, #1
 800f340:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800f342:	9801      	ldr	r0, [sp, #4]
 800f344:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f348:	4298      	cmp	r0, r3
 800f34a:	d808      	bhi.n	800f35e <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f34c:	780b      	ldrb	r3, [r1, #0]
 800f34e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800f352:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800f356:	2b00      	cmp	r3, #0
 800f358:	dbf0      	blt.n	800f33c <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 800f35a:	2000      	movs	r0, #0
 800f35c:	e7b2      	b.n	800f2c4 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 800f35e:	2001      	movs	r0, #1
 800f360:	e7b0      	b.n	800f2c4 <USB_EPStopXfer+0x20>

0800f362 <USB_WritePacket>:
{
 800f362:	b510      	push	{r4, lr}
 800f364:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800f368:	b984      	cbnz	r4, 800f38c <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 800f36a:	3303      	adds	r3, #3
 800f36c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 800f370:	f04f 0c00 	mov.w	ip, #0
 800f374:	e008      	b.n	800f388 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f376:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800f37a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f37e:	f851 4b04 	ldr.w	r4, [r1], #4
 800f382:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 800f384:	f10c 0c01 	add.w	ip, ip, #1
 800f388:	45f4      	cmp	ip, lr
 800f38a:	d3f4      	bcc.n	800f376 <USB_WritePacket+0x14>
}
 800f38c:	2000      	movs	r0, #0
 800f38e:	bd10      	pop	{r4, pc}

0800f390 <USB_EPStartXfer>:
{
 800f390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f392:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 800f394:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800f396:	784b      	ldrb	r3, [r1, #1]
 800f398:	2b01      	cmp	r3, #1
 800f39a:	d02f      	beq.n	800f3fc <USB_EPStartXfer+0x6c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f39c:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 800f3a0:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 800f3a4:	691d      	ldr	r5, [r3, #16]
 800f3a6:	0ced      	lsrs	r5, r5, #19
 800f3a8:	04ed      	lsls	r5, r5, #19
 800f3aa:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f3ac:	691d      	ldr	r5, [r3, #16]
 800f3ae:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 800f3b2:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 800f3b6:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 800f3b8:	2c00      	cmp	r4, #0
 800f3ba:	f040 80cc 	bne.w	800f556 <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 800f3be:	690c      	ldr	r4, [r1, #16]
 800f3c0:	b10c      	cbz	r4, 800f3c6 <USB_EPStartXfer+0x36>
        ep->xfer_len = ep->maxpacket;
 800f3c2:	688c      	ldr	r4, [r1, #8]
 800f3c4:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 800f3c6:	688c      	ldr	r4, [r1, #8]
 800f3c8:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f3ca:	691d      	ldr	r5, [r3, #16]
 800f3cc:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800f3d0:	432c      	orrs	r4, r5
 800f3d2:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f3d4:	691c      	ldr	r4, [r3, #16]
 800f3d6:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800f3da:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800f3dc:	2a01      	cmp	r2, #1
 800f3de:	f000 80dd 	beq.w	800f59c <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 800f3e2:	790b      	ldrb	r3, [r1, #4]
 800f3e4:	2b01      	cmp	r3, #1
 800f3e6:	f000 80df 	beq.w	800f5a8 <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f3ea:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800f3ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f3f2:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 800f3f6:	2000      	movs	r0, #0
 800f3f8:	b003      	add	sp, #12
 800f3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 800f3fc:	690b      	ldr	r3, [r1, #16]
 800f3fe:	bb83      	cbnz	r3, 800f462 <USB_EPStartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f400:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800f404:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 800f408:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 800f40c:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 800f410:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f414:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 800f418:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 800f41c:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f420:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 800f424:	0ced      	lsrs	r5, r5, #19
 800f426:	04ed      	lsls	r5, r5, #19
 800f428:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 800f42c:	2a01      	cmp	r2, #1
 800f42e:	d050      	beq.n	800f4d2 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f430:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800f434:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800f438:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f43c:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 800f440:	790b      	ldrb	r3, [r1, #4]
 800f442:	2b01      	cmp	r3, #1
 800f444:	d06e      	beq.n	800f524 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 800f446:	690b      	ldr	r3, [r1, #16]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d0d4      	beq.n	800f3f6 <USB_EPStartXfer+0x66>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f44c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 800f450:	7809      	ldrb	r1, [r1, #0]
 800f452:	f001 010f 	and.w	r1, r1, #15
 800f456:	2201      	movs	r2, #1
 800f458:	408a      	lsls	r2, r1
 800f45a:	4313      	orrs	r3, r2
 800f45c:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 800f460:	e7c9      	b.n	800f3f6 <USB_EPStartXfer+0x66>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f462:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800f466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f46a:	691d      	ldr	r5, [r3, #16]
 800f46c:	0ced      	lsrs	r5, r5, #19
 800f46e:	04ed      	lsls	r5, r5, #19
 800f470:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f472:	691d      	ldr	r5, [r3, #16]
 800f474:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 800f478:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 800f47c:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 800f47e:	b9dc      	cbnz	r4, 800f4b8 <USB_EPStartXfer+0x128>
        if (ep->xfer_len > ep->maxpacket)
 800f480:	690e      	ldr	r6, [r1, #16]
 800f482:	688d      	ldr	r5, [r1, #8]
 800f484:	42ae      	cmp	r6, r5
 800f486:	d900      	bls.n	800f48a <USB_EPStartXfer+0xfa>
          ep->xfer_len = ep->maxpacket;
 800f488:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f48a:	691d      	ldr	r5, [r3, #16]
 800f48c:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 800f490:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f492:	691d      	ldr	r5, [r3, #16]
 800f494:	690e      	ldr	r6, [r1, #16]
 800f496:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 800f49a:	ea45 050c 	orr.w	r5, r5, ip
 800f49e:	611d      	str	r5, [r3, #16]
      if (ep->type == EP_TYPE_ISOC)
 800f4a0:	790d      	ldrb	r5, [r1, #4]
 800f4a2:	2d01      	cmp	r5, #1
 800f4a4:	d1c2      	bne.n	800f42c <USB_EPStartXfer+0x9c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f4a6:	691d      	ldr	r5, [r3, #16]
 800f4a8:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 800f4ac:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f4ae:	691d      	ldr	r5, [r3, #16]
 800f4b0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800f4b4:	611d      	str	r5, [r3, #16]
 800f4b6:	e7b9      	b.n	800f42c <USB_EPStartXfer+0x9c>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f4b8:	691e      	ldr	r6, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f4ba:	690d      	ldr	r5, [r1, #16]
 800f4bc:	688f      	ldr	r7, [r1, #8]
 800f4be:	443d      	add	r5, r7
 800f4c0:	3d01      	subs	r5, #1
 800f4c2:	fbb5 f5f7 	udiv	r5, r5, r7
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f4c6:	4f42      	ldr	r7, [pc, #264]	@ (800f5d0 <USB_EPStartXfer+0x240>)
 800f4c8:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 800f4cc:	4335      	orrs	r5, r6
 800f4ce:	611d      	str	r5, [r3, #16]
 800f4d0:	e7df      	b.n	800f492 <USB_EPStartXfer+0x102>
      if ((uint32_t)ep->dma_addr != 0U)
 800f4d2:	69cb      	ldr	r3, [r1, #28]
 800f4d4:	b11b      	cbz	r3, 800f4de <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f4d6:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800f4da:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 800f4de:	790b      	ldrb	r3, [r1, #4]
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	d008      	beq.n	800f4f6 <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f4e4:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800f4e8:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800f4ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f4f0:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 800f4f4:	e77f      	b.n	800f3f6 <USB_EPStartXfer+0x66>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f4f6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800f4fa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800f4fe:	d108      	bne.n	800f512 <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f500:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800f504:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 800f508:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f50c:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 800f510:	e7e8      	b.n	800f4e4 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f512:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800f516:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 800f51a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f51e:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 800f522:	e7df      	b.n	800f4e4 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f524:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800f528:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800f52c:	d10c      	bne.n	800f548 <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f52e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800f532:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f536:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f53a:	9200      	str	r2, [sp, #0]
 800f53c:	8a0b      	ldrh	r3, [r1, #16]
 800f53e:	780a      	ldrb	r2, [r1, #0]
 800f540:	68c9      	ldr	r1, [r1, #12]
 800f542:	f7ff ff0e 	bl	800f362 <USB_WritePacket>
 800f546:	e756      	b.n	800f3f6 <USB_EPStartXfer+0x66>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f548:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800f54c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f550:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 800f554:	e7f1      	b.n	800f53a <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 800f556:	690c      	ldr	r4, [r1, #16]
 800f558:	b954      	cbnz	r4, 800f570 <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f55a:	691c      	ldr	r4, [r3, #16]
 800f55c:	688d      	ldr	r5, [r1, #8]
 800f55e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800f562:	432c      	orrs	r4, r5
 800f564:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f566:	691c      	ldr	r4, [r3, #16]
 800f568:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800f56c:	611c      	str	r4, [r3, #16]
 800f56e:	e735      	b.n	800f3dc <USB_EPStartXfer+0x4c>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f570:	688d      	ldr	r5, [r1, #8]
 800f572:	442c      	add	r4, r5
 800f574:	3c01      	subs	r4, #1
 800f576:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f57a:	b2a4      	uxth	r4, r4
 800f57c:	fb04 f505 	mul.w	r5, r4, r5
 800f580:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f582:	691d      	ldr	r5, [r3, #16]
 800f584:	4e12      	ldr	r6, [pc, #72]	@ (800f5d0 <USB_EPStartXfer+0x240>)
 800f586:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800f58a:	432c      	orrs	r4, r5
 800f58c:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f58e:	691c      	ldr	r4, [r3, #16]
 800f590:	6a0d      	ldr	r5, [r1, #32]
 800f592:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800f596:	432c      	orrs	r4, r5
 800f598:	611c      	str	r4, [r3, #16]
 800f59a:	e71f      	b.n	800f3dc <USB_EPStartXfer+0x4c>
      if ((uint32_t)ep->xfer_buff != 0U)
 800f59c:	68ca      	ldr	r2, [r1, #12]
 800f59e:	2a00      	cmp	r2, #0
 800f5a0:	f43f af1f 	beq.w	800f3e2 <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f5a4:	615a      	str	r2, [r3, #20]
 800f5a6:	e71c      	b.n	800f3e2 <USB_EPStartXfer+0x52>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f5a8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800f5ac:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800f5b0:	d106      	bne.n	800f5c0 <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f5b2:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800f5b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f5ba:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 800f5be:	e714      	b.n	800f3ea <USB_EPStartXfer+0x5a>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f5c0:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800f5c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f5c8:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 800f5cc:	e70d      	b.n	800f3ea <USB_EPStartXfer+0x5a>
 800f5ce:	bf00      	nop
 800f5d0:	1ff80000 	.word	0x1ff80000

0800f5d4 <USB_ReadPacket>:
{
 800f5d4:	b510      	push	{r4, lr}
 800f5d6:	4684      	mov	ip, r0
 800f5d8:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 800f5da:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 800f5de:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	e005      	b.n	800f5f2 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f5e6:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 800f5ea:	6809      	ldr	r1, [r1, #0]
 800f5ec:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	4573      	cmp	r3, lr
 800f5f4:	d3f7      	bcc.n	800f5e6 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 800f5f6:	b17a      	cbz	r2, 800f618 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f5f8:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 800f5fc:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 800f600:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f602:	b2cb      	uxtb	r3, r1
 800f604:	00db      	lsls	r3, r3, #3
 800f606:	fa24 f303 	lsr.w	r3, r4, r3
 800f60a:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 800f60e:	3101      	adds	r1, #1
      remaining_bytes--;
 800f610:	3a01      	subs	r2, #1
 800f612:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 800f614:	2a00      	cmp	r2, #0
 800f616:	d1f4      	bne.n	800f602 <USB_ReadPacket+0x2e>
}
 800f618:	bd10      	pop	{r4, pc}

0800f61a <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800f61a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f61c:	784a      	ldrb	r2, [r1, #1]
 800f61e:	2a01      	cmp	r2, #1
 800f620:	d014      	beq.n	800f64c <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f622:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f626:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800f62a:	2a00      	cmp	r2, #0
 800f62c:	db06      	blt.n	800f63c <USB_EPSetStall+0x22>
 800f62e:	b12b      	cbz	r3, 800f63c <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f630:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800f634:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f638:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f63c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800f640:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f644:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800f648:	2000      	movs	r0, #0
 800f64a:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f64c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f650:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 800f654:	2a00      	cmp	r2, #0
 800f656:	db06      	blt.n	800f666 <USB_EPSetStall+0x4c>
 800f658:	b12b      	cbz	r3, 800f666 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f65a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800f65e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f662:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f666:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800f66a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f66e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 800f672:	e7e9      	b.n	800f648 <USB_EPSetStall+0x2e>

0800f674 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800f674:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f676:	784a      	ldrb	r2, [r1, #1]
 800f678:	2a01      	cmp	r2, #1
 800f67a:	d00e      	beq.n	800f69a <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f67c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f680:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800f684:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f688:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f68c:	790b      	ldrb	r3, [r1, #4]
 800f68e:	3b02      	subs	r3, #2
 800f690:	b2db      	uxtb	r3, r3
 800f692:	2b01      	cmp	r3, #1
 800f694:	d915      	bls.n	800f6c2 <USB_EPClearStall+0x4e>
}
 800f696:	2000      	movs	r0, #0
 800f698:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f69a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f69e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800f6a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f6a6:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f6aa:	790b      	ldrb	r3, [r1, #4]
 800f6ac:	3b02      	subs	r3, #2
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	2b01      	cmp	r3, #1
 800f6b2:	d8f0      	bhi.n	800f696 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f6b4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800f6b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f6bc:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 800f6c0:	e7e9      	b.n	800f696 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f6c2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800f6c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f6ca:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 800f6ce:	e7e2      	b.n	800f696 <USB_EPClearStall+0x22>

0800f6d0 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f6d0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800f6d4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f6d8:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f6dc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800f6e0:	0109      	lsls	r1, r1, #4
 800f6e2:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 800f6e6:	430b      	orrs	r3, r1
 800f6e8:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 800f6ec:	2000      	movs	r0, #0
 800f6ee:	4770      	bx	lr

0800f6f0 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f6f0:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 800f6f4:	f023 0303 	bic.w	r3, r3, #3
 800f6f8:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f6fc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800f700:	f023 0302 	bic.w	r3, r3, #2
 800f704:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800f708:	2000      	movs	r0, #0
 800f70a:	4770      	bx	lr

0800f70c <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f70c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 800f710:	f023 0303 	bic.w	r3, r3, #3
 800f714:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f718:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800f71c:	f043 0302 	orr.w	r3, r3, #2
 800f720:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800f724:	2000      	movs	r0, #0
 800f726:	4770      	bx	lr

0800f728 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800f728:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800f72a:	6980      	ldr	r0, [r0, #24]
}
 800f72c:	4010      	ands	r0, r2
 800f72e:	4770      	bx	lr

0800f730 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f730:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800f734:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f738:	69c0      	ldr	r0, [r0, #28]
 800f73a:	4018      	ands	r0, r3
}
 800f73c:	0c00      	lsrs	r0, r0, #16
 800f73e:	4770      	bx	lr

0800f740 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f740:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800f744:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f748:	69c0      	ldr	r0, [r0, #28]
 800f74a:	4018      	ands	r0, r3
}
 800f74c:	b280      	uxth	r0, r0
 800f74e:	4770      	bx	lr

0800f750 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f750:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800f754:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f758:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 800f75c:	6940      	ldr	r0, [r0, #20]
}
 800f75e:	4010      	ands	r0, r2
 800f760:	4770      	bx	lr

0800f762 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800f762:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f766:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f76a:	f001 0c0f 	and.w	ip, r1, #15
 800f76e:	fa23 f30c 	lsr.w	r3, r3, ip
 800f772:	01db      	lsls	r3, r3, #7
 800f774:	b2db      	uxtb	r3, r3
 800f776:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f778:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800f77c:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 800f780:	6880      	ldr	r0, [r0, #8]
}
 800f782:	4018      	ands	r0, r3
 800f784:	4770      	bx	lr

0800f786 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800f786:	6940      	ldr	r0, [r0, #20]
}
 800f788:	f000 0001 	and.w	r0, r0, #1
 800f78c:	4770      	bx	lr

0800f78e <USB_SetCurrentMode>:
{
 800f78e:	b538      	push	{r3, r4, r5, lr}
 800f790:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f792:	68c3      	ldr	r3, [r0, #12]
 800f794:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800f798:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800f79a:	2901      	cmp	r1, #1
 800f79c:	d013      	beq.n	800f7c6 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 800f79e:	bb19      	cbnz	r1, 800f7e8 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f7a0:	68c3      	ldr	r3, [r0, #12]
 800f7a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f7a6:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800f7a8:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800f7aa:	2001      	movs	r0, #1
 800f7ac:	f7f4 ffa0 	bl	80046f0 <HAL_Delay>
      ms++;
 800f7b0:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	f7ff ffe7 	bl	800f786 <USB_GetMode>
 800f7b8:	b108      	cbz	r0, 800f7be <USB_SetCurrentMode+0x30>
 800f7ba:	2c31      	cmp	r4, #49	@ 0x31
 800f7bc:	d9f5      	bls.n	800f7aa <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 800f7be:	2c32      	cmp	r4, #50	@ 0x32
 800f7c0:	d014      	beq.n	800f7ec <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 800f7c2:	2000      	movs	r0, #0
}
 800f7c4:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f7c6:	68c3      	ldr	r3, [r0, #12]
 800f7c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f7cc:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800f7ce:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800f7d0:	2001      	movs	r0, #1
 800f7d2:	f7f4 ff8d 	bl	80046f0 <HAL_Delay>
      ms++;
 800f7d6:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f7d8:	4628      	mov	r0, r5
 800f7da:	f7ff ffd4 	bl	800f786 <USB_GetMode>
 800f7de:	2801      	cmp	r0, #1
 800f7e0:	d0ed      	beq.n	800f7be <USB_SetCurrentMode+0x30>
 800f7e2:	2c31      	cmp	r4, #49	@ 0x31
 800f7e4:	d9f4      	bls.n	800f7d0 <USB_SetCurrentMode+0x42>
 800f7e6:	e7ea      	b.n	800f7be <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 800f7e8:	2001      	movs	r0, #1
 800f7ea:	e7eb      	b.n	800f7c4 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 800f7ec:	2001      	movs	r0, #1
 800f7ee:	e7e9      	b.n	800f7c4 <USB_SetCurrentMode+0x36>

0800f7f0 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f7f0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800f7f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800f7f8:	f023 0307 	bic.w	r3, r3, #7
 800f7fc:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f800:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800f804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f808:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800f80c:	2000      	movs	r0, #0
 800f80e:	4770      	bx	lr

0800f810 <USB_EP0_OutStart>:
{
 800f810:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f812:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f814:	4b15      	ldr	r3, [pc, #84]	@ (800f86c <USB_EP0_OutStart+0x5c>)
 800f816:	429c      	cmp	r4, r3
 800f818:	d903      	bls.n	800f822 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f81a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800f81e:	2b00      	cmp	r3, #0
 800f820:	db16      	blt.n	800f850 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f822:	2400      	movs	r4, #0
 800f824:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f828:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 800f82c:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800f830:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f834:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 800f838:	f044 0418 	orr.w	r4, r4, #24
 800f83c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f840:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 800f844:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 800f848:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 800f84c:	2901      	cmp	r1, #1
 800f84e:	d003      	beq.n	800f858 <USB_EP0_OutStart+0x48>
}
 800f850:	2000      	movs	r0, #0
 800f852:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f856:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f858:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f85c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800f860:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f864:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 800f868:	e7f2      	b.n	800f850 <USB_EP0_OutStart+0x40>
 800f86a:	bf00      	nop
 800f86c:	4f54300a 	.word	0x4f54300a

0800f870 <USBPD_TRACE_Add>:
  (void)Sop;
  (void)Type;

  return;
#endif /* _TRACE */
}
 800f870:	4770      	bx	lr
	...

0800f874 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 800f874:	b500      	push	{lr}
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 800f876:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800f87a:	4b30      	ldr	r3, [pc, #192]	@ (800f93c <CAD_Check_HW_SNK+0xc8>)
 800f87c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800f880:	6959      	ldr	r1, [r3, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 800f882:	695a      	ldr	r2, [r3, #20]
 800f884:	f402 2240 	and.w	r2, r2, #786432	@ 0xc0000
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 800f888:	4b2d      	ldr	r3, [pc, #180]	@ (800f940 <CAD_Check_HW_SNK+0xcc>)
 800f88a:	eb00 0e40 	add.w	lr, r0, r0, lsl #1
 800f88e:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 800f892:	f813 e02e 	ldrb.w	lr, [r3, lr, lsl #2]
 800f896:	f36f 0e01 	bfc	lr, #0, #2
 800f89a:	f803 e00c 	strb.w	lr, [r3, ip]
  _handle->CurrentHWcondition     = HW_Detachment;
 800f89e:	fa5f fe8e 	uxtb.w	lr, lr
 800f8a2:	f36f 0e84 	bfc	lr, #2, #3
 800f8a6:	f803 e00c 	strb.w	lr, [r3, ip]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 800f8aa:	f411 3140 	ands.w	r1, r1, #196608	@ 0x30000
 800f8ae:	d102      	bne.n	800f8b6 <CAD_Check_HW_SNK+0x42>
    _handle->CurrentHWcondition = HW_Attachment;
    _handle->cc = CC1;
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 800f8b0:	bb12      	cbnz	r2, 800f8f8 <CAD_Check_HW_SNK+0x84>
  {
    _handle->CurrentHWcondition = HW_Attachment;
    _handle->cc = CC2;
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
  }
}
 800f8b2:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 800f8b6:	2a00      	cmp	r2, #0
 800f8b8:	d1fb      	bne.n	800f8b2 <CAD_Check_HW_SNK+0x3e>
    _handle->CurrentHWcondition = HW_Attachment;
 800f8ba:	4b21      	ldr	r3, [pc, #132]	@ (800f940 <CAD_Check_HW_SNK+0xcc>)
 800f8bc:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800f8c0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800f8c4:	f813 c02c 	ldrb.w	ip, [r3, ip, lsl #2]
 800f8c8:	f04f 0e01 	mov.w	lr, #1
 800f8cc:	f36e 0c84 	bfi	ip, lr, #2, #3
 800f8d0:	f803 c002 	strb.w	ip, [r3, r2]
    _handle->cc = CC1;
 800f8d4:	fa5f fc8c 	uxtb.w	ip, ip
 800f8d8:	f36e 0c01 	bfi	ip, lr, #0, #2
 800f8dc:	f803 c002 	strb.w	ip, [r3, r2]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 800f8e0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800f8e4:	4b15      	ldr	r3, [pc, #84]	@ (800f93c <CAD_Check_HW_SNK+0xc8>)
 800f8e6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800f8ea:	6903      	ldr	r3, [r0, #16]
 800f8ec:	0c09      	lsrs	r1, r1, #16
 800f8ee:	789a      	ldrb	r2, [r3, #2]
 800f8f0:	f361 0283 	bfi	r2, r1, #2, #2
 800f8f4:	709a      	strb	r2, [r3, #2]
 800f8f6:	e7dc      	b.n	800f8b2 <CAD_Check_HW_SNK+0x3e>
    _handle->CurrentHWcondition = HW_Attachment;
 800f8f8:	4b11      	ldr	r3, [pc, #68]	@ (800f940 <CAD_Check_HW_SNK+0xcc>)
 800f8fa:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800f8fe:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800f902:	f813 c02c 	ldrb.w	ip, [r3, ip, lsl #2]
 800f906:	f04f 0e01 	mov.w	lr, #1
 800f90a:	f36e 0c84 	bfi	ip, lr, #2, #3
 800f90e:	f803 c001 	strb.w	ip, [r3, r1]
    _handle->cc = CC2;
 800f912:	fa5f fc8c 	uxtb.w	ip, ip
 800f916:	f04f 0e02 	mov.w	lr, #2
 800f91a:	f36e 0c01 	bfi	ip, lr, #0, #2
 800f91e:	f803 c001 	strb.w	ip, [r3, r1]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 800f922:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800f926:	4b05      	ldr	r3, [pc, #20]	@ (800f93c <CAD_Check_HW_SNK+0xc8>)
 800f928:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800f92c:	691b      	ldr	r3, [r3, #16]
 800f92e:	0c92      	lsrs	r2, r2, #18
 800f930:	7899      	ldrb	r1, [r3, #2]
 800f932:	f362 0183 	bfi	r1, r2, #2, #2
 800f936:	7099      	strb	r1, [r3, #2]
}
 800f938:	e7bb      	b.n	800f8b2 <CAD_Check_HW_SNK+0x3e>
 800f93a:	bf00      	nop
 800f93c:	200108c4 	.word	0x200108c4
 800f940:	200108b4 	.word	0x200108b4

0800f944 <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 800f944:	b570      	push	{r4, r5, r6, lr}
 800f946:	4604      	mov	r4, r0
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
  uint32_t _timing = CAD_DEFAULT_TIME;

  CAD_Check_HW_SNK(PortNum);
 800f948:	f7ff ff94 	bl	800f874 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 800f94c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800f950:	4b18      	ldr	r3, [pc, #96]	@ (800f9b4 <ManageStateDetached_SNK+0x70>)
 800f952:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800f956:	f013 0f1c 	tst.w	r3, #28
 800f95a:	d102      	bne.n	800f962 <ManageStateDetached_SNK+0x1e>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 800f95c:	f04f 30ff 	mov.w	r0, #4294967295
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
    }
  }
  return _timing;
}
 800f960:	bd70      	pop	{r4, r5, r6, pc}
    _handle->CAD_tDebounce_start = HAL_GetTick();
 800f962:	f7f4 febf 	bl	80046e4 <HAL_GetTick>
 800f966:	4d13      	ldr	r5, [pc, #76]	@ (800f9b4 <ManageStateDetached_SNK+0x70>)
 800f968:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f96c:	009e      	lsls	r6, r3, #2
 800f96e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f972:	6058      	str	r0, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 800f974:	785a      	ldrb	r2, [r3, #1]
 800f976:	2102      	movs	r1, #2
 800f978:	f361 0245 	bfi	r2, r1, #1, #5
 800f97c:	705a      	strb	r2, [r3, #1]
    HAL_Delay(1);
 800f97e:	2001      	movs	r0, #1
 800f980:	f7f4 feb6 	bl	80046f0 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 800f984:	4620      	mov	r0, r4
 800f986:	f7ff ff75 	bl	800f874 <CAD_Check_HW_SNK>
    if (_handle->CurrentHWcondition == HW_Detachment)
 800f98a:	5dab      	ldrb	r3, [r5, r6]
 800f98c:	f013 0f1c 	tst.w	r3, #28
 800f990:	d10a      	bne.n	800f9a8 <ManageStateDetached_SNK+0x64>
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800f992:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f996:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800f99a:	7863      	ldrb	r3, [r4, #1]
 800f99c:	2201      	movs	r2, #1
 800f99e:	f362 0345 	bfi	r3, r2, #1, #5
 800f9a2:	7063      	strb	r3, [r4, #1]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800f9a4:	2002      	movs	r0, #2
 800f9a6:	e7db      	b.n	800f960 <ManageStateDetached_SNK+0x1c>
      BSP_USBPD_PWR_VBUSInit(PortNum);
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	f7f4 fe1f 	bl	80045ec <BSP_USBPD_PWR_VBUSInit>
  uint32_t _timing = CAD_DEFAULT_TIME;
 800f9ae:	2002      	movs	r0, #2
 800f9b0:	e7d6      	b.n	800f960 <ManageStateDetached_SNK+0x1c>
 800f9b2:	bf00      	nop
 800f9b4:	200108b4 	.word	0x200108b4

0800f9b8 <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800f9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9bc:	4604      	mov	r4, r0
 800f9be:	460e      	mov	r6, r1
 800f9c0:	4615      	mov	r5, r2
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
  uint32_t _timing = CAD_DEFAULT_TIME;

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800f9c2:	f7f4 fe8f 	bl	80046e4 <HAL_GetTick>
 800f9c6:	4f3b      	ldr	r7, [pc, #236]	@ (800fab4 <ManageStateAttachedWait_SNK+0xfc>)
 800f9c8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f9cc:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800f9d0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	eba0 0903 	sub.w	r9, r0, r3
  CAD_Check_HW_SNK(PortNum);
 800f9da:	4620      	mov	r0, r4
 800f9dc:	f7ff ff4a 	bl	800f874 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 800f9e0:	f817 3008 	ldrb.w	r3, [r7, r8]
 800f9e4:	f003 021c 	and.w	r2, r3, #28
 800f9e8:	2a04      	cmp	r2, #4
 800f9ea:	d014      	beq.n	800fa16 <ManageStateAttachedWait_SNK+0x5e>
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 800f9ec:	f013 0f20 	tst.w	r3, #32
 800f9f0:	d140      	bne.n	800fa74 <ManageStateAttachedWait_SNK+0xbc>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800f9f2:	f7f4 fe77 	bl	80046e4 <HAL_GetTick>
 800f9f6:	4b2f      	ldr	r3, [pc, #188]	@ (800fab4 <ManageStateAttachedWait_SNK+0xfc>)
 800f9f8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800f9fc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800fa00:	6050      	str	r0, [r2, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 800fa02:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800fa06:	f813 2024 	ldrb.w	r2, [r3, r4, lsl #2]
 800fa0a:	f042 0220 	orr.w	r2, r2, #32
 800fa0e:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 800fa12:	200c      	movs	r0, #12
 800fa14:	e00c      	b.n	800fa30 <ManageStateAttachedWait_SNK+0x78>
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 800fa16:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 800fa1a:	d80b      	bhi.n	800fa34 <ManageStateAttachedWait_SNK+0x7c>
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800fa1c:	4b25      	ldr	r3, [pc, #148]	@ (800fab4 <ManageStateAttachedWait_SNK+0xfc>)
 800fa1e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800fa22:	f813 2024 	ldrb.w	r2, [r3, r4, lsl #2]
 800fa26:	f36f 1245 	bfc	r2, #5, #1
 800fa2a:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800fa2e:	2002      	movs	r0, #2
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
}
 800fa30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 800fa34:	2101      	movs	r1, #1
 800fa36:	4620      	mov	r0, r4
 800fa38:	f005 f80c 	bl	8014a54 <USBPD_PWR_IF_GetVBUSStatus>
 800fa3c:	2801      	cmp	r0, #1
 800fa3e:	d1ed      	bne.n	800fa1c <ManageStateAttachedWait_SNK+0x64>
        HW_SignalAttachement(PortNum, _handle->cc);
 800fa40:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800fa44:	46c1      	mov	r9, r8
 800fa46:	eb07 0883 	add.w	r8, r7, r3, lsl #2
 800fa4a:	f817 1023 	ldrb.w	r1, [r7, r3, lsl #2]
 800fa4e:	f001 0103 	and.w	r1, r1, #3
 800fa52:	4620      	mov	r0, r4
 800fa54:	f000 fc3c 	bl	80102d0 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 800fa58:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fa5c:	2203      	movs	r2, #3
 800fa5e:	f362 0345 	bfi	r3, r2, #1, #5
 800fa62:	f888 3001 	strb.w	r3, [r8, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 800fa66:	2302      	movs	r3, #2
 800fa68:	7033      	strb	r3, [r6, #0]
        *pCCXX = _handle->cc;
 800fa6a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800fa6e:	4013      	ands	r3, r2
 800fa70:	602b      	str	r3, [r5, #0]
 800fa72:	e7d3      	b.n	800fa1c <ManageStateAttachedWait_SNK+0x64>
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 800fa74:	f7f4 fe36 	bl	80046e4 <HAL_GetTick>
 800fa78:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800fa7c:	4b0d      	ldr	r3, [pc, #52]	@ (800fab4 <ManageStateAttachedWait_SNK+0xfc>)
 800fa7e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800fa82:	685b      	ldr	r3, [r3, #4]
 800fa84:	1ac0      	subs	r0, r0, r3
 800fa86:	280c      	cmp	r0, #12
 800fa88:	d801      	bhi.n	800fa8e <ManageStateAttachedWait_SNK+0xd6>
  uint32_t _timing = CAD_DEFAULT_TIME;
 800fa8a:	2002      	movs	r0, #2
  return _timing;
 800fa8c:	e7d0      	b.n	800fa30 <ManageStateAttachedWait_SNK+0x78>
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800fa8e:	4b09      	ldr	r3, [pc, #36]	@ (800fab4 <ManageStateAttachedWait_SNK+0xfc>)
 800fa90:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 800fa94:	f36f 1145 	bfc	r1, #5, #1
 800fa98:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800fa9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800faa0:	785a      	ldrb	r2, [r3, #1]
 800faa2:	2101      	movs	r1, #1
 800faa4:	f361 0245 	bfi	r2, r1, #1, #5
 800faa8:	705a      	strb	r2, [r3, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800faaa:	4620      	mov	r0, r4
 800faac:	f7f4 fda4 	bl	80045f8 <BSP_USBPD_PWR_VBUSDeInit>
  uint32_t _timing = CAD_DEFAULT_TIME;
 800fab0:	2002      	movs	r0, #2
 800fab2:	e7bd      	b.n	800fa30 <ManageStateAttachedWait_SNK+0x78>
 800fab4:	200108b4 	.word	0x200108b4

0800fab8 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800fab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faba:	4604      	mov	r4, r0
 800fabc:	460f      	mov	r7, r1
 800fabe:	4616      	mov	r6, r2
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800fac0:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800fac4:	4b1c      	ldr	r3, [pc, #112]	@ (800fb38 <ManageStateAttached_SNK+0x80>)
 800fac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800faca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800facc:	2b01      	cmp	r3, #1
 800face:	d010      	beq.n	800faf2 <ManageStateAttached_SNK+0x3a>
 800fad0:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800fad4:	4a18      	ldr	r2, [pc, #96]	@ (800fb38 <ManageStateAttached_SNK+0x80>)
 800fad6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fada:	695d      	ldr	r5, [r3, #20]
 800fadc:	f405 2540 	and.w	r5, r5, #786432	@ 0xc0000
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 800fae0:	2102      	movs	r1, #2
 800fae2:	4620      	mov	r0, r4
 800fae4:	f004 ffb6 	bl	8014a54 <USBPD_PWR_IF_GetVBUSStatus>
 800fae8:	2801      	cmp	r0, #1
 800faea:	d00a      	beq.n	800fb02 <ManageStateAttached_SNK+0x4a>
    *pCCXX = CCNONE;
    _timing = 0;
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 800faec:	250a      	movs	r5, #10
  }

  return _timing;
}
 800faee:	4628      	mov	r0, r5
 800faf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800faf2:	4613      	mov	r3, r2
 800faf4:	4a10      	ldr	r2, [pc, #64]	@ (800fb38 <ManageStateAttached_SNK+0x80>)
 800faf6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fafa:	695d      	ldr	r5, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800fafc:	f405 3540 	and.w	r5, r5, #196608	@ 0x30000
 800fb00:	e7ee      	b.n	800fae0 <ManageStateAttached_SNK+0x28>
      &&
 800fb02:	b10d      	cbz	r5, 800fb08 <ManageStateAttached_SNK+0x50>
    _timing = CAD_VBUS_POLLING_TIME;
 800fb04:	250a      	movs	r5, #10
  return _timing;
 800fb06:	e7f2      	b.n	800faee <ManageStateAttached_SNK+0x36>
    HW_SignalDetachment(PortNum);
 800fb08:	4620      	mov	r0, r4
 800fb0a:	f000 fbeb 	bl	80102e4 <HW_SignalDetachment>
    _handle->CurrentHWcondition = HW_Detachment;
 800fb0e:	4b0b      	ldr	r3, [pc, #44]	@ (800fb3c <ManageStateAttached_SNK+0x84>)
 800fb10:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800fb14:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 800fb18:	f36f 0184 	bfc	r1, #2, #3
 800fb1c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800fb20:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800fb24:	7859      	ldrb	r1, [r3, #1]
 800fb26:	2201      	movs	r2, #1
 800fb28:	f362 0145 	bfi	r1, r2, #1, #5
 800fb2c:	7059      	strb	r1, [r3, #1]
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 800fb2e:	703a      	strb	r2, [r7, #0]
    *pCCXX = CCNONE;
 800fb30:	2300      	movs	r3, #0
 800fb32:	6033      	str	r3, [r6, #0]
    _timing = 0;
 800fb34:	e7db      	b.n	800faee <ManageStateAttached_SNK+0x36>
 800fb36:	bf00      	nop
 800fb38:	200108c4 	.word	0x200108c4
 800fb3c:	200108b4 	.word	0x200108b4

0800fb40 <CAD_StateMachine_SNK>:
{
 800fb40:	b508      	push	{r3, lr}
  switch (_handle->cstate)
 800fb42:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800fb46:	4b0b      	ldr	r3, [pc, #44]	@ (800fb74 <CAD_StateMachine_SNK+0x34>)
 800fb48:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800fb4c:	785b      	ldrb	r3, [r3, #1]
 800fb4e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800fb52:	2b02      	cmp	r3, #2
 800fb54:	d008      	beq.n	800fb68 <CAD_StateMachine_SNK+0x28>
 800fb56:	2b03      	cmp	r3, #3
 800fb58:	d009      	beq.n	800fb6e <CAD_StateMachine_SNK+0x2e>
 800fb5a:	2b01      	cmp	r3, #1
 800fb5c:	d001      	beq.n	800fb62 <CAD_StateMachine_SNK+0x22>
 800fb5e:	2002      	movs	r0, #2
}
 800fb60:	bd08      	pop	{r3, pc}
      _timing = ManageStateDetached_SNK(PortNum);
 800fb62:	f7ff feef 	bl	800f944 <ManageStateDetached_SNK>
      break;
 800fb66:	e7fb      	b.n	800fb60 <CAD_StateMachine_SNK+0x20>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 800fb68:	f7ff ff26 	bl	800f9b8 <ManageStateAttachedWait_SNK>
      break;
 800fb6c:	e7f8      	b.n	800fb60 <CAD_StateMachine_SNK+0x20>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 800fb6e:	f7ff ffa3 	bl	800fab8 <ManageStateAttached_SNK>
      break;
 800fb72:	e7f5      	b.n	800fb60 <CAD_StateMachine_SNK+0x20>
 800fb74:	200108b4 	.word	0x200108b4

0800fb78 <LL_GPIO_SetPinMode>:
{
 800fb78:	b410      	push	{r4}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800fb7a:	6804      	ldr	r4, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fb7c:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 800fb80:	b1a3      	cbz	r3, 800fbac <LL_GPIO_SetPinMode+0x34>
  return __builtin_clz(value);
 800fb82:	fab3 f383 	clz	r3, r3
 800fb86:	005b      	lsls	r3, r3, #1
 800fb88:	f04f 0c03 	mov.w	ip, #3
 800fb8c:	fa0c f303 	lsl.w	r3, ip, r3
 800fb90:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fb94:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 800fb98:	b151      	cbz	r1, 800fbb0 <LL_GPIO_SetPinMode+0x38>
  return __builtin_clz(value);
 800fb9a:	fab1 f181 	clz	r1, r1
 800fb9e:	0049      	lsls	r1, r1, #1
 800fba0:	408a      	lsls	r2, r1
 800fba2:	4313      	orrs	r3, r2
 800fba4:	6003      	str	r3, [r0, #0]
}
 800fba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbaa:	4770      	bx	lr
    return 32U;
 800fbac:	2320      	movs	r3, #32
 800fbae:	e7ea      	b.n	800fb86 <LL_GPIO_SetPinMode+0xe>
 800fbb0:	2120      	movs	r1, #32
 800fbb2:	e7f4      	b.n	800fb9e <LL_GPIO_SetPinMode+0x26>

0800fbb4 <LL_GPIO_SetPinPull>:
{
 800fbb4:	b410      	push	{r4}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800fbb6:	68c4      	ldr	r4, [r0, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fbb8:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 800fbbc:	b1a3      	cbz	r3, 800fbe8 <LL_GPIO_SetPinPull+0x34>
  return __builtin_clz(value);
 800fbbe:	fab3 f383 	clz	r3, r3
 800fbc2:	005b      	lsls	r3, r3, #1
 800fbc4:	f04f 0c03 	mov.w	ip, #3
 800fbc8:	fa0c f303 	lsl.w	r3, ip, r3
 800fbcc:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fbd0:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 800fbd4:	b151      	cbz	r1, 800fbec <LL_GPIO_SetPinPull+0x38>
  return __builtin_clz(value);
 800fbd6:	fab1 f181 	clz	r1, r1
 800fbda:	0049      	lsls	r1, r1, #1
 800fbdc:	408a      	lsls	r2, r1
 800fbde:	4313      	orrs	r3, r2
 800fbe0:	60c3      	str	r3, [r0, #12]
}
 800fbe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbe6:	4770      	bx	lr
    return 32U;
 800fbe8:	2320      	movs	r3, #32
 800fbea:	e7ea      	b.n	800fbc2 <LL_GPIO_SetPinPull+0xe>
 800fbec:	2120      	movs	r1, #32
 800fbee:	e7f4      	b.n	800fbda <LL_GPIO_SetPinPull+0x26>

0800fbf0 <CAD_Init>:
{
 800fbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf4:	b089      	sub	sp, #36	@ 0x24
 800fbf6:	4604      	mov	r4, r0
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800fbf8:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 800fbfc:	eb00 0e40 	add.w	lr, r0, r0, lsl #1
 800fc00:	4f4a      	ldr	r7, [pc, #296]	@ (800fd2c <CAD_Init+0x13c>)
 800fc02:	eb07 0c8e 	add.w	ip, r7, lr, lsl #2
  Ports[PortNum].params = pParams;
 800fc06:	4e4a      	ldr	r6, [pc, #296]	@ (800fd30 <CAD_Init+0x140>)
 800fc08:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
 800fc0c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800fc10:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 800fc14:	612a      	str	r2, [r5, #16]
  Ports[PortNum].settings = pSettings;
 800fc16:	60e9      	str	r1, [r5, #12]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 800fc18:	7809      	ldrb	r1, [r1, #0]
 800fc1a:	f3c1 0141 	ubfx	r1, r1, #1, #2
 800fc1e:	f892 9002 	ldrb.w	r9, [r2, #2]
 800fc22:	f361 0901 	bfi	r9, r1, #0, #2
 800fc26:	f882 9002 	strb.w	r9, [r2, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 800fc2a:	692a      	ldr	r2, [r5, #16]
 800fc2c:	7891      	ldrb	r1, [r2, #2]
 800fc2e:	f36f 0183 	bfc	r1, #2, #2
 800fc32:	7091      	strb	r1, [r2, #2]
  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 800fc34:	f04f 0900 	mov.w	r9, #0
 800fc38:	f847 902e 	str.w	r9, [r7, lr, lsl #2]
 800fc3c:	f8cc 9004 	str.w	r9, [ip, #4]
 800fc40:	f8cc 9008 	str.w	r9, [ip, #8]
  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 800fc44:	62eb      	str	r3, [r5, #44]	@ 0x2c
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 800fc46:	f000 f8d1 	bl	800fdec <USBPD_HW_GetUSPDInstance>
 800fc4a:	f846 0008 	str.w	r0, [r6, r8]
  LL_UCPD_StructInit(&settings);
 800fc4e:	a804      	add	r0, sp, #16
 800fc50:	f7ff f866 	bl	800ed20 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 800fc54:	a904      	add	r1, sp, #16
 800fc56:	f856 0008 	ldr.w	r0, [r6, r8]
 800fc5a:	f7ff f831 	bl	800ecc0 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 800fc5e:	f856 2008 	ldr.w	r2, [r6, r8]
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 800fc62:	6813      	ldr	r3, [r2, #0]
 800fc64:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800fc68:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fc6c:	f043 73f8 	orr.w	r3, r3, #32505856	@ 0x1f00000
 800fc70:	6013      	str	r3, [r2, #0]
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800fc72:	f856 2008 	ldr.w	r2, [r6, r8]
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800fc76:	68d3      	ldr	r3, [r2, #12]
 800fc78:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800fc7c:	60d3      	str	r3, [r2, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 800fc7e:	4d2d      	ldr	r5, [pc, #180]	@ (800fd34 <CAD_Init+0x144>)
 800fc80:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800fc84:	f043 0304 	orr.w	r3, r3, #4
 800fc88:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 800fc8c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800fc90:	f003 0304 	and.w	r3, r3, #4
 800fc94:	9301      	str	r3, [sp, #4]
 800fc96:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();
 800fc98:	f7f9 ff3c 	bl	8009b14 <HAL_PWREx_DisableUCPDDeadBattery>
  SET_BIT(RCC->AHB2ENR1, Periphs);
 800fc9c:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800fca0:	f043 0302 	orr.w	r3, r3, #2
 800fca4:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 800fca8:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800fcac:	f003 0302 	and.w	r3, r3, #2
 800fcb0:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800fcb2:	9b03      	ldr	r3, [sp, #12]
  SET_BIT(RCC->AHB2ENR1, Periphs);
 800fcb4:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800fcb8:	f043 0301 	orr.w	r3, r3, #1
 800fcbc:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 800fcc0:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800fcc4:	f003 0301 	and.w	r3, r3, #1
 800fcc8:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800fcca:	9b02      	ldr	r3, [sp, #8]
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_15, LL_GPIO_MODE_ANALOG); /* PA15 mode = GP analog => CC1 */
 800fccc:	f8df b070 	ldr.w	fp, [pc, #112]	@ 800fd40 <CAD_Init+0x150>
 800fcd0:	2203      	movs	r2, #3
 800fcd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fcd6:	4658      	mov	r0, fp
 800fcd8:	f7ff ff4e 	bl	800fb78 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_15, LL_GPIO_MODE_ANALOG); /* PB15 mode = GP analog => CC2 */
 800fcdc:	4d16      	ldr	r5, [pc, #88]	@ (800fd38 <CAD_Init+0x148>)
 800fcde:	2203      	movs	r2, #3
 800fce0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fce4:	4628      	mov	r0, r5
 800fce6:	f7ff ff47 	bl	800fb78 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_15, LL_GPIO_PULL_NO);
 800fcea:	464a      	mov	r2, r9
 800fcec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fcf0:	4658      	mov	r0, fp
 800fcf2:	f7ff ff5f 	bl	800fbb4 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_15, LL_GPIO_PULL_NO);
 800fcf6:	464a      	mov	r2, r9
 800fcf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	f7ff ff59 	bl	800fbb4 <LL_GPIO_SetPinPull>
  BSP_USBPD_PWR_Init(PortNum);
 800fd02:	4620      	mov	r0, r4
 800fd04:	f7f4 fc42 	bl	800458c <BSP_USBPD_PWR_Init>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800fd08:	f856 2008 	ldr.w	r2, [r6, r8]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800fd0c:	6813      	ldr	r3, [r2, #0]
 800fd0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800fd12:	6013      	str	r3, [r2, #0]
    USBPDM1_AssertRd(PortNum);
 800fd14:	4620      	mov	r0, r4
 800fd16:	f000 fa6d 	bl	80101f4 <USBPDM1_AssertRd>
    _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 800fd1a:	44a2      	add	sl, r4
 800fd1c:	eb07 078a 	add.w	r7, r7, sl, lsl #2
 800fd20:	4b06      	ldr	r3, [pc, #24]	@ (800fd3c <CAD_Init+0x14c>)
 800fd22:	60bb      	str	r3, [r7, #8]
}
 800fd24:	b009      	add	sp, #36	@ 0x24
 800fd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd2a:	bf00      	nop
 800fd2c:	200108b4 	.word	0x200108b4
 800fd30:	200108c4 	.word	0x200108c4
 800fd34:	46020c00 	.word	0x46020c00
 800fd38:	42020400 	.word	0x42020400
 800fd3c:	0800fb41 	.word	0x0800fb41
 800fd40:	42020000 	.word	0x42020000

0800fd44 <CAD_Enter_ErrorRecovery>:
{
 800fd44:	b510      	push	{r4, lr}
 800fd46:	4604      	mov	r4, r0
  USBPDM1_EnterErrorRecovery(PortNum);
 800fd48:	f000 faa6 	bl	8010298 <USBPDM1_EnterErrorRecovery>
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 800fd4c:	4a08      	ldr	r2, [pc, #32]	@ (800fd70 <CAD_Enter_ErrorRecovery+0x2c>)
 800fd4e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800fd52:	f812 3021 	ldrb.w	r3, [r2, r1, lsl #2]
 800fd56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd5a:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800fd5e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800fd62:	4b04      	ldr	r3, [pc, #16]	@ (800fd74 <CAD_Enter_ErrorRecovery+0x30>)
 800fd64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd6a:	4798      	blx	r3
}
 800fd6c:	bd10      	pop	{r4, pc}
 800fd6e:	bf00      	nop
 800fd70:	200108b4 	.word	0x200108b4
 800fd74:	200108c4 	.word	0x200108c4

0800fd78 <CAD_StateMachine>:
{
 800fd78:	b510      	push	{r4, lr}
  *pEvent = USBPD_CAD_EVENT_NONE;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	700b      	strb	r3, [r1, #0]
  switch (_handle->cstate)
 800fd7e:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800fd82:	4b17      	ldr	r3, [pc, #92]	@ (800fde0 <CAD_StateMachine+0x68>)
 800fd84:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800fd88:	785b      	ldrb	r3, [r3, #1]
 800fd8a:	f013 0f3e 	tst.w	r3, #62	@ 0x3e
 800fd8e:	d007      	beq.n	800fda0 <CAD_StateMachine+0x28>
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 800fd90:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800fd94:	4b12      	ldr	r3, [pc, #72]	@ (800fde0 <CAD_StateMachine+0x68>)
 800fd96:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800fd9a:	689b      	ldr	r3, [r3, #8]
 800fd9c:	4798      	blx	r3
}
 800fd9e:	bd10      	pop	{r4, pc}
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 800fda0:	4910      	ldr	r1, [pc, #64]	@ (800fde4 <CAD_StateMachine+0x6c>)
 800fda2:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800fda6:	00db      	lsls	r3, r3, #3
 800fda8:	58cc      	ldr	r4, [r1, r3]
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 800fdaa:	6922      	ldr	r2, [r4, #16]
 800fdac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fdb0:	6122      	str	r2, [r4, #16]
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 800fdb2:	58ca      	ldr	r2, [r1, r3]
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 800fdb4:	6913      	ldr	r3, [r2, #16]
 800fdb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800fdba:	6113      	str	r3, [r2, #16]
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fdbc:	4b0a      	ldr	r3, [pc, #40]	@ (800fde8 <CAD_StateMachine+0x70>)
 800fdbe:	2220      	movs	r2, #32
 800fdc0:	f883 236a 	strb.w	r2, [r3, #874]	@ 0x36a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fdc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fdc8:	60da      	str	r2, [r3, #12]
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800fdca:	4b05      	ldr	r3, [pc, #20]	@ (800fde0 <CAD_StateMachine+0x68>)
 800fdcc:	eb03 008c 	add.w	r0, r3, ip, lsl #2
 800fdd0:	7843      	ldrb	r3, [r0, #1]
 800fdd2:	2201      	movs	r2, #1
 800fdd4:	f362 0345 	bfi	r3, r2, #1, #5
 800fdd8:	7043      	strb	r3, [r0, #1]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800fdda:	2002      	movs	r0, #2
      break;
 800fddc:	e7df      	b.n	800fd9e <CAD_StateMachine+0x26>
 800fdde:	bf00      	nop
 800fde0:	200108b4 	.word	0x200108b4
 800fde4:	200108c4 	.word	0x200108c4
 800fde8:	e000e100 	.word	0xe000e100

0800fdec <USBPD_HW_GetUSPDInstance>:

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
  (void) PortNum;
  return UCPD_INSTANCE0;
}
 800fdec:	4800      	ldr	r0, [pc, #0]	@ (800fdf0 <USBPD_HW_GetUSPDInstance+0x4>)
 800fdee:	4770      	bx	lr
 800fdf0:	4000dc00 	.word	0x4000dc00

0800fdf4 <PORTx_IRQHandler>:
{
  PORTx_IRQHandler(USBPD_PORT_0);
}

void PORTx_IRQHandler(uint8_t PortNum)
{
 800fdf4:	b538      	push	{r3, r4, r5, lr}
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 800fdf6:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800fdfa:	4b7b      	ldr	r3, [pc, #492]	@ (800ffe8 <PORTx_IRQHandler+0x1f4>)
 800fdfc:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 800fe00:	6963      	ldr	r3, [r4, #20]
  static uint8_t ovrflag = 0;

  if ((hucpd->IMR & _interrupt) != 0u)
 800fe02:	6922      	ldr	r2, [r4, #16]
 800fe04:	421a      	tst	r2, r3
 800fe06:	d048      	beq.n	800fe9a <PORTx_IRQHandler+0xa6>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 800fe08:	f013 0f02 	tst.w	r3, #2
 800fe0c:	d130      	bne.n	800fe70 <PORTx_IRQHandler+0x7c>
      SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_SUSP | DMA_CCR_RESET);
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
      return;
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 800fe0e:	f013 0f04 	tst.w	r3, #4
 800fe12:	d143      	bne.n	800fe9c <PORTx_IRQHandler+0xa8>
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 800fe14:	f013 0f08 	tst.w	r3, #8
 800fe18:	d156      	bne.n	800fec8 <PORTx_IRQHandler+0xd4>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
      return;
    }

    /* HRSTDISC : the sent of the hard reset has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 800fe1a:	f013 0f10 	tst.w	r3, #16
 800fe1e:	d169      	bne.n	800fef4 <PORTx_IRQHandler+0x100>
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
      return;
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 800fe20:	f013 0f20 	tst.w	r3, #32
 800fe24:	d16b      	bne.n	800fefe <PORTx_IRQHandler+0x10a>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
      return;
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 800fe26:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800fe2a:	d175      	bne.n	800ff18 <PORTx_IRQHandler+0x124>
      return;
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 800fe2c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800fe30:	d177      	bne.n	800ff22 <PORTx_IRQHandler+0x12e>
#endif /* _LOW_POWER */
      return;
    }

    /* check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 800fe32:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800fe36:	f040 8085 	bne.w	800ff44 <PORTx_IRQHandler+0x150>
      LL_UCPD_ClearFlag_RxHRST(hucpd);
      return;
    }

    /* check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 800fe3a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800fe3e:	f040 808e 	bne.w	800ff5e <PORTx_IRQHandler+0x16a>
      LL_UCPD_ClearFlag_RxOvr(hucpd);
      return;
    }

    /* check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 800fe42:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800fe46:	f040 8092 	bne.w	800ff6e <PORTx_IRQHandler+0x17a>
      ovrflag = 0;
      return;
    }

    /* check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 800fe4a:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 800fe4e:	d024      	beq.n	800fe9a <PORTx_IRQHandler+0xa6>
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 800fe50:	69a3      	ldr	r3, [r4, #24]
 800fe52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800fe56:	61a3      	str	r3, [r4, #24]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 800fe58:	69a3      	ldr	r3, [r4, #24]
 800fe5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fe5e:	61a3      	str	r3, [r4, #24]
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
    {
      /* clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
      Ports[PortNum].USBPD_CAD_WakeUp();
 800fe60:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800fe64:	4b60      	ldr	r3, [pc, #384]	@ (800ffe8 <PORTx_IRQHandler+0x1f4>)
 800fe66:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800fe6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe6c:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 800fe6e:	e014      	b.n	800fe9a <PORTx_IRQHandler+0xa6>
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 800fe70:	69a3      	ldr	r3, [r4, #24]
 800fe72:	f043 0302 	orr.w	r3, r3, #2
 800fe76:	61a3      	str	r3, [r4, #24]
      SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_SUSP | DMA_CCR_RESET);
 800fe78:	4b5b      	ldr	r3, [pc, #364]	@ (800ffe8 <PORTx_IRQHandler+0x1f4>)
 800fe7a:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800fe7e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800fe82:	6851      	ldr	r1, [r2, #4]
 800fe84:	694a      	ldr	r2, [r1, #20]
 800fe86:	f042 0206 	orr.w	r2, r2, #6
 800fe8a:	614a      	str	r2, [r1, #20]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 800fe8c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800fe90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe94:	695b      	ldr	r3, [r3, #20]
 800fe96:	2101      	movs	r1, #1
 800fe98:	4798      	blx	r3
        }
      }
    }
#endif /* _FRS */
  }
}
 800fe9a:	bd38      	pop	{r3, r4, r5, pc}
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 800fe9c:	69a3      	ldr	r3, [r4, #24]
 800fe9e:	f043 0304 	orr.w	r3, r3, #4
 800fea2:	61a3      	str	r3, [r4, #24]
      SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_SUSP | DMA_CCR_RESET);
 800fea4:	4b50      	ldr	r3, [pc, #320]	@ (800ffe8 <PORTx_IRQHandler+0x1f4>)
 800fea6:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800feaa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800feae:	6851      	ldr	r1, [r2, #4]
 800feb0:	694a      	ldr	r2, [r1, #20]
 800feb2:	f042 0206 	orr.w	r2, r2, #6
 800feb6:	614a      	str	r2, [r1, #20]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 800feb8:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800febc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fec0:	695b      	ldr	r3, [r3, #20]
 800fec2:	2100      	movs	r1, #0
 800fec4:	4798      	blx	r3
      return;
 800fec6:	e7e8      	b.n	800fe9a <PORTx_IRQHandler+0xa6>
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 800fec8:	69a3      	ldr	r3, [r4, #24]
 800feca:	f043 0308 	orr.w	r3, r3, #8
 800fece:	61a3      	str	r3, [r4, #24]
      SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_SUSP | DMA_CCR_RESET);
 800fed0:	4b45      	ldr	r3, [pc, #276]	@ (800ffe8 <PORTx_IRQHandler+0x1f4>)
 800fed2:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800fed6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800feda:	6851      	ldr	r1, [r2, #4]
 800fedc:	694a      	ldr	r2, [r1, #20]
 800fede:	f042 0206 	orr.w	r2, r2, #6
 800fee2:	614a      	str	r2, [r1, #20]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 800fee4:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800fee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800feec:	695b      	ldr	r3, [r3, #20]
 800feee:	2102      	movs	r1, #2
 800fef0:	4798      	blx	r3
      return;
 800fef2:	e7d2      	b.n	800fe9a <PORTx_IRQHandler+0xa6>
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 800fef4:	69a3      	ldr	r3, [r4, #24]
 800fef6:	f043 0310 	orr.w	r3, r3, #16
 800fefa:	61a3      	str	r3, [r4, #24]
      return;
 800fefc:	e7cd      	b.n	800fe9a <PORTx_IRQHandler+0xa6>
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 800fefe:	69a3      	ldr	r3, [r4, #24]
 800ff00:	f043 0320 	orr.w	r3, r3, #32
 800ff04:	61a3      	str	r3, [r4, #24]
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800ff06:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800ff0a:	4b37      	ldr	r3, [pc, #220]	@ (800ffe8 <PORTx_IRQHandler+0x1f4>)
 800ff0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff12:	2105      	movs	r1, #5
 800ff14:	4798      	blx	r3
      return;
 800ff16:	e7c0      	b.n	800fe9a <PORTx_IRQHandler+0xa6>
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 800ff18:	69a3      	ldr	r3, [r4, #24]
 800ff1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff1e:	61a3      	str	r3, [r4, #24]
      return;
 800ff20:	e7bb      	b.n	800fe9a <PORTx_IRQHandler+0xa6>
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 800ff22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ff24:	2b05      	cmp	r3, #5
 800ff26:	d004      	beq.n	800ff32 <PORTx_IRQHandler+0x13e>
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 800ff28:	69a3      	ldr	r3, [r4, #24]
 800ff2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ff2e:	61a3      	str	r3, [r4, #24]
      return;
 800ff30:	e7b3      	b.n	800fe9a <PORTx_IRQHandler+0xa6>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800ff32:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800ff36:	4b2c      	ldr	r3, [pc, #176]	@ (800ffe8 <PORTx_IRQHandler+0x1f4>)
 800ff38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff3c:	69db      	ldr	r3, [r3, #28]
 800ff3e:	2106      	movs	r1, #6
 800ff40:	4798      	blx	r3
 800ff42:	e7f1      	b.n	800ff28 <PORTx_IRQHandler+0x134>
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800ff44:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800ff48:	4b27      	ldr	r3, [pc, #156]	@ (800ffe8 <PORTx_IRQHandler+0x1f4>)
 800ff4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff4e:	69db      	ldr	r3, [r3, #28]
 800ff50:	2105      	movs	r1, #5
 800ff52:	4798      	blx	r3
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 800ff54:	69a3      	ldr	r3, [r4, #24]
 800ff56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ff5a:	61a3      	str	r3, [r4, #24]
      return;
 800ff5c:	e79d      	b.n	800fe9a <PORTx_IRQHandler+0xa6>
      ovrflag = 1;
 800ff5e:	4b23      	ldr	r3, [pc, #140]	@ (800ffec <PORTx_IRQHandler+0x1f8>)
 800ff60:	2201      	movs	r2, #1
 800ff62:	701a      	strb	r2, [r3, #0]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 800ff64:	69a3      	ldr	r3, [r4, #24]
 800ff66:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ff6a:	61a3      	str	r3, [r4, #24]
      return;
 800ff6c:	e795      	b.n	800fe9a <PORTx_IRQHandler+0xa6>
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 800ff6e:	69a2      	ldr	r2, [r4, #24]
 800ff70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ff74:	61a2      	str	r2, [r4, #24]
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_SUSP | DMA_CCR_RESET);
 800ff76:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 800ff7a:	4a1b      	ldr	r2, [pc, #108]	@ (800ffe8 <PORTx_IRQHandler+0x1f4>)
 800ff7c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ff80:	6891      	ldr	r1, [r2, #8]
 800ff82:	694a      	ldr	r2, [r1, #20]
 800ff84:	f042 0206 	orr.w	r2, r2, #6
 800ff88:	614a      	str	r2, [r1, #20]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800ff8a:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 800ff8e:	4a16      	ldr	r2, [pc, #88]	@ (800ffe8 <PORTx_IRQHandler+0x1f4>)
 800ff90:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ff94:	6892      	ldr	r2, [r2, #8]
 800ff96:	6951      	ldr	r1, [r2, #20]
 800ff98:	f011 0f01 	tst.w	r1, #1
 800ff9c:	d1f5      	bne.n	800ff8a <PORTx_IRQHandler+0x196>
      WRITE_REG(Ports[PortNum].hdmarx->CDAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800ff9e:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 800ffa2:	4911      	ldr	r1, [pc, #68]	@ (800ffe8 <PORTx_IRQHandler+0x1f4>)
 800ffa4:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
 800ffa8:	6b0d      	ldr	r5, [r1, #48]	@ 0x30
 800ffaa:	6515      	str	r5, [r2, #80]	@ 0x50
      MODIFY_REG(Ports[PortNum].hdmarx->CBR1, DMA_CBR1_BNDT, (SIZE_MAX_PD_TRANSACTION_UNCHUNK & DMA_CBR1_BNDT));
 800ffac:	688d      	ldr	r5, [r1, #8]
 800ffae:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 800ffb0:	0c12      	lsrs	r2, r2, #16
 800ffb2:	0412      	lsls	r2, r2, #16
 800ffb4:	f442 7284 	orr.w	r2, r2, #264	@ 0x108
 800ffb8:	64aa      	str	r2, [r5, #72]	@ 0x48
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800ffba:	6889      	ldr	r1, [r1, #8]
 800ffbc:	694a      	ldr	r2, [r1, #20]
 800ffbe:	f042 0201 	orr.w	r2, r2, #1
 800ffc2:	614a      	str	r2, [r1, #20]
      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag == 0u))
 800ffc4:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800ffc8:	d10a      	bne.n	800ffe0 <PORTx_IRQHandler+0x1ec>
 800ffca:	4b08      	ldr	r3, [pc, #32]	@ (800ffec <PORTx_IRQHandler+0x1f8>)
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	b93b      	cbnz	r3, 800ffe0 <PORTx_IRQHandler+0x1ec>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 800ffd0:	4b05      	ldr	r3, [pc, #20]	@ (800ffe8 <PORTx_IRQHandler+0x1f4>)
 800ffd2:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800ffd6:	6a1b      	ldr	r3, [r3, #32]
 800ffd8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ffda:	f001 0107 	and.w	r1, r1, #7
 800ffde:	4798      	blx	r3
      ovrflag = 0;
 800ffe0:	4b02      	ldr	r3, [pc, #8]	@ (800ffec <PORTx_IRQHandler+0x1f8>)
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	701a      	strb	r2, [r3, #0]
      return;
 800ffe6:	e758      	b.n	800fe9a <PORTx_IRQHandler+0xa6>
 800ffe8:	200108c4 	.word	0x200108c4
 800ffec:	200108c0 	.word	0x200108c0

0800fff0 <USBPD_PORT0_IRQHandler>:
{
 800fff0:	b508      	push	{r3, lr}
  PORTx_IRQHandler(USBPD_PORT_0);
 800fff2:	2000      	movs	r0, #0
 800fff4:	f7ff fefe 	bl	800fdf4 <PORTx_IRQHandler>
}
 800fff8:	bd08      	pop	{r3, pc}
	...

0800fffc <USBPDM1_AssertRp>:
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
}
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 800fffc:	b410      	push	{r4}
  switch (Ports[PortNum].params->RpResistor)
 800fffe:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8010002:	4b73      	ldr	r3, [pc, #460]	@ (80101d0 <USBPDM1_AssertRp+0x1d4>)
 8010004:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010008:	691b      	ldr	r3, [r3, #16]
 801000a:	789b      	ldrb	r3, [r3, #2]
 801000c:	f003 0303 	and.w	r3, r3, #3
 8010010:	2b01      	cmp	r3, #1
 8010012:	d030      	beq.n	8010076 <USBPDM1_AssertRp+0x7a>
 8010014:	2b02      	cmp	r3, #2
 8010016:	d07b      	beq.n	8010110 <USBPDM1_AssertRp+0x114>
 8010018:	b313      	cbz	r3, 8010060 <USBPDM1_AssertRp+0x64>
#endif /* UCPD_CFG3_TRIM_CC1_RP */
      break;
    default:
      break;
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 801001a:	4a6d      	ldr	r2, [pc, #436]	@ (80101d0 <USBPDM1_AssertRp+0x1d4>)
 801001c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8010020:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8010024:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010028:	f852 400c 	ldr.w	r4, [r2, ip]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 801002c:	68e1      	ldr	r1, [r4, #12]
 801002e:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 8010032:	60e1      	str	r1, [r4, #12]
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8010034:	f852 100c 	ldr.w	r1, [r2, ip]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8010038:	68ca      	ldr	r2, [r1, #12]
 801003a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 801003e:	60ca      	str	r2, [r1, #12]
  if (CCNONE == Ports[PortNum].CCx)
 8010040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010042:	2b00      	cmp	r3, #0
 8010044:	f040 80b1 	bne.w	80101aa <USBPDM1_AssertRp+0x1ae>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8010048:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801004c:	4b60      	ldr	r3, [pc, #384]	@ (80101d0 <USBPDM1_AssertRp+0x1d4>)
 801004e:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8010052:	68d3      	ldr	r3, [r2, #12]
 8010054:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8010058:	60d3      	str	r3, [r2, #12]
  }

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 801005a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801005e:	4770      	bx	lr
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 8010060:	4613      	mov	r3, r2
 8010062:	4a5b      	ldr	r2, [pc, #364]	@ (80101d0 <USBPDM1_AssertRp+0x1d4>)
 8010064:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 8010068:	68d3      	ldr	r3, [r2, #12]
 801006a:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 801006e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010072:	60d3      	str	r3, [r2, #12]
}
 8010074:	e7d1      	b.n	801001a <USBPDM1_AssertRp+0x1e>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8010076:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 801007a:	4a55      	ldr	r2, [pc, #340]	@ (80101d0 <USBPDM1_AssertRp+0x1d4>)
 801007c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 8010080:	68d3      	ldr	r3, [r2, #12]
 8010082:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8010086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801008a:	60d3      	str	r3, [r2, #12]
      if (((dev_id == 0x482UL) && (rev_id == 0x3000UL)) ||
 801008c:	4b51      	ldr	r3, [pc, #324]	@ (80101d4 <USBPDM1_AssertRp+0x1d8>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	f240 4282 	movw	r2, #1154	@ 0x482
 8010094:	4293      	cmp	r3, r2
 8010096:	d011      	beq.n	80100bc <USBPDM1_AssertRp+0xc0>
 8010098:	f240 4281 	movw	r2, #1153	@ 0x481
 801009c:	4293      	cmp	r3, r2
 801009e:	d02a      	beq.n	80100f6 <USBPDM1_AssertRp+0xfa>
          ((dev_id == 0x481UL) && (rev_id == 0x2001UL)) ||
 80100a0:	f240 4281 	movw	r2, #1153	@ 0x481
 80100a4:	4293      	cmp	r3, r2
 80100a6:	d02d      	beq.n	8010104 <USBPDM1_AssertRp+0x108>
          ((dev_id == 0x481UL) && (rev_id == 0x3000UL)) ||
 80100a8:	f240 4276 	movw	r2, #1142	@ 0x476
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d1b4      	bne.n	801001a <USBPDM1_AssertRp+0x1e>
          ((dev_id == 0x476UL) && (rev_id == 0x1000UL)))
 80100b0:	4b49      	ldr	r3, [pc, #292]	@ (80101d8 <USBPDM1_AssertRp+0x1dc>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80100b8:	d1af      	bne.n	801001a <USBPDM1_AssertRp+0x1e>
 80100ba:	e004      	b.n	80100c6 <USBPDM1_AssertRp+0xca>
      if (((dev_id == 0x482UL) && (rev_id == 0x3000UL)) ||
 80100bc:	4a46      	ldr	r2, [pc, #280]	@ (80101d8 <USBPDM1_AssertRp+0x1dc>)
 80100be:	6812      	ldr	r2, [r2, #0]
 80100c0:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 80100c4:	d1e8      	bne.n	8010098 <USBPDM1_AssertRp+0x9c>
        CLEAR_BIT(UCPD1->CFG3, (UCPD_CFG3_TRIM_CC1_RP | UCPD_CFG3_TRIM_CC2_RP)); /* Clear bits to change */
 80100c6:	4b45      	ldr	r3, [pc, #276]	@ (80101dc <USBPDM1_AssertRp+0x1e0>)
 80100c8:	689a      	ldr	r2, [r3, #8]
 80100ca:	f022 221e 	bic.w	r2, r2, #503324160	@ 0x1e001e00
 80100ce:	609a      	str	r2, [r3, #8]
        temp = ((((*pUCPD_TRIM_1A5_CC1) & UCPD_VALUE_TRIM_CC1_RP_1A5_MSK) >>
 80100d0:	4a43      	ldr	r2, [pc, #268]	@ (80101e0 <USBPDM1_AssertRp+0x1e4>)
 80100d2:	6812      	ldr	r2, [r2, #0]
 80100d4:	6812      	ldr	r2, [r2, #0]
                 UCPD_VALUE_TRIM_CC1_RP_1A5_POS) << UCPD_CFG3_TRIM_CC1_RP_Pos);
 80100d6:	0252      	lsls	r2, r2, #9
        temp = ((((*pUCPD_TRIM_1A5_CC1) & UCPD_VALUE_TRIM_CC1_RP_1A5_MSK) >>
 80100d8:	f402 52f0 	and.w	r2, r2, #7680	@ 0x1e00
        SET_BIT(UCPD1->CFG3, temp); /* Apply Rp trimming */
 80100dc:	6899      	ldr	r1, [r3, #8]
 80100de:	430a      	orrs	r2, r1
 80100e0:	609a      	str	r2, [r3, #8]
        temp = ((((*pUCPD_TRIM_1A5_CC2) & UCPD_VALUE_TRIM_CC2_RP_1A5_MSK) >>
 80100e2:	4a40      	ldr	r2, [pc, #256]	@ (80101e4 <USBPDM1_AssertRp+0x1e8>)
 80100e4:	6812      	ldr	r2, [r2, #0]
 80100e6:	6812      	ldr	r2, [r2, #0]
                 UCPD_VALUE_TRIM_CC2_RP_1A5_POS) << UCPD_CFG3_TRIM_CC2_RP_Pos);
 80100e8:	0652      	lsls	r2, r2, #25
        temp = ((((*pUCPD_TRIM_1A5_CC2) & UCPD_VALUE_TRIM_CC2_RP_1A5_MSK) >>
 80100ea:	f002 52f0 	and.w	r2, r2, #503316480	@ 0x1e000000
        SET_BIT(UCPD1->CFG3, temp); /* Apply Rp trimming */
 80100ee:	6899      	ldr	r1, [r3, #8]
 80100f0:	430a      	orrs	r2, r1
 80100f2:	609a      	str	r2, [r3, #8]
 80100f4:	e791      	b.n	801001a <USBPDM1_AssertRp+0x1e>
          ((dev_id == 0x481UL) && (rev_id == 0x2001UL)) ||
 80100f6:	4a38      	ldr	r2, [pc, #224]	@ (80101d8 <USBPDM1_AssertRp+0x1dc>)
 80100f8:	6811      	ldr	r1, [r2, #0]
 80100fa:	f242 0201 	movw	r2, #8193	@ 0x2001
 80100fe:	4291      	cmp	r1, r2
 8010100:	d1ce      	bne.n	80100a0 <USBPDM1_AssertRp+0xa4>
 8010102:	e7e0      	b.n	80100c6 <USBPDM1_AssertRp+0xca>
          ((dev_id == 0x481UL) && (rev_id == 0x3000UL)) ||
 8010104:	4a34      	ldr	r2, [pc, #208]	@ (80101d8 <USBPDM1_AssertRp+0x1dc>)
 8010106:	6812      	ldr	r2, [r2, #0]
 8010108:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 801010c:	d1cc      	bne.n	80100a8 <USBPDM1_AssertRp+0xac>
 801010e:	e7da      	b.n	80100c6 <USBPDM1_AssertRp+0xca>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8010110:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8010114:	4a2e      	ldr	r2, [pc, #184]	@ (80101d0 <USBPDM1_AssertRp+0x1d4>)
 8010116:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801011a:	68d3      	ldr	r3, [r2, #12]
 801011c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8010120:	60d3      	str	r3, [r2, #12]
      if (((dev_id == 0x482UL) && (rev_id == 0x3000UL)) ||
 8010122:	4b2c      	ldr	r3, [pc, #176]	@ (80101d4 <USBPDM1_AssertRp+0x1d8>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	f240 4282 	movw	r2, #1154	@ 0x482
 801012a:	4293      	cmp	r3, r2
 801012c:	d013      	beq.n	8010156 <USBPDM1_AssertRp+0x15a>
 801012e:	f240 4281 	movw	r2, #1153	@ 0x481
 8010132:	4293      	cmp	r3, r2
 8010134:	d02c      	beq.n	8010190 <USBPDM1_AssertRp+0x194>
          ((dev_id == 0x481UL) && (rev_id == 0x2001UL)) ||
 8010136:	f240 4281 	movw	r2, #1153	@ 0x481
 801013a:	4293      	cmp	r3, r2
 801013c:	d02f      	beq.n	801019e <USBPDM1_AssertRp+0x1a2>
          ((dev_id == 0x481UL) && (rev_id == 0x3000UL)) ||
 801013e:	f240 4276 	movw	r2, #1142	@ 0x476
 8010142:	4293      	cmp	r3, r2
 8010144:	f47f af69 	bne.w	801001a <USBPDM1_AssertRp+0x1e>
          ((dev_id == 0x476UL) && (rev_id == 0x1000UL)))
 8010148:	4b23      	ldr	r3, [pc, #140]	@ (80101d8 <USBPDM1_AssertRp+0x1dc>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010150:	f47f af63 	bne.w	801001a <USBPDM1_AssertRp+0x1e>
 8010154:	e004      	b.n	8010160 <USBPDM1_AssertRp+0x164>
      if (((dev_id == 0x482UL) && (rev_id == 0x3000UL)) ||
 8010156:	4a20      	ldr	r2, [pc, #128]	@ (80101d8 <USBPDM1_AssertRp+0x1dc>)
 8010158:	6812      	ldr	r2, [r2, #0]
 801015a:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 801015e:	d1e6      	bne.n	801012e <USBPDM1_AssertRp+0x132>
        CLEAR_BIT(UCPD1->CFG3, (UCPD_CFG3_TRIM_CC1_RP | UCPD_CFG3_TRIM_CC2_RP)); /* Clear bits to change */
 8010160:	4b1e      	ldr	r3, [pc, #120]	@ (80101dc <USBPDM1_AssertRp+0x1e0>)
 8010162:	689a      	ldr	r2, [r3, #8]
 8010164:	f022 221e 	bic.w	r2, r2, #503324160	@ 0x1e001e00
 8010168:	609a      	str	r2, [r3, #8]
        temp = ((((*pUCPD_TRIM_3A0_CC1) & UCPD_VALUE_TRIM_CC1_RP_3A0_MSK) >>
 801016a:	4a1f      	ldr	r2, [pc, #124]	@ (80101e8 <USBPDM1_AssertRp+0x1ec>)
 801016c:	6812      	ldr	r2, [r2, #0]
 801016e:	6812      	ldr	r2, [r2, #0]
                 UCPD_VALUE_TRIM_CC1_RP_3A0_POS) << UCPD_CFG3_TRIM_CC1_RP_Pos);
 8010170:	0252      	lsls	r2, r2, #9
        temp = ((((*pUCPD_TRIM_3A0_CC1) & UCPD_VALUE_TRIM_CC1_RP_3A0_MSK) >>
 8010172:	f402 52f0 	and.w	r2, r2, #7680	@ 0x1e00
        SET_BIT(UCPD1->CFG3, temp); /* Apply Rp trimming */
 8010176:	6899      	ldr	r1, [r3, #8]
 8010178:	430a      	orrs	r2, r1
 801017a:	609a      	str	r2, [r3, #8]
        temp = ((((*pUCPD_TRIM_3A0_CC2) & UCPD_VALUE_TRIM_CC2_RP_3A0_MSK) >>
 801017c:	4a1b      	ldr	r2, [pc, #108]	@ (80101ec <USBPDM1_AssertRp+0x1f0>)
 801017e:	6812      	ldr	r2, [r2, #0]
 8010180:	6812      	ldr	r2, [r2, #0]
                 UCPD_VALUE_TRIM_CC2_RP_3A0_POS) << UCPD_CFG3_TRIM_CC2_RP_Pos);
 8010182:	0652      	lsls	r2, r2, #25
        temp = ((((*pUCPD_TRIM_3A0_CC2) & UCPD_VALUE_TRIM_CC2_RP_3A0_MSK) >>
 8010184:	f002 52f0 	and.w	r2, r2, #503316480	@ 0x1e000000
        SET_BIT(UCPD1->CFG3, temp); /* Apply Rp trimming */
 8010188:	6899      	ldr	r1, [r3, #8]
 801018a:	430a      	orrs	r2, r1
 801018c:	609a      	str	r2, [r3, #8]
 801018e:	e744      	b.n	801001a <USBPDM1_AssertRp+0x1e>
          ((dev_id == 0x481UL) && (rev_id == 0x2001UL)) ||
 8010190:	4a11      	ldr	r2, [pc, #68]	@ (80101d8 <USBPDM1_AssertRp+0x1dc>)
 8010192:	6811      	ldr	r1, [r2, #0]
 8010194:	f242 0201 	movw	r2, #8193	@ 0x2001
 8010198:	4291      	cmp	r1, r2
 801019a:	d1cc      	bne.n	8010136 <USBPDM1_AssertRp+0x13a>
 801019c:	e7e0      	b.n	8010160 <USBPDM1_AssertRp+0x164>
          ((dev_id == 0x481UL) && (rev_id == 0x3000UL)) ||
 801019e:	4a0e      	ldr	r2, [pc, #56]	@ (80101d8 <USBPDM1_AssertRp+0x1dc>)
 80101a0:	6812      	ldr	r2, [r2, #0]
 80101a2:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 80101a6:	d1ca      	bne.n	801013e <USBPDM1_AssertRp+0x142>
 80101a8:	e7da      	b.n	8010160 <USBPDM1_AssertRp+0x164>
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80101aa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80101ae:	4a08      	ldr	r2, [pc, #32]	@ (80101d0 <USBPDM1_AssertRp+0x1d4>)
 80101b0:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	d007      	beq.n	80101c8 <USBPDM1_AssertRp+0x1cc>
 80101b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 80101bc:	68ca      	ldr	r2, [r1, #12]
 80101be:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80101c2:	4313      	orrs	r3, r2
 80101c4:	60cb      	str	r3, [r1, #12]
}
 80101c6:	e748      	b.n	801005a <USBPDM1_AssertRp+0x5e>
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80101c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80101cc:	e7f6      	b.n	80101bc <USBPDM1_AssertRp+0x1c0>
 80101ce:	bf00      	nop
 80101d0:	200108c4 	.word	0x200108c4
 80101d4:	20010900 	.word	0x20010900
 80101d8:	200108fc 	.word	0x200108fc
 80101dc:	4000dc00 	.word	0x4000dc00
 80101e0:	20000018 	.word	0x20000018
 80101e4:	20000014 	.word	0x20000014
 80101e8:	20000020 	.word	0x20000020
 80101ec:	2000001c 	.word	0x2000001c

080101f0 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
  /* not needed on STM32U5xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 80101f0:	4770      	bx	lr
	...

080101f4 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 80101f4:	b538      	push	{r3, r4, r5, lr}
 80101f6:	4604      	mov	r4, r0
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 80101f8:	4b25      	ldr	r3, [pc, #148]	@ (8010290 <USBPDM1_AssertRd+0x9c>)
 80101fa:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 80101fe:	00d1      	lsls	r1, r2, #3
 8010200:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010204:	585d      	ldr	r5, [r3, r1]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8010206:	68e8      	ldr	r0, [r5, #12]
 8010208:	f440 1000 	orr.w	r0, r0, #2097152	@ 0x200000
 801020c:	60e8      	str	r0, [r5, #12]
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 801020e:	585d      	ldr	r5, [r3, r1]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8010210:	68e8      	ldr	r0, [r5, #12]
 8010212:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 8010216:	60e8      	str	r0, [r5, #12]

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8010218:	585d      	ldr	r5, [r3, r1]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 801021a:	68e8      	ldr	r0, [r5, #12]
 801021c:	f420 6040 	bic.w	r0, r0, #3072	@ 0xc00
 8010220:	60e8      	str	r0, [r5, #12]
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 8010222:	5859      	ldr	r1, [r3, r1]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8010224:	68cb      	ldr	r3, [r1, #12]
 8010226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801022a:	60cb      	str	r3, [r1, #12]
  if (CCNONE == Ports[PortNum].CCx)
 801022c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 801022e:	b9eb      	cbnz	r3, 801026c <USBPDM1_AssertRd+0x78>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8010230:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8010234:	4a16      	ldr	r2, [pc, #88]	@ (8010290 <USBPDM1_AssertRd+0x9c>)
 8010236:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 801023a:	68d3      	ldr	r3, [r2, #12]
 801023c:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8010240:	60d3      	str	r3, [r2, #12]
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
  }

  HAL_Delay(1);
 8010242:	2001      	movs	r0, #1
 8010244:	f7f4 fa54 	bl	80046f0 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 8010248:	4a11      	ldr	r2, [pc, #68]	@ (8010290 <USBPDM1_AssertRd+0x9c>)
 801024a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 801024e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8010252:	68cb      	ldr	r3, [r1, #12]
 8010254:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010258:	60cb      	str	r3, [r1, #12]
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 801025a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 801025e:	f852 2034 	ldr.w	r2, [r2, r4, lsl #3]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8010262:	68d3      	ldr	r3, [r2, #12]
 8010264:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010268:	60d3      	str	r3, [r2, #12]
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 801026a:	bd38      	pop	{r3, r4, r5, pc}
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 801026c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8010270:	4907      	ldr	r1, [pc, #28]	@ (8010290 <USBPDM1_AssertRd+0x9c>)
 8010272:	f851 1032 	ldr.w	r1, [r1, r2, lsl #3]
 8010276:	2b01      	cmp	r3, #1
 8010278:	d007      	beq.n	801028a <USBPDM1_AssertRd+0x96>
 801027a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 801027e:	68ca      	ldr	r2, [r1, #12]
 8010280:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8010284:	4313      	orrs	r3, r2
 8010286:	60cb      	str	r3, [r1, #12]
}
 8010288:	e7db      	b.n	8010242 <USBPDM1_AssertRd+0x4e>
 801028a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801028e:	e7f6      	b.n	801027e <USBPDM1_AssertRd+0x8a>
 8010290:	200108c4 	.word	0x200108c4

08010294 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
  /* not needed on STM32U5xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8010294:	4770      	bx	lr
	...

08010298 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8010298:	b410      	push	{r4}
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 801029a:	4a0c      	ldr	r2, [pc, #48]	@ (80102cc <USBPDM1_EnterErrorRecovery+0x34>)
 801029c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80102a0:	00db      	lsls	r3, r3, #3
 80102a2:	58d4      	ldr	r4, [r2, r3]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 80102a4:	68e1      	ldr	r1, [r4, #12]
 80102a6:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 80102aa:	60e1      	str	r1, [r4, #12]
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 80102ac:	58d1      	ldr	r1, [r2, r3]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 80102ae:	68cb      	ldr	r3, [r1, #12]
 80102b0:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 80102b4:	60cb      	str	r3, [r1, #12]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80102b6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80102ba:	f852 2030 	ldr.w	r2, [r2, r0, lsl #3]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 80102be:	68d3      	ldr	r3, [r2, #12]
 80102c0:	f023 0320 	bic.w	r3, r3, #32
 80102c4:	60d3      	str	r3, [r2, #12]
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
  }
#endif /* USBPD_REV30_SUPPORT */
}
 80102c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102ca:	4770      	bx	lr
 80102cc:	200108c4 	.word	0x200108c4

080102d0 <HW_SignalAttachement>:

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 80102d0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80102d4:	4b02      	ldr	r3, [pc, #8]	@ (80102e0 <HW_SignalAttachement+0x10>)
 80102d6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80102da:	6359      	str	r1, [r3, #52]	@ 0x34
  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80102dc:	4770      	bx	lr
 80102de:	bf00      	nop
 80102e0:	200108c4 	.word	0x200108c4

080102e4 <HW_SignalDetachment>:
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 80102e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80102e8:	4b02      	ldr	r3, [pc, #8]	@ (80102f4 <HW_SignalDetachment+0x10>)
 80102ea:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80102ee:	2200      	movs	r2, #0
 80102f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80102f2:	4770      	bx	lr
 80102f4:	200108c4 	.word	0x200108c4

080102f8 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 80102f8:	b500      	push	{lr}
 80102fa:	b083      	sub	sp, #12
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 80102fc:	a901      	add	r1, sp, #4
 80102fe:	f7f4 f9b1 	bl	8004664 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
}
 8010302:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8010306:	b003      	add	sp, #12
 8010308:	f85d fb04 	ldr.w	pc, [sp], #4

0801030c <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 801030c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010310:	4604      	mov	r4, r0
 8010312:	4688      	mov	r8, r1
 8010314:	4699      	mov	r9, r3
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8010316:	3203      	adds	r2, #3
 8010318:	f022 0703 	bic.w	r7, r2, #3
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801031c:	f3ef 8310 	mrs	r3, PRIMASK
    int_posture = __get_interrupt_posture();

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8010320:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010322:	4a2c      	ldr	r2, [pc, #176]	@ (80103d4 <_tx_byte_allocate+0xc8>)
 8010324:	6816      	ldr	r6, [r2, #0]
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8010326:	2500      	movs	r5, #0
 8010328:	e003      	b.n	8010332 <_tx_byte_allocate+0x26>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 801032a:	6a22      	ldr	r2, [r4, #32]
 801032c:	42b2      	cmp	r2, r6
 801032e:	d00e      	beq.n	801034e <_tx_byte_allocate+0x42>
                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
            }
        }

    } while (finished == TX_FALSE);
 8010330:	b97d      	cbnz	r5, 8010352 <_tx_byte_allocate+0x46>
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8010332:	6226      	str	r6, [r4, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010334:	f383 8810 	msr	PRIMASK, r3
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8010338:	4639      	mov	r1, r7
 801033a:	4620      	mov	r0, r4
 801033c:	f000 f8d6 	bl	80104ec <_tx_byte_pool_search>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010340:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010344:	b672      	cpsid	i
        if (work_ptr != TX_NULL)
 8010346:	2800      	cmp	r0, #0
 8010348:	d0ef      	beq.n	801032a <_tx_byte_allocate+0x1e>
            finished =  TX_TRUE;
 801034a:	2501      	movs	r5, #1
 801034c:	e7f0      	b.n	8010330 <_tx_byte_allocate+0x24>
                finished =  TX_TRUE;
 801034e:	2501      	movs	r5, #1
 8010350:	e7ee      	b.n	8010330 <_tx_byte_allocate+0x24>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8010352:	f8c8 0000 	str.w	r0, [r8]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8010356:	b120      	cbz	r0, 8010362 <_tx_byte_allocate+0x56>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010358:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 801035c:	2000      	movs	r0, #0
        }
    }

    /* Return completion status.  */
    return(status);
}
 801035e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (wait_option != TX_NO_WAIT)
 8010362:	f1b9 0f00 	cmp.w	r9, #0
 8010366:	d031      	beq.n	80103cc <_tx_byte_allocate+0xc0>
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8010368:	4a1b      	ldr	r2, [pc, #108]	@ (80103d8 <_tx_byte_allocate+0xcc>)
 801036a:	6812      	ldr	r2, [r2, #0]
 801036c:	bb1a      	cbnz	r2, 80103b6 <_tx_byte_allocate+0xaa>
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 801036e:	4a1b      	ldr	r2, [pc, #108]	@ (80103dc <_tx_byte_allocate+0xd0>)
 8010370:	66b2      	str	r2, [r6, #104]	@ 0x68
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8010372:	66f4      	str	r4, [r6, #108]	@ 0x6c
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8010374:	f8c6 807c 	str.w	r8, [r6, #124]	@ 0x7c
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8010378:	67b7      	str	r7, [r6, #120]	@ 0x78
                thread_ptr -> tx_thread_suspension_sequence++;
 801037a:	f8d6 20ac 	ldr.w	r2, [r6, #172]	@ 0xac
 801037e:	3201      	adds	r2, #1
 8010380:	f8c6 20ac 	str.w	r2, [r6, #172]	@ 0xac
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8010384:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8010386:	1c51      	adds	r1, r2, #1
 8010388:	62a1      	str	r1, [r4, #40]	@ 0x28
                if (suspended_count == TX_NO_SUSPENSIONS)
 801038a:	b9c2      	cbnz	r2, 80103be <_tx_byte_allocate+0xb2>
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 801038c:	6266      	str	r6, [r4, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 801038e:	6736      	str	r6, [r6, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8010390:	6776      	str	r6, [r6, #116]	@ 0x74
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8010392:	2209      	movs	r2, #9
 8010394:	6332      	str	r2, [r6, #48]	@ 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010396:	2201      	movs	r2, #1
 8010398:	63b2      	str	r2, [r6, #56]	@ 0x38
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801039a:	f8c6 904c 	str.w	r9, [r6, #76]	@ 0x4c
                _tx_thread_preempt_disable++;
 801039e:	490e      	ldr	r1, [pc, #56]	@ (80103d8 <_tx_byte_allocate+0xcc>)
 80103a0:	680a      	ldr	r2, [r1, #0]
 80103a2:	3201      	adds	r2, #1
 80103a4:	600a      	str	r2, [r1, #0]
 80103a6:	f383 8810 	msr	PRIMASK, r3
                _tx_thread_system_suspend(thread_ptr);
 80103aa:	4630      	mov	r0, r6
 80103ac:	f001 fbdc 	bl	8011b68 <_tx_thread_system_suspend>
                status =  thread_ptr -> tx_thread_suspend_status;
 80103b0:	f8d6 0084 	ldr.w	r0, [r6, #132]	@ 0x84
 80103b4:	e7d3      	b.n	801035e <_tx_byte_allocate+0x52>
 80103b6:	f383 8810 	msr	PRIMASK, r3
                status =  TX_NO_MEMORY;
 80103ba:	2010      	movs	r0, #16
}
 80103bc:	e7cf      	b.n	801035e <_tx_byte_allocate+0x52>
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 80103be:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80103c0:	6732      	str	r2, [r6, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80103c2:	6f51      	ldr	r1, [r2, #116]	@ 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80103c4:	6771      	str	r1, [r6, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80103c6:	670e      	str	r6, [r1, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80103c8:	6756      	str	r6, [r2, #116]	@ 0x74
 80103ca:	e7e2      	b.n	8010392 <_tx_byte_allocate+0x86>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80103cc:	f383 8810 	msr	PRIMASK, r3
            status =  TX_NO_MEMORY;
 80103d0:	2010      	movs	r0, #16
    return(status);
 80103d2:	e7c4      	b.n	801035e <_tx_byte_allocate+0x52>
 80103d4:	200109d8 	.word	0x200109d8
 80103d8:	20010940 	.word	0x20010940
 80103dc:	080103e1 	.word	0x080103e1

080103e0 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80103e0:	b510      	push	{r4, lr}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80103e2:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80103e6:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 80103e8:	4a1b      	ldr	r2, [pc, #108]	@ (8010458 <_tx_byte_pool_cleanup+0x78>)
 80103ea:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80103ec:	4294      	cmp	r4, r2
 80103ee:	d002      	beq.n	80103f6 <_tx_byte_pool_cleanup+0x16>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80103f0:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80103f4:	bd10      	pop	{r4, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80103f6:	f8d0 20ac 	ldr.w	r2, [r0, #172]	@ 0xac
 80103fa:	428a      	cmp	r2, r1
 80103fc:	d1f8      	bne.n	80103f0 <_tx_byte_pool_cleanup+0x10>
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80103fe:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
            if (pool_ptr != TX_NULL)
 8010400:	2a00      	cmp	r2, #0
 8010402:	d0f5      	beq.n	80103f0 <_tx_byte_pool_cleanup+0x10>
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8010404:	4915      	ldr	r1, [pc, #84]	@ (801045c <_tx_byte_pool_cleanup+0x7c>)
 8010406:	6814      	ldr	r4, [r2, #0]
 8010408:	428c      	cmp	r4, r1
 801040a:	d1f1      	bne.n	80103f0 <_tx_byte_pool_cleanup+0x10>
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 801040c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801040e:	2900      	cmp	r1, #0
 8010410:	d0ee      	beq.n	80103f0 <_tx_byte_pool_cleanup+0x10>
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010412:	2100      	movs	r1, #0
 8010414:	6681      	str	r1, [r0, #104]	@ 0x68
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8010416:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8010418:	3901      	subs	r1, #1
 801041a:	6291      	str	r1, [r2, #40]	@ 0x28
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801041c:	b991      	cbnz	r1, 8010444 <_tx_byte_pool_cleanup+0x64>
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 801041e:	6251      	str	r1, [r2, #36]	@ 0x24
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8010420:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8010422:	2a09      	cmp	r2, #9
 8010424:	d1e4      	bne.n	80103f0 <_tx_byte_pool_cleanup+0x10>
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8010426:	2210      	movs	r2, #16
 8010428:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
                            _tx_thread_preempt_disable++;
 801042c:	490c      	ldr	r1, [pc, #48]	@ (8010460 <_tx_byte_pool_cleanup+0x80>)
 801042e:	680a      	ldr	r2, [r1, #0]
 8010430:	3201      	adds	r2, #1
 8010432:	600a      	str	r2, [r1, #0]
 8010434:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 8010438:	f001 fb06 	bl	8011a48 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801043c:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010440:	b672      	cpsid	i
#endif
    return(int_posture);
 8010442:	e7d5      	b.n	80103f0 <_tx_byte_pool_cleanup+0x10>
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8010444:	6f01      	ldr	r1, [r0, #112]	@ 0x70
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010446:	6f44      	ldr	r4, [r0, #116]	@ 0x74
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8010448:	674c      	str	r4, [r1, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801044a:	6721      	str	r1, [r4, #112]	@ 0x70
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 801044c:	6a54      	ldr	r4, [r2, #36]	@ 0x24
 801044e:	4284      	cmp	r4, r0
 8010450:	d1e6      	bne.n	8010420 <_tx_byte_pool_cleanup+0x40>
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8010452:	6251      	str	r1, [r2, #36]	@ 0x24
 8010454:	e7e4      	b.n	8010420 <_tx_byte_pool_cleanup+0x40>
 8010456:	bf00      	nop
 8010458:	080103e1 	.word	0x080103e1
 801045c:	42595445 	.word	0x42595445
 8010460:	20010940 	.word	0x20010940

08010464 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8010464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010466:	4604      	mov	r4, r0
 8010468:	460f      	mov	r7, r1
 801046a:	4616      	mov	r6, r2
 801046c:	461d      	mov	r5, r3
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 801046e:	2234      	movs	r2, #52	@ 0x34
 8010470:	2100      	movs	r1, #0
 8010472:	f005 fb99 	bl	8015ba8 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8010476:	f025 0303 	bic.w	r3, r5, #3

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 801047a:	6067      	str	r7, [r4, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801047c:	61a6      	str	r6, [r4, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 801047e:	61e3      	str	r3, [r4, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010480:	6126      	str	r6, [r4, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010482:	6166      	str	r6, [r4, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8010484:	f1a3 0208 	sub.w	r2, r3, #8
 8010488:	60a2      	str	r2, [r4, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 801048a:	2202      	movs	r2, #2
 801048c:	60e2      	str	r2, [r4, #12]
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 801048e:	4433      	add	r3, r6
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
    *block_indirect_ptr =  temp_ptr;
 8010490:	f843 4c04 	str.w	r4, [r3, #-4]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8010494:	f1a3 0208 	sub.w	r2, r3, #8
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010498:	f843 6c08 	str.w	r6, [r3, #-8]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
    *block_indirect_ptr =  block_ptr;
 801049c:	6032      	str	r2, [r6, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 801049e:	4b0f      	ldr	r3, [pc, #60]	@ (80104dc <_tx_byte_pool_create+0x78>)
 80104a0:	6073      	str	r3, [r6, #4]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80104a2:	2300      	movs	r3, #0
 80104a4:	6223      	str	r3, [r4, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80104a6:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80104aa:	b672      	cpsid	i

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80104ac:	4b0c      	ldr	r3, [pc, #48]	@ (80104e0 <_tx_byte_pool_create+0x7c>)
 80104ae:	6023      	str	r3, [r4, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80104b0:	4b0c      	ldr	r3, [pc, #48]	@ (80104e4 <_tx_byte_pool_create+0x80>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	b953      	cbnz	r3, 80104cc <_tx_byte_pool_create+0x68>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80104b6:	490c      	ldr	r1, [pc, #48]	@ (80104e8 <_tx_byte_pool_create+0x84>)
 80104b8:	600c      	str	r4, [r1, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80104ba:	62e4      	str	r4, [r4, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80104bc:	6324      	str	r4, [r4, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80104be:	3301      	adds	r3, #1
 80104c0:	4908      	ldr	r1, [pc, #32]	@ (80104e4 <_tx_byte_pool_create+0x80>)
 80104c2:	600b      	str	r3, [r1, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80104c4:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 80104c8:	2000      	movs	r0, #0
 80104ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        next_pool =      _tx_byte_pool_created_ptr;
 80104cc:	4906      	ldr	r1, [pc, #24]	@ (80104e8 <_tx_byte_pool_create+0x84>)
 80104ce:	6809      	ldr	r1, [r1, #0]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80104d0:	6b08      	ldr	r0, [r1, #48]	@ 0x30
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80104d2:	630c      	str	r4, [r1, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80104d4:	62c4      	str	r4, [r0, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80104d6:	6320      	str	r0, [r4, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80104d8:	62e1      	str	r1, [r4, #44]	@ 0x2c
 80104da:	e7f0      	b.n	80104be <_tx_byte_pool_create+0x5a>
 80104dc:	ffffeeee 	.word	0xffffeeee
 80104e0:	42595445 	.word	0x42595445
 80104e4:	20010908 	.word	0x20010908
 80104e8:	2001090c 	.word	0x2001090c

080104ec <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80104ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80104ee:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80104f2:	b672      	cpsid	i
    /* Disable interrupts.  */
    TX_DISABLE

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 80104f4:	6882      	ldr	r2, [r0, #8]
 80104f6:	68c3      	ldr	r3, [r0, #12]
 80104f8:	1e9c      	subs	r4, r3, #2
 80104fa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    if (memory_size >= total_theoretical_available)
 80104fe:	428a      	cmp	r2, r1
 8010500:	d907      	bls.n	8010512 <_tx_byte_pool_search+0x26>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8010502:	4a32      	ldr	r2, [pc, #200]	@ (80105cc <_tx_byte_pool_search+0xe0>)
 8010504:	6815      	ldr	r5, [r2, #0]

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8010506:	6205      	str	r5, [r0, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8010508:	6942      	ldr	r2, [r0, #20]
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801050a:	3301      	adds	r3, #1
UINT            first_free_block_found =  TX_FALSE;
 801050c:	f04f 0e00 	mov.w	lr, #0
 8010510:	e02d      	b.n	801056e <_tx_byte_pool_search+0x82>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010512:	f38c 8810 	msr	PRIMASK, ip
        current_ptr =  TX_NULL;
 8010516:	2000      	movs	r0, #0
 8010518:	e04f      	b.n	80105ba <_tx_byte_pool_search+0xce>
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 801051a:	f1be 0f00 	cmp.w	lr, #0
 801051e:	d102      	bne.n	8010526 <_tx_byte_pool_search+0x3a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8010520:	6142      	str	r2, [r0, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8010522:	f04f 0e01 	mov.w	lr, #1

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
                next_ptr =             *this_block_link_ptr;
 8010526:	6817      	ldr	r7, [r2, #0]

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8010528:	1abc      	subs	r4, r7, r2
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801052a:	3c08      	subs	r4, #8

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 801052c:	42a1      	cmp	r1, r4
 801052e:	d927      	bls.n	8010580 <_tx_byte_pool_search+0x94>

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8010530:	4c27      	ldr	r4, [pc, #156]	@ (80105d0 <_tx_byte_pool_search+0xe4>)
 8010532:	687e      	ldr	r6, [r7, #4]
 8010534:	42a6      	cmp	r6, r4
 8010536:	d003      	beq.n	8010540 <_tx_byte_pool_search+0x54>
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
                        current_ptr =  *next_block_link_ptr;
 8010538:	683a      	ldr	r2, [r7, #0]

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 801053a:	b1eb      	cbz	r3, 8010578 <_tx_byte_pool_search+0x8c>
                        {
                            examine_blocks--;
 801053c:	3b01      	subs	r3, #1
 801053e:	e01b      	b.n	8010578 <_tx_byte_pool_search+0x8c>
                        *this_block_link_ptr =  *next_block_link_ptr;
 8010540:	683c      	ldr	r4, [r7, #0]
 8010542:	6014      	str	r4, [r2, #0]
                        pool_ptr -> tx_byte_pool_fragments--;
 8010544:	68c4      	ldr	r4, [r0, #12]
 8010546:	3c01      	subs	r4, #1
 8010548:	60c4      	str	r4, [r0, #12]
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 801054a:	6944      	ldr	r4, [r0, #20]
 801054c:	42bc      	cmp	r4, r7
 801054e:	d113      	bne.n	8010578 <_tx_byte_pool_search+0x8c>
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8010550:	6142      	str	r2, [r0, #20]
 8010552:	e011      	b.n	8010578 <_tx_byte_pool_search+0x8c>
 8010554:	f38c 8810 	msr	PRIMASK, ip
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010558:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 801055c:	b672      	cpsid	i

            /* Disable interrupts.  */
            TX_DISABLE

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 801055e:	6a04      	ldr	r4, [r0, #32]
 8010560:	42ac      	cmp	r4, r5
 8010562:	d003      	beq.n	801056c <_tx_byte_pool_search+0x80>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8010564:	6942      	ldr	r2, [r0, #20]
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8010566:	68c3      	ldr	r3, [r0, #12]
 8010568:	3301      	adds	r3, #1

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801056a:	6205      	str	r5, [r0, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 801056c:	b14b      	cbz	r3, 8010582 <_tx_byte_pool_search+0x96>
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 801056e:	4c18      	ldr	r4, [pc, #96]	@ (80105d0 <_tx_byte_pool_search+0xe4>)
 8010570:	6857      	ldr	r7, [r2, #4]
 8010572:	42a7      	cmp	r7, r4
 8010574:	d0d1      	beq.n	801051a <_tx_byte_pool_search+0x2e>
                current_ptr =  *this_block_link_ptr;
 8010576:	6812      	ldr	r2, [r2, #0]
            if (examine_blocks != ((UINT) 0))
 8010578:	2b00      	cmp	r3, #0
 801057a:	d0eb      	beq.n	8010554 <_tx_byte_pool_search+0x68>
                examine_blocks--;
 801057c:	3b01      	subs	r3, #1
 801057e:	e7e9      	b.n	8010554 <_tx_byte_pool_search+0x68>
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8010580:	4623      	mov	r3, r4

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8010582:	b1f3      	cbz	r3, 80105c2 <_tx_byte_pool_search+0xd6>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8010584:	1a5c      	subs	r4, r3, r1
 8010586:	2c13      	cmp	r4, #19
 8010588:	d90b      	bls.n	80105a2 <_tx_byte_pool_search+0xb6>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 801058a:	f101 0308 	add.w	r3, r1, #8
 801058e:	18d4      	adds	r4, r2, r3

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
                *next_block_link_ptr =  *this_block_link_ptr;
 8010590:	6815      	ldr	r5, [r2, #0]
 8010592:	50d5      	str	r5, [r2, r3]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8010594:	4b0e      	ldr	r3, [pc, #56]	@ (80105d0 <_tx_byte_pool_search+0xe4>)
 8010596:	6063      	str	r3, [r4, #4]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8010598:	68c3      	ldr	r3, [r0, #12]
 801059a:	3301      	adds	r3, #1
 801059c:	60c3      	str	r3, [r0, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 801059e:	6014      	str	r4, [r2, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 80105a0:	460b      	mov	r3, r1
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80105a2:	6050      	str	r0, [r2, #4]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80105a4:	6881      	ldr	r1, [r0, #8]
 80105a6:	1ac9      	subs	r1, r1, r3
 80105a8:	3908      	subs	r1, #8
 80105aa:	6081      	str	r1, [r0, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 80105ac:	6943      	ldr	r3, [r0, #20]
 80105ae:	4293      	cmp	r3, r2
 80105b0:	d004      	beq.n	80105bc <_tx_byte_pool_search+0xd0>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80105b2:	f38c 8810 	msr	PRIMASK, ip

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80105b6:	f102 0008 	add.w	r0, r2, #8
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
}
 80105ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 80105bc:	6813      	ldr	r3, [r2, #0]
 80105be:	6143      	str	r3, [r0, #20]
 80105c0:	e7f7      	b.n	80105b2 <_tx_byte_pool_search+0xc6>
 80105c2:	f38c 8810 	msr	PRIMASK, ip
            current_ptr =  TX_NULL;
 80105c6:	2000      	movs	r0, #0
    return(current_ptr);
 80105c8:	e7f7      	b.n	80105ba <_tx_byte_pool_search+0xce>
 80105ca:	bf00      	nop
 80105cc:	200109d8 	.word	0x200109d8
 80105d0:	ffffeeee 	.word	0xffffeeee

080105d4 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80105d4:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80105d6:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80105da:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 80105dc:	4a1c      	ldr	r2, [pc, #112]	@ (8010650 <_tx_event_flags_cleanup+0x7c>)
 80105de:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80105e0:	4294      	cmp	r4, r2
 80105e2:	d002      	beq.n	80105ea <_tx_event_flags_cleanup+0x16>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80105e4:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80105e8:	bd38      	pop	{r3, r4, r5, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80105ea:	f8d0 20ac 	ldr.w	r2, [r0, #172]	@ 0xac
 80105ee:	428a      	cmp	r2, r1
 80105f0:	d1f8      	bne.n	80105e4 <_tx_event_flags_cleanup+0x10>
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80105f2:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
            if (group_ptr != TX_NULL)
 80105f4:	2a00      	cmp	r2, #0
 80105f6:	d0f5      	beq.n	80105e4 <_tx_event_flags_cleanup+0x10>
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 80105f8:	4916      	ldr	r1, [pc, #88]	@ (8010654 <_tx_event_flags_cleanup+0x80>)
 80105fa:	6814      	ldr	r4, [r2, #0]
 80105fc:	428c      	cmp	r4, r1
 80105fe:	d1f1      	bne.n	80105e4 <_tx_event_flags_cleanup+0x10>
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8010600:	6951      	ldr	r1, [r2, #20]
 8010602:	2900      	cmp	r1, #0
 8010604:	d0ee      	beq.n	80105e4 <_tx_event_flags_cleanup+0x10>
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010606:	2100      	movs	r1, #0
 8010608:	6681      	str	r1, [r0, #104]	@ 0x68
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 801060a:	6951      	ldr	r1, [r2, #20]
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 801060c:	6914      	ldr	r4, [r2, #16]
                        if (suspension_head != TX_NULL)
 801060e:	b1e4      	cbz	r4, 801064a <_tx_event_flags_cleanup+0x76>
                            suspended_count--;
 8010610:	3901      	subs	r1, #1
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 8010612:	6151      	str	r1, [r2, #20]
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8010614:	b989      	cbnz	r1, 801063a <_tx_event_flags_cleanup+0x66>
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8010616:	6111      	str	r1, [r2, #16]
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8010618:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 801061a:	2a07      	cmp	r2, #7
 801061c:	d1e2      	bne.n	80105e4 <_tx_event_flags_cleanup+0x10>
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 801061e:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
                            _tx_thread_preempt_disable++;
 8010622:	490d      	ldr	r1, [pc, #52]	@ (8010658 <_tx_event_flags_cleanup+0x84>)
 8010624:	680a      	ldr	r2, [r1, #0]
 8010626:	3201      	adds	r2, #1
 8010628:	600a      	str	r2, [r1, #0]
 801062a:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 801062e:	f001 fa0b 	bl	8011a48 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010632:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010636:	b672      	cpsid	i
    return(int_posture);
 8010638:	e7d4      	b.n	80105e4 <_tx_event_flags_cleanup+0x10>
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 801063a:	6f01      	ldr	r1, [r0, #112]	@ 0x70
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801063c:	6f45      	ldr	r5, [r0, #116]	@ 0x74
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 801063e:	674d      	str	r5, [r1, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8010640:	6729      	str	r1, [r5, #112]	@ 0x70
                                if (suspension_head == thread_ptr)
 8010642:	42a0      	cmp	r0, r4
 8010644:	d1e8      	bne.n	8010618 <_tx_event_flags_cleanup+0x44>
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 8010646:	6111      	str	r1, [r2, #16]
 8010648:	e7e6      	b.n	8010618 <_tx_event_flags_cleanup+0x44>
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 801064a:	2101      	movs	r1, #1
 801064c:	60d1      	str	r1, [r2, #12]
 801064e:	e7e3      	b.n	8010618 <_tx_event_flags_cleanup+0x44>
 8010650:	080105d5 	.word	0x080105d5
 8010654:	4456444e 	.word	0x4456444e
 8010658:	20010940 	.word	0x20010940

0801065c <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 801065c:	b538      	push	{r3, r4, r5, lr}
 801065e:	4604      	mov	r4, r0
 8010660:	460d      	mov	r5, r1
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 8010662:	2224      	movs	r2, #36	@ 0x24
 8010664:	2100      	movs	r1, #0
 8010666:	f005 fa9f 	bl	8015ba8 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 801066a:	6065      	str	r5, [r4, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801066c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010670:	b672      	cpsid	i

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 8010672:	4b0c      	ldr	r3, [pc, #48]	@ (80106a4 <_tx_event_flags_create+0x48>)
 8010674:	6023      	str	r3, [r4, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8010676:	4b0c      	ldr	r3, [pc, #48]	@ (80106a8 <_tx_event_flags_create+0x4c>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	b953      	cbnz	r3, 8010692 <_tx_event_flags_create+0x36>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 801067c:	490b      	ldr	r1, [pc, #44]	@ (80106ac <_tx_event_flags_create+0x50>)
 801067e:	600c      	str	r4, [r1, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 8010680:	61a4      	str	r4, [r4, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 8010682:	61e4      	str	r4, [r4, #28]
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
        group_ptr -> tx_event_flags_group_created_next =      next_group;
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 8010684:	3301      	adds	r3, #1
 8010686:	4908      	ldr	r1, [pc, #32]	@ (80106a8 <_tx_event_flags_create+0x4c>)
 8010688:	600b      	str	r3, [r1, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801068a:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 801068e:	2000      	movs	r0, #0
 8010690:	bd38      	pop	{r3, r4, r5, pc}
        next_group =      _tx_event_flags_created_ptr;
 8010692:	4906      	ldr	r1, [pc, #24]	@ (80106ac <_tx_event_flags_create+0x50>)
 8010694:	6809      	ldr	r1, [r1, #0]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 8010696:	69c8      	ldr	r0, [r1, #28]
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 8010698:	61cc      	str	r4, [r1, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 801069a:	6184      	str	r4, [r0, #24]
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 801069c:	61e0      	str	r0, [r4, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 801069e:	61a1      	str	r1, [r4, #24]
 80106a0:	e7f0      	b.n	8010684 <_tx_event_flags_create+0x28>
 80106a2:	bf00      	nop
 80106a4:	4456444e 	.word	0x4456444e
 80106a8:	20010920 	.word	0x20010920
 80106ac:	20010924 	.word	0x20010924

080106b0 <_tx_event_flags_get>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 80106b0:	b570      	push	{r4, r5, r6, lr}
 80106b2:	4604      	mov	r4, r0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80106b4:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80106b8:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 80106ba:	6880      	ldr	r0, [r0, #8]

    /* Return the actual event flags and apply delayed clearing.  */
    *actual_flags_ptr =  current_flags & ~group_ptr -> tx_event_flags_group_delayed_clear;
 80106bc:	6a25      	ldr	r5, [r4, #32]
 80106be:	ea20 0505 	bic.w	r5, r0, r5
 80106c2:	601d      	str	r5, [r3, #0]

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 80106c4:	f002 0602 	and.w	r6, r2, #2
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 80106c8:	6a25      	ldr	r5, [r4, #32]

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 80106ca:	b10d      	cbz	r5, 80106d0 <_tx_event_flags_get+0x20>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 80106cc:	ea20 0005 	bic.w	r0, r0, r5
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 80106d0:	2e00      	cmp	r6, #0
 80106d2:	d039      	beq.n	8010748 <_tx_event_flags_get+0x98>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 80106d4:	ea00 0601 	and.w	r6, r0, r1

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 80106d8:	ea31 0000 	bics.w	r0, r1, r0
 80106dc:	d036      	beq.n	801074c <_tx_event_flags_get+0x9c>
#endif
    else
    {
        /* flags_satisfied is 0.  */
        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80106de:	9804      	ldr	r0, [sp, #16]
 80106e0:	2800      	cmp	r0, #0
 80106e2:	d04d      	beq.n	8010780 <_tx_event_flags_get+0xd0>
        {

            /* Determine if the preempt disable flag is non-zero OR the requested events is 0.  */
            if ((_tx_thread_preempt_disable != ((UINT) 0)) || (requested_flags == (UINT) 0))
 80106e4:	482a      	ldr	r0, [pc, #168]	@ (8010790 <_tx_event_flags_get+0xe0>)
 80106e6:	6800      	ldr	r0, [r0, #0]
 80106e8:	2800      	cmp	r0, #0
 80106ea:	d14d      	bne.n	8010788 <_tx_event_flags_get+0xd8>
 80106ec:	2900      	cmp	r1, #0
 80106ee:	d04d      	beq.n	801078c <_tx_event_flags_get+0xdc>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 80106f0:	4828      	ldr	r0, [pc, #160]	@ (8010794 <_tx_event_flags_get+0xe4>)
 80106f2:	6805      	ldr	r5, [r0, #0]

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 80106f4:	4828      	ldr	r0, [pc, #160]	@ (8010798 <_tx_event_flags_get+0xe8>)
 80106f6:	66a8      	str	r0, [r5, #104]	@ 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 80106f8:	67a9      	str	r1, [r5, #120]	@ 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 80106fa:	f8c5 2080 	str.w	r2, [r5, #128]	@ 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 80106fe:	67eb      	str	r3, [r5, #124]	@ 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 8010700:	66ec      	str	r4, [r5, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8010702:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8010706:	3301      	adds	r3, #1
 8010708:	f8c5 30ac 	str.w	r3, [r5, #172]	@ 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 801070c:	6963      	ldr	r3, [r4, #20]

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 801070e:	2b00      	cmp	r3, #0
 8010710:	d12f      	bne.n	8010772 <_tx_event_flags_get+0xc2>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 8010712:	6125      	str	r5, [r4, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 8010714:	672d      	str	r5, [r5, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 8010716:	676d      	str	r5, [r5, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 8010718:	6963      	ldr	r3, [r4, #20]
 801071a:	3301      	adds	r3, #1
 801071c:	6163      	str	r3, [r4, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 801071e:	2307      	movs	r3, #7
 8010720:	632b      	str	r3, [r5, #48]	@ 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010722:	2301      	movs	r3, #1
 8010724:	63ab      	str	r3, [r5, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010726:	9b04      	ldr	r3, [sp, #16]
 8010728:	64eb      	str	r3, [r5, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801072a:	4a19      	ldr	r2, [pc, #100]	@ (8010790 <_tx_event_flags_get+0xe0>)
 801072c:	6813      	ldr	r3, [r2, #0]
 801072e:	3301      	adds	r3, #1
 8010730:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010732:	f38c 8810 	msr	PRIMASK, ip

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8010736:	4628      	mov	r0, r5
 8010738:	f001 fa16 	bl	8011b68 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801073c:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010740:	b672      	cpsid	i

                /* Disable interrupts.  */
                TX_DISABLE

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8010742:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 8010746:	e01c      	b.n	8010782 <_tx_event_flags_get+0xd2>
        flags_satisfied =  (current_flags & requested_flags);
 8010748:	ea00 0601 	and.w	r6, r0, r1
    if (flags_satisfied != ((ULONG) 0))
 801074c:	2e00      	cmp	r6, #0
 801074e:	d0c6      	beq.n	80106de <_tx_event_flags_get+0x2e>
        if (clear_request == TX_TRUE)
 8010750:	f012 0001 	ands.w	r0, r2, #1
 8010754:	d015      	beq.n	8010782 <_tx_event_flags_get+0xd2>
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8010756:	6963      	ldr	r3, [r4, #20]
 8010758:	b10b      	cbz	r3, 801075e <_tx_event_flags_get+0xae>
                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 801075a:	6923      	ldr	r3, [r4, #16]
 801075c:	b12b      	cbz	r3, 801076a <_tx_event_flags_get+0xba>
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 801075e:	68a3      	ldr	r3, [r4, #8]
 8010760:	ea23 0301 	bic.w	r3, r3, r1
                group_ptr -> tx_event_flags_group_current =
 8010764:	60a3      	str	r3, [r4, #8]
        status =  TX_SUCCESS;
 8010766:	2000      	movs	r0, #0
 8010768:	e00b      	b.n	8010782 <_tx_event_flags_get+0xd2>
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 801076a:	430d      	orrs	r5, r1
                group_ptr -> tx_event_flags_group_delayed_clear =
 801076c:	6225      	str	r5, [r4, #32]
        status =  TX_SUCCESS;
 801076e:	2000      	movs	r0, #0
 8010770:	e007      	b.n	8010782 <_tx_event_flags_get+0xd2>
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 8010772:	6923      	ldr	r3, [r4, #16]
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8010774:	672b      	str	r3, [r5, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010776:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010778:	676a      	str	r2, [r5, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801077a:	6715      	str	r5, [r2, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801077c:	675d      	str	r5, [r3, #116]	@ 0x74
 801077e:	e7cb      	b.n	8010718 <_tx_event_flags_get+0x68>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 8010780:	2007      	movs	r0, #7
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010782:	f38c 8810 	msr	PRIMASK, ip
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
}
 8010786:	bd70      	pop	{r4, r5, r6, pc}
                status =  TX_NO_EVENTS;
 8010788:	2007      	movs	r0, #7
 801078a:	e7fa      	b.n	8010782 <_tx_event_flags_get+0xd2>
 801078c:	2007      	movs	r0, #7
 801078e:	e7f8      	b.n	8010782 <_tx_event_flags_get+0xd2>
 8010790:	20010940 	.word	0x20010940
 8010794:	200109d8 	.word	0x200109d8
 8010798:	080105d5 	.word	0x080105d5

0801079c <_tx_event_flags_set>:
/*                                            check logic, resulting in   */
/*                                            version 6.1.11              */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 801079c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a0:	4684      	mov	ip, r0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80107a2:	f3ef 8e10 	mrs	lr, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80107a6:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 80107a8:	f012 0502 	ands.w	r5, r2, #2
 80107ac:	d012      	beq.n	80107d4 <_tx_event_flags_set+0x38>
        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80107ae:	6943      	ldr	r3, [r0, #20]
 80107b0:	b10b      	cbz	r3, 80107b6 <_tx_event_flags_set+0x1a>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 80107b2:	6903      	ldr	r3, [r0, #16]
 80107b4:	b14b      	cbz	r3, 80107ca <_tx_event_flags_set+0x2e>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 80107b6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80107ba:	400b      	ands	r3, r1
            group_ptr -> tx_event_flags_group_current =
 80107bc:	f8cc 3008 	str.w	r3, [ip, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80107c0:	f38e 8810 	msr	PRIMASK, lr
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
}
 80107c4:	2000      	movs	r0, #0
 80107c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 80107ca:	6a03      	ldr	r3, [r0, #32]
 80107cc:	ea63 0301 	orn	r3, r3, r1
            group_ptr -> tx_event_flags_group_delayed_clear =
 80107d0:	6203      	str	r3, [r0, #32]
 80107d2:	e7f5      	b.n	80107c0 <_tx_event_flags_set+0x24>
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 80107d4:	6884      	ldr	r4, [r0, #8]
 80107d6:	430c      	orrs	r4, r1
        group_ptr -> tx_event_flags_group_current =
 80107d8:	6084      	str	r4, [r0, #8]
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 80107da:	6a03      	ldr	r3, [r0, #32]
 80107dc:	b113      	cbz	r3, 80107e4 <_tx_event_flags_set+0x48>
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 80107de:	ea23 0301 	bic.w	r3, r3, r1
            group_ptr -> tx_event_flags_group_delayed_clear =
 80107e2:	6203      	str	r3, [r0, #32]
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80107e4:	f8dc 1014 	ldr.w	r1, [ip, #20]
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 80107e8:	f8dc 8010 	ldr.w	r8, [ip, #16]
 80107ec:	f1b8 0f00 	cmp.w	r8, #0
 80107f0:	f000 80d1 	beq.w	8010996 <_tx_event_flags_set+0x1fa>
            if (suspended_count == ((UINT) 1))
 80107f4:	2901      	cmp	r1, #1
 80107f6:	d009      	beq.n	801080c <_tx_event_flags_set+0x70>
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 80107f8:	2000      	movs	r0, #0
 80107fa:	f8cc 0010 	str.w	r0, [ip, #16]
                _tx_thread_preempt_disable++;
 80107fe:	4a6a      	ldr	r2, [pc, #424]	@ (80109a8 <_tx_event_flags_set+0x20c>)
 8010800:	6813      	ldr	r3, [r2, #0]
 8010802:	3301      	adds	r3, #1
 8010804:	6013      	str	r3, [r2, #0]
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 8010806:	4646      	mov	r6, r8
                last_satisfied =  TX_NULL;
 8010808:	4607      	mov	r7, r0
 801080a:	e055      	b.n	80108b8 <_tx_event_flags_set+0x11c>
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 801080c:	f8d8 3078 	ldr.w	r3, [r8, #120]	@ 0x78
                get_option =  thread_ptr -> tx_thread_suspend_option;
 8010810:	f8d8 2080 	ldr.w	r2, [r8, #128]	@ 0x80
                if (and_request == TX_AND)
 8010814:	f012 0f02 	tst.w	r2, #2
 8010818:	d006      	beq.n	8010828 <_tx_event_flags_set+0x8c>
                    flags_satisfied =  (current_event_flags & requested_flags);
 801081a:	ea04 0103 	and.w	r1, r4, r3
                    if (flags_satisfied != requested_flags)
 801081e:	ea33 0004 	bics.w	r0, r3, r4
 8010822:	f040 80b0 	bne.w	8010986 <_tx_event_flags_set+0x1ea>
 8010826:	e001      	b.n	801082c <_tx_event_flags_set+0x90>
                    flags_satisfied =  (current_event_flags & requested_flags);
 8010828:	ea04 0103 	and.w	r1, r4, r3
                if (flags_satisfied != ((ULONG) 0))
 801082c:	2900      	cmp	r1, #0
 801082e:	f000 80b7 	beq.w	80109a0 <_tx_event_flags_set+0x204>
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8010832:	f8d8 107c 	ldr.w	r1, [r8, #124]	@ 0x7c
                    *suspend_info_ptr =  current_event_flags;
 8010836:	600c      	str	r4, [r1, #0]
                    if (clear_request == TX_TRUE)
 8010838:	f012 0f01 	tst.w	r2, #1
 801083c:	d005      	beq.n	801084a <_tx_event_flags_set+0xae>
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 801083e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8010842:	ea22 0203 	bic.w	r2, r2, r3
 8010846:	f8cc 2008 	str.w	r2, [ip, #8]
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 801084a:	2300      	movs	r3, #0
 801084c:	f8cc 3010 	str.w	r3, [ip, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 8010850:	f8cc 3014 	str.w	r3, [ip, #20]
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010854:	f8c8 3068 	str.w	r3, [r8, #104]	@ 0x68
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010858:	f8c8 3084 	str.w	r3, [r8, #132]	@ 0x84
                    _tx_thread_preempt_disable++;
 801085c:	4a52      	ldr	r2, [pc, #328]	@ (80109a8 <_tx_event_flags_set+0x20c>)
 801085e:	6813      	ldr	r3, [r2, #0]
 8010860:	3301      	adds	r3, #1
 8010862:	6013      	str	r3, [r2, #0]
 8010864:	f38e 8810 	msr	PRIMASK, lr
                    _tx_thread_system_resume(thread_ptr);
 8010868:	4640      	mov	r0, r8
 801086a:	f001 f8ed 	bl	8011a48 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801086e:	f3ef 8e10 	mrs	lr, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010872:	b672      	cpsid	i
    return(int_posture);
 8010874:	e087      	b.n	8010986 <_tx_event_flags_set+0x1ea>
 8010876:	4643      	mov	r3, r8
 8010878:	e030      	b.n	80108dc <_tx_event_flags_set+0x140>
                        flags_satisfied =  (current_event_flags & requested_flags);
 801087a:	ea04 0b09 	and.w	fp, r4, r9
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 801087e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010880:	2a07      	cmp	r2, #7
 8010882:	d03b      	beq.n	80108fc <_tx_event_flags_set+0x160>
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8010884:	2a07      	cmp	r2, #7
 8010886:	d03d      	beq.n	8010904 <_tx_event_flags_set+0x168>
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8010888:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801088a:	429a      	cmp	r2, r3
 801088c:	d04c      	beq.n	8010928 <_tx_event_flags_set+0x18c>
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801088e:	f8d3 9074 	ldr.w	r9, [r3, #116]	@ 0x74
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8010892:	f8c2 9074 	str.w	r9, [r2, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 8010896:	f8c9 2070 	str.w	r2, [r9, #112]	@ 0x70
                            if (suspended_list == thread_ptr)
 801089a:	42b3      	cmp	r3, r6
 801089c:	d042      	beq.n	8010924 <_tx_event_flags_set+0x188>
                        group_ptr -> tx_event_flags_group_suspended_count--;
 801089e:	f8dc 2014 	ldr.w	r2, [ip, #20]
 80108a2:	3a01      	subs	r2, #1
 80108a4:	f8cc 2014 	str.w	r2, [ip, #20]
                        if (satisfied_list == TX_NULL)
 80108a8:	2800      	cmp	r0, #0
 80108aa:	d03f      	beq.n	801092c <_tx_event_flags_set+0x190>
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 80108ac:	673b      	str	r3, [r7, #112]	@ 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 80108ae:	2200      	movs	r2, #0
 80108b0:	671a      	str	r2, [r3, #112]	@ 0x70
                            last_satisfied =                              thread_ptr;
 80108b2:	461f      	mov	r7, r3
                } while (suspended_count != TX_NO_SUSPENSIONS);
 80108b4:	3901      	subs	r1, #1
 80108b6:	d03e      	beq.n	8010936 <_tx_event_flags_set+0x19a>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108b8:	f38e 8810 	msr	PRIMASK, lr
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80108bc:	f3ef 8e10 	mrs	lr, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80108c0:	b672      	cpsid	i
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 80108c2:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d0d5      	beq.n	8010876 <_tx_event_flags_set+0xda>
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 80108ca:	2300      	movs	r3, #0
 80108cc:	f8cc 300c 	str.w	r3, [ip, #12]
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80108d0:	f8dc 1014 	ldr.w	r1, [ip, #20]
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 80108d4:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80108d8:	431c      	orrs	r4, r3
                        thread_ptr =  suspended_list;
 80108da:	4633      	mov	r3, r6
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80108dc:	f8d3 8070 	ldr.w	r8, [r3, #112]	@ 0x70
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 80108e0:	f8d3 9078 	ldr.w	r9, [r3, #120]	@ 0x78
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 80108e4:	f8d3 a080 	ldr.w	sl, [r3, #128]	@ 0x80
                    if (and_request == TX_AND)
 80108e8:	f01a 0f02 	tst.w	sl, #2
 80108ec:	d0c5      	beq.n	801087a <_tx_event_flags_set+0xde>
                        flags_satisfied =  (current_event_flags & requested_flags);
 80108ee:	ea04 0b09 	and.w	fp, r4, r9
                        if (flags_satisfied != requested_flags)
 80108f2:	ea39 0204 	bics.w	r2, r9, r4
 80108f6:	d0c2      	beq.n	801087e <_tx_event_flags_set+0xe2>
                            flags_satisfied =  ((ULONG) 0);
 80108f8:	46ab      	mov	fp, r5
 80108fa:	e7c0      	b.n	801087e <_tx_event_flags_set+0xe2>
                    if (flags_satisfied != ((ULONG) 0))
 80108fc:	f1bb 0f00 	cmp.w	fp, #0
 8010900:	d0d8      	beq.n	80108b4 <_tx_event_flags_set+0x118>
 8010902:	e7bf      	b.n	8010884 <_tx_event_flags_set+0xe8>
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8010904:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                            *suspend_info_ptr =  current_event_flags;
 8010906:	6014      	str	r4, [r2, #0]
                            if (clear_request == TX_TRUE)
 8010908:	f01a 0f01 	tst.w	sl, #1
 801090c:	d005      	beq.n	801091a <_tx_event_flags_set+0x17e>
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 801090e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8010912:	ea22 0209 	bic.w	r2, r2, r9
 8010916:	f8cc 2008 	str.w	r2, [ip, #8]
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801091a:	2200      	movs	r2, #0
 801091c:	669a      	str	r2, [r3, #104]	@ 0x68
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801091e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8010922:	e7b1      	b.n	8010888 <_tx_event_flags_set+0xec>
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 8010924:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 8010926:	e7ba      	b.n	801089e <_tx_event_flags_set+0x102>
                            suspended_list =  TX_NULL;
 8010928:	2600      	movs	r6, #0
 801092a:	e7b8      	b.n	801089e <_tx_event_flags_set+0x102>
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 801092c:	2200      	movs	r2, #0
 801092e:	671a      	str	r2, [r3, #112]	@ 0x70
                            last_satisfied =  thread_ptr;
 8010930:	461f      	mov	r7, r3
                            satisfied_list =  thread_ptr;
 8010932:	4618      	mov	r0, r3
 8010934:	e7be      	b.n	80108b4 <_tx_event_flags_set+0x118>
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 8010936:	f8cc 6010 	str.w	r6, [ip, #16]
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 801093a:	f8dc 3020 	ldr.w	r3, [ip, #32]
 801093e:	b143      	cbz	r3, 8010952 <_tx_event_flags_set+0x1b6>
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 8010940:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8010944:	ea22 0203 	bic.w	r2, r2, r3
                    group_ptr -> tx_event_flags_group_current =
 8010948:	f8cc 2008 	str.w	r2, [ip, #8]
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 801094c:	2300      	movs	r3, #0
 801094e:	f8cc 3020 	str.w	r3, [ip, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010952:	f38e 8810 	msr	PRIMASK, lr
                while(thread_ptr != TX_NULL)
 8010956:	e00c      	b.n	8010972 <_tx_event_flags_set+0x1d6>
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8010958:	6f04      	ldr	r4, [r0, #112]	@ 0x70
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801095a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 801095e:	b672      	cpsid	i
                    _tx_thread_preempt_disable++;
 8010960:	4a11      	ldr	r2, [pc, #68]	@ (80109a8 <_tx_event_flags_set+0x20c>)
 8010962:	6813      	ldr	r3, [r2, #0]
 8010964:	3301      	adds	r3, #1
 8010966:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010968:	f381 8810 	msr	PRIMASK, r1
                    _tx_thread_system_resume(thread_ptr);
 801096c:	f001 f86c 	bl	8011a48 <_tx_thread_system_resume>
                    thread_ptr =  next_thread_ptr;
 8010970:	4620      	mov	r0, r4
                while(thread_ptr != TX_NULL)
 8010972:	2800      	cmp	r0, #0
 8010974:	d1f0      	bne.n	8010958 <_tx_event_flags_set+0x1bc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010976:	f3ef 8e10 	mrs	lr, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 801097a:	b672      	cpsid	i
                _tx_thread_preempt_disable--;
 801097c:	4a0a      	ldr	r2, [pc, #40]	@ (80109a8 <_tx_event_flags_set+0x20c>)
 801097e:	6813      	ldr	r3, [r2, #0]
 8010980:	3b01      	subs	r3, #1
 8010982:	6013      	str	r3, [r2, #0]
                preempt_check =  TX_TRUE;
 8010984:	2501      	movs	r5, #1
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010986:	f38e 8810 	msr	PRIMASK, lr
        if (preempt_check == TX_TRUE)
 801098a:	2d01      	cmp	r5, #1
 801098c:	f47f af1a 	bne.w	80107c4 <_tx_event_flags_set+0x28>
            _tx_thread_system_preempt_check();
 8010990:	f001 f83c 	bl	8011a0c <_tx_thread_system_preempt_check>
 8010994:	e716      	b.n	80107c4 <_tx_event_flags_set+0x28>
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8010996:	b129      	cbz	r1, 80109a4 <_tx_event_flags_set+0x208>
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8010998:	2301      	movs	r3, #1
 801099a:	f8cc 300c 	str.w	r3, [ip, #12]
 801099e:	e7f2      	b.n	8010986 <_tx_event_flags_set+0x1ea>
        preempt_check =  TX_FALSE;
 80109a0:	460d      	mov	r5, r1
 80109a2:	e7f0      	b.n	8010986 <_tx_event_flags_set+0x1ea>
 80109a4:	460d      	mov	r5, r1
 80109a6:	e7ee      	b.n	8010986 <_tx_event_flags_set+0x1ea>
 80109a8:	20010940 	.word	0x20010940

080109ac <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80109ac:	b508      	push	{r3, lr}

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80109ae:	f000 ff8d 	bl	80118cc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80109b2:	f001 f9db 	bl	8011d6c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80109b6:	2300      	movs	r3, #0
 80109b8:	4a0c      	ldr	r2, [pc, #48]	@ (80109ec <_tx_initialize_high_level+0x40>)
 80109ba:	6013      	str	r3, [r2, #0]
 80109bc:	4a0c      	ldr	r2, [pc, #48]	@ (80109f0 <_tx_initialize_high_level+0x44>)
 80109be:	6013      	str	r3, [r2, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80109c0:	4a0c      	ldr	r2, [pc, #48]	@ (80109f4 <_tx_initialize_high_level+0x48>)
 80109c2:	6013      	str	r3, [r2, #0]
 80109c4:	4a0c      	ldr	r2, [pc, #48]	@ (80109f8 <_tx_initialize_high_level+0x4c>)
 80109c6:	6013      	str	r3, [r2, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80109c8:	4a0c      	ldr	r2, [pc, #48]	@ (80109fc <_tx_initialize_high_level+0x50>)
 80109ca:	6013      	str	r3, [r2, #0]
 80109cc:	4a0c      	ldr	r2, [pc, #48]	@ (8010a00 <_tx_initialize_high_level+0x54>)
 80109ce:	6013      	str	r3, [r2, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80109d0:	4a0c      	ldr	r2, [pc, #48]	@ (8010a04 <_tx_initialize_high_level+0x58>)
 80109d2:	6013      	str	r3, [r2, #0]
 80109d4:	4a0c      	ldr	r2, [pc, #48]	@ (8010a08 <_tx_initialize_high_level+0x5c>)
 80109d6:	6013      	str	r3, [r2, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80109d8:	4a0c      	ldr	r2, [pc, #48]	@ (8010a0c <_tx_initialize_high_level+0x60>)
 80109da:	6013      	str	r3, [r2, #0]
 80109dc:	4a0c      	ldr	r2, [pc, #48]	@ (8010a10 <_tx_initialize_high_level+0x64>)
 80109de:	6013      	str	r3, [r2, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80109e0:	4a0c      	ldr	r2, [pc, #48]	@ (8010a14 <_tx_initialize_high_level+0x68>)
 80109e2:	6013      	str	r3, [r2, #0]
 80109e4:	4a0c      	ldr	r2, [pc, #48]	@ (8010a18 <_tx_initialize_high_level+0x6c>)
 80109e6:	6013      	str	r3, [r2, #0]
#endif
}
 80109e8:	bd08      	pop	{r3, pc}
 80109ea:	bf00      	nop
 80109ec:	20010934 	.word	0x20010934
 80109f0:	20010930 	.word	0x20010930
 80109f4:	2001092c 	.word	0x2001092c
 80109f8:	20010928 	.word	0x20010928
 80109fc:	20010924 	.word	0x20010924
 8010a00:	20010920 	.word	0x20010920
 8010a04:	20010914 	.word	0x20010914
 8010a08:	20010910 	.word	0x20010910
 8010a0c:	2001090c 	.word	0x2001090c
 8010a10:	20010908 	.word	0x20010908
 8010a14:	2001091c 	.word	0x2001091c
 8010a18:	20010918 	.word	0x20010918

08010a1c <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8010a1c:	b510      	push	{r4, lr}

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8010a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8010a5c <_tx_initialize_kernel_enter+0x40>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 8010a26:	d10c      	bne.n	8010a42 <_tx_initialize_kernel_enter+0x26>
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8010a28:	4c0c      	ldr	r4, [pc, #48]	@ (8010a5c <_tx_initialize_kernel_enter+0x40>)
 8010a2a:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 8010a2e:	6023      	str	r3, [r4, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8010a30:	4b0b      	ldr	r3, [pc, #44]	@ (8010a60 <_tx_initialize_kernel_enter+0x44>)
 8010a32:	6818      	ldr	r0, [r3, #0]
 8010a34:	f7ef ffe8 	bl	8000a08 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	6023      	str	r3, [r4, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8010a3c:	f7ef fc64 	bl	8000308 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8010a40:	bd10      	pop	{r4, pc}
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8010a42:	4b06      	ldr	r3, [pc, #24]	@ (8010a5c <_tx_initialize_kernel_enter+0x40>)
 8010a44:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8010a48:	601a      	str	r2, [r3, #0]
        _tx_initialize_low_level();
 8010a4a:	f7ef fc21 	bl	8000290 <_tx_initialize_low_level>
        _tx_initialize_high_level();
 8010a4e:	f7ff ffad 	bl	80109ac <_tx_initialize_high_level>
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8010a52:	4a04      	ldr	r2, [pc, #16]	@ (8010a64 <_tx_initialize_kernel_enter+0x48>)
 8010a54:	6813      	ldr	r3, [r2, #0]
 8010a56:	3301      	adds	r3, #1
 8010a58:	6013      	str	r3, [r2, #0]
 8010a5a:	e7e5      	b.n	8010a28 <_tx_initialize_kernel_enter+0xc>
 8010a5c:	20000024 	.word	0x20000024
 8010a60:	20010904 	.word	0x20010904
 8010a64:	20010940 	.word	0x20010940

08010a68 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8010a68:	b510      	push	{r4, lr}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010a6a:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010a6e:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8010a70:	4a1b      	ldr	r2, [pc, #108]	@ (8010ae0 <_tx_mutex_cleanup+0x78>)
 8010a72:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8010a74:	4294      	cmp	r4, r2
 8010a76:	d002      	beq.n	8010a7e <_tx_mutex_cleanup+0x16>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a78:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8010a7c:	bd10      	pop	{r4, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8010a7e:	f8d0 20ac 	ldr.w	r2, [r0, #172]	@ 0xac
 8010a82:	428a      	cmp	r2, r1
 8010a84:	d1f8      	bne.n	8010a78 <_tx_mutex_cleanup+0x10>
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8010a86:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
            if (mutex_ptr != TX_NULL)
 8010a88:	2a00      	cmp	r2, #0
 8010a8a:	d0f5      	beq.n	8010a78 <_tx_mutex_cleanup+0x10>
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8010a8c:	4915      	ldr	r1, [pc, #84]	@ (8010ae4 <_tx_mutex_cleanup+0x7c>)
 8010a8e:	6814      	ldr	r4, [r2, #0]
 8010a90:	428c      	cmp	r4, r1
 8010a92:	d1f1      	bne.n	8010a78 <_tx_mutex_cleanup+0x10>
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8010a94:	69d1      	ldr	r1, [r2, #28]
 8010a96:	2900      	cmp	r1, #0
 8010a98:	d0ee      	beq.n	8010a78 <_tx_mutex_cleanup+0x10>
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010a9a:	2100      	movs	r1, #0
 8010a9c:	6681      	str	r1, [r0, #104]	@ 0x68
                        mutex_ptr -> tx_mutex_suspended_count--;
 8010a9e:	69d1      	ldr	r1, [r2, #28]
 8010aa0:	3901      	subs	r1, #1
 8010aa2:	61d1      	str	r1, [r2, #28]
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8010aa4:	b991      	cbnz	r1, 8010acc <_tx_mutex_cleanup+0x64>
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8010aa6:	6191      	str	r1, [r2, #24]
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8010aa8:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8010aaa:	2a0d      	cmp	r2, #13
 8010aac:	d1e4      	bne.n	8010a78 <_tx_mutex_cleanup+0x10>
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8010aae:	221d      	movs	r2, #29
 8010ab0:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
                            _tx_thread_preempt_disable++;
 8010ab4:	490c      	ldr	r1, [pc, #48]	@ (8010ae8 <_tx_mutex_cleanup+0x80>)
 8010ab6:	680a      	ldr	r2, [r1, #0]
 8010ab8:	3201      	adds	r2, #1
 8010aba:	600a      	str	r2, [r1, #0]
 8010abc:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 8010ac0:	f000 ffc2 	bl	8011a48 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010ac4:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010ac8:	b672      	cpsid	i
    return(int_posture);
 8010aca:	e7d5      	b.n	8010a78 <_tx_mutex_cleanup+0x10>
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8010acc:	6f01      	ldr	r1, [r0, #112]	@ 0x70
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010ace:	6f44      	ldr	r4, [r0, #116]	@ 0x74
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8010ad0:	674c      	str	r4, [r1, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8010ad2:	6721      	str	r1, [r4, #112]	@ 0x70
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8010ad4:	6994      	ldr	r4, [r2, #24]
 8010ad6:	4284      	cmp	r4, r0
 8010ad8:	d1e6      	bne.n	8010aa8 <_tx_mutex_cleanup+0x40>
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8010ada:	6191      	str	r1, [r2, #24]
 8010adc:	e7e4      	b.n	8010aa8 <_tx_mutex_cleanup+0x40>
 8010ade:	bf00      	nop
 8010ae0:	08010a69 	.word	0x08010a69
 8010ae4:	4d555445 	.word	0x4d555445
 8010ae8:	20010940 	.word	0x20010940

08010aec <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8010aec:	b510      	push	{r4, lr}
 8010aee:	4604      	mov	r4, r0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010af0:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010af4:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010af6:	490e      	ldr	r1, [pc, #56]	@ (8010b30 <_tx_mutex_thread_release+0x44>)
 8010af8:	680a      	ldr	r2, [r1, #0]
 8010afa:	3201      	adds	r2, #1
 8010afc:	600a      	str	r2, [r1, #0]
 8010afe:	e00b      	b.n	8010b18 <_tx_mutex_thread_release+0x2c>
        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8010b00:	2201      	movs	r2, #1
 8010b02:	6082      	str	r2, [r0, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b04:	f383 8810 	msr	PRIMASK, r3
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8010b08:	f000 f9d8 	bl	8010ebc <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b0c:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010b10:	b672      	cpsid	i

            /* Disable interrupts.  */
            TX_DISABLE

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8010b12:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
        }
    } while (mutex_ptr != TX_NULL);
 8010b16:	b120      	cbz	r0, 8010b22 <_tx_mutex_thread_release+0x36>
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8010b18:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
        if (mutex_ptr != TX_NULL)
 8010b1c:	2800      	cmp	r0, #0
 8010b1e:	d1ef      	bne.n	8010b00 <_tx_mutex_thread_release+0x14>
 8010b20:	e7f9      	b.n	8010b16 <_tx_mutex_thread_release+0x2a>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8010b22:	4903      	ldr	r1, [pc, #12]	@ (8010b30 <_tx_mutex_thread_release+0x44>)
 8010b24:	680a      	ldr	r2, [r1, #0]
 8010b26:	3a01      	subs	r2, #1
 8010b28:	600a      	str	r2, [r1, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b2a:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE
}
 8010b2e:	bd10      	pop	{r4, pc}
 8010b30:	20010940 	.word	0x20010940

08010b34 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8010b34:	b570      	push	{r4, r5, r6, lr}
 8010b36:	4604      	mov	r4, r0
 8010b38:	460e      	mov	r6, r1
 8010b3a:	4615      	mov	r5, r2
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8010b3c:	2234      	movs	r2, #52	@ 0x34
 8010b3e:	2100      	movs	r1, #0
 8010b40:	f005 f832 	bl	8015ba8 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8010b44:	6066      	str	r6, [r4, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8010b46:	6125      	str	r5, [r4, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b48:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010b4c:	b672      	cpsid	i

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8010b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8010b84 <_tx_mutex_create+0x50>)
 8010b50:	6023      	str	r3, [r4, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8010b52:	4b0d      	ldr	r3, [pc, #52]	@ (8010b88 <_tx_mutex_create+0x54>)
 8010b54:	490d      	ldr	r1, [pc, #52]	@ (8010b8c <_tx_mutex_create+0x58>)
 8010b56:	6019      	str	r1, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8010b58:	4b0d      	ldr	r3, [pc, #52]	@ (8010b90 <_tx_mutex_create+0x5c>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	b953      	cbnz	r3, 8010b74 <_tx_mutex_create+0x40>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8010b5e:	490d      	ldr	r1, [pc, #52]	@ (8010b94 <_tx_mutex_create+0x60>)
 8010b60:	600c      	str	r4, [r1, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8010b62:	6224      	str	r4, [r4, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8010b64:	6264      	str	r4, [r4, #36]	@ 0x24
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8010b66:	3301      	adds	r3, #1
 8010b68:	4909      	ldr	r1, [pc, #36]	@ (8010b90 <_tx_mutex_create+0x5c>)
 8010b6a:	600b      	str	r3, [r1, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b6c:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8010b70:	2000      	movs	r0, #0
 8010b72:	bd70      	pop	{r4, r5, r6, pc}
        next_mutex =      _tx_mutex_created_ptr;
 8010b74:	4907      	ldr	r1, [pc, #28]	@ (8010b94 <_tx_mutex_create+0x60>)
 8010b76:	6809      	ldr	r1, [r1, #0]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8010b78:	6a48      	ldr	r0, [r1, #36]	@ 0x24
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8010b7a:	624c      	str	r4, [r1, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8010b7c:	6204      	str	r4, [r0, #32]
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8010b7e:	6260      	str	r0, [r4, #36]	@ 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8010b80:	6221      	str	r1, [r4, #32]
 8010b82:	e7f0      	b.n	8010b66 <_tx_mutex_create+0x32>
 8010b84:	4d555445 	.word	0x4d555445
 8010b88:	2001093c 	.word	0x2001093c
 8010b8c:	08010aed 	.word	0x08010aed
 8010b90:	20010918 	.word	0x20010918
 8010b94:	2001091c 	.word	0x2001091c

08010b98 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8010b98:	b570      	push	{r4, r5, r6, lr}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b9a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010b9e:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	6003      	str	r3, [r0, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 8010ba4:	4926      	ldr	r1, [pc, #152]	@ (8010c40 <_tx_mutex_delete+0xa8>)
 8010ba6:	680b      	ldr	r3, [r1, #0]
 8010ba8:	3b01      	subs	r3, #1
 8010baa:	600b      	str	r3, [r1, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8010bac:	b9cb      	cbnz	r3, 8010be2 <_tx_mutex_delete+0x4a>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8010bae:	4b25      	ldr	r3, [pc, #148]	@ (8010c44 <_tx_mutex_delete+0xac>)
 8010bb0:	2100      	movs	r1, #0
 8010bb2:	6019      	str	r1, [r3, #0]
            _tx_mutex_created_ptr =  next_mutex;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010bb4:	4924      	ldr	r1, [pc, #144]	@ (8010c48 <_tx_mutex_delete+0xb0>)
 8010bb6:	680b      	ldr	r3, [r1, #0]
 8010bb8:	3301      	adds	r3, #1
 8010bba:	600b      	str	r3, [r1, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 8010bbc:	6984      	ldr	r4, [r0, #24]
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	6183      	str	r3, [r0, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 8010bc2:	69c5      	ldr	r5, [r0, #28]
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8010bc4:	61c3      	str	r3, [r0, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 8010bc6:	68c3      	ldr	r3, [r0, #12]

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8010bc8:	b143      	cbz	r3, 8010bdc <_tx_mutex_delete+0x44>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8010bca:	2301      	movs	r3, #1
 8010bcc:	6083      	str	r3, [r0, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010bce:	f382 8810 	msr	PRIMASK, r2
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8010bd2:	f000 f973 	bl	8010ebc <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010bd6:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010bda:	b672      	cpsid	i
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010bdc:	f382 8810 	msr	PRIMASK, r2
}
 8010be0:	e01e      	b.n	8010c20 <_tx_mutex_delete+0x88>
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 8010be2:	6a03      	ldr	r3, [r0, #32]
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8010be4:	6a41      	ldr	r1, [r0, #36]	@ 0x24
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8010be6:	6259      	str	r1, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 8010be8:	620b      	str	r3, [r1, #32]
        if (_tx_mutex_created_ptr == mutex_ptr)
 8010bea:	4916      	ldr	r1, [pc, #88]	@ (8010c44 <_tx_mutex_delete+0xac>)
 8010bec:	6809      	ldr	r1, [r1, #0]
 8010bee:	4281      	cmp	r1, r0
 8010bf0:	d1e0      	bne.n	8010bb4 <_tx_mutex_delete+0x1c>
            _tx_mutex_created_ptr =  next_mutex;
 8010bf2:	4914      	ldr	r1, [pc, #80]	@ (8010c44 <_tx_mutex_delete+0xac>)
 8010bf4:	600b      	str	r3, [r1, #0]
 8010bf6:	e7dd      	b.n	8010bb4 <_tx_mutex_delete+0x1c>
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8010bf8:	3d01      	subs	r5, #1
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010bfa:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010bfe:	b672      	cpsid	i
        /* Lockout interrupts.  */
        TX_DISABLE

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010c00:	2300      	movs	r3, #0
 8010c02:	66a3      	str	r3, [r4, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8010c04:	2301      	movs	r3, #1
 8010c06:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8010c0a:	6f26      	ldr	r6, [r4, #112]	@ 0x70
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8010c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8010c48 <_tx_mutex_delete+0xb0>)
 8010c0e:	6813      	ldr	r3, [r2, #0]
 8010c10:	3301      	adds	r3, #1
 8010c12:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c14:	f381 8810 	msr	PRIMASK, r1

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8010c18:	4620      	mov	r0, r4
 8010c1a:	f000 ff15 	bl	8011a48 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8010c1e:	4634      	mov	r4, r6
    while (suspended_count != ((ULONG) 0))
 8010c20:	2d00      	cmp	r5, #0
 8010c22:	d1e9      	bne.n	8010bf8 <_tx_mutex_delete+0x60>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010c24:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010c28:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8010c2a:	4a07      	ldr	r2, [pc, #28]	@ (8010c48 <_tx_mutex_delete+0xb0>)
 8010c2c:	6813      	ldr	r3, [r2, #0]
 8010c2e:	3b01      	subs	r3, #1
 8010c30:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c32:	f381 8810 	msr	PRIMASK, r1

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8010c36:	f000 fee9 	bl	8011a0c <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8010c3a:	2000      	movs	r0, #0
 8010c3c:	bd70      	pop	{r4, r5, r6, pc}
 8010c3e:	bf00      	nop
 8010c40:	20010918 	.word	0x20010918
 8010c44:	2001091c 	.word	0x2001091c
 8010c48:	20010940 	.word	0x20010940

08010c4c <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8010c4c:	b538      	push	{r3, r4, r5, lr}
 8010c4e:	4603      	mov	r3, r0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010c50:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010c54:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010c56:	4a3d      	ldr	r2, [pc, #244]	@ (8010d4c <_tx_mutex_get+0x100>)
 8010c58:	6814      	ldr	r4, [r2, #0]

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8010c5a:	6880      	ldr	r0, [r0, #8]
 8010c5c:	bb00      	cbnz	r0, 8010ca0 <_tx_mutex_get+0x54>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8010c5e:	2201      	movs	r2, #1
 8010c60:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8010c62:	60dc      	str	r4, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8010c64:	b17c      	cbz	r4, 8010c86 <_tx_mutex_get+0x3a>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010c66:	691a      	ldr	r2, [r3, #16]
 8010c68:	2a01      	cmp	r2, #1
 8010c6a:	d00f      	beq.n	8010c8c <_tx_mutex_get+0x40>
                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8010c6c:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8010c70:	b18a      	cbz	r2, 8010c96 <_tx_mutex_get+0x4a>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8010c72:	6b11      	ldr	r1, [r2, #48]	@ 0x30

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8010c74:	6313      	str	r3, [r2, #48]	@ 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8010c76:	62cb      	str	r3, [r1, #44]	@ 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8010c78:	6319      	str	r1, [r3, #48]	@ 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8010c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8010c7c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8010c80:	3301      	adds	r3, #1
 8010c82:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c86:	f38c 8810 	msr	PRIMASK, ip
        }
    }

    /* Return completion status.  */
    return(status);
}
 8010c8a:	bd38      	pop	{r3, r4, r5, pc}
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8010c8c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010c8e:	615a      	str	r2, [r3, #20]
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8010c90:	2220      	movs	r2, #32
 8010c92:	629a      	str	r2, [r3, #40]	@ 0x28
 8010c94:	e7ea      	b.n	8010c6c <_tx_mutex_get+0x20>
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8010c96:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8010c9a:	62db      	str	r3, [r3, #44]	@ 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8010c9c:	631b      	str	r3, [r3, #48]	@ 0x30
 8010c9e:	e7ed      	b.n	8010c7c <_tx_mutex_get+0x30>
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8010ca0:	68da      	ldr	r2, [r3, #12]
 8010ca2:	42a2      	cmp	r2, r4
 8010ca4:	d028      	beq.n	8010cf8 <_tx_mutex_get+0xac>
        if (wait_option != TX_NO_WAIT)
 8010ca6:	2900      	cmp	r1, #0
 8010ca8:	d04b      	beq.n	8010d42 <_tx_mutex_get+0xf6>
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8010caa:	4829      	ldr	r0, [pc, #164]	@ (8010d50 <_tx_mutex_get+0x104>)
 8010cac:	6800      	ldr	r0, [r0, #0]
 8010cae:	bb48      	cbnz	r0, 8010d04 <_tx_mutex_get+0xb8>
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8010cb0:	4828      	ldr	r0, [pc, #160]	@ (8010d54 <_tx_mutex_get+0x108>)
 8010cb2:	66a0      	str	r0, [r4, #104]	@ 0x68
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8010cb4:	66e3      	str	r3, [r4, #108]	@ 0x6c
                thread_ptr -> tx_thread_suspension_sequence++;
 8010cb6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8010cba:	3001      	adds	r0, #1
 8010cbc:	f8c4 00ac 	str.w	r0, [r4, #172]	@ 0xac
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8010cc0:	69d8      	ldr	r0, [r3, #28]
 8010cc2:	bb18      	cbnz	r0, 8010d0c <_tx_mutex_get+0xc0>
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8010cc4:	619c      	str	r4, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8010cc6:	6724      	str	r4, [r4, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8010cc8:	6764      	str	r4, [r4, #116]	@ 0x74
                mutex_ptr -> tx_mutex_suspended_count++;
 8010cca:	69d8      	ldr	r0, [r3, #28]
 8010ccc:	3001      	adds	r0, #1
 8010cce:	61d8      	str	r0, [r3, #28]
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8010cd0:	200d      	movs	r0, #13
 8010cd2:	6320      	str	r0, [r4, #48]	@ 0x30
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010cd4:	2001      	movs	r0, #1
 8010cd6:	63a0      	str	r0, [r4, #56]	@ 0x38
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010cd8:	64e1      	str	r1, [r4, #76]	@ 0x4c
                _tx_thread_preempt_disable++;
 8010cda:	481d      	ldr	r0, [pc, #116]	@ (8010d50 <_tx_mutex_get+0x104>)
 8010cdc:	6801      	ldr	r1, [r0, #0]
 8010cde:	3101      	adds	r1, #1
 8010ce0:	6001      	str	r1, [r0, #0]
 8010ce2:	f38c 8810 	msr	PRIMASK, ip
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010ce6:	6919      	ldr	r1, [r3, #16]
 8010ce8:	2901      	cmp	r1, #1
 8010cea:	d016      	beq.n	8010d1a <_tx_mutex_get+0xce>
                _tx_thread_system_suspend(thread_ptr);
 8010cec:	4620      	mov	r0, r4
 8010cee:	f000 ff3b 	bl	8011b68 <_tx_thread_system_suspend>
                status =  thread_ptr -> tx_thread_suspend_status;
 8010cf2:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8010cf6:	e7c8      	b.n	8010c8a <_tx_mutex_get+0x3e>
        mutex_ptr -> tx_mutex_ownership_count++;
 8010cf8:	3001      	adds	r0, #1
 8010cfa:	6098      	str	r0, [r3, #8]
 8010cfc:	f38c 8810 	msr	PRIMASK, ip
        status =  TX_SUCCESS;
 8010d00:	2000      	movs	r0, #0
 8010d02:	e7c2      	b.n	8010c8a <_tx_mutex_get+0x3e>
 8010d04:	f38c 8810 	msr	PRIMASK, ip
                status =  TX_NOT_AVAILABLE;
 8010d08:	201d      	movs	r0, #29
 8010d0a:	e7be      	b.n	8010c8a <_tx_mutex_get+0x3e>
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8010d0c:	6998      	ldr	r0, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8010d0e:	6720      	str	r0, [r4, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010d10:	6f45      	ldr	r5, [r0, #116]	@ 0x74
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010d12:	6765      	str	r5, [r4, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010d14:	672c      	str	r4, [r5, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8010d16:	6744      	str	r4, [r0, #116]	@ 0x74
 8010d18:	e7d7      	b.n	8010cca <_tx_mutex_get+0x7e>
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8010d1a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8010d1c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010d1e:	4288      	cmp	r0, r1
 8010d20:	d900      	bls.n	8010d24 <_tx_mutex_get+0xd8>
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8010d22:	6299      	str	r1, [r3, #40]	@ 0x28
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8010d24:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010d26:	f8d2 109c 	ldr.w	r1, [r2, #156]	@ 0x9c
 8010d2a:	428b      	cmp	r3, r1
 8010d2c:	d201      	bcs.n	8010d32 <_tx_mutex_get+0xe6>
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8010d2e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8010d32:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8010d34:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010d36:	428b      	cmp	r3, r1
 8010d38:	d9d8      	bls.n	8010cec <_tx_mutex_get+0xa0>
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8010d3a:	4610      	mov	r0, r2
 8010d3c:	f000 f85c 	bl	8010df8 <_tx_mutex_priority_change>
 8010d40:	e7d4      	b.n	8010cec <_tx_mutex_get+0xa0>
 8010d42:	f38c 8810 	msr	PRIMASK, ip
            status =  TX_NOT_AVAILABLE;
 8010d46:	201d      	movs	r0, #29
    return(status);
 8010d48:	e79f      	b.n	8010c8a <_tx_mutex_get+0x3e>
 8010d4a:	bf00      	nop
 8010d4c:	200109d8 	.word	0x200109d8
 8010d50:	20010940 	.word	0x20010940
 8010d54:	08010a69 	.word	0x08010a69

08010d58 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8010d58:	b570      	push	{r4, r5, r6, lr}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010d5a:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010d5e:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8010d60:	69c4      	ldr	r4, [r0, #28]

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8010d62:	2c01      	cmp	r4, #1
 8010d64:	d909      	bls.n	8010d7a <_tx_mutex_prioritize+0x22>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8010d66:	2c02      	cmp	r4, #2
 8010d68:	d00b      	beq.n	8010d82 <_tx_mutex_prioritize+0x2a>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8010d6a:	6983      	ldr	r3, [r0, #24]

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8010d6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8010d6e:	4d21      	ldr	r5, [pc, #132]	@ (8010df4 <_tx_mutex_prioritize+0x9c>)
 8010d70:	6829      	ldr	r1, [r5, #0]
 8010d72:	3101      	adds	r1, #1
 8010d74:	6029      	str	r1, [r5, #0]
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8010d76:	4619      	mov	r1, r3
 8010d78:	e01b      	b.n	8010db2 <_tx_mutex_prioritize+0x5a>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d7a:	f38c 8810 	msr	PRIMASK, ip
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
#endif
}
 8010d7e:	2000      	movs	r0, #0
 8010d80:	bd70      	pop	{r4, r5, r6, pc}
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8010d82:	6983      	ldr	r3, [r0, #24]
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8010d84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8010d86:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8010d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d8a:	4299      	cmp	r1, r3
 8010d8c:	d200      	bcs.n	8010d90 <_tx_mutex_prioritize+0x38>
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8010d8e:	6182      	str	r2, [r0, #24]
 8010d90:	f38c 8810 	msr	PRIMASK, ip
}
 8010d94:	e7f3      	b.n	8010d7e <_tx_mutex_prioritize+0x26>
                priority_thread_ptr =  thread_ptr;
 8010d96:	4696      	mov	lr, r2
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d98:	f38c 8810 	msr	PRIMASK, ip
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010d9c:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010da0:	b672      	cpsid	i
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8010da2:	6983      	ldr	r3, [r0, #24]
 8010da4:	428b      	cmp	r3, r1
 8010da6:	d00a      	beq.n	8010dbe <_tx_mutex_prioritize+0x66>
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8010da8:	69c4      	ldr	r4, [r0, #28]
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8010daa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8010dac:	4619      	mov	r1, r3
        } while (thread_ptr != head_ptr);
 8010dae:	428a      	cmp	r2, r1
 8010db0:	d00b      	beq.n	8010dca <_tx_mutex_prioritize+0x72>
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8010db2:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8010db4:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8010db6:	42b5      	cmp	r5, r6
 8010db8:	d3ed      	bcc.n	8010d96 <_tx_mutex_prioritize+0x3e>
 8010dba:	469e      	mov	lr, r3
 8010dbc:	e7ec      	b.n	8010d98 <_tx_mutex_prioritize+0x40>
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8010dbe:	69c5      	ldr	r5, [r0, #28]
 8010dc0:	42a5      	cmp	r5, r4
 8010dc2:	d1f1      	bne.n	8010da8 <_tx_mutex_prioritize+0x50>
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8010dc4:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8010dc6:	4673      	mov	r3, lr
 8010dc8:	e7f1      	b.n	8010dae <_tx_mutex_prioritize+0x56>
        _tx_thread_preempt_disable--;
 8010dca:	4c0a      	ldr	r4, [pc, #40]	@ (8010df4 <_tx_mutex_prioritize+0x9c>)
 8010dcc:	6822      	ldr	r2, [r4, #0]
 8010dce:	3a01      	subs	r2, #1
 8010dd0:	6022      	str	r2, [r4, #0]
        if (priority_thread_ptr != head_ptr)
 8010dd2:	428b      	cmp	r3, r1
 8010dd4:	d009      	beq.n	8010dea <_tx_mutex_prioritize+0x92>
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8010dd6:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8010dd8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8010dda:	6762      	str	r2, [r4, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8010ddc:	6714      	str	r4, [r2, #112]	@ 0x70
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8010dde:	6f4a      	ldr	r2, [r1, #116]	@ 0x74
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8010de0:	6719      	str	r1, [r3, #112]	@ 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8010de2:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8010de4:	6713      	str	r3, [r2, #112]	@ 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8010de6:	674b      	str	r3, [r1, #116]	@ 0x74
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8010de8:	6183      	str	r3, [r0, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010dea:	f38c 8810 	msr	PRIMASK, ip
        _tx_thread_system_preempt_check();
 8010dee:	f000 fe0d 	bl	8011a0c <_tx_thread_system_preempt_check>
 8010df2:	e7c4      	b.n	8010d7e <_tx_mutex_prioritize+0x26>
 8010df4:	20010940 	.word	0x20010940

08010df8 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8010df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dfa:	4604      	mov	r4, r0
 8010dfc:	460d      	mov	r5, r1
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010dfe:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010e02:	b672      	cpsid	i
    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8010e04:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8010e06:	b152      	cbz	r2, 8010e1e <_tx_mutex_priority_change+0x26>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8010e08:	62e1      	str	r1, [r4, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8010e0a:	f8d0 2098 	ldr.w	r2, [r0, #152]	@ 0x98
 8010e0e:	428a      	cmp	r2, r1
 8010e10:	d203      	bcs.n	8010e1a <_tx_mutex_priority_change+0x22>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8010e12:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e14:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8010e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8010e1a:	63e1      	str	r1, [r4, #60]	@ 0x3c
 8010e1c:	e7fa      	b.n	8010e14 <_tx_mutex_priority_change+0x1c>
        execute_ptr =  _tx_thread_execute_ptr;
 8010e1e:	4a24      	ldr	r2, [pc, #144]	@ (8010eb0 <_tx_mutex_priority_change+0xb8>)
 8010e20:	6816      	ldr	r6, [r2, #0]
        original_priority =  thread_ptr -> tx_thread_priority;
 8010e22:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8010e24:	4923      	ldr	r1, [pc, #140]	@ (8010eb4 <_tx_mutex_priority_change+0xbc>)
 8010e26:	680a      	ldr	r2, [r1, #0]
 8010e28:	3202      	adds	r2, #2
 8010e2a:	600a      	str	r2, [r1, #0]
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8010e2c:	220e      	movs	r2, #14
 8010e2e:	6302      	str	r2, [r0, #48]	@ 0x30
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010e30:	2201      	movs	r2, #1
 8010e32:	6382      	str	r2, [r0, #56]	@ 0x38
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010e34:	2200      	movs	r2, #0
 8010e36:	64c2      	str	r2, [r0, #76]	@ 0x4c
 8010e38:	f383 8810 	msr	PRIMASK, r3
        _tx_thread_system_suspend(thread_ptr);
 8010e3c:	f000 fe94 	bl	8011b68 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010e40:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010e44:	b672      	cpsid	i
        thread_ptr -> tx_thread_priority =  new_priority;
 8010e46:	62e5      	str	r5, [r4, #44]	@ 0x2c
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8010e48:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8010e4c:	42ab      	cmp	r3, r5
 8010e4e:	d217      	bcs.n	8010e80 <_tx_mutex_priority_change+0x88>
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8010e50:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e52:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 8010e56:	4620      	mov	r0, r4
 8010e58:	f000 fdf6 	bl	8011a48 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010e5c:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010e60:	b672      	cpsid	i
        next_execute_ptr =  _tx_thread_execute_ptr;
 8010e62:	4b13      	ldr	r3, [pc, #76]	@ (8010eb0 <_tx_mutex_priority_change+0xb8>)
 8010e64:	681b      	ldr	r3, [r3, #0]
        if (thread_ptr != next_execute_ptr)
 8010e66:	429c      	cmp	r4, r3
 8010e68:	d007      	beq.n	8010e7a <_tx_mutex_priority_change+0x82>
            if (thread_ptr -> tx_thread_state == TX_READY)
 8010e6a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010e6c:	b929      	cbnz	r1, 8010e7a <_tx_mutex_priority_change+0x82>
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8010e6e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e72:	4299      	cmp	r1, r3
 8010e74:	d80e      	bhi.n	8010e94 <_tx_mutex_priority_change+0x9c>
                    if (thread_ptr == execute_ptr)
 8010e76:	42b4      	cmp	r4, r6
 8010e78:	d004      	beq.n	8010e84 <_tx_mutex_priority_change+0x8c>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e7a:	f382 8810 	msr	PRIMASK, r2
}
 8010e7e:	e7cb      	b.n	8010e18 <_tx_mutex_priority_change+0x20>
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8010e80:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8010e82:	e7e6      	b.n	8010e52 <_tx_mutex_priority_change+0x5a>
                        _tx_thread_execute_ptr =  thread_ptr;
 8010e84:	4b0a      	ldr	r3, [pc, #40]	@ (8010eb0 <_tx_mutex_priority_change+0xb8>)
 8010e86:	601c      	str	r4, [r3, #0]
                        if (original_priority < new_priority)
 8010e88:	42af      	cmp	r7, r5
 8010e8a:	d2f6      	bcs.n	8010e7a <_tx_mutex_priority_change+0x82>
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8010e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8010eb8 <_tx_mutex_priority_change+0xc0>)
 8010e8e:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
 8010e92:	e7f2      	b.n	8010e7a <_tx_mutex_priority_change+0x82>
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8010e94:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8010e96:	4281      	cmp	r1, r0
 8010e98:	d9ef      	bls.n	8010e7a <_tx_mutex_priority_change+0x82>
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8010e9a:	4283      	cmp	r3, r0
 8010e9c:	d3ed      	bcc.n	8010e7a <_tx_mutex_priority_change+0x82>
                            _tx_thread_execute_ptr =  thread_ptr;
 8010e9e:	4b04      	ldr	r3, [pc, #16]	@ (8010eb0 <_tx_mutex_priority_change+0xb8>)
 8010ea0:	601c      	str	r4, [r3, #0]
                            if (original_priority < new_priority)
 8010ea2:	42af      	cmp	r7, r5
 8010ea4:	d2e9      	bcs.n	8010e7a <_tx_mutex_priority_change+0x82>
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8010ea6:	4b04      	ldr	r3, [pc, #16]	@ (8010eb8 <_tx_mutex_priority_change+0xc0>)
 8010ea8:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
 8010eac:	e7e5      	b.n	8010e7a <_tx_mutex_priority_change+0x82>
 8010eae:	bf00      	nop
 8010eb0:	200109d4 	.word	0x200109d4
 8010eb4:	20010940 	.word	0x20010940
 8010eb8:	20010944 	.word	0x20010944

08010ebc <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8010ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010ec0:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010ec4:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8010ec6:	6885      	ldr	r5, [r0, #8]
 8010ec8:	2d00      	cmp	r5, #0
 8010eca:	f000 80f5 	beq.w	80110b8 <_tx_mutex_put+0x1fc>
 8010ece:	4604      	mov	r4, r0
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8010ed0:	68c2      	ldr	r2, [r0, #12]

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8010ed2:	497c      	ldr	r1, [pc, #496]	@ (80110c4 <_tx_mutex_put+0x208>)
 8010ed4:	6809      	ldr	r1, [r1, #0]

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8010ed6:	428a      	cmp	r2, r1
 8010ed8:	d002      	beq.n	8010ee0 <_tx_mutex_put+0x24>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8010eda:	497b      	ldr	r1, [pc, #492]	@ (80110c8 <_tx_mutex_put+0x20c>)
 8010edc:	6809      	ldr	r1, [r1, #0]
 8010ede:	b131      	cbz	r1, 8010eee <_tx_mutex_put+0x32>
        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8010ee0:	3d01      	subs	r5, #1
 8010ee2:	60a5      	str	r5, [r4, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8010ee4:	b13d      	cbz	r5, 8010ef6 <_tx_mutex_put+0x3a>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ee6:	f383 8810 	msr	PRIMASK, r3

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8010eea:	2500      	movs	r5, #0
 8010eec:	e0e7      	b.n	80110be <_tx_mutex_put+0x202>
 8010eee:	f383 8810 	msr	PRIMASK, r3
                status =  TX_NOT_OWNED;
 8010ef2:	251e      	movs	r5, #30
 8010ef4:	e0e3      	b.n	80110be <_tx_mutex_put+0x202>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8010ef6:	2a00      	cmp	r2, #0
 8010ef8:	d047      	beq.n	8010f8a <_tx_mutex_put+0xce>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8010efa:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8010efe:	3901      	subs	r1, #1
 8010f00:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8010f04:	2900      	cmp	r1, #0
 8010f06:	d143      	bne.n	8010f90 <_tx_mutex_put+0xd4>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8010f08:	f8c2 10a4 	str.w	r1, [r2, #164]	@ 0xa4
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8010f0c:	69a1      	ldr	r1, [r4, #24]
 8010f0e:	2900      	cmp	r1, #0
 8010f10:	d049      	beq.n	8010fa6 <_tx_mutex_put+0xea>
                    if (status == TX_NOT_DONE)
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8010f12:	f8d2 7094 	ldr.w	r7, [r2, #148]	@ 0x94

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010f16:	6921      	ldr	r1, [r4, #16]
 8010f18:	2901      	cmp	r1, #1
 8010f1a:	d04d      	beq.n	8010fb8 <_tx_mutex_put+0xfc>
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8010f1c:	69e2      	ldr	r2, [r4, #28]
 8010f1e:	2a01      	cmp	r2, #1
 8010f20:	d902      	bls.n	8010f28 <_tx_mutex_put+0x6c>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010f22:	6922      	ldr	r2, [r4, #16]
 8010f24:	2a01      	cmp	r2, #1
 8010f26:	d06b      	beq.n	8011000 <_tx_mutex_put+0x144>
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8010f28:	69a6      	ldr	r6, [r4, #24]
 8010f2a:	2e00      	cmp	r6, #0
 8010f2c:	d078      	beq.n	8011020 <_tx_mutex_put+0x164>
                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010f2e:	6922      	ldr	r2, [r4, #16]
 8010f30:	2a01      	cmp	r2, #1
 8010f32:	f000 8093 	beq.w	801105c <_tx_mutex_put+0x1a0>
                        old_owner =      TX_NULL;
 8010f36:	f04f 0800 	mov.w	r8, #0
                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8010f3a:	f8d6 20a0 	ldr.w	r2, [r6, #160]	@ 0xa0

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8010f3e:	2a00      	cmp	r2, #0
 8010f40:	f040 8093 	bne.w	801106a <_tx_mutex_put+0x1ae>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8010f44:	f8c6 40a4 	str.w	r4, [r6, #164]	@ 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8010f48:	62e4      	str	r4, [r4, #44]	@ 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8010f4a:	6324      	str	r4, [r4, #48]	@ 0x30
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8010f4c:	3201      	adds	r2, #1
 8010f4e:	f8c6 20a0 	str.w	r2, [r6, #160]	@ 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8010f52:	2201      	movs	r2, #1
 8010f54:	60a2      	str	r2, [r4, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8010f56:	60e6      	str	r6, [r4, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8010f58:	69e2      	ldr	r2, [r4, #28]
 8010f5a:	3a01      	subs	r2, #1
 8010f5c:	61e2      	str	r2, [r4, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8010f5e:	2a00      	cmp	r2, #0
 8010f60:	f040 808b 	bne.w	801107a <_tx_mutex_put+0x1be>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8010f64:	61a2      	str	r2, [r4, #24]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010f66:	2200      	movs	r2, #0
 8010f68:	66b2      	str	r2, [r6, #104]	@ 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010f6a:	f8c6 2084 	str.w	r2, [r6, #132]	@ 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010f6e:	4956      	ldr	r1, [pc, #344]	@ (80110c8 <_tx_mutex_put+0x20c>)
 8010f70:	680a      	ldr	r2, [r1, #0]
 8010f72:	3201      	adds	r2, #1
 8010f74:	600a      	str	r2, [r1, #0]
 8010f76:	f383 8810 	msr	PRIMASK, r3

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010f7a:	6923      	ldr	r3, [r4, #16]
 8010f7c:	2b01      	cmp	r3, #1
 8010f7e:	f000 8082 	beq.w	8011086 <_tx_mutex_put+0x1ca>
                                    _tx_mutex_priority_change(old_owner, old_priority);
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8010f82:	4630      	mov	r0, r6
 8010f84:	f000 fd60 	bl	8011a48 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8010f88:	e099      	b.n	80110be <_tx_mutex_put+0x202>
 8010f8a:	f383 8810 	msr	PRIMASK, r3
                    status =  TX_SUCCESS;
 8010f8e:	e096      	b.n	80110be <_tx_mutex_put+0x202>
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8010f90:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8010f92:	6b20      	ldr	r0, [r4, #48]	@ 0x30
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8010f94:	6308      	str	r0, [r1, #48]	@ 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8010f96:	62c1      	str	r1, [r0, #44]	@ 0x2c
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8010f98:	f8d2 00a4 	ldr.w	r0, [r2, #164]	@ 0xa4
 8010f9c:	42a0      	cmp	r0, r4
 8010f9e:	d1b5      	bne.n	8010f0c <_tx_mutex_put+0x50>
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8010fa0:	f8c2 10a4 	str.w	r1, [r2, #164]	@ 0xa4
 8010fa4:	e7b2      	b.n	8010f0c <_tx_mutex_put+0x50>
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8010fa6:	6921      	ldr	r1, [r4, #16]
 8010fa8:	2900      	cmp	r1, #0
 8010faa:	d1b2      	bne.n	8010f12 <_tx_mutex_put+0x56>
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8010fac:	2200      	movs	r2, #0
 8010fae:	60e2      	str	r2, [r4, #12]
 8010fb0:	f383 8810 	msr	PRIMASK, r3
                            status =  TX_SUCCESS;
 8010fb4:	460d      	mov	r5, r1
 8010fb6:	e082      	b.n	80110be <_tx_mutex_put+0x202>
                            _tx_thread_preempt_disable++;
 8010fb8:	4843      	ldr	r0, [pc, #268]	@ (80110c8 <_tx_mutex_put+0x20c>)
 8010fba:	6801      	ldr	r1, [r0, #0]
 8010fbc:	3101      	adds	r1, #1
 8010fbe:	6001      	str	r1, [r0, #0]
 8010fc0:	f383 8810 	msr	PRIMASK, r3
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8010fc4:	f8d2 00a4 	ldr.w	r0, [r2, #164]	@ 0xa4
 8010fc8:	4603      	mov	r3, r0
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8010fca:	2620      	movs	r6, #32
                            while (next_mutex != TX_NULL)
 8010fcc:	e002      	b.n	8010fd4 <_tx_mutex_put+0x118>
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8010fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8010fd0:	4298      	cmp	r0, r3
 8010fd2:	d008      	beq.n	8010fe6 <_tx_mutex_put+0x12a>
                            while (next_mutex != TX_NULL)
 8010fd4:	b13b      	cbz	r3, 8010fe6 <_tx_mutex_put+0x12a>
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8010fd6:	6919      	ldr	r1, [r3, #16]
 8010fd8:	2901      	cmp	r1, #1
 8010fda:	d1f8      	bne.n	8010fce <_tx_mutex_put+0x112>
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8010fdc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8010fde:	42b1      	cmp	r1, r6
 8010fe0:	d2f5      	bcs.n	8010fce <_tx_mutex_put+0x112>
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8010fe2:	460e      	mov	r6, r1
 8010fe4:	e7f3      	b.n	8010fce <_tx_mutex_put+0x112>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010fe6:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8010fea:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 8010fec:	4836      	ldr	r0, [pc, #216]	@ (80110c8 <_tx_mutex_put+0x20c>)
 8010fee:	6801      	ldr	r1, [r0, #0]
 8010ff0:	3901      	subs	r1, #1
 8010ff2:	6001      	str	r1, [r0, #0]
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8010ff4:	f8c2 609c 	str.w	r6, [r2, #156]	@ 0x9c
                            if (inheritance_priority < old_priority)
 8010ff8:	42be      	cmp	r6, r7
 8010ffa:	d28f      	bcs.n	8010f1c <_tx_mutex_put+0x60>
 8010ffc:	4637      	mov	r7, r6
 8010ffe:	e78d      	b.n	8010f1c <_tx_mutex_put+0x60>
                                _tx_thread_preempt_disable++;
 8011000:	4e31      	ldr	r6, [pc, #196]	@ (80110c8 <_tx_mutex_put+0x20c>)
 8011002:	6832      	ldr	r2, [r6, #0]
 8011004:	3201      	adds	r2, #1
 8011006:	6032      	str	r2, [r6, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011008:	f383 8810 	msr	PRIMASK, r3
                                _tx_mutex_prioritize(mutex_ptr);
 801100c:	4620      	mov	r0, r4
 801100e:	f7ff fea3 	bl	8010d58 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011012:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8011016:	b672      	cpsid	i
                                _tx_thread_preempt_disable--;
 8011018:	6832      	ldr	r2, [r6, #0]
 801101a:	3a01      	subs	r2, #1
 801101c:	6032      	str	r2, [r6, #0]
 801101e:	e783      	b.n	8010f28 <_tx_mutex_put+0x6c>
                            _tx_thread_preempt_disable++;
 8011020:	4929      	ldr	r1, [pc, #164]	@ (80110c8 <_tx_mutex_put+0x20c>)
 8011022:	680a      	ldr	r2, [r1, #0]
 8011024:	3201      	adds	r2, #1
 8011026:	600a      	str	r2, [r1, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011028:	f383 8810 	msr	PRIMASK, r3
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 801102c:	2320      	movs	r3, #32
 801102e:	62a3      	str	r3, [r4, #40]	@ 0x28
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8011030:	68e0      	ldr	r0, [r4, #12]
 8011032:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011034:	42bb      	cmp	r3, r7
 8011036:	d10d      	bne.n	8011054 <_tx_mutex_put+0x198>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011038:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 801103c:	b672      	cpsid	i
                            _tx_thread_preempt_disable--;
 801103e:	4a22      	ldr	r2, [pc, #136]	@ (80110c8 <_tx_mutex_put+0x20c>)
 8011040:	6813      	ldr	r3, [r2, #0]
 8011042:	3b01      	subs	r3, #1
 8011044:	6013      	str	r3, [r2, #0]
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8011046:	2300      	movs	r3, #0
 8011048:	60e3      	str	r3, [r4, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801104a:	f381 8810 	msr	PRIMASK, r1
                            _tx_thread_system_preempt_check();
 801104e:	f000 fcdd 	bl	8011a0c <_tx_thread_system_preempt_check>
                            status =  TX_SUCCESS;
 8011052:	e034      	b.n	80110be <_tx_mutex_put+0x202>
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8011054:	4639      	mov	r1, r7
 8011056:	f7ff fecf 	bl	8010df8 <_tx_mutex_priority_change>
 801105a:	e7ed      	b.n	8011038 <_tx_mutex_put+0x17c>
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 801105c:	f8d4 800c 	ldr.w	r8, [r4, #12]
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8011060:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
 8011062:	6162      	str	r2, [r4, #20]
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8011064:	2220      	movs	r2, #32
 8011066:	62a2      	str	r2, [r4, #40]	@ 0x28
 8011068:	e767      	b.n	8010f3a <_tx_mutex_put+0x7e>
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 801106a:	f8d6 10a4 	ldr.w	r1, [r6, #164]	@ 0xa4
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 801106e:	6b08      	ldr	r0, [r1, #48]	@ 0x30
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8011070:	630c      	str	r4, [r1, #48]	@ 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8011072:	62c4      	str	r4, [r0, #44]	@ 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8011074:	6320      	str	r0, [r4, #48]	@ 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8011076:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8011078:	e768      	b.n	8010f4c <_tx_mutex_put+0x90>
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 801107a:	6f32      	ldr	r2, [r6, #112]	@ 0x70
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 801107c:	61a2      	str	r2, [r4, #24]
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801107e:	6f71      	ldr	r1, [r6, #116]	@ 0x74
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8011080:	6751      	str	r1, [r2, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8011082:	670a      	str	r2, [r1, #112]	@ 0x70
 8011084:	e76f      	b.n	8010f66 <_tx_mutex_put+0xaa>
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8011086:	69e3      	ldr	r3, [r4, #28]
 8011088:	b94b      	cbnz	r3, 801109e <_tx_mutex_put+0x1e2>
                                if (old_owner -> tx_thread_priority != old_priority)
 801108a:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 801108e:	42bb      	cmp	r3, r7
 8011090:	f43f af77 	beq.w	8010f82 <_tx_mutex_put+0xc6>
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8011094:	4639      	mov	r1, r7
 8011096:	4640      	mov	r0, r8
 8011098:	f7ff feae 	bl	8010df8 <_tx_mutex_priority_change>
 801109c:	e771      	b.n	8010f82 <_tx_mutex_put+0xc6>
                                    _tx_mutex_prioritize(mutex_ptr);
 801109e:	4620      	mov	r0, r4
 80110a0:	f7ff fe5a 	bl	8010d58 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80110a4:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80110a8:	b672      	cpsid	i
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 80110aa:	69a3      	ldr	r3, [r4, #24]
                                    if (suspended_thread != TX_NULL)
 80110ac:	b10b      	cbz	r3, 80110b2 <_tx_mutex_put+0x1f6>
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 80110ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110b0:	62a3      	str	r3, [r4, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80110b2:	f382 8810 	msr	PRIMASK, r2
}
 80110b6:	e7e8      	b.n	801108a <_tx_mutex_put+0x1ce>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80110b8:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 80110bc:	251e      	movs	r5, #30
    }

    /* Return the completion status.  */
    return(status);
}
 80110be:	4628      	mov	r0, r5
 80110c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110c4:	200109d8 	.word	0x200109d8
 80110c8:	20010940 	.word	0x20010940

080110cc <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80110cc:	b510      	push	{r4, lr}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80110ce:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80110d2:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 80110d4:	4a1e      	ldr	r2, [pc, #120]	@ (8011150 <_tx_queue_cleanup+0x84>)
 80110d6:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80110d8:	4294      	cmp	r4, r2
 80110da:	d002      	beq.n	80110e2 <_tx_queue_cleanup+0x16>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80110dc:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80110e0:	bd10      	pop	{r4, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80110e2:	f8d0 20ac 	ldr.w	r2, [r0, #172]	@ 0xac
 80110e6:	428a      	cmp	r2, r1
 80110e8:	d1f8      	bne.n	80110dc <_tx_queue_cleanup+0x10>
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80110ea:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
            if (queue_ptr != TX_NULL)
 80110ec:	2a00      	cmp	r2, #0
 80110ee:	d0f5      	beq.n	80110dc <_tx_queue_cleanup+0x10>
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 80110f0:	4918      	ldr	r1, [pc, #96]	@ (8011154 <_tx_queue_cleanup+0x88>)
 80110f2:	6814      	ldr	r4, [r2, #0]
 80110f4:	428c      	cmp	r4, r1
 80110f6:	d1f1      	bne.n	80110dc <_tx_queue_cleanup+0x10>
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 80110f8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80110fa:	2900      	cmp	r1, #0
 80110fc:	d0ee      	beq.n	80110dc <_tx_queue_cleanup+0x10>
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80110fe:	2100      	movs	r1, #0
 8011100:	6681      	str	r1, [r0, #104]	@ 0x68
                        queue_ptr -> tx_queue_suspended_count--;
 8011102:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8011104:	3901      	subs	r1, #1
 8011106:	62d1      	str	r1, [r2, #44]	@ 0x2c
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8011108:	b9a1      	cbnz	r1, 8011134 <_tx_queue_cleanup+0x68>
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 801110a:	6291      	str	r1, [r2, #40]	@ 0x28
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 801110c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801110e:	2905      	cmp	r1, #5
 8011110:	d1e4      	bne.n	80110dc <_tx_queue_cleanup+0x10>
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8011112:	6912      	ldr	r2, [r2, #16]
 8011114:	b1ba      	cbz	r2, 8011146 <_tx_queue_cleanup+0x7a>
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 8011116:	220b      	movs	r2, #11
 8011118:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
                            _tx_thread_preempt_disable++;
 801111c:	490e      	ldr	r1, [pc, #56]	@ (8011158 <_tx_queue_cleanup+0x8c>)
 801111e:	680a      	ldr	r2, [r1, #0]
 8011120:	3201      	adds	r2, #1
 8011122:	600a      	str	r2, [r1, #0]
 8011124:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 8011128:	f000 fc8e 	bl	8011a48 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801112c:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8011130:	b672      	cpsid	i
    return(int_posture);
 8011132:	e7d3      	b.n	80110dc <_tx_queue_cleanup+0x10>
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8011134:	6f01      	ldr	r1, [r0, #112]	@ 0x70
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011136:	6f44      	ldr	r4, [r0, #116]	@ 0x74
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011138:	674c      	str	r4, [r1, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801113a:	6721      	str	r1, [r4, #112]	@ 0x70
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 801113c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 801113e:	4284      	cmp	r4, r0
 8011140:	d1e4      	bne.n	801110c <_tx_queue_cleanup+0x40>
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8011142:	6291      	str	r1, [r2, #40]	@ 0x28
 8011144:	e7e2      	b.n	801110c <_tx_queue_cleanup+0x40>
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8011146:	220a      	movs	r2, #10
 8011148:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
 801114c:	e7e6      	b.n	801111c <_tx_queue_cleanup+0x50>
 801114e:	bf00      	nop
 8011150:	080110cd 	.word	0x080110cd
 8011154:	51554555 	.word	0x51554555
 8011158:	20010940 	.word	0x20010940

0801115c <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 801115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801115e:	4604      	mov	r4, r0
 8011160:	460f      	mov	r7, r1
 8011162:	4615      	mov	r5, r2
 8011164:	461e      	mov	r6, r3
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8011166:	2238      	movs	r2, #56	@ 0x38
 8011168:	2100      	movs	r1, #0
 801116a:	f004 fd1d 	bl	8015ba8 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 801116e:	6067      	str	r7, [r4, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8011170:	60a5      	str	r5, [r4, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 8011172:	00aa      	lsls	r2, r5, #2
 8011174:	9b06      	ldr	r3, [sp, #24]
 8011176:	fbb3 f3f2 	udiv	r3, r3, r2
    used_words =  capacity * message_size;
 801117a:	fb03 f505 	mul.w	r5, r3, r5

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 801117e:	61a6      	str	r6, [r4, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8011180:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8011184:	61e5      	str	r5, [r4, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8011186:	6226      	str	r6, [r4, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8011188:	6266      	str	r6, [r4, #36]	@ 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 801118a:	6163      	str	r3, [r4, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 801118c:	60e3      	str	r3, [r4, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801118e:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8011192:	b672      	cpsid	i

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8011194:	4b0b      	ldr	r3, [pc, #44]	@ (80111c4 <_tx_queue_create+0x68>)
 8011196:	6023      	str	r3, [r4, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8011198:	4b0b      	ldr	r3, [pc, #44]	@ (80111c8 <_tx_queue_create+0x6c>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	b953      	cbnz	r3, 80111b4 <_tx_queue_create+0x58>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 801119e:	490b      	ldr	r1, [pc, #44]	@ (80111cc <_tx_queue_create+0x70>)
 80111a0:	600c      	str	r4, [r1, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 80111a2:	6324      	str	r4, [r4, #48]	@ 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 80111a4:	6364      	str	r4, [r4, #52]	@ 0x34
        queue_ptr -> tx_queue_created_previous =  previous_queue;
        queue_ptr -> tx_queue_created_next =      next_queue;
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 80111a6:	3301      	adds	r3, #1
 80111a8:	4907      	ldr	r1, [pc, #28]	@ (80111c8 <_tx_queue_create+0x6c>)
 80111aa:	600b      	str	r3, [r1, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80111ac:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 80111b0:	2000      	movs	r0, #0
 80111b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        next_queue =      _tx_queue_created_ptr;
 80111b4:	4905      	ldr	r1, [pc, #20]	@ (80111cc <_tx_queue_create+0x70>)
 80111b6:	6809      	ldr	r1, [r1, #0]
        previous_queue =  next_queue -> tx_queue_created_previous;
 80111b8:	6b48      	ldr	r0, [r1, #52]	@ 0x34
        next_queue -> tx_queue_created_previous =  queue_ptr;
 80111ba:	634c      	str	r4, [r1, #52]	@ 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 80111bc:	6304      	str	r4, [r0, #48]	@ 0x30
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 80111be:	6360      	str	r0, [r4, #52]	@ 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 80111c0:	6321      	str	r1, [r4, #48]	@ 0x30
 80111c2:	e7f0      	b.n	80111a6 <_tx_queue_create+0x4a>
 80111c4:	51554555 	.word	0x51554555
 80111c8:	20010928 	.word	0x20010928
 80111cc:	2001092c 	.word	0x2001092c

080111d0 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 80111d0:	b570      	push	{r4, r5, r6, lr}
 80111d2:	4604      	mov	r4, r0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80111d4:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80111d8:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80111da:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80111dc:	6923      	ldr	r3, [r4, #16]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	f000 809a 	beq.w	8011318 <_tx_queue_receive+0x148>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80111e4:	b9e8      	cbnz	r0, 8011222 <_tx_queue_receive+0x52>
            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
            size =         queue_ptr -> tx_queue_message_size;
 80111e6:	68a2      	ldr	r2, [r4, #8]

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80111e8:	6a23      	ldr	r3, [r4, #32]
 80111ea:	f853 5b04 	ldr.w	r5, [r3], #4
 80111ee:	f841 5b04 	str.w	r5, [r1], #4
 80111f2:	2a01      	cmp	r2, #1
 80111f4:	d804      	bhi.n	8011200 <_tx_queue_receive+0x30>
 80111f6:	e005      	b.n	8011204 <_tx_queue_receive+0x34>
 80111f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80111fc:	f841 5b04 	str.w	r5, [r1], #4
 8011200:	3a01      	subs	r2, #1
 8011202:	d1f9      	bne.n	80111f8 <_tx_queue_receive+0x28>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8011204:	69e2      	ldr	r2, [r4, #28]
 8011206:	429a      	cmp	r2, r3
 8011208:	d009      	beq.n	801121e <_tx_queue_receive+0x4e>
                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 801120a:	6223      	str	r3, [r4, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 801120c:	6963      	ldr	r3, [r4, #20]
 801120e:	3301      	adds	r3, #1
 8011210:	6163      	str	r3, [r4, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8011212:	6923      	ldr	r3, [r4, #16]
 8011214:	3b01      	subs	r3, #1
 8011216:	6123      	str	r3, [r4, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011218:	f38c 8810 	msr	PRIMASK, ip
        status =  TX_QUEUE_EMPTY;
    }

    /* Return completion status.  */
    return(status);
}
 801121c:	bd70      	pop	{r4, r5, r6, pc}
                source =  queue_ptr -> tx_queue_start;
 801121e:	69a3      	ldr	r3, [r4, #24]
 8011220:	e7f3      	b.n	801120a <_tx_queue_receive+0x3a>
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8011222:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8011224:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8011228:	2b01      	cmp	r3, #1
 801122a:	d008      	beq.n	801123e <_tx_queue_receive+0x6e>
                size =         queue_ptr -> tx_queue_message_size;
 801122c:	68a2      	ldr	r2, [r4, #8]
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 801122e:	6a23      	ldr	r3, [r4, #32]
 8011230:	f853 6b04 	ldr.w	r6, [r3], #4
 8011234:	f841 6b04 	str.w	r6, [r1], #4
 8011238:	2a01      	cmp	r2, #1
 801123a:	d82d      	bhi.n	8011298 <_tx_queue_receive+0xc8>
 801123c:	e02e      	b.n	801129c <_tx_queue_receive+0xcc>
                size =         queue_ptr -> tx_queue_message_size;
 801123e:	68a2      	ldr	r2, [r4, #8]
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8011240:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8011242:	f853 6b04 	ldr.w	r6, [r3], #4
 8011246:	f841 6b04 	str.w	r6, [r1], #4
 801124a:	2a01      	cmp	r2, #1
 801124c:	d804      	bhi.n	8011258 <_tx_queue_receive+0x88>
 801124e:	e005      	b.n	801125c <_tx_queue_receive+0x8c>
 8011250:	f853 6b04 	ldr.w	r6, [r3], #4
 8011254:	f841 6b04 	str.w	r6, [r1], #4
 8011258:	3a01      	subs	r2, #1
 801125a:	d1f9      	bne.n	8011250 <_tx_queue_receive+0x80>
                if (suspended_count == TX_NO_SUSPENSIONS)
 801125c:	3801      	subs	r0, #1
 801125e:	d111      	bne.n	8011284 <_tx_queue_receive+0xb4>
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8011260:	2300      	movs	r3, #0
 8011262:	62a3      	str	r3, [r4, #40]	@ 0x28
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8011264:	62e0      	str	r0, [r4, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011266:	2400      	movs	r4, #0
 8011268:	66ac      	str	r4, [r5, #104]	@ 0x68
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801126a:	f8c5 4084 	str.w	r4, [r5, #132]	@ 0x84
                _tx_thread_preempt_disable++;
 801126e:	4a47      	ldr	r2, [pc, #284]	@ (801138c <_tx_queue_receive+0x1bc>)
 8011270:	6813      	ldr	r3, [r2, #0]
 8011272:	3301      	adds	r3, #1
 8011274:	6013      	str	r3, [r2, #0]
 8011276:	f38c 8810 	msr	PRIMASK, ip
                _tx_thread_system_resume(thread_ptr);
 801127a:	4628      	mov	r0, r5
 801127c:	f000 fbe4 	bl	8011a48 <_tx_thread_system_resume>
    status =  TX_SUCCESS;
 8011280:	4620      	mov	r0, r4
 8011282:	e7cb      	b.n	801121c <_tx_queue_receive+0x4c>
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8011284:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8011286:	62a3      	str	r3, [r4, #40]	@ 0x28
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8011288:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 801128a:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 801128c:	6713      	str	r3, [r2, #112]	@ 0x70
 801128e:	e7e9      	b.n	8011264 <_tx_queue_receive+0x94>
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8011290:	f853 6b04 	ldr.w	r6, [r3], #4
 8011294:	f841 6b04 	str.w	r6, [r1], #4
 8011298:	3a01      	subs	r2, #1
 801129a:	d1f9      	bne.n	8011290 <_tx_queue_receive+0xc0>
                if (source == queue_ptr -> tx_queue_end)
 801129c:	69e2      	ldr	r2, [r4, #28]
 801129e:	429a      	cmp	r2, r3
 80112a0:	d011      	beq.n	80112c6 <_tx_queue_receive+0xf6>
                queue_ptr -> tx_queue_read =  source;
 80112a2:	6223      	str	r3, [r4, #32]
                _tx_thread_preempt_disable++;
 80112a4:	4b39      	ldr	r3, [pc, #228]	@ (801138c <_tx_queue_receive+0x1bc>)
 80112a6:	681a      	ldr	r2, [r3, #0]
 80112a8:	3201      	adds	r2, #1
 80112aa:	601a      	str	r2, [r3, #0]
                _tx_thread_preempt_disable--;
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	3a01      	subs	r2, #1
 80112b0:	601a      	str	r2, [r3, #0]
                size =         queue_ptr -> tx_queue_message_size;
 80112b2:	68a1      	ldr	r1, [r4, #8]
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80112b4:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 80112b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80112b8:	f852 5b04 	ldr.w	r5, [r2], #4
 80112bc:	f843 5b04 	str.w	r5, [r3], #4
 80112c0:	2901      	cmp	r1, #1
 80112c2:	d806      	bhi.n	80112d2 <_tx_queue_receive+0x102>
 80112c4:	e007      	b.n	80112d6 <_tx_queue_receive+0x106>
                    source =  queue_ptr -> tx_queue_start;
 80112c6:	69a3      	ldr	r3, [r4, #24]
 80112c8:	e7eb      	b.n	80112a2 <_tx_queue_receive+0xd2>
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80112ca:	f852 5b04 	ldr.w	r5, [r2], #4
 80112ce:	f843 5b04 	str.w	r5, [r3], #4
 80112d2:	3901      	subs	r1, #1
 80112d4:	d1f9      	bne.n	80112ca <_tx_queue_receive+0xfa>
                if (destination == queue_ptr -> tx_queue_end)
 80112d6:	69e2      	ldr	r2, [r4, #28]
 80112d8:	429a      	cmp	r2, r3
 80112da:	d015      	beq.n	8011308 <_tx_queue_receive+0x138>
                queue_ptr -> tx_queue_write =  destination;
 80112dc:	6263      	str	r3, [r4, #36]	@ 0x24
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80112de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
                if (suspended_count == TX_NO_SUSPENSIONS)
 80112e0:	3801      	subs	r0, #1
 80112e2:	d113      	bne.n	801130c <_tx_queue_receive+0x13c>
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80112e4:	2200      	movs	r2, #0
 80112e6:	62a2      	str	r2, [r4, #40]	@ 0x28
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80112e8:	62e0      	str	r0, [r4, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80112ea:	2400      	movs	r4, #0
 80112ec:	669c      	str	r4, [r3, #104]	@ 0x68
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80112ee:	f8c3 4084 	str.w	r4, [r3, #132]	@ 0x84
                _tx_thread_preempt_disable++;
 80112f2:	4926      	ldr	r1, [pc, #152]	@ (801138c <_tx_queue_receive+0x1bc>)
 80112f4:	680a      	ldr	r2, [r1, #0]
 80112f6:	3201      	adds	r2, #1
 80112f8:	600a      	str	r2, [r1, #0]
 80112fa:	f38c 8810 	msr	PRIMASK, ip
                _tx_thread_system_resume(thread_ptr);
 80112fe:	4618      	mov	r0, r3
 8011300:	f000 fba2 	bl	8011a48 <_tx_thread_system_resume>
    status =  TX_SUCCESS;
 8011304:	4620      	mov	r0, r4
 8011306:	e789      	b.n	801121c <_tx_queue_receive+0x4c>
                    destination =  queue_ptr -> tx_queue_start;
 8011308:	69a3      	ldr	r3, [r4, #24]
 801130a:	e7e7      	b.n	80112dc <_tx_queue_receive+0x10c>
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 801130c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 801130e:	62a2      	str	r2, [r4, #40]	@ 0x28
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011310:	6f59      	ldr	r1, [r3, #116]	@ 0x74
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011312:	6751      	str	r1, [r2, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8011314:	670a      	str	r2, [r1, #112]	@ 0x70
 8011316:	e7e7      	b.n	80112e8 <_tx_queue_receive+0x118>
    else if (wait_option != TX_NO_WAIT)
 8011318:	2a00      	cmp	r2, #0
 801131a:	d032      	beq.n	8011382 <_tx_queue_receive+0x1b2>
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801131c:	4b1b      	ldr	r3, [pc, #108]	@ (801138c <_tx_queue_receive+0x1bc>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	bb23      	cbnz	r3, 801136c <_tx_queue_receive+0x19c>
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011322:	4b1b      	ldr	r3, [pc, #108]	@ (8011390 <_tx_queue_receive+0x1c0>)
 8011324:	681d      	ldr	r5, [r3, #0]
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8011326:	4b1b      	ldr	r3, [pc, #108]	@ (8011394 <_tx_queue_receive+0x1c4>)
 8011328:	66ab      	str	r3, [r5, #104]	@ 0x68
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 801132a:	66ec      	str	r4, [r5, #108]	@ 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 801132c:	67e9      	str	r1, [r5, #124]	@ 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 801132e:	2300      	movs	r3, #0
 8011330:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
            thread_ptr -> tx_thread_suspension_sequence++;
 8011334:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011338:	3301      	adds	r3, #1
 801133a:	f8c5 30ac 	str.w	r3, [r5, #172]	@ 0xac
            if (suspended_count == TX_NO_SUSPENSIONS)
 801133e:	b9c8      	cbnz	r0, 8011374 <_tx_queue_receive+0x1a4>
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8011340:	62a5      	str	r5, [r4, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8011342:	672d      	str	r5, [r5, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8011344:	676d      	str	r5, [r5, #116]	@ 0x74
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8011346:	3001      	adds	r0, #1
 8011348:	62e0      	str	r0, [r4, #44]	@ 0x2c
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 801134a:	2305      	movs	r3, #5
 801134c:	632b      	str	r3, [r5, #48]	@ 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801134e:	2301      	movs	r3, #1
 8011350:	63ab      	str	r3, [r5, #56]	@ 0x38
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011352:	64ea      	str	r2, [r5, #76]	@ 0x4c
            _tx_thread_preempt_disable++;
 8011354:	4a0d      	ldr	r2, [pc, #52]	@ (801138c <_tx_queue_receive+0x1bc>)
 8011356:	6813      	ldr	r3, [r2, #0]
 8011358:	3301      	adds	r3, #1
 801135a:	6013      	str	r3, [r2, #0]
 801135c:	f38c 8810 	msr	PRIMASK, ip
            _tx_thread_system_suspend(thread_ptr);
 8011360:	4628      	mov	r0, r5
 8011362:	f000 fc01 	bl	8011b68 <_tx_thread_system_suspend>
            status =  thread_ptr -> tx_thread_suspend_status;
 8011366:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 801136a:	e757      	b.n	801121c <_tx_queue_receive+0x4c>
 801136c:	f38c 8810 	msr	PRIMASK, ip
            status =  TX_QUEUE_EMPTY;
 8011370:	200a      	movs	r0, #10
 8011372:	e753      	b.n	801121c <_tx_queue_receive+0x4c>
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8011374:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8011376:	672b      	str	r3, [r5, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8011378:	6f59      	ldr	r1, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801137a:	6769      	str	r1, [r5, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801137c:	670d      	str	r5, [r1, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801137e:	675d      	str	r5, [r3, #116]	@ 0x74
 8011380:	e7e1      	b.n	8011346 <_tx_queue_receive+0x176>
 8011382:	f38c 8810 	msr	PRIMASK, ip
        status =  TX_QUEUE_EMPTY;
 8011386:	200a      	movs	r0, #10
    return(status);
 8011388:	e748      	b.n	801121c <_tx_queue_receive+0x4c>
 801138a:	bf00      	nop
 801138c:	20010940 	.word	0x20010940
 8011390:	200109d8 	.word	0x200109d8
 8011394:	080110cd 	.word	0x080110cd

08011398 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8011398:	b538      	push	{r3, r4, r5, lr}
 801139a:	4604      	mov	r4, r0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801139c:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80113a0:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80113a2:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 80113a4:	6963      	ldr	r3, [r4, #20]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d048      	beq.n	801143c <_tx_queue_send+0xa4>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80113aa:	b9e0      	cbnz	r0, 80113e6 <_tx_queue_send+0x4e>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 80113ac:	3b01      	subs	r3, #1
 80113ae:	6163      	str	r3, [r4, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 80113b0:	6923      	ldr	r3, [r4, #16]
 80113b2:	3301      	adds	r3, #1
 80113b4:	6123      	str	r3, [r4, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
            destination =  queue_ptr -> tx_queue_write;
            size =         queue_ptr -> tx_queue_message_size;
 80113b6:	68a2      	ldr	r2, [r4, #8]

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80113b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80113ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80113be:	f843 5b04 	str.w	r5, [r3], #4
 80113c2:	2a01      	cmp	r2, #1
 80113c4:	d804      	bhi.n	80113d0 <_tx_queue_send+0x38>
 80113c6:	e005      	b.n	80113d4 <_tx_queue_send+0x3c>
 80113c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80113cc:	f843 5b04 	str.w	r5, [r3], #4
 80113d0:	3a01      	subs	r2, #1
 80113d2:	d1f9      	bne.n	80113c8 <_tx_queue_send+0x30>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 80113d4:	69e2      	ldr	r2, [r4, #28]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d003      	beq.n	80113e2 <_tx_queue_send+0x4a>
                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 80113da:	6263      	str	r3, [r4, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80113dc:	f38c 8810 	msr	PRIMASK, ip
        status =  TX_QUEUE_FULL;
    }

    /* Return completion status.  */
    return(status);
}
 80113e0:	bd38      	pop	{r3, r4, r5, pc}
                destination =  queue_ptr -> tx_queue_start;
 80113e2:	69a3      	ldr	r3, [r4, #24]
 80113e4:	e7f9      	b.n	80113da <_tx_queue_send+0x42>
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80113e6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
            if (suspended_count == TX_NO_SUSPENSIONS)
 80113e8:	3801      	subs	r0, #1
 80113ea:	d10d      	bne.n	8011408 <_tx_queue_send+0x70>
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80113ec:	2300      	movs	r3, #0
 80113ee:	62a3      	str	r3, [r4, #40]	@ 0x28
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80113f0:	62e0      	str	r0, [r4, #44]	@ 0x2c
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80113f2:	2300      	movs	r3, #0
 80113f4:	66ab      	str	r3, [r5, #104]	@ 0x68
            size =         queue_ptr -> tx_queue_message_size;
 80113f6:	68a2      	ldr	r2, [r4, #8]
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80113f8:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 80113fa:	f851 0b04 	ldr.w	r0, [r1], #4
 80113fe:	f843 0b04 	str.w	r0, [r3], #4
 8011402:	2a01      	cmp	r2, #1
 8011404:	d80a      	bhi.n	801141c <_tx_queue_send+0x84>
 8011406:	e00b      	b.n	8011420 <_tx_queue_send+0x88>
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8011408:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801140a:	62a3      	str	r3, [r4, #40]	@ 0x28
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801140c:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 801140e:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8011410:	6713      	str	r3, [r2, #112]	@ 0x70
 8011412:	e7ed      	b.n	80113f0 <_tx_queue_send+0x58>
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8011414:	f851 4b04 	ldr.w	r4, [r1], #4
 8011418:	f843 4b04 	str.w	r4, [r3], #4
 801141c:	3a01      	subs	r2, #1
 801141e:	d1f9      	bne.n	8011414 <_tx_queue_send+0x7c>
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011420:	2400      	movs	r4, #0
 8011422:	f8c5 4084 	str.w	r4, [r5, #132]	@ 0x84
            _tx_thread_preempt_disable++;
 8011426:	4a22      	ldr	r2, [pc, #136]	@ (80114b0 <_tx_queue_send+0x118>)
 8011428:	6813      	ldr	r3, [r2, #0]
 801142a:	3301      	adds	r3, #1
 801142c:	6013      	str	r3, [r2, #0]
 801142e:	f38c 8810 	msr	PRIMASK, ip
            _tx_thread_system_resume(thread_ptr);
 8011432:	4628      	mov	r0, r5
 8011434:	f000 fb08 	bl	8011a48 <_tx_thread_system_resume>
    status =  TX_SUCCESS;
 8011438:	4620      	mov	r0, r4
 801143a:	e7d1      	b.n	80113e0 <_tx_queue_send+0x48>
    else if (wait_option != TX_NO_WAIT)
 801143c:	2a00      	cmp	r2, #0
 801143e:	d032      	beq.n	80114a6 <_tx_queue_send+0x10e>
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8011440:	4b1b      	ldr	r3, [pc, #108]	@ (80114b0 <_tx_queue_send+0x118>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	bb23      	cbnz	r3, 8011490 <_tx_queue_send+0xf8>
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011446:	4b1b      	ldr	r3, [pc, #108]	@ (80114b4 <_tx_queue_send+0x11c>)
 8011448:	681d      	ldr	r5, [r3, #0]
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 801144a:	4b1b      	ldr	r3, [pc, #108]	@ (80114b8 <_tx_queue_send+0x120>)
 801144c:	66ab      	str	r3, [r5, #104]	@ 0x68
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 801144e:	66ec      	str	r4, [r5, #108]	@ 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8011450:	67e9      	str	r1, [r5, #124]	@ 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8011452:	2300      	movs	r3, #0
 8011454:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
            thread_ptr -> tx_thread_suspension_sequence++;
 8011458:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 801145c:	3301      	adds	r3, #1
 801145e:	f8c5 30ac 	str.w	r3, [r5, #172]	@ 0xac
            if (suspended_count == TX_NO_SUSPENSIONS)
 8011462:	b9c8      	cbnz	r0, 8011498 <_tx_queue_send+0x100>
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8011464:	62a5      	str	r5, [r4, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8011466:	672d      	str	r5, [r5, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8011468:	676d      	str	r5, [r5, #116]	@ 0x74
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 801146a:	3001      	adds	r0, #1
 801146c:	62e0      	str	r0, [r4, #44]	@ 0x2c
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 801146e:	2305      	movs	r3, #5
 8011470:	632b      	str	r3, [r5, #48]	@ 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011472:	2301      	movs	r3, #1
 8011474:	63ab      	str	r3, [r5, #56]	@ 0x38
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011476:	64ea      	str	r2, [r5, #76]	@ 0x4c
            _tx_thread_preempt_disable++;
 8011478:	4a0d      	ldr	r2, [pc, #52]	@ (80114b0 <_tx_queue_send+0x118>)
 801147a:	6813      	ldr	r3, [r2, #0]
 801147c:	3301      	adds	r3, #1
 801147e:	6013      	str	r3, [r2, #0]
 8011480:	f38c 8810 	msr	PRIMASK, ip
            _tx_thread_system_suspend(thread_ptr);
 8011484:	4628      	mov	r0, r5
 8011486:	f000 fb6f 	bl	8011b68 <_tx_thread_system_suspend>
            status =  thread_ptr -> tx_thread_suspend_status;
 801148a:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 801148e:	e7a7      	b.n	80113e0 <_tx_queue_send+0x48>
 8011490:	f38c 8810 	msr	PRIMASK, ip
            status =  TX_QUEUE_FULL;
 8011494:	200b      	movs	r0, #11
 8011496:	e7a3      	b.n	80113e0 <_tx_queue_send+0x48>
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8011498:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801149a:	672b      	str	r3, [r5, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801149c:	6f59      	ldr	r1, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801149e:	6769      	str	r1, [r5, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80114a0:	670d      	str	r5, [r1, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80114a2:	675d      	str	r5, [r3, #116]	@ 0x74
 80114a4:	e7e1      	b.n	801146a <_tx_queue_send+0xd2>
 80114a6:	f38c 8810 	msr	PRIMASK, ip
        status =  TX_QUEUE_FULL;
 80114aa:	200b      	movs	r0, #11
    return(status);
 80114ac:	e798      	b.n	80113e0 <_tx_queue_send+0x48>
 80114ae:	bf00      	nop
 80114b0:	20010940 	.word	0x20010940
 80114b4:	200109d8 	.word	0x200109d8
 80114b8:	080110cd 	.word	0x080110cd

080114bc <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80114bc:	b510      	push	{r4, lr}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80114be:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80114c2:	b672      	cpsid	i

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80114c4:	4a1b      	ldr	r2, [pc, #108]	@ (8011534 <_tx_semaphore_cleanup+0x78>)
 80114c6:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80114c8:	4294      	cmp	r4, r2
 80114ca:	d002      	beq.n	80114d2 <_tx_semaphore_cleanup+0x16>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80114cc:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80114d0:	bd10      	pop	{r4, pc}
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80114d2:	f8d0 20ac 	ldr.w	r2, [r0, #172]	@ 0xac
 80114d6:	428a      	cmp	r2, r1
 80114d8:	d1f8      	bne.n	80114cc <_tx_semaphore_cleanup+0x10>
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80114da:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
            if (semaphore_ptr != TX_NULL)
 80114dc:	2a00      	cmp	r2, #0
 80114de:	d0f5      	beq.n	80114cc <_tx_semaphore_cleanup+0x10>
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 80114e0:	4915      	ldr	r1, [pc, #84]	@ (8011538 <_tx_semaphore_cleanup+0x7c>)
 80114e2:	6814      	ldr	r4, [r2, #0]
 80114e4:	428c      	cmp	r4, r1
 80114e6:	d1f1      	bne.n	80114cc <_tx_semaphore_cleanup+0x10>
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 80114e8:	6911      	ldr	r1, [r2, #16]
 80114ea:	2900      	cmp	r1, #0
 80114ec:	d0ee      	beq.n	80114cc <_tx_semaphore_cleanup+0x10>
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80114ee:	2100      	movs	r1, #0
 80114f0:	6681      	str	r1, [r0, #104]	@ 0x68
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80114f2:	6911      	ldr	r1, [r2, #16]
 80114f4:	3901      	subs	r1, #1
 80114f6:	6111      	str	r1, [r2, #16]
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80114f8:	b991      	cbnz	r1, 8011520 <_tx_semaphore_cleanup+0x64>
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80114fa:	60d1      	str	r1, [r2, #12]
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 80114fc:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80114fe:	2a06      	cmp	r2, #6
 8011500:	d1e4      	bne.n	80114cc <_tx_semaphore_cleanup+0x10>
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8011502:	220d      	movs	r2, #13
 8011504:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
                            _tx_thread_preempt_disable++;
 8011508:	490c      	ldr	r1, [pc, #48]	@ (801153c <_tx_semaphore_cleanup+0x80>)
 801150a:	680a      	ldr	r2, [r1, #0]
 801150c:	3201      	adds	r2, #1
 801150e:	600a      	str	r2, [r1, #0]
 8011510:	f383 8810 	msr	PRIMASK, r3
                            _tx_thread_system_resume(thread_ptr);
 8011514:	f000 fa98 	bl	8011a48 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011518:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 801151c:	b672      	cpsid	i
    return(int_posture);
 801151e:	e7d5      	b.n	80114cc <_tx_semaphore_cleanup+0x10>
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8011520:	6f01      	ldr	r1, [r0, #112]	@ 0x70
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011522:	6f44      	ldr	r4, [r0, #116]	@ 0x74
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011524:	674c      	str	r4, [r1, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011526:	6721      	str	r1, [r4, #112]	@ 0x70
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8011528:	68d4      	ldr	r4, [r2, #12]
 801152a:	4284      	cmp	r4, r0
 801152c:	d1e6      	bne.n	80114fc <_tx_semaphore_cleanup+0x40>
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 801152e:	60d1      	str	r1, [r2, #12]
 8011530:	e7e4      	b.n	80114fc <_tx_semaphore_cleanup+0x40>
 8011532:	bf00      	nop
 8011534:	080114bd 	.word	0x080114bd
 8011538:	53454d41 	.word	0x53454d41
 801153c:	20010940 	.word	0x20010940

08011540 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8011540:	b410      	push	{r4}
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8011542:	2300      	movs	r3, #0
 8011544:	6003      	str	r3, [r0, #0]
 8011546:	6043      	str	r3, [r0, #4]
 8011548:	6083      	str	r3, [r0, #8]
 801154a:	60c3      	str	r3, [r0, #12]
 801154c:	6103      	str	r3, [r0, #16]
 801154e:	6143      	str	r3, [r0, #20]
 8011550:	6183      	str	r3, [r0, #24]

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8011552:	6041      	str	r1, [r0, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8011554:	6082      	str	r2, [r0, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011556:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 801155a:	b672      	cpsid	i

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 801155c:	4b0c      	ldr	r3, [pc, #48]	@ (8011590 <_tx_semaphore_create+0x50>)
 801155e:	6003      	str	r3, [r0, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8011560:	4b0c      	ldr	r3, [pc, #48]	@ (8011594 <_tx_semaphore_create+0x54>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	b963      	cbnz	r3, 8011580 <_tx_semaphore_create+0x40>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8011566:	490c      	ldr	r1, [pc, #48]	@ (8011598 <_tx_semaphore_create+0x58>)
 8011568:	6008      	str	r0, [r1, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 801156a:	6140      	str	r0, [r0, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 801156c:	6180      	str	r0, [r0, #24]
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 801156e:	3301      	adds	r3, #1
 8011570:	4908      	ldr	r1, [pc, #32]	@ (8011594 <_tx_semaphore_create+0x54>)
 8011572:	600b      	str	r3, [r1, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011574:	f382 8810 	msr	PRIMASK, r2
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8011578:	2000      	movs	r0, #0
 801157a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801157e:	4770      	bx	lr
        next_semaphore =      _tx_semaphore_created_ptr;
 8011580:	4905      	ldr	r1, [pc, #20]	@ (8011598 <_tx_semaphore_create+0x58>)
 8011582:	6809      	ldr	r1, [r1, #0]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8011584:	698c      	ldr	r4, [r1, #24]
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8011586:	6188      	str	r0, [r1, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8011588:	6160      	str	r0, [r4, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 801158a:	6184      	str	r4, [r0, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 801158c:	6141      	str	r1, [r0, #20]
 801158e:	e7ee      	b.n	801156e <_tx_semaphore_create+0x2e>
 8011590:	53454d41 	.word	0x53454d41
 8011594:	20010930 	.word	0x20010930
 8011598:	20010934 	.word	0x20010934

0801159c <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 801159c:	b538      	push	{r3, r4, r5, lr}
 801159e:	4603      	mov	r3, r0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80115a0:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80115a4:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 80115a6:	2200      	movs	r2, #0
 80115a8:	6002      	str	r2, [r0, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 80115aa:	4920      	ldr	r1, [pc, #128]	@ (801162c <_tx_semaphore_delete+0x90>)
 80115ac:	680a      	ldr	r2, [r1, #0]
 80115ae:	3a01      	subs	r2, #1
 80115b0:	600a      	str	r2, [r1, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80115b2:	b972      	cbnz	r2, 80115d2 <_tx_semaphore_delete+0x36>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 80115b4:	4a1e      	ldr	r2, [pc, #120]	@ (8011630 <_tx_semaphore_delete+0x94>)
 80115b6:	2100      	movs	r1, #0
 80115b8:	6011      	str	r1, [r2, #0]
            _tx_semaphore_created_ptr =  next_semaphore;
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80115ba:	491e      	ldr	r1, [pc, #120]	@ (8011634 <_tx_semaphore_delete+0x98>)
 80115bc:	680a      	ldr	r2, [r1, #0]
 80115be:	3201      	adds	r2, #1
 80115c0:	600a      	str	r2, [r1, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 80115c2:	68d8      	ldr	r0, [r3, #12]
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80115c4:	2200      	movs	r2, #0
 80115c6:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 80115c8:	691c      	ldr	r4, [r3, #16]
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 80115ca:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80115cc:	f385 8810 	msr	PRIMASK, r5
}
 80115d0:	e01d      	b.n	801160e <_tx_semaphore_delete+0x72>
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 80115d2:	6942      	ldr	r2, [r0, #20]
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 80115d4:	6981      	ldr	r1, [r0, #24]
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 80115d6:	6191      	str	r1, [r2, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 80115d8:	614a      	str	r2, [r1, #20]
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 80115da:	4915      	ldr	r1, [pc, #84]	@ (8011630 <_tx_semaphore_delete+0x94>)
 80115dc:	6809      	ldr	r1, [r1, #0]
 80115de:	4281      	cmp	r1, r0
 80115e0:	d1eb      	bne.n	80115ba <_tx_semaphore_delete+0x1e>
            _tx_semaphore_created_ptr =  next_semaphore;
 80115e2:	4913      	ldr	r1, [pc, #76]	@ (8011630 <_tx_semaphore_delete+0x94>)
 80115e4:	600a      	str	r2, [r1, #0]
 80115e6:	e7e8      	b.n	80115ba <_tx_semaphore_delete+0x1e>
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80115e8:	3c01      	subs	r4, #1
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80115ea:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80115ee:	b672      	cpsid	i
        /* Lockout interrupts.  */
        TX_DISABLE

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80115f0:	2300      	movs	r3, #0
 80115f2:	6683      	str	r3, [r0, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80115f4:	2301      	movs	r3, #1
 80115f6:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80115fa:	6f05      	ldr	r5, [r0, #112]	@ 0x70
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80115fc:	4a0d      	ldr	r2, [pc, #52]	@ (8011634 <_tx_semaphore_delete+0x98>)
 80115fe:	6813      	ldr	r3, [r2, #0]
 8011600:	3301      	adds	r3, #1
 8011602:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011604:	f381 8810 	msr	PRIMASK, r1

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011608:	f000 fa1e 	bl	8011a48 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 801160c:	4628      	mov	r0, r5
    while (suspended_count != TX_NO_SUSPENSIONS)
 801160e:	2c00      	cmp	r4, #0
 8011610:	d1ea      	bne.n	80115e8 <_tx_semaphore_delete+0x4c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011612:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8011616:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8011618:	4a06      	ldr	r2, [pc, #24]	@ (8011634 <_tx_semaphore_delete+0x98>)
 801161a:	6813      	ldr	r3, [r2, #0]
 801161c:	3b01      	subs	r3, #1
 801161e:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011620:	f381 8810 	msr	PRIMASK, r1

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8011624:	f000 f9f2 	bl	8011a0c <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
}
 8011628:	2000      	movs	r0, #0
 801162a:	bd38      	pop	{r3, r4, r5, pc}
 801162c:	20010930 	.word	0x20010930
 8011630:	20010934 	.word	0x20010934
 8011634:	20010940 	.word	0x20010940

08011638 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8011638:	b538      	push	{r3, r4, r5, lr}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801163a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 801163e:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8011640:	6883      	ldr	r3, [r0, #8]
 8011642:	b12b      	cbz	r3, 8011650 <_tx_semaphore_get+0x18>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8011644:	3b01      	subs	r3, #1
 8011646:	6083      	str	r3, [r0, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011648:	f382 8810 	msr	PRIMASK, r2
    status =  TX_SUCCESS;
 801164c:	2000      	movs	r0, #0
        status =  TX_NO_INSTANCE;
    }

    /* Return completion status.  */
    return(status);
}
 801164e:	bd38      	pop	{r3, r4, r5, pc}
    else if (wait_option != TX_NO_WAIT)
 8011650:	2900      	cmp	r1, #0
 8011652:	d030      	beq.n	80116b6 <_tx_semaphore_get+0x7e>
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8011654:	4b1a      	ldr	r3, [pc, #104]	@ (80116c0 <_tx_semaphore_get+0x88>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	bb13      	cbnz	r3, 80116a0 <_tx_semaphore_get+0x68>
            TX_THREAD_GET_CURRENT(thread_ptr)
 801165a:	4b1a      	ldr	r3, [pc, #104]	@ (80116c4 <_tx_semaphore_get+0x8c>)
 801165c:	681c      	ldr	r4, [r3, #0]
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 801165e:	4b1a      	ldr	r3, [pc, #104]	@ (80116c8 <_tx_semaphore_get+0x90>)
 8011660:	66a3      	str	r3, [r4, #104]	@ 0x68
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8011662:	66e0      	str	r0, [r4, #108]	@ 0x6c
            thread_ptr -> tx_thread_suspension_sequence++;
 8011664:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8011668:	3301      	adds	r3, #1
 801166a:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 801166e:	6903      	ldr	r3, [r0, #16]
 8011670:	b9d3      	cbnz	r3, 80116a8 <_tx_semaphore_get+0x70>
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8011672:	60c4      	str	r4, [r0, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8011674:	6724      	str	r4, [r4, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8011676:	6764      	str	r4, [r4, #116]	@ 0x74
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8011678:	6903      	ldr	r3, [r0, #16]
 801167a:	3301      	adds	r3, #1
 801167c:	6103      	str	r3, [r0, #16]
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 801167e:	2306      	movs	r3, #6
 8011680:	6323      	str	r3, [r4, #48]	@ 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011682:	2301      	movs	r3, #1
 8011684:	63a3      	str	r3, [r4, #56]	@ 0x38
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011686:	64e1      	str	r1, [r4, #76]	@ 0x4c
            _tx_thread_preempt_disable++;
 8011688:	490d      	ldr	r1, [pc, #52]	@ (80116c0 <_tx_semaphore_get+0x88>)
 801168a:	680b      	ldr	r3, [r1, #0]
 801168c:	3301      	adds	r3, #1
 801168e:	600b      	str	r3, [r1, #0]
 8011690:	f382 8810 	msr	PRIMASK, r2
            _tx_thread_system_suspend(thread_ptr);
 8011694:	4620      	mov	r0, r4
 8011696:	f000 fa67 	bl	8011b68 <_tx_thread_system_suspend>
            status =  thread_ptr -> tx_thread_suspend_status;
 801169a:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 801169e:	e7d6      	b.n	801164e <_tx_semaphore_get+0x16>
 80116a0:	f382 8810 	msr	PRIMASK, r2
            status =  TX_NO_INSTANCE;
 80116a4:	200d      	movs	r0, #13
 80116a6:	e7d2      	b.n	801164e <_tx_semaphore_get+0x16>
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 80116a8:	68c3      	ldr	r3, [r0, #12]
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80116aa:	6723      	str	r3, [r4, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80116ac:	6f5d      	ldr	r5, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80116ae:	6765      	str	r5, [r4, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80116b0:	672c      	str	r4, [r5, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80116b2:	675c      	str	r4, [r3, #116]	@ 0x74
 80116b4:	e7e0      	b.n	8011678 <_tx_semaphore_get+0x40>
 80116b6:	f382 8810 	msr	PRIMASK, r2
        status =  TX_NO_INSTANCE;
 80116ba:	200d      	movs	r0, #13
    return(status);
 80116bc:	e7c7      	b.n	801164e <_tx_semaphore_get+0x16>
 80116be:	bf00      	nop
 80116c0:	20010940 	.word	0x20010940
 80116c4:	200109d8 	.word	0x200109d8
 80116c8:	080114bd 	.word	0x080114bd

080116cc <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80116cc:	b538      	push	{r3, r4, r5, lr}
 80116ce:	4603      	mov	r3, r0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80116d0:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80116d4:	b672      	cpsid	i

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80116d6:	6902      	ldr	r2, [r0, #16]

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 80116d8:	b932      	cbnz	r2, 80116e8 <_tx_semaphore_put+0x1c>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 80116da:	6882      	ldr	r2, [r0, #8]
 80116dc:	3201      	adds	r2, #1
 80116de:	6082      	str	r2, [r0, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116e0:	f381 8810 	msr	PRIMASK, r1
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
}
 80116e4:	2000      	movs	r0, #0
 80116e6:	bd38      	pop	{r3, r4, r5, pc}
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 80116e8:	68c0      	ldr	r0, [r0, #12]
        if (suspended_count == TX_NO_SUSPENSIONS)
 80116ea:	3a01      	subs	r2, #1
 80116ec:	d10f      	bne.n	801170e <_tx_semaphore_put+0x42>
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80116ee:	2400      	movs	r4, #0
 80116f0:	60dc      	str	r4, [r3, #12]
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 80116f2:	611a      	str	r2, [r3, #16]
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80116f4:	2300      	movs	r3, #0
 80116f6:	6683      	str	r3, [r0, #104]	@ 0x68
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80116f8:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
        _tx_thread_preempt_disable++;
 80116fc:	4a07      	ldr	r2, [pc, #28]	@ (801171c <_tx_semaphore_put+0x50>)
 80116fe:	6813      	ldr	r3, [r2, #0]
 8011700:	3301      	adds	r3, #1
 8011702:	6013      	str	r3, [r2, #0]
 8011704:	f381 8810 	msr	PRIMASK, r1
        _tx_thread_system_resume(thread_ptr);
 8011708:	f000 f99e 	bl	8011a48 <_tx_thread_system_resume>
 801170c:	e7ea      	b.n	80116e4 <_tx_semaphore_put+0x18>
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 801170e:	6f04      	ldr	r4, [r0, #112]	@ 0x70
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8011710:	60dc      	str	r4, [r3, #12]
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011712:	6f45      	ldr	r5, [r0, #116]	@ 0x74
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011714:	6765      	str	r5, [r4, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011716:	672c      	str	r4, [r5, #112]	@ 0x70
 8011718:	e7eb      	b.n	80116f2 <_tx_semaphore_put+0x26>
 801171a:	bf00      	nop
 801171c:	20010940 	.word	0x20010940

08011720 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8011720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011724:	4604      	mov	r4, r0
 8011726:	468a      	mov	sl, r1
 8011728:	4691      	mov	r9, r2
 801172a:	4698      	mov	r8, r3
 801172c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801172e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011730:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8011732:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8011736:	4632      	mov	r2, r6
 8011738:	21ef      	movs	r1, #239	@ 0xef
 801173a:	4628      	mov	r0, r5
 801173c:	f004 fa34 	bl	8015ba8 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8011740:	22b0      	movs	r2, #176	@ 0xb0
 8011742:	2100      	movs	r1, #0
 8011744:	4620      	mov	r0, r4
 8011746:	f004 fa2f 	bl	8015ba8 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801174a:	f8c4 a028 	str.w	sl, [r4, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 801174e:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8011752:	f8c4 8048 	str.w	r8, [r4, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8011756:	60e5      	str	r5, [r4, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8011758:	6166      	str	r6, [r4, #20]
    thread_ptr -> tx_thread_priority =          priority;
 801175a:	62e7      	str	r7, [r4, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 801175c:	f8c4 7094 	str.w	r7, [r4, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8011760:	f8c4 b018 	str.w	fp, [r4, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8011764:	f8c4 b01c 	str.w	fp, [r4, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011768:	2320      	movs	r3, #32
 801176a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 801176e:	3e01      	subs	r6, #1
 8011770:	4435      	add	r5, r6
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8011772:	6125      	str	r5, [r4, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8011774:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011776:	429f      	cmp	r7, r3
 8011778:	d02f      	beq.n	80117da <_tx_thread_create+0xba>
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801177a:	2303      	movs	r3, #3
 801177c:	6323      	str	r3, [r4, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801177e:	4b2d      	ldr	r3, [pc, #180]	@ (8011834 <_tx_thread_create+0x114>)
 8011780:	6563      	str	r3, [r4, #84]	@ 0x54
 8011782:	65a4      	str	r4, [r4, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8011784:	492c      	ldr	r1, [pc, #176]	@ (8011838 <_tx_thread_create+0x118>)
 8011786:	4620      	mov	r0, r4
 8011788:	f7ee fe24 	bl	80003d4 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801178c:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8011790:	b672      	cpsid	i

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8011792:	4b2a      	ldr	r3, [pc, #168]	@ (801183c <_tx_thread_create+0x11c>)
 8011794:	6023      	str	r3, [r4, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8011796:	4b2a      	ldr	r3, [pc, #168]	@ (8011840 <_tx_thread_create+0x120>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	bb13      	cbnz	r3, 80117e2 <_tx_thread_create+0xc2>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 801179c:	4a29      	ldr	r2, [pc, #164]	@ (8011844 <_tx_thread_create+0x124>)
 801179e:	6014      	str	r4, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80117a0:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80117a4:	f8c4 408c 	str.w	r4, [r4, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_previous =  previous_thread;
        thread_ptr -> tx_thread_created_next =      next_thread;
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80117a8:	3301      	adds	r3, #1
 80117aa:	4a25      	ldr	r2, [pc, #148]	@ (8011840 <_tx_thread_create+0x120>)
 80117ac:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80117ae:	4a26      	ldr	r2, [pc, #152]	@ (8011848 <_tx_thread_create+0x128>)
 80117b0:	6813      	ldr	r3, [r2, #0]
 80117b2:	3301      	adds	r3, #1
 80117b4:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80117b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117b8:	2b01      	cmp	r3, #1
 80117ba:	d12b      	bne.n	8011814 <_tx_thread_create+0xf4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80117bc:	f3ef 8205 	mrs	r2, IPSR
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80117c0:	4b22      	ldr	r3, [pc, #136]	@ (801184c <_tx_thread_create+0x12c>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	4313      	orrs	r3, r2
 80117c6:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80117ca:	d317      	bcc.n	80117fc <_tx_thread_create+0xdc>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80117cc:	4b20      	ldr	r3, [pc, #128]	@ (8011850 <_tx_thread_create+0x130>)
 80117ce:	681d      	ldr	r5, [r3, #0]

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80117d0:	b1f5      	cbz	r5, 8011810 <_tx_thread_create+0xf0>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80117d2:	6bee      	ldr	r6, [r5, #60]	@ 0x3c

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80117d4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80117d6:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80117d8:	e012      	b.n	8011800 <_tx_thread_create+0xe0>
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80117da:	63e7      	str	r7, [r4, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80117dc:	f8c4 7098 	str.w	r7, [r4, #152]	@ 0x98
 80117e0:	e7cb      	b.n	801177a <_tx_thread_create+0x5a>
        next_thread =  _tx_thread_created_ptr;
 80117e2:	4a18      	ldr	r2, [pc, #96]	@ (8011844 <_tx_thread_create+0x124>)
 80117e4:	6812      	ldr	r2, [r2, #0]
        previous_thread =  next_thread -> tx_thread_created_previous;
 80117e6:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80117ea:	f8c2 408c 	str.w	r4, [r2, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80117ee:	f8c0 4088 	str.w	r4, [r0, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80117f2:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80117f6:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 80117fa:	e7d5      	b.n	80117a8 <_tx_thread_create+0x88>
UINT                    saved_threshold =  ((UINT) 0);
 80117fc:	2600      	movs	r6, #0
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80117fe:	4635      	mov	r5, r6
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011800:	f381 8810 	msr	PRIMASK, r1

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8011804:	4620      	mov	r0, r4
 8011806:	f000 f91f 	bl	8011a48 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801180a:	b185      	cbz	r5, 801182e <_tx_thread_create+0x10e>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801180c:	63ee      	str	r6, [r5, #60]	@ 0x3c
 801180e:	e00e      	b.n	801182e <_tx_thread_create+0x10e>
UINT                    saved_threshold =  ((UINT) 0);
 8011810:	2600      	movs	r6, #0
 8011812:	e7f5      	b.n	8011800 <_tx_thread_create+0xe0>
 8011814:	f381 8810 	msr	PRIMASK, r1
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011818:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 801181c:	b672      	cpsid	i

        /* Disable interrupts.  */
        TX_DISABLE

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 801181e:	4a0a      	ldr	r2, [pc, #40]	@ (8011848 <_tx_thread_create+0x128>)
 8011820:	6813      	ldr	r3, [r2, #0]
 8011822:	3b01      	subs	r3, #1
 8011824:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011826:	f381 8810 	msr	PRIMASK, r1

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801182a:	f000 f8ef 	bl	8011a0c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
}
 801182e:	2000      	movs	r0, #0
 8011830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011834:	08011d15 	.word	0x08011d15
 8011838:	08011931 	.word	0x08011931
 801183c:	54485244 	.word	0x54485244
 8011840:	200109cc 	.word	0x200109cc
 8011844:	200109d0 	.word	0x200109d0
 8011848:	20010940 	.word	0x20010940
 801184c:	20000024 	.word	0x20000024
 8011850:	200109d4 	.word	0x200109d4

08011854 <_tx_thread_identify>:
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011854:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8011858:	b672      	cpsid	i

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801185a:	4a02      	ldr	r2, [pc, #8]	@ (8011864 <_tx_thread_identify+0x10>)
 801185c:	6810      	ldr	r0, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801185e:	f383 8810 	msr	PRIMASK, r3
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
}
 8011862:	4770      	bx	lr
 8011864:	200109d8 	.word	0x200109d8

08011868 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8011868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801186c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8011870:	9f07      	ldr	r7, [sp, #28]
 8011872:	9e08      	ldr	r6, [sp, #32]
 8011874:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011876:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801187a:	f3ef 8e10 	mrs	lr, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 801187e:	b672      	cpsid	i

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 8011880:	b109      	cbz	r1, 8011886 <_tx_thread_info_get+0x1e>
    {

        *name =  thread_ptr -> tx_thread_name;
 8011882:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8011884:	600c      	str	r4, [r1, #0]
    }

    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 8011886:	b10a      	cbz	r2, 801188c <_tx_thread_info_get+0x24>
    {

        *state =  thread_ptr -> tx_thread_state;
 8011888:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801188a:	6011      	str	r1, [r2, #0]
    }

    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 801188c:	b10b      	cbz	r3, 8011892 <_tx_thread_info_get+0x2a>
    {

        *run_count =  thread_ptr -> tx_thread_run_count;
 801188e:	6842      	ldr	r2, [r0, #4]
 8011890:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 8011892:	f1bc 0f00 	cmp.w	ip, #0
 8011896:	d003      	beq.n	80118a0 <_tx_thread_info_get+0x38>
    {

        *priority =  thread_ptr -> tx_thread_user_priority;
 8011898:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 801189c:	f8cc 3000 	str.w	r3, [ip]
    }

    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 80118a0:	b117      	cbz	r7, 80118a8 <_tx_thread_info_get+0x40>
    {

        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80118a2:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
 80118a6:	603b      	str	r3, [r7, #0]
    }

    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 80118a8:	b10e      	cbz	r6, 80118ae <_tx_thread_info_get+0x46>
    {

        *time_slice =  thread_ptr -> tx_thread_time_slice;
 80118aa:	6983      	ldr	r3, [r0, #24]
 80118ac:	6033      	str	r3, [r6, #0]
    }

    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 80118ae:	b115      	cbz	r5, 80118b6 <_tx_thread_info_get+0x4e>
    {

        *next_thread =  thread_ptr -> tx_thread_created_next;
 80118b0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80118b4:	602b      	str	r3, [r5, #0]
    }

    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 80118b6:	f1b8 0f00 	cmp.w	r8, #0
 80118ba:	d002      	beq.n	80118c2 <_tx_thread_info_get+0x5a>
    {

        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 80118bc:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80118be:	f8c8 3000 	str.w	r3, [r8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80118c2:	f38e 8810 	msr	PRIMASK, lr
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
}
 80118c6:	2000      	movs	r0, #0
 80118c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080118cc <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80118cc:	b510      	push	{r4, lr}
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80118ce:	2400      	movs	r4, #0
 80118d0:	4b0d      	ldr	r3, [pc, #52]	@ (8011908 <_tx_thread_initialize+0x3c>)
 80118d2:	601c      	str	r4, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80118d4:	4b0d      	ldr	r3, [pc, #52]	@ (801190c <_tx_thread_initialize+0x40>)
 80118d6:	601c      	str	r4, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 80118d8:	4b0d      	ldr	r3, [pc, #52]	@ (8011910 <_tx_thread_initialize+0x44>)
 80118da:	601c      	str	r4, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80118dc:	4b0d      	ldr	r3, [pc, #52]	@ (8011914 <_tx_thread_initialize+0x48>)
 80118de:	2220      	movs	r2, #32
 80118e0:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80118e2:	2280      	movs	r2, #128	@ 0x80
 80118e4:	4621      	mov	r1, r4
 80118e6:	480c      	ldr	r0, [pc, #48]	@ (8011918 <_tx_thread_initialize+0x4c>)
 80118e8:	f004 f95e 	bl	8015ba8 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80118ec:	4b0b      	ldr	r3, [pc, #44]	@ (801191c <_tx_thread_initialize+0x50>)
 80118ee:	601c      	str	r4, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80118f0:	4b0b      	ldr	r3, [pc, #44]	@ (8011920 <_tx_thread_initialize+0x54>)
 80118f2:	601c      	str	r4, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80118f4:	4b0b      	ldr	r3, [pc, #44]	@ (8011924 <_tx_thread_initialize+0x58>)
 80118f6:	601c      	str	r4, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80118f8:	4b0b      	ldr	r3, [pc, #44]	@ (8011928 <_tx_thread_initialize+0x5c>)
 80118fa:	601c      	str	r4, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80118fc:	4a0b      	ldr	r2, [pc, #44]	@ (801192c <_tx_thread_initialize+0x60>)
 80118fe:	6813      	ldr	r3, [r2, #0]
 8011900:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 8011904:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8011906:	bd10      	pop	{r4, pc}
 8011908:	200109d8 	.word	0x200109d8
 801190c:	200109d4 	.word	0x200109d4
 8011910:	200109c8 	.word	0x200109c8
 8011914:	200109c4 	.word	0x200109c4
 8011918:	20010944 	.word	0x20010944
 801191c:	200109d0 	.word	0x200109d0
 8011920:	200109cc 	.word	0x200109cc
 8011924:	20010940 	.word	0x20010940
 8011928:	2001093c 	.word	0x2001093c
 801192c:	20010938 	.word	0x20010938

08011930 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8011930:	b510      	push	{r4, lr}
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011932:	4b11      	ldr	r3, [pc, #68]	@ (8011978 <_tx_thread_shell_entry+0x48>)
 8011934:	681c      	ldr	r4, [r3, #0]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8011936:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8011938:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 801193a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 801193c:	4b0f      	ldr	r3, [pc, #60]	@ (801197c <_tx_thread_shell_entry+0x4c>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	b10b      	cbz	r3, 8011946 <_tx_thread_shell_entry+0x16>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8011942:	4620      	mov	r0, r4
 8011944:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011946:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 801194a:	b672      	cpsid	i
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 801194c:	2301      	movs	r3, #1
 801194e:	6323      	str	r3, [r4, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011950:	63a3      	str	r3, [r4, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011952:	2300      	movs	r3, #0
 8011954:	64e3      	str	r3, [r4, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011956:	4a0a      	ldr	r2, [pc, #40]	@ (8011980 <_tx_thread_shell_entry+0x50>)
 8011958:	6813      	ldr	r3, [r2, #0]
 801195a:	3301      	adds	r3, #1
 801195c:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801195e:	f381 8810 	msr	PRIMASK, r1
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8011962:	f3ef 8314 	mrs	r3, CONTROL

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8011966:	f023 0304 	bic.w	r3, r3, #4
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 801196a:	f383 8814 	msr	CONTROL, r3
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801196e:	4620      	mov	r0, r4
 8011970:	f000 f8fa 	bl	8011b68 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8011974:	bd10      	pop	{r4, pc}
 8011976:	bf00      	nop
 8011978:	200109d8 	.word	0x200109d8
 801197c:	2001093c 	.word	0x2001093c
 8011980:	20010940 	.word	0x20010940

08011984 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8011984:	b510      	push	{r4, lr}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011986:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 801198a:	b672      	cpsid	i

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801198c:	4b1b      	ldr	r3, [pc, #108]	@ (80119fc <_tx_thread_sleep+0x78>)
 801198e:	681c      	ldr	r4, [r3, #0]

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8011990:	b164      	cbz	r4, 80119ac <_tx_thread_sleep+0x28>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011992:	f3ef 8105 	mrs	r1, IPSR
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011996:	4b1a      	ldr	r3, [pc, #104]	@ (8011a00 <_tx_thread_sleep+0x7c>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	430b      	orrs	r3, r1
 801199c:	d10a      	bne.n	80119b4 <_tx_thread_sleep+0x30>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 801199e:	4b19      	ldr	r3, [pc, #100]	@ (8011a04 <_tx_thread_sleep+0x80>)
 80119a0:	429c      	cmp	r4, r3
 80119a2:	d00b      	beq.n	80119bc <_tx_thread_sleep+0x38>
        status =  TX_CALLER_ERROR;
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80119a4:	b970      	cbnz	r0, 80119c4 <_tx_thread_sleep+0x40>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80119a6:	f382 8810 	msr	PRIMASK, r2

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80119aa:	e006      	b.n	80119ba <_tx_thread_sleep+0x36>
 80119ac:	f382 8810 	msr	PRIMASK, r2
        status =  TX_CALLER_ERROR;
 80119b0:	2013      	movs	r0, #19
 80119b2:	e002      	b.n	80119ba <_tx_thread_sleep+0x36>
 80119b4:	f382 8810 	msr	PRIMASK, r2
        status =  TX_CALLER_ERROR;
 80119b8:	2013      	movs	r0, #19
        }
    }

    /* Return completion status.  */
    return(status);
}
 80119ba:	bd10      	pop	{r4, pc}
 80119bc:	f382 8810 	msr	PRIMASK, r2
        status =  TX_CALLER_ERROR;
 80119c0:	2013      	movs	r0, #19
 80119c2:	e7fa      	b.n	80119ba <_tx_thread_sleep+0x36>
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80119c4:	4b10      	ldr	r3, [pc, #64]	@ (8011a08 <_tx_thread_sleep+0x84>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	b11b      	cbz	r3, 80119d2 <_tx_thread_sleep+0x4e>
 80119ca:	f382 8810 	msr	PRIMASK, r2
            status =  TX_CALLER_ERROR;
 80119ce:	2013      	movs	r0, #19
 80119d0:	e7f3      	b.n	80119ba <_tx_thread_sleep+0x36>
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80119d2:	2304      	movs	r3, #4
 80119d4:	6323      	str	r3, [r4, #48]	@ 0x30
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80119d6:	2301      	movs	r3, #1
 80119d8:	63a3      	str	r3, [r4, #56]	@ 0x38
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80119da:	2300      	movs	r3, #0
 80119dc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80119e0:	64e0      	str	r0, [r4, #76]	@ 0x4c
            _tx_thread_preempt_disable++;
 80119e2:	4909      	ldr	r1, [pc, #36]	@ (8011a08 <_tx_thread_sleep+0x84>)
 80119e4:	680b      	ldr	r3, [r1, #0]
 80119e6:	3301      	adds	r3, #1
 80119e8:	600b      	str	r3, [r1, #0]
 80119ea:	f382 8810 	msr	PRIMASK, r2
            _tx_thread_system_suspend(thread_ptr);
 80119ee:	4620      	mov	r0, r4
 80119f0:	f000 f8ba 	bl	8011b68 <_tx_thread_system_suspend>
            status =  thread_ptr -> tx_thread_suspend_status;
 80119f4:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
    return(status);
 80119f8:	e7df      	b.n	80119ba <_tx_thread_sleep+0x36>
 80119fa:	bf00      	nop
 80119fc:	200109d8 	.word	0x200109d8
 8011a00:	20000024 	.word	0x20000024
 8011a04:	20010df0 	.word	0x20010df0
 8011a08:	20010940 	.word	0x20010940

08011a0c <_tx_thread_system_preempt_check>:
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8011a3c <_tx_thread_system_preempt_check+0x30>)
 8011a0e:	681b      	ldr	r3, [r3, #0]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8011a10:	b99b      	cbnz	r3, 8011a3a <_tx_thread_system_preempt_check+0x2e>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8011a12:	4b0b      	ldr	r3, [pc, #44]	@ (8011a40 <_tx_thread_system_preempt_check+0x34>)
 8011a14:	681a      	ldr	r2, [r3, #0]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8011a16:	4b0b      	ldr	r3, [pc, #44]	@ (8011a44 <_tx_thread_system_preempt_check+0x38>)
 8011a18:	681b      	ldr	r3, [r3, #0]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d00d      	beq.n	8011a3a <_tx_thread_system_preempt_check+0x2e>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011a1e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011a22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a26:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011a2a:	f3ef 8305 	mrs	r3, IPSR
    if (_tx_ipsr_get() == 0)
 8011a2e:	b923      	cbnz	r3, 8011a3a <_tx_thread_system_preempt_check+0x2e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011a30:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011a34:	b662      	cpsie	i
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a36:	f383 8810 	msr	PRIMASK, r3

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8011a3a:	4770      	bx	lr
 8011a3c:	20010940 	.word	0x20010940
 8011a40:	200109d8 	.word	0x200109d8
 8011a44:	200109d4 	.word	0x200109d4

08011a48 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8011a48:	b538      	push	{r3, r4, r5, lr}
 8011a4a:	4604      	mov	r4, r0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011a4c:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8011a50:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8011a52:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8011a54:	b1db      	cbz	r3, 8011a8e <_tx_thread_system_resume+0x46>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8011a56:	304c      	adds	r0, #76	@ 0x4c
 8011a58:	f000 fa1c 	bl	8011e94 <_tx_timer_system_deactivate>
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8011a5c:	4a3c      	ldr	r2, [pc, #240]	@ (8011b50 <_tx_thread_system_resume+0x108>)
 8011a5e:	6813      	ldr	r3, [r2, #0]
 8011a60:	3b01      	subs	r3, #1
 8011a62:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8011a64:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d162      	bne.n	8011b30 <_tx_thread_system_resume+0xe8>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8011a6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d045      	beq.n	8011afc <_tx_thread_system_resume+0xb4>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8011a70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d13e      	bne.n	8011af4 <_tx_thread_system_resume+0xac>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8011a76:	6323      	str	r3, [r4, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8011a78:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8011a7a:	4b36      	ldr	r3, [pc, #216]	@ (8011b54 <_tx_thread_system_resume+0x10c>)
 8011a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                if (head_ptr == TX_NULL)
 8011a80:	b143      	cbz	r3, 8011a94 <_tx_thread_system_resume+0x4c>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8011a82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8011a84:	6214      	str	r4, [r2, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8011a86:	625c      	str	r4, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8011a88:	6262      	str	r2, [r4, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8011a8a:	6223      	str	r3, [r4, #32]
 8011a8c:	e036      	b.n	8011afc <_tx_thread_system_resume+0xb4>
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011a8e:	2300      	movs	r3, #0
 8011a90:	64c3      	str	r3, [r0, #76]	@ 0x4c
 8011a92:	e7e3      	b.n	8011a5c <_tx_thread_system_resume+0x14>
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8011a94:	4b2f      	ldr	r3, [pc, #188]	@ (8011b54 <_tx_thread_system_resume+0x10c>)
 8011a96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8011a9a:	6224      	str	r4, [r4, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8011a9c:	6264      	str	r4, [r4, #36]	@ 0x24
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8011a9e:	2101      	movs	r1, #1
 8011aa0:	4091      	lsls	r1, r2
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8011aa2:	482d      	ldr	r0, [pc, #180]	@ (8011b58 <_tx_thread_system_resume+0x110>)
 8011aa4:	6803      	ldr	r3, [r0, #0]
 8011aa6:	430b      	orrs	r3, r1
 8011aa8:	6003      	str	r3, [r0, #0]
                    if (priority < _tx_thread_highest_priority)
 8011aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8011b5c <_tx_thread_system_resume+0x114>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	d924      	bls.n	8011afc <_tx_thread_system_resume+0xb4>
                        _tx_thread_highest_priority =  priority;
 8011ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8011b5c <_tx_thread_system_resume+0x114>)
 8011ab4:	601a      	str	r2, [r3, #0]
                        execute_ptr =  _tx_thread_execute_ptr;
 8011ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8011b60 <_tx_thread_system_resume+0x118>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
                        if (execute_ptr == TX_NULL)
 8011aba:	b1c3      	cbz	r3, 8011aee <_tx_thread_system_resume+0xa6>
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8011abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011abe:	4293      	cmp	r3, r2
 8011ac0:	d91c      	bls.n	8011afc <_tx_thread_system_resume+0xb4>
                                _tx_thread_execute_ptr =  thread_ptr;
 8011ac2:	4b27      	ldr	r3, [pc, #156]	@ (8011b60 <_tx_thread_system_resume+0x118>)
 8011ac4:	601c      	str	r4, [r3, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ac6:	f385 8810 	msr	PRIMASK, r5
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011aca:	4b21      	ldr	r3, [pc, #132]	@ (8011b50 <_tx_thread_system_resume+0x108>)
 8011acc:	681b      	ldr	r3, [r3, #0]
                                if (combined_flags == ((ULONG) 0))
 8011ace:	bb73      	cbnz	r3, 8011b2e <_tx_thread_system_resume+0xe6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011ad0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011ad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ad8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011adc:	f3ef 8305 	mrs	r3, IPSR
    if (_tx_ipsr_get() == 0)
 8011ae0:	bb2b      	cbnz	r3, 8011b2e <_tx_thread_system_resume+0xe6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ae2:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011ae6:	b662      	cpsie	i
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ae8:	f383 8810 	msr	PRIMASK, r3
                                return;
 8011aec:	e01f      	b.n	8011b2e <_tx_thread_system_resume+0xe6>
                            _tx_thread_execute_ptr =  thread_ptr;
 8011aee:	4b1c      	ldr	r3, [pc, #112]	@ (8011b60 <_tx_thread_system_resume+0x118>)
 8011af0:	601c      	str	r4, [r3, #0]
 8011af2:	e003      	b.n	8011afc <_tx_thread_system_resume+0xb4>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8011af4:	2300      	movs	r3, #0
 8011af6:	6363      	str	r3, [r4, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8011af8:	2303      	movs	r3, #3
 8011afa:	6323      	str	r3, [r4, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8011afc:	4b19      	ldr	r3, [pc, #100]	@ (8011b64 <_tx_thread_system_resume+0x11c>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	f385 8810 	msr	PRIMASK, r5

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8011b04:	4a16      	ldr	r2, [pc, #88]	@ (8011b60 <_tx_thread_system_resume+0x118>)
 8011b06:	6812      	ldr	r2, [r2, #0]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d010      	beq.n	8011b2e <_tx_thread_system_resume+0xe6>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011b0c:	4b10      	ldr	r3, [pc, #64]	@ (8011b50 <_tx_thread_system_resume+0x108>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
        if (combined_flags == ((ULONG) 0))
 8011b10:	b96b      	cbnz	r3, 8011b2e <_tx_thread_system_resume+0xe6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011b12:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011b1e:	f3ef 8305 	mrs	r3, IPSR
    if (_tx_ipsr_get() == 0)
 8011b22:	b923      	cbnz	r3, 8011b2e <_tx_thread_system_resume+0xe6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011b24:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011b28:	b662      	cpsie	i
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011b2a:	f383 8810 	msr	PRIMASK, r3

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8011b2e:	bd38      	pop	{r3, r4, r5, pc}
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8011b30:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011b32:	2b01      	cmp	r3, #1
 8011b34:	d0e2      	beq.n	8011afc <_tx_thread_system_resume+0xb4>
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8011b36:	2b02      	cmp	r3, #2
 8011b38:	d0e0      	beq.n	8011afc <_tx_thread_system_resume+0xb4>
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8011b3a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011b3c:	b913      	cbnz	r3, 8011b44 <_tx_thread_system_resume+0xfc>
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8011b3e:	63a3      	str	r3, [r4, #56]	@ 0x38
                    thread_ptr -> tx_thread_state =        TX_READY;
 8011b40:	6323      	str	r3, [r4, #48]	@ 0x30
 8011b42:	e7db      	b.n	8011afc <_tx_thread_system_resume+0xb4>
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8011b44:	2300      	movs	r3, #0
 8011b46:	6363      	str	r3, [r4, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8011b48:	2303      	movs	r3, #3
 8011b4a:	6323      	str	r3, [r4, #48]	@ 0x30
 8011b4c:	e7d6      	b.n	8011afc <_tx_thread_system_resume+0xb4>
 8011b4e:	bf00      	nop
 8011b50:	20010940 	.word	0x20010940
 8011b54:	20010944 	.word	0x20010944
 8011b58:	200109c8 	.word	0x200109c8
 8011b5c:	200109c4 	.word	0x200109c4
 8011b60:	200109d4 	.word	0x200109d4
 8011b64:	200109d8 	.word	0x200109d8

08011b68 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8011b68:	b570      	push	{r4, r5, r6, lr}
 8011b6a:	4604      	mov	r4, r0
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8011b6c:	4b4a      	ldr	r3, [pc, #296]	@ (8011c98 <_tx_thread_system_suspend+0x130>)
 8011b6e:	681d      	ldr	r5, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011b70:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8011b74:	b672      	cpsid	i
    TX_DISABLE

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8011b76:	4285      	cmp	r5, r0
 8011b78:	d01e      	beq.n	8011bb8 <_tx_thread_system_suspend+0x50>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8011b7a:	4a48      	ldr	r2, [pc, #288]	@ (8011c9c <_tx_thread_system_suspend+0x134>)
 8011b7c:	6813      	ldr	r3, [r2, #0]
 8011b7e:	3b01      	subs	r3, #1
 8011b80:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8011b82:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011b84:	2b01      	cmp	r3, #1
 8011b86:	d024      	beq.n	8011bd2 <_tx_thread_system_suspend+0x6a>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011b88:	f386 8810 	msr	PRIMASK, r6

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8011b8c:	4b44      	ldr	r3, [pc, #272]	@ (8011ca0 <_tx_thread_system_suspend+0x138>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	42ab      	cmp	r3, r5
 8011b92:	d010      	beq.n	8011bb6 <_tx_thread_system_suspend+0x4e>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011b94:	4b41      	ldr	r3, [pc, #260]	@ (8011c9c <_tx_thread_system_suspend+0x134>)
 8011b96:	681b      	ldr	r3, [r3, #0]
        if (combined_flags == ((ULONG) 0))
 8011b98:	b96b      	cbnz	r3, 8011bb6 <_tx_thread_system_suspend+0x4e>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011b9a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ba2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011ba6:	f3ef 8305 	mrs	r3, IPSR
    if (_tx_ipsr_get() == 0)
 8011baa:	b923      	cbnz	r3, 8011bb6 <_tx_thread_system_suspend+0x4e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011bac:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011bb0:	b662      	cpsie	i
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011bb2:	f383 8810 	msr	PRIMASK, r3
        }
    }

    /* Return to caller.  */
    return;
}
 8011bb6:	bd70      	pop	{r4, r5, r6, pc}
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8011bb8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
        if (timeout != TX_NO_WAIT)
 8011bba:	b113      	cbz	r3, 8011bc2 <_tx_thread_system_suspend+0x5a>
            if (timeout != TX_WAIT_FOREVER)
 8011bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bc0:	d103      	bne.n	8011bca <_tx_thread_system_suspend+0x62>
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8011bc2:	69e2      	ldr	r2, [r4, #28]
 8011bc4:	4b37      	ldr	r3, [pc, #220]	@ (8011ca4 <_tx_thread_system_suspend+0x13c>)
 8011bc6:	601a      	str	r2, [r3, #0]
 8011bc8:	e7d7      	b.n	8011b7a <_tx_thread_system_suspend+0x12>
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8011bca:	304c      	adds	r0, #76	@ 0x4c
 8011bcc:	f000 f936 	bl	8011e3c <_tx_timer_system_activate>
 8011bd0:	e7f7      	b.n	8011bc2 <_tx_thread_system_suspend+0x5a>
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	63a3      	str	r3, [r4, #56]	@ 0x38
        priority =  thread_ptr -> tx_thread_priority;
 8011bd6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8011bd8:	6a23      	ldr	r3, [r4, #32]
        if (ready_next != thread_ptr)
 8011bda:	429c      	cmp	r4, r3
 8011bdc:	d02c      	beq.n	8011c38 <_tx_thread_system_suspend+0xd0>
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8011bde:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8011be0:	6259      	str	r1, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8011be2:	620b      	str	r3, [r1, #32]
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8011be4:	4930      	ldr	r1, [pc, #192]	@ (8011ca8 <_tx_thread_system_suspend+0x140>)
 8011be6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011bea:	42a1      	cmp	r1, r4
 8011bec:	d020      	beq.n	8011c30 <_tx_thread_system_suspend+0xc8>
        if (thread_ptr == _tx_thread_execute_ptr)
 8011bee:	4b2c      	ldr	r3, [pc, #176]	@ (8011ca0 <_tx_thread_system_suspend+0x138>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	42a3      	cmp	r3, r4
 8011bf4:	d1c8      	bne.n	8011b88 <_tx_thread_system_suspend+0x20>
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8011bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8011cac <_tx_thread_system_suspend+0x144>)
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8011ca8 <_tx_thread_system_suspend+0x140>)
 8011bfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011c00:	4b27      	ldr	r3, [pc, #156]	@ (8011ca0 <_tx_thread_system_suspend+0x138>)
 8011c02:	601a      	str	r2, [r3, #0]
 8011c04:	f386 8810 	msr	PRIMASK, r6
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011c08:	4b24      	ldr	r3, [pc, #144]	@ (8011c9c <_tx_thread_system_suspend+0x134>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
            if (combined_flags == ((ULONG) 0))
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d1d2      	bne.n	8011bb6 <_tx_thread_system_suspend+0x4e>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011c10:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011c14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c18:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011c1c:	f3ef 8305 	mrs	r3, IPSR
    if (_tx_ipsr_get() == 0)
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d1c8      	bne.n	8011bb6 <_tx_thread_system_suspend+0x4e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c24:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011c28:	b662      	cpsie	i
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c2a:	f383 8810 	msr	PRIMASK, r3
            return;
 8011c2e:	e7c2      	b.n	8011bb6 <_tx_thread_system_suspend+0x4e>
                _tx_thread_priority_list[priority] =  ready_next;
 8011c30:	491d      	ldr	r1, [pc, #116]	@ (8011ca8 <_tx_thread_system_suspend+0x140>)
 8011c32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011c36:	e7da      	b.n	8011bee <_tx_thread_system_suspend+0x86>
            _tx_thread_priority_list[priority] =    TX_NULL;
 8011c38:	4b1b      	ldr	r3, [pc, #108]	@ (8011ca8 <_tx_thread_system_suspend+0x140>)
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            TX_MOD32_BIT_SET(priority, priority_bit)
 8011c40:	2301      	movs	r3, #1
 8011c42:	fa03 f202 	lsl.w	r2, r3, r2
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8011c46:	491a      	ldr	r1, [pc, #104]	@ (8011cb0 <_tx_thread_system_suspend+0x148>)
 8011c48:	680b      	ldr	r3, [r1, #0]
 8011c4a:	ea23 0302 	bic.w	r3, r3, r2
 8011c4e:	600b      	str	r3, [r1, #0]
            if (priority_map == ((ULONG) 0))
 8011c50:	b133      	cbz	r3, 8011c60 <_tx_thread_system_suspend+0xf8>
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8011c52:	fa93 f3a3 	rbit	r3, r3
 8011c56:	fab3 f383 	clz	r3, r3
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8011c5a:	4a14      	ldr	r2, [pc, #80]	@ (8011cac <_tx_thread_system_suspend+0x144>)
 8011c5c:	6013      	str	r3, [r2, #0]
 8011c5e:	e7c6      	b.n	8011bee <_tx_thread_system_suspend+0x86>
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011c60:	4b12      	ldr	r3, [pc, #72]	@ (8011cac <_tx_thread_system_suspend+0x144>)
 8011c62:	2220      	movs	r2, #32
 8011c64:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8011c66:	4b0e      	ldr	r3, [pc, #56]	@ (8011ca0 <_tx_thread_system_suspend+0x138>)
 8011c68:	2200      	movs	r2, #0
 8011c6a:	601a      	str	r2, [r3, #0]
 8011c6c:	f386 8810 	msr	PRIMASK, r6
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011c70:	4b0a      	ldr	r3, [pc, #40]	@ (8011c9c <_tx_thread_system_suspend+0x134>)
 8011c72:	681b      	ldr	r3, [r3, #0]
                if (combined_flags == ((ULONG) 0))
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d19e      	bne.n	8011bb6 <_tx_thread_system_suspend+0x4e>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011c78:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c80:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011c84:	f3ef 8305 	mrs	r3, IPSR
    if (_tx_ipsr_get() == 0)
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d194      	bne.n	8011bb6 <_tx_thread_system_suspend+0x4e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c8c:	f3ef 8310 	mrs	r3, PRIMASK
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011c90:	b662      	cpsie	i
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c92:	f383 8810 	msr	PRIMASK, r3
                return;
 8011c96:	e78e      	b.n	8011bb6 <_tx_thread_system_suspend+0x4e>
 8011c98:	200109d8 	.word	0x200109d8
 8011c9c:	20010940 	.word	0x20010940
 8011ca0:	200109d4 	.word	0x200109d4
 8011ca4:	200109e0 	.word	0x200109e0
 8011ca8:	20010944 	.word	0x20010944
 8011cac:	200109c4 	.word	0x200109c4
 8011cb0:	200109c8 	.word	0x200109c8

08011cb4 <_tx_thread_time_slice>:
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011cb4:	4b11      	ldr	r3, [pc, #68]	@ (8011cfc <_tx_thread_time_slice+0x48>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011cb8:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8011cbc:	b672      	cpsid	i

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8011cbe:	4910      	ldr	r1, [pc, #64]	@ (8011d00 <_tx_thread_time_slice+0x4c>)
 8011cc0:	2000      	movs	r0, #0
 8011cc2:	6008      	str	r0, [r1, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8011cc4:	b163      	cbz	r3, 8011ce0 <_tx_thread_time_slice+0x2c>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8011cc6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8011cc8:	b951      	cbnz	r1, 8011ce0 <_tx_thread_time_slice+0x2c>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8011cca:	69d9      	ldr	r1, [r3, #28]
 8011ccc:	6199      	str	r1, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8011cce:	480d      	ldr	r0, [pc, #52]	@ (8011d04 <_tx_thread_time_slice+0x50>)
 8011cd0:	6001      	str	r1, [r0, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8011cd2:	6a19      	ldr	r1, [r3, #32]
 8011cd4:	4299      	cmp	r1, r3
 8011cd6:	d003      	beq.n	8011ce0 <_tx_thread_time_slice+0x2c>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8011cd8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8011cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011cdc:	4298      	cmp	r0, r3
 8011cde:	d002      	beq.n	8011ce6 <_tx_thread_time_slice+0x32>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ce0:	f382 8810 	msr	PRIMASK, r2

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8011ce4:	4770      	bx	lr
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8011ce6:	4b08      	ldr	r3, [pc, #32]	@ (8011d08 <_tx_thread_time_slice+0x54>)
 8011ce8:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8011cec:	4907      	ldr	r1, [pc, #28]	@ (8011d0c <_tx_thread_time_slice+0x58>)
 8011cee:	6809      	ldr	r1, [r1, #0]
 8011cf0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8011cf4:	4b06      	ldr	r3, [pc, #24]	@ (8011d10 <_tx_thread_time_slice+0x5c>)
 8011cf6:	6019      	str	r1, [r3, #0]
 8011cf8:	e7f2      	b.n	8011ce0 <_tx_thread_time_slice+0x2c>
 8011cfa:	bf00      	nop
 8011cfc:	200109d8 	.word	0x200109d8
 8011d00:	20010f3c 	.word	0x20010f3c
 8011d04:	200109e0 	.word	0x200109e0
 8011d08:	20010944 	.word	0x20010944
 8011d0c:	200109c4 	.word	0x200109c4
 8011d10:	200109d4 	.word	0x200109d4

08011d14 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8011d14:	b508      	push	{r3, lr}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011d16:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8011d1a:	b672      	cpsid	i

    /* Disable interrupts.  */
    TX_DISABLE

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8011d1c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011d1e:	2b04      	cmp	r3, #4
 8011d20:	d007      	beq.n	8011d32 <_tx_thread_timeout+0x1e>
        /* Increment the number of timeouts for this thread.  */
        thread_ptr -> tx_thread_performance_timeout_count++;
#endif

        /* Pickup the cleanup routine address.  */
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8011d22:	6e83      	ldr	r3, [r0, #104]	@ 0x68

#ifndef TX_NOT_INTERRUPTABLE

        /* Pickup the suspension sequence number that is used later to verify that the
           cleanup is still necessary.  */
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8011d24:	f8d0 10ac 	ldr.w	r1, [r0, #172]	@ 0xac
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d28:	f382 8810 	msr	PRIMASK, r2
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Call any cleanup routines.  */
        if (suspend_cleanup != TX_NULL)
 8011d2c:	b103      	cbz	r3, 8011d30 <_tx_thread_timeout+0x1c>
        {

            /* Yes, there is a function to call.  */
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8011d2e:	4798      	blx	r3

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8011d30:	bd08      	pop	{r3, pc}
        _tx_thread_preempt_disable++;
 8011d32:	4904      	ldr	r1, [pc, #16]	@ (8011d44 <_tx_thread_timeout+0x30>)
 8011d34:	680b      	ldr	r3, [r1, #0]
 8011d36:	3301      	adds	r3, #1
 8011d38:	600b      	str	r3, [r1, #0]
 8011d3a:	f382 8810 	msr	PRIMASK, r2
        _tx_thread_system_resume(thread_ptr);
 8011d3e:	f7ff fe83 	bl	8011a48 <_tx_thread_system_resume>
 8011d42:	e7f5      	b.n	8011d30 <_tx_thread_timeout+0x1c>
 8011d44:	20010940 	.word	0x20010940

08011d48 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8011d48:	b508      	push	{r3, lr}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011d4a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8011d4e:	b672      	cpsid	i
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8011d50:	4a04      	ldr	r2, [pc, #16]	@ (8011d64 <_tx_timer_expiration_process+0x1c>)
 8011d52:	6813      	ldr	r3, [r2, #0]
 8011d54:	3301      	adds	r3, #1
 8011d56:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d58:	f381 8810 	msr	PRIMASK, r1

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8011d5c:	4802      	ldr	r0, [pc, #8]	@ (8011d68 <_tx_timer_expiration_process+0x20>)
 8011d5e:	f7ff fe73 	bl	8011a48 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8011d62:	bd08      	pop	{r3, pc}
 8011d64:	20010940 	.word	0x20010940
 8011d68:	20010df0 	.word	0x20010df0

08011d6c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8011d6c:	b530      	push	{r4, r5, lr}
 8011d6e:	b087      	sub	sp, #28
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8011d70:	2400      	movs	r4, #0
 8011d72:	4b1f      	ldr	r3, [pc, #124]	@ (8011df0 <_tx_timer_initialize+0x84>)
 8011d74:	601c      	str	r4, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8011d76:	4b1f      	ldr	r3, [pc, #124]	@ (8011df4 <_tx_timer_initialize+0x88>)
 8011d78:	601c      	str	r4, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8011d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8011df8 <_tx_timer_initialize+0x8c>)
 8011d7c:	601c      	str	r4, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8011d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8011dfc <_tx_timer_initialize+0x90>)
 8011d80:	601c      	str	r4, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8011d82:	4b1f      	ldr	r3, [pc, #124]	@ (8011e00 <_tx_timer_initialize+0x94>)
 8011d84:	601c      	str	r4, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8011d86:	4d1f      	ldr	r5, [pc, #124]	@ (8011e04 <_tx_timer_initialize+0x98>)
 8011d88:	2280      	movs	r2, #128	@ 0x80
 8011d8a:	4621      	mov	r1, r4
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	f003 ff0b 	bl	8015ba8 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8011d92:	4b1d      	ldr	r3, [pc, #116]	@ (8011e08 <_tx_timer_initialize+0x9c>)
 8011d94:	601d      	str	r5, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8011d96:	4b1d      	ldr	r3, [pc, #116]	@ (8011e0c <_tx_timer_initialize+0xa0>)
 8011d98:	601d      	str	r5, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8011d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8011e10 <_tx_timer_initialize+0xa4>)
 8011d9c:	f105 027c 	add.w	r2, r5, #124	@ 0x7c
 8011da0:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8011da2:	3580      	adds	r5, #128	@ 0x80
 8011da4:	601d      	str	r5, [r3, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8011da6:	4b1b      	ldr	r3, [pc, #108]	@ (8011e14 <_tx_timer_initialize+0xa8>)
 8011da8:	4a1b      	ldr	r2, [pc, #108]	@ (8011e18 <_tx_timer_initialize+0xac>)
 8011daa:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8011dac:	4b1b      	ldr	r3, [pc, #108]	@ (8011e1c <_tx_timer_initialize+0xb0>)
 8011dae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8011db2:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8011db4:	4b1a      	ldr	r3, [pc, #104]	@ (8011e20 <_tx_timer_initialize+0xb4>)
 8011db6:	601c      	str	r4, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8011db8:	4b19      	ldr	r3, [pc, #100]	@ (8011e20 <_tx_timer_initialize+0xb4>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	9205      	str	r2, [sp, #20]
 8011dc0:	9204      	str	r2, [sp, #16]
 8011dc2:	9303      	str	r3, [sp, #12]
 8011dc4:	9302      	str	r3, [sp, #8]
 8011dc6:	4b15      	ldr	r3, [pc, #84]	@ (8011e1c <_tx_timer_initialize+0xb0>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	9301      	str	r3, [sp, #4]
 8011dcc:	4b11      	ldr	r3, [pc, #68]	@ (8011e14 <_tx_timer_initialize+0xa8>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	9300      	str	r3, [sp, #0]
 8011dd2:	4b14      	ldr	r3, [pc, #80]	@ (8011e24 <_tx_timer_initialize+0xb8>)
 8011dd4:	4a14      	ldr	r2, [pc, #80]	@ (8011e28 <_tx_timer_initialize+0xbc>)
 8011dd6:	4915      	ldr	r1, [pc, #84]	@ (8011e2c <_tx_timer_initialize+0xc0>)
 8011dd8:	4815      	ldr	r0, [pc, #84]	@ (8011e30 <_tx_timer_initialize+0xc4>)
 8011dda:	f7ff fca1 	bl	8011720 <_tx_thread_create>
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8011dde:	2800      	cmp	r0, #0
 8011de0:	d1ea      	bne.n	8011db8 <_tx_timer_initialize+0x4c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8011de2:	2300      	movs	r3, #0
 8011de4:	4a13      	ldr	r2, [pc, #76]	@ (8011e34 <_tx_timer_initialize+0xc8>)
 8011de6:	6013      	str	r3, [r2, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8011de8:	4a13      	ldr	r2, [pc, #76]	@ (8011e38 <_tx_timer_initialize+0xcc>)
 8011dea:	6013      	str	r3, [r2, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8011dec:	b007      	add	sp, #28
 8011dee:	bd30      	pop	{r4, r5, pc}
 8011df0:	20010f40 	.word	0x20010f40
 8011df4:	200109e0 	.word	0x200109e0
 8011df8:	20010f3c 	.word	0x20010f3c
 8011dfc:	20010eac 	.word	0x20010eac
 8011e00:	20010ea0 	.word	0x20010ea0
 8011e04:	20010ebc 	.word	0x20010ebc
 8011e08:	20010eb8 	.word	0x20010eb8
 8011e0c:	20010eb0 	.word	0x20010eb0
 8011e10:	20010eb4 	.word	0x20010eb4
 8011e14:	20010dec 	.word	0x20010dec
 8011e18:	200109e4 	.word	0x200109e4
 8011e1c:	20010de8 	.word	0x20010de8
 8011e20:	20010de4 	.word	0x20010de4
 8011e24:	4154494d 	.word	0x4154494d
 8011e28:	08011ec5 	.word	0x08011ec5
 8011e2c:	08017818 	.word	0x08017818
 8011e30:	20010df0 	.word	0x20010df0
 8011e34:	20010ea8 	.word	0x20010ea8
 8011e38:	20010ea4 	.word	0x20010ea4

08011e3c <_tx_timer_system_activate>:
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8011e3c:	6803      	ldr	r3, [r0, #0]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8011e3e:	b123      	cbz	r3, 8011e4a <_tx_timer_system_activate+0xe>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8011e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e44:	d001      	beq.n	8011e4a <_tx_timer_system_activate+0xe>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8011e46:	6982      	ldr	r2, [r0, #24]
 8011e48:	b102      	cbz	r2, 8011e4c <_tx_timer_system_activate+0x10>
                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
            }
        }
    }
}
 8011e4a:	4770      	bx	lr
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8011e4c:	2b20      	cmp	r3, #32
 8011e4e:	d815      	bhi.n	8011e7c <_tx_timer_system_activate+0x40>
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8011e50:	3b01      	subs	r3, #1
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8011e52:	4a0d      	ldr	r2, [pc, #52]	@ (8011e88 <_tx_timer_system_activate+0x4c>)
 8011e54:	6812      	ldr	r2, [r2, #0]
 8011e56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8011e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8011e8c <_tx_timer_system_activate+0x50>)
 8011e5c:	6812      	ldr	r2, [r2, #0]
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d803      	bhi.n	8011e6a <_tx_timer_system_activate+0x2e>
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8011e62:	1a9b      	subs	r3, r3, r2
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8011e64:	4a0a      	ldr	r2, [pc, #40]	@ (8011e90 <_tx_timer_system_activate+0x54>)
 8011e66:	6812      	ldr	r2, [r2, #0]
 8011e68:	4413      	add	r3, r2
                if ((*timer_list) == TX_NULL)
 8011e6a:	681a      	ldr	r2, [r3, #0]
 8011e6c:	b142      	cbz	r2, 8011e80 <_tx_timer_system_activate+0x44>
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8011e6e:	6951      	ldr	r1, [r2, #20]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8011e70:	6108      	str	r0, [r1, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8011e72:	6150      	str	r0, [r2, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8011e74:	6102      	str	r2, [r0, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8011e76:	6141      	str	r1, [r0, #20]
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8011e78:	6183      	str	r3, [r0, #24]
}
 8011e7a:	e7e6      	b.n	8011e4a <_tx_timer_system_activate+0xe>
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8011e7c:	231f      	movs	r3, #31
 8011e7e:	e7e8      	b.n	8011e52 <_tx_timer_system_activate+0x16>
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8011e80:	6100      	str	r0, [r0, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8011e82:	6140      	str	r0, [r0, #20]
                    *timer_list =  timer_ptr;
 8011e84:	6018      	str	r0, [r3, #0]
 8011e86:	e7f7      	b.n	8011e78 <_tx_timer_system_activate+0x3c>
 8011e88:	20010eb0 	.word	0x20010eb0
 8011e8c:	20010eb4 	.word	0x20010eb4
 8011e90:	20010eb8 	.word	0x20010eb8

08011e94 <_tx_timer_system_deactivate>:
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8011e94:	6983      	ldr	r3, [r0, #24]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8011e96:	b153      	cbz	r3, 8011eae <_tx_timer_system_deactivate+0x1a>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8011e98:	6902      	ldr	r2, [r0, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8011e9a:	4290      	cmp	r0, r2
 8011e9c:	d008      	beq.n	8011eb0 <_tx_timer_system_deactivate+0x1c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8011e9e:	6941      	ldr	r1, [r0, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8011ea0:	6151      	str	r1, [r2, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8011ea2:	610a      	str	r2, [r1, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8011ea4:	6819      	ldr	r1, [r3, #0]
 8011ea6:	4281      	cmp	r1, r0
 8011ea8:	d008      	beq.n	8011ebc <_tx_timer_system_deactivate+0x28>
                *(list_head) =  next_timer;
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	6183      	str	r3, [r0, #24]
    }
}
 8011eae:	4770      	bx	lr
            if (*(list_head) == timer_ptr)
 8011eb0:	681a      	ldr	r2, [r3, #0]
 8011eb2:	4282      	cmp	r2, r0
 8011eb4:	d1f9      	bne.n	8011eaa <_tx_timer_system_deactivate+0x16>
                *(list_head) =  TX_NULL;
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	601a      	str	r2, [r3, #0]
 8011eba:	e7f6      	b.n	8011eaa <_tx_timer_system_deactivate+0x16>
                next_timer -> tx_timer_internal_list_head =  list_head;
 8011ebc:	6193      	str	r3, [r2, #24]
                *(list_head) =  next_timer;
 8011ebe:	601a      	str	r2, [r3, #0]
 8011ec0:	e7f3      	b.n	8011eaa <_tx_timer_system_deactivate+0x16>
	...

08011ec4 <_tx_timer_thread_entry>:
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8011ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8011fc4 <_tx_timer_thread_entry+0x100>)
 8011ec6:	4298      	cmp	r0, r3
 8011ec8:	d000      	beq.n	8011ecc <_tx_timer_thread_entry+0x8>
 8011eca:	4770      	bx	lr
{
 8011ecc:	b570      	push	{r4, r5, r6, lr}
 8011ece:	b082      	sub	sp, #8
ULONG                       timeout_param =  ((ULONG) 0);
 8011ed0:	2500      	movs	r5, #0
 8011ed2:	e056      	b.n	8011f82 <_tx_timer_thread_entry+0xbe>
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
            if (_tx_timer_current_ptr == _tx_timer_list_end)
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8011ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8011fc8 <_tx_timer_thread_entry+0x104>)
 8011ed6:	681a      	ldr	r2, [r3, #0]
 8011ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8011fcc <_tx_timer_thread_entry+0x108>)
 8011eda:	601a      	str	r2, [r3, #0]
 8011edc:	e065      	b.n	8011faa <_tx_timer_thread_entry+0xe6>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8011ede:	9101      	str	r1, [sp, #4]
 8011ee0:	e02b      	b.n	8011f3a <_tx_timer_thread_entry+0x76>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8011ee2:	68a3      	ldr	r3, [r4, #8]
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8011ee4:	68e5      	ldr	r5, [r4, #12]

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8011ee6:	6861      	ldr	r1, [r4, #4]
 8011ee8:	6021      	str	r1, [r4, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8011eea:	2900      	cmp	r1, #0
 8011eec:	d030      	beq.n	8011f50 <_tx_timer_thread_entry+0x8c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8011eee:	f8c4 d018 	str.w	sp, [r4, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8011ef2:	6124      	str	r4, [r4, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8011ef4:	9400      	str	r4, [sp, #0]
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8011ef6:	4936      	ldr	r1, [pc, #216]	@ (8011fd0 <_tx_timer_thread_entry+0x10c>)
 8011ef8:	600c      	str	r4, [r1, #0]
 8011efa:	f382 8810 	msr	PRIMASK, r2

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8011efe:	b10b      	cbz	r3, 8011f04 <_tx_timer_thread_entry+0x40>
                {

                    (timeout_function) (timeout_param);
 8011f00:	4628      	mov	r0, r5
 8011f02:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011f04:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8011f08:	b672      	cpsid	i

                /* Lockout interrupts again.  */
                TX_DISABLE

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8011f0a:	4b31      	ldr	r3, [pc, #196]	@ (8011fd0 <_tx_timer_thread_entry+0x10c>)
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8011f10:	9b00      	ldr	r3, [sp, #0]
 8011f12:	42a3      	cmp	r3, r4
 8011f14:	d01f      	beq.n	8011f56 <_tx_timer_thread_entry+0x92>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f16:	f386 8810 	msr	PRIMASK, r6
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011f1a:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8011f1e:	b672      	cpsid	i
            while (expired_timers != TX_NULL)
 8011f20:	9c01      	ldr	r4, [sp, #4]
 8011f22:	b1ec      	cbz	r4, 8011f60 <_tx_timer_thread_entry+0x9c>
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8011f24:	6923      	ldr	r3, [r4, #16]
                reactivate_timer =  TX_NULL;
 8011f26:	2100      	movs	r1, #0
 8011f28:	9100      	str	r1, [sp, #0]
                if (current_timer == next_timer)
 8011f2a:	429c      	cmp	r4, r3
 8011f2c:	d0d7      	beq.n	8011ede <_tx_timer_thread_entry+0x1a>
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8011f2e:	6961      	ldr	r1, [r4, #20]
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8011f30:	6159      	str	r1, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8011f32:	610b      	str	r3, [r1, #16]
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8011f34:	a901      	add	r1, sp, #4
 8011f36:	6199      	str	r1, [r3, #24]
                    expired_timers =  next_timer;
 8011f38:	9301      	str	r3, [sp, #4]
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8011f3a:	6823      	ldr	r3, [r4, #0]
 8011f3c:	2b20      	cmp	r3, #32
 8011f3e:	d9d0      	bls.n	8011ee2 <_tx_timer_thread_entry+0x1e>
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8011f40:	3b20      	subs	r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8011f42:	6023      	str	r3, [r4, #0]
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8011f44:	f8c4 d018 	str.w	sp, [r4, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8011f48:	6124      	str	r4, [r4, #16]
                    reactivate_timer =  current_timer;
 8011f4a:	9400      	str	r4, [sp, #0]
                    timeout_function =  TX_NULL;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	e7d2      	b.n	8011ef6 <_tx_timer_thread_entry+0x32>
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8011f50:	2100      	movs	r1, #0
 8011f52:	61a1      	str	r1, [r4, #24]
 8011f54:	e7cf      	b.n	8011ef6 <_tx_timer_thread_entry+0x32>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8011f56:	61a2      	str	r2, [r4, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8011f58:	4620      	mov	r0, r4
 8011f5a:	f7ff ff6f 	bl	8011e3c <_tx_timer_system_activate>
 8011f5e:	e7da      	b.n	8011f16 <_tx_timer_thread_entry+0x52>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8011f60:	4b1c      	ldr	r3, [pc, #112]	@ (8011fd4 <_tx_timer_thread_entry+0x110>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d129      	bne.n	8011fbc <_tx_timer_thread_entry+0xf8>
                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8011f68:	481b      	ldr	r0, [pc, #108]	@ (8011fd8 <_tx_timer_thread_entry+0x114>)
 8011f6a:	2303      	movs	r3, #3
 8011f6c:	6303      	str	r3, [r0, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011f6e:	2301      	movs	r3, #1
 8011f70:	6383      	str	r3, [r0, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8011f72:	491a      	ldr	r1, [pc, #104]	@ (8011fdc <_tx_timer_thread_entry+0x118>)
 8011f74:	680b      	ldr	r3, [r1, #0]
 8011f76:	3301      	adds	r3, #1
 8011f78:	600b      	str	r3, [r1, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f7a:	f382 8810 	msr	PRIMASK, r2

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8011f7e:	f7ff fdf3 	bl	8011b68 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011f82:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8011f86:	b672      	cpsid	i
            expired_timers =  *_tx_timer_current_ptr;
 8011f88:	4b10      	ldr	r3, [pc, #64]	@ (8011fcc <_tx_timer_thread_entry+0x108>)
 8011f8a:	681a      	ldr	r2, [r3, #0]
 8011f8c:	6813      	ldr	r3, [r2, #0]
 8011f8e:	9301      	str	r3, [sp, #4]
            if (expired_timers != TX_NULL)
 8011f90:	b10b      	cbz	r3, 8011f96 <_tx_timer_thread_entry+0xd2>
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8011f92:	a801      	add	r0, sp, #4
 8011f94:	6198      	str	r0, [r3, #24]
            *_tx_timer_current_ptr =  TX_NULL;
 8011f96:	2300      	movs	r3, #0
 8011f98:	6013      	str	r3, [r2, #0]
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8011f9a:	4a0c      	ldr	r2, [pc, #48]	@ (8011fcc <_tx_timer_thread_entry+0x108>)
 8011f9c:	6813      	ldr	r3, [r2, #0]
 8011f9e:	3304      	adds	r3, #4
 8011fa0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8011fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8011fe0 <_tx_timer_thread_entry+0x11c>)
 8011fa4:	6812      	ldr	r2, [r2, #0]
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d094      	beq.n	8011ed4 <_tx_timer_thread_entry+0x10>
            _tx_timer_expired =  TX_FALSE;
 8011faa:	4b0a      	ldr	r3, [pc, #40]	@ (8011fd4 <_tx_timer_thread_entry+0x110>)
 8011fac:	2200      	movs	r2, #0
 8011fae:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011fb0:	f381 8810 	msr	PRIMASK, r1
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011fb4:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8011fb8:	b672      	cpsid	i
            while (expired_timers != TX_NULL)
 8011fba:	e7b1      	b.n	8011f20 <_tx_timer_thread_entry+0x5c>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011fbc:	f382 8810 	msr	PRIMASK, r2
}
 8011fc0:	e7df      	b.n	8011f82 <_tx_timer_thread_entry+0xbe>
 8011fc2:	bf00      	nop
 8011fc4:	4154494d 	.word	0x4154494d
 8011fc8:	20010eb8 	.word	0x20010eb8
 8011fcc:	20010eb0 	.word	0x20010eb0
 8011fd0:	20010ea0 	.word	0x20010ea0
 8011fd4:	20010eac 	.word	0x20010eac
 8011fd8:	20010df0 	.word	0x20010df0
 8011fdc:	20010940 	.word	0x20010940
 8011fe0:	20010eb4 	.word	0x20010eb4

08011fe4 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8011fe4:	b510      	push	{r4, lr}

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8011fe6:	4684      	mov	ip, r0
 8011fe8:	b1d0      	cbz	r0, 8012020 <_txe_byte_allocate+0x3c>
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8011fea:	481f      	ldr	r0, [pc, #124]	@ (8012068 <_txe_byte_allocate+0x84>)
 8011fec:	f8dc 4000 	ldr.w	r4, [ip]
 8011ff0:	4284      	cmp	r4, r0
 8011ff2:	d001      	beq.n	8011ff8 <_txe_byte_allocate+0x14>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8011ff4:	2002      	movs	r0, #2
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 8011ff6:	bd10      	pop	{r4, pc}
    else if (memory_ptr == TX_NULL)
 8011ff8:	b349      	cbz	r1, 801204e <_txe_byte_allocate+0x6a>
    else if (memory_size == ((ULONG) 0))
 8011ffa:	b352      	cbz	r2, 8012052 <_txe_byte_allocate+0x6e>
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8011ffc:	f8dc 001c 	ldr.w	r0, [ip, #28]
 8012000:	4290      	cmp	r0, r2
 8012002:	d328      	bcc.n	8012056 <_txe_byte_allocate+0x72>
        if (wait_option != TX_NO_WAIT)
 8012004:	b12b      	cbz	r3, 8012012 <_txe_byte_allocate+0x2e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012006:	f3ef 8405 	mrs	r4, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801200a:	4818      	ldr	r0, [pc, #96]	@ (801206c <_txe_byte_allocate+0x88>)
 801200c:	6800      	ldr	r0, [r0, #0]
 801200e:	4320      	orrs	r0, r4
 8012010:	d123      	bne.n	801205a <_txe_byte_allocate+0x76>
        TX_THREAD_GET_CURRENT(thread_ptr)
 8012012:	4817      	ldr	r0, [pc, #92]	@ (8012070 <_txe_byte_allocate+0x8c>)
 8012014:	6804      	ldr	r4, [r0, #0]
        if (thread_ptr == &_tx_timer_thread)
 8012016:	4817      	ldr	r0, [pc, #92]	@ (8012074 <_txe_byte_allocate+0x90>)
 8012018:	4284      	cmp	r4, r0
 801201a:	d020      	beq.n	801205e <_txe_byte_allocate+0x7a>
 801201c:	2000      	movs	r0, #0
 801201e:	e000      	b.n	8012022 <_txe_byte_allocate+0x3e>
        status =  TX_POOL_ERROR;
 8012020:	2002      	movs	r0, #2
    if (status == TX_SUCCESS)
 8012022:	2800      	cmp	r0, #0
 8012024:	d1e7      	bne.n	8011ff6 <_txe_byte_allocate+0x12>
 8012026:	f3ef 8e05 	mrs	lr, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801202a:	4810      	ldr	r0, [pc, #64]	@ (801206c <_txe_byte_allocate+0x88>)
 801202c:	6800      	ldr	r0, [r0, #0]
 801202e:	ea50 000e 	orrs.w	r0, r0, lr
 8012032:	d008      	beq.n	8012046 <_txe_byte_allocate+0x62>
 8012034:	f3ef 8e05 	mrs	lr, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012038:	480c      	ldr	r0, [pc, #48]	@ (801206c <_txe_byte_allocate+0x88>)
 801203a:	6800      	ldr	r0, [r0, #0]
 801203c:	ea40 000e 	orr.w	r0, r0, lr
 8012040:	f1b0 3ff0 	cmp.w	r0, #4042322160	@ 0xf0f0f0f0
 8012044:	d30d      	bcc.n	8012062 <_txe_byte_allocate+0x7e>
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size, wait_option);
 8012046:	4660      	mov	r0, ip
 8012048:	f7fe f960 	bl	801030c <_tx_byte_allocate>
 801204c:	e7d3      	b.n	8011ff6 <_txe_byte_allocate+0x12>
        status =  TX_PTR_ERROR;
 801204e:	2003      	movs	r0, #3
 8012050:	e7d1      	b.n	8011ff6 <_txe_byte_allocate+0x12>
        status =  TX_SIZE_ERROR;
 8012052:	2005      	movs	r0, #5
 8012054:	e7cf      	b.n	8011ff6 <_txe_byte_allocate+0x12>
        status =  TX_SIZE_ERROR;
 8012056:	2005      	movs	r0, #5
 8012058:	e7cd      	b.n	8011ff6 <_txe_byte_allocate+0x12>
                status =  TX_WAIT_ERROR;
 801205a:	2004      	movs	r0, #4
 801205c:	e7cb      	b.n	8011ff6 <_txe_byte_allocate+0x12>
            status =  TX_CALLER_ERROR;
 801205e:	2013      	movs	r0, #19
 8012060:	e7c9      	b.n	8011ff6 <_txe_byte_allocate+0x12>
                status =  TX_CALLER_ERROR;
 8012062:	2013      	movs	r0, #19
    return(status);
 8012064:	e7c7      	b.n	8011ff6 <_txe_byte_allocate+0x12>
 8012066:	bf00      	nop
 8012068:	42595445 	.word	0x42595445
 801206c:	20000024 	.word	0x20000024
 8012070:	200109d8 	.word	0x200109d8
 8012074:	20010df0 	.word	0x20010df0

08012078 <_txe_byte_pool_create>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8012078:	2800      	cmp	r0, #0
 801207a:	d050      	beq.n	801211e <_txe_byte_pool_create+0xa6>
{
 801207c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012080:	4689      	mov	r9, r1
 8012082:	4617      	mov	r7, r2
 8012084:	4698      	mov	r8, r3
 8012086:	4606      	mov	r6, r0
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8012088:	9b08      	ldr	r3, [sp, #32]
 801208a:	2b34      	cmp	r3, #52	@ 0x34
 801208c:	d002      	beq.n	8012094 <_txe_byte_pool_create+0x1c>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801208e:	2002      	movs	r0, #2
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
    }

    /* Return completion status.  */
    return(status);
}
 8012090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012094:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8012098:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 801209a:	4a26      	ldr	r2, [pc, #152]	@ (8012134 <_txe_byte_pool_create+0xbc>)
 801209c:	6813      	ldr	r3, [r2, #0]
 801209e:	3301      	adds	r3, #1
 80120a0:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80120a2:	f381 8810 	msr	PRIMASK, r1
        next_pool =   _tx_byte_pool_created_ptr;
 80120a6:	4b24      	ldr	r3, [pc, #144]	@ (8012138 <_txe_byte_pool_create+0xc0>)
 80120a8:	681c      	ldr	r4, [r3, #0]
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80120aa:	2000      	movs	r0, #0
 80120ac:	4d23      	ldr	r5, [pc, #140]	@ (801213c <_txe_byte_pool_create+0xc4>)
 80120ae:	682d      	ldr	r5, [r5, #0]
 80120b0:	4285      	cmp	r5, r0
 80120b2:	d904      	bls.n	80120be <_txe_byte_pool_create+0x46>
            if (pool_ptr == next_pool)
 80120b4:	42b4      	cmp	r4, r6
 80120b6:	d002      	beq.n	80120be <_txe_byte_pool_create+0x46>
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80120b8:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80120ba:	3001      	adds	r0, #1
 80120bc:	e7f6      	b.n	80120ac <_txe_byte_pool_create+0x34>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80120be:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80120c2:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 80120c4:	4a1b      	ldr	r2, [pc, #108]	@ (8012134 <_txe_byte_pool_create+0xbc>)
 80120c6:	6813      	ldr	r3, [r2, #0]
 80120c8:	3b01      	subs	r3, #1
 80120ca:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80120cc:	f381 8810 	msr	PRIMASK, r1
        _tx_thread_system_preempt_check();
 80120d0:	f7ff fc9c 	bl	8011a0c <_tx_thread_system_preempt_check>
        if (pool_ptr == next_pool)
 80120d4:	42b4      	cmp	r4, r6
 80120d6:	d024      	beq.n	8012122 <_txe_byte_pool_create+0xaa>
        else if (pool_start == TX_NULL)
 80120d8:	b32f      	cbz	r7, 8012126 <_txe_byte_pool_create+0xae>
        else if (pool_size < TX_BYTE_POOL_MIN)
 80120da:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 80120de:	d924      	bls.n	801212a <_txe_byte_pool_create+0xb2>
            TX_THREAD_GET_CURRENT(thread_ptr)
 80120e0:	4b17      	ldr	r3, [pc, #92]	@ (8012140 <_txe_byte_pool_create+0xc8>)
 80120e2:	681a      	ldr	r2, [r3, #0]
            if (thread_ptr == &_tx_timer_thread)
 80120e4:	4b17      	ldr	r3, [pc, #92]	@ (8012144 <_txe_byte_pool_create+0xcc>)
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d017      	beq.n	801211a <_txe_byte_pool_create+0xa2>
    status =  TX_SUCCESS;
 80120ea:	2000      	movs	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80120ec:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80120f0:	4b15      	ldr	r3, [pc, #84]	@ (8012148 <_txe_byte_pool_create+0xd0>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	4313      	orrs	r3, r2
 80120f6:	d007      	beq.n	8012108 <_txe_byte_pool_create+0x90>
 80120f8:	f3ef 8205 	mrs	r2, IPSR
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80120fc:	4b12      	ldr	r3, [pc, #72]	@ (8012148 <_txe_byte_pool_create+0xd0>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	4313      	orrs	r3, r2
 8012102:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8012106:	d312      	bcc.n	801212e <_txe_byte_pool_create+0xb6>
    if (status == TX_SUCCESS)
 8012108:	2800      	cmp	r0, #0
 801210a:	d1c1      	bne.n	8012090 <_txe_byte_pool_create+0x18>
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 801210c:	4643      	mov	r3, r8
 801210e:	463a      	mov	r2, r7
 8012110:	4649      	mov	r1, r9
 8012112:	4630      	mov	r0, r6
 8012114:	f7fe f9a6 	bl	8010464 <_tx_byte_pool_create>
 8012118:	e7ba      	b.n	8012090 <_txe_byte_pool_create+0x18>
                status =  TX_CALLER_ERROR;
 801211a:	2013      	movs	r0, #19
 801211c:	e7e6      	b.n	80120ec <_txe_byte_pool_create+0x74>
        status =  TX_POOL_ERROR;
 801211e:	2002      	movs	r0, #2
}
 8012120:	4770      	bx	lr
            status =  TX_POOL_ERROR;
 8012122:	2002      	movs	r0, #2
 8012124:	e7b4      	b.n	8012090 <_txe_byte_pool_create+0x18>
            status =  TX_PTR_ERROR;
 8012126:	2003      	movs	r0, #3
 8012128:	e7b2      	b.n	8012090 <_txe_byte_pool_create+0x18>
            status =  TX_SIZE_ERROR;
 801212a:	2005      	movs	r0, #5
 801212c:	e7b0      	b.n	8012090 <_txe_byte_pool_create+0x18>
                    status =  TX_CALLER_ERROR;
 801212e:	2013      	movs	r0, #19
    return(status);
 8012130:	e7ae      	b.n	8012090 <_txe_byte_pool_create+0x18>
 8012132:	bf00      	nop
 8012134:	20010940 	.word	0x20010940
 8012138:	2001090c 	.word	0x2001090c
 801213c:	20010908 	.word	0x20010908
 8012140:	200109d8 	.word	0x200109d8
 8012144:	20010df0 	.word	0x20010df0
 8012148:	20000024 	.word	0x20000024

0801214c <_txe_event_flags_create>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 801214c:	2800      	cmp	r0, #0
 801214e:	d045      	beq.n	80121dc <_txe_event_flags_create+0x90>
{
 8012150:	b570      	push	{r4, r5, r6, lr}
 8012152:	460e      	mov	r6, r1
 8012154:	4605      	mov	r5, r0
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8012156:	2a24      	cmp	r2, #36	@ 0x24
 8012158:	d001      	beq.n	801215e <_txe_event_flags_create+0x12>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801215a:	2006      	movs	r0, #6
        status =  _tx_event_flags_create(group_ptr, name_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 801215c:	bd70      	pop	{r4, r5, r6, pc}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801215e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8012162:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 8012164:	4a20      	ldr	r2, [pc, #128]	@ (80121e8 <_txe_event_flags_create+0x9c>)
 8012166:	6813      	ldr	r3, [r2, #0]
 8012168:	3301      	adds	r3, #1
 801216a:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801216c:	f381 8810 	msr	PRIMASK, r1
        next_group =   _tx_event_flags_created_ptr;
 8012170:	4b1e      	ldr	r3, [pc, #120]	@ (80121ec <_txe_event_flags_create+0xa0>)
 8012172:	681c      	ldr	r4, [r3, #0]
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8012174:	2300      	movs	r3, #0
 8012176:	4a1e      	ldr	r2, [pc, #120]	@ (80121f0 <_txe_event_flags_create+0xa4>)
 8012178:	6812      	ldr	r2, [r2, #0]
 801217a:	429a      	cmp	r2, r3
 801217c:	d904      	bls.n	8012188 <_txe_event_flags_create+0x3c>
            if (group_ptr == next_group)
 801217e:	42ac      	cmp	r4, r5
 8012180:	d002      	beq.n	8012188 <_txe_event_flags_create+0x3c>
                next_group =  next_group -> tx_event_flags_group_created_next;
 8012182:	69a4      	ldr	r4, [r4, #24]
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8012184:	3301      	adds	r3, #1
 8012186:	e7f6      	b.n	8012176 <_txe_event_flags_create+0x2a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012188:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 801218c:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 801218e:	4a16      	ldr	r2, [pc, #88]	@ (80121e8 <_txe_event_flags_create+0x9c>)
 8012190:	6813      	ldr	r3, [r2, #0]
 8012192:	3b01      	subs	r3, #1
 8012194:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012196:	f381 8810 	msr	PRIMASK, r1
        _tx_thread_system_preempt_check();
 801219a:	f7ff fc37 	bl	8011a0c <_tx_thread_system_preempt_check>
        if (group_ptr == next_group)
 801219e:	42ac      	cmp	r4, r5
 80121a0:	d01e      	beq.n	80121e0 <_txe_event_flags_create+0x94>
            TX_THREAD_GET_CURRENT(thread_ptr)
 80121a2:	4b14      	ldr	r3, [pc, #80]	@ (80121f4 <_txe_event_flags_create+0xa8>)
 80121a4:	681a      	ldr	r2, [r3, #0]
            if (thread_ptr == &_tx_timer_thread)
 80121a6:	4b14      	ldr	r3, [pc, #80]	@ (80121f8 <_txe_event_flags_create+0xac>)
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d015      	beq.n	80121d8 <_txe_event_flags_create+0x8c>
    status =  TX_SUCCESS;
 80121ac:	2000      	movs	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80121ae:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80121b2:	4b12      	ldr	r3, [pc, #72]	@ (80121fc <_txe_event_flags_create+0xb0>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	4313      	orrs	r3, r2
 80121b8:	d007      	beq.n	80121ca <_txe_event_flags_create+0x7e>
 80121ba:	f3ef 8205 	mrs	r2, IPSR
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80121be:	4b0f      	ldr	r3, [pc, #60]	@ (80121fc <_txe_event_flags_create+0xb0>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	4313      	orrs	r3, r2
 80121c4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80121c8:	d30c      	bcc.n	80121e4 <_txe_event_flags_create+0x98>
    if (status == TX_SUCCESS)
 80121ca:	2800      	cmp	r0, #0
 80121cc:	d1c6      	bne.n	801215c <_txe_event_flags_create+0x10>
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 80121ce:	4631      	mov	r1, r6
 80121d0:	4628      	mov	r0, r5
 80121d2:	f7fe fa43 	bl	801065c <_tx_event_flags_create>
 80121d6:	e7c1      	b.n	801215c <_txe_event_flags_create+0x10>
                status =  TX_CALLER_ERROR;
 80121d8:	2013      	movs	r0, #19
 80121da:	e7e8      	b.n	80121ae <_txe_event_flags_create+0x62>
        status =  TX_GROUP_ERROR;
 80121dc:	2006      	movs	r0, #6
}
 80121de:	4770      	bx	lr
            status =  TX_GROUP_ERROR;
 80121e0:	2006      	movs	r0, #6
 80121e2:	e7bb      	b.n	801215c <_txe_event_flags_create+0x10>
                    status =  TX_CALLER_ERROR;
 80121e4:	2013      	movs	r0, #19
    return(status);
 80121e6:	e7b9      	b.n	801215c <_txe_event_flags_create+0x10>
 80121e8:	20010940 	.word	0x20010940
 80121ec:	20010924 	.word	0x20010924
 80121f0:	20010920 	.word	0x20010920
 80121f4:	200109d8 	.word	0x200109d8
 80121f8:	20010df0 	.word	0x20010df0
 80121fc:	20000024 	.word	0x20000024

08012200 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8012200:	b510      	push	{r4, lr}
 8012202:	b082      	sub	sp, #8

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8012204:	4684      	mov	ip, r0
 8012206:	b1d0      	cbz	r0, 801223e <_txe_event_flags_get+0x3e>
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8012208:	4815      	ldr	r0, [pc, #84]	@ (8012260 <_txe_event_flags_get+0x60>)
 801220a:	f8dc 4000 	ldr.w	r4, [ip]
 801220e:	4284      	cmp	r4, r0
 8012210:	d002      	beq.n	8012218 <_txe_event_flags_get+0x18>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8012212:	2006      	movs	r0, #6
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 8012214:	b002      	add	sp, #8
 8012216:	bd10      	pop	{r4, pc}
    else if (actual_flags_ptr == TX_NULL)
 8012218:	b1d3      	cbz	r3, 8012250 <_txe_event_flags_get+0x50>
        if (wait_option != TX_NO_WAIT)
 801221a:	9804      	ldr	r0, [sp, #16]
 801221c:	b158      	cbz	r0, 8012236 <_txe_event_flags_get+0x36>
 801221e:	f3ef 8e05 	mrs	lr, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012222:	4810      	ldr	r0, [pc, #64]	@ (8012264 <_txe_event_flags_get+0x64>)
 8012224:	6800      	ldr	r0, [r0, #0]
 8012226:	ea50 000e 	orrs.w	r0, r0, lr
 801222a:	d113      	bne.n	8012254 <_txe_event_flags_get+0x54>
                TX_THREAD_GET_CURRENT(current_thread)
 801222c:	480e      	ldr	r0, [pc, #56]	@ (8012268 <_txe_event_flags_get+0x68>)
 801222e:	6804      	ldr	r4, [r0, #0]
                if (current_thread == &_tx_timer_thread)
 8012230:	480e      	ldr	r0, [pc, #56]	@ (801226c <_txe_event_flags_get+0x6c>)
 8012232:	4284      	cmp	r4, r0
 8012234:	d010      	beq.n	8012258 <_txe_event_flags_get+0x58>
        if (get_option > TX_AND_CLEAR)
 8012236:	2a03      	cmp	r2, #3
 8012238:	d810      	bhi.n	801225c <_txe_event_flags_get+0x5c>
 801223a:	2000      	movs	r0, #0
 801223c:	e000      	b.n	8012240 <_txe_event_flags_get+0x40>
        status =  TX_GROUP_ERROR;
 801223e:	2006      	movs	r0, #6
    if (status == TX_SUCCESS)
 8012240:	2800      	cmp	r0, #0
 8012242:	d1e7      	bne.n	8012214 <_txe_event_flags_get+0x14>
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8012244:	9804      	ldr	r0, [sp, #16]
 8012246:	9000      	str	r0, [sp, #0]
 8012248:	4660      	mov	r0, ip
 801224a:	f7fe fa31 	bl	80106b0 <_tx_event_flags_get>
 801224e:	e7e1      	b.n	8012214 <_txe_event_flags_get+0x14>
        status =  TX_PTR_ERROR;
 8012250:	2003      	movs	r0, #3
 8012252:	e7df      	b.n	8012214 <_txe_event_flags_get+0x14>
                status =  TX_WAIT_ERROR;
 8012254:	2004      	movs	r0, #4
 8012256:	e7dd      	b.n	8012214 <_txe_event_flags_get+0x14>
                    status =  TX_WAIT_ERROR;
 8012258:	2004      	movs	r0, #4
 801225a:	e7db      	b.n	8012214 <_txe_event_flags_get+0x14>
            status =  TX_OPTION_ERROR;
 801225c:	2008      	movs	r0, #8
    return(status);
 801225e:	e7d9      	b.n	8012214 <_txe_event_flags_get+0x14>
 8012260:	4456444e 	.word	0x4456444e
 8012264:	20000024 	.word	0x20000024
 8012268:	200109d8 	.word	0x200109d8
 801226c:	20010df0 	.word	0x20010df0

08012270 <_txe_event_flags_set>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8012270:	b170      	cbz	r0, 8012290 <_txe_event_flags_set+0x20>
{
 8012272:	b510      	push	{r4, lr}
 8012274:	4603      	mov	r3, r0
        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8012276:	4808      	ldr	r0, [pc, #32]	@ (8012298 <_txe_event_flags_set+0x28>)
 8012278:	681c      	ldr	r4, [r3, #0]
 801227a:	4284      	cmp	r4, r0
 801227c:	d001      	beq.n	8012282 <_txe_event_flags_set+0x12>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801227e:	2006      	movs	r0, #6
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
    }

    /* Return completion status.  */
    return(status);
}
 8012280:	bd10      	pop	{r4, pc}
        if (set_option != TX_AND)
 8012282:	2a02      	cmp	r2, #2
 8012284:	d000      	beq.n	8012288 <_txe_event_flags_set+0x18>
            if (set_option != TX_OR)
 8012286:	b92a      	cbnz	r2, 8012294 <_txe_event_flags_set+0x24>
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 8012288:	4618      	mov	r0, r3
 801228a:	f7fe fa87 	bl	801079c <_tx_event_flags_set>
 801228e:	e7f7      	b.n	8012280 <_txe_event_flags_set+0x10>
        status =  TX_GROUP_ERROR;
 8012290:	2006      	movs	r0, #6
}
 8012292:	4770      	bx	lr
                status =  TX_OPTION_ERROR;
 8012294:	2008      	movs	r0, #8
    return(status);
 8012296:	e7f3      	b.n	8012280 <_txe_event_flags_set+0x10>
 8012298:	4456444e 	.word	0x4456444e

0801229c <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 801229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801229e:	460f      	mov	r7, r1
 80122a0:	4616      	mov	r6, r2

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80122a2:	4605      	mov	r5, r0
 80122a4:	2800      	cmp	r0, #0
 80122a6:	d040      	beq.n	801232a <_txe_mutex_create+0x8e>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 80122a8:	2b34      	cmp	r3, #52	@ 0x34
 80122aa:	d001      	beq.n	80122b0 <_txe_mutex_create+0x14>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80122ac:	201c      	movs	r0, #28
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
    }

    /* Return completion status.  */
    return(status);
}
 80122ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80122b0:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80122b4:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 80122b6:	4a23      	ldr	r2, [pc, #140]	@ (8012344 <_txe_mutex_create+0xa8>)
 80122b8:	6813      	ldr	r3, [r2, #0]
 80122ba:	3301      	adds	r3, #1
 80122bc:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80122be:	f381 8810 	msr	PRIMASK, r1
        next_mutex =   _tx_mutex_created_ptr;
 80122c2:	4b21      	ldr	r3, [pc, #132]	@ (8012348 <_txe_mutex_create+0xac>)
 80122c4:	681c      	ldr	r4, [r3, #0]
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 80122c6:	2300      	movs	r3, #0
 80122c8:	e001      	b.n	80122ce <_txe_mutex_create+0x32>
                next_mutex =  next_mutex -> tx_mutex_created_next;
 80122ca:	6a24      	ldr	r4, [r4, #32]
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 80122cc:	3301      	adds	r3, #1
 80122ce:	481f      	ldr	r0, [pc, #124]	@ (801234c <_txe_mutex_create+0xb0>)
 80122d0:	6800      	ldr	r0, [r0, #0]
 80122d2:	4298      	cmp	r0, r3
 80122d4:	d901      	bls.n	80122da <_txe_mutex_create+0x3e>
            if (mutex_ptr == next_mutex)
 80122d6:	42ac      	cmp	r4, r5
 80122d8:	d1f7      	bne.n	80122ca <_txe_mutex_create+0x2e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80122da:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80122de:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 80122e0:	4a18      	ldr	r2, [pc, #96]	@ (8012344 <_txe_mutex_create+0xa8>)
 80122e2:	6813      	ldr	r3, [r2, #0]
 80122e4:	3b01      	subs	r3, #1
 80122e6:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80122e8:	f381 8810 	msr	PRIMASK, r1
        _tx_thread_system_preempt_check();
 80122ec:	f7ff fb8e 	bl	8011a0c <_tx_thread_system_preempt_check>
        if (mutex_ptr == next_mutex)
 80122f0:	42ac      	cmp	r4, r5
 80122f2:	d023      	beq.n	801233c <_txe_mutex_create+0xa0>
            if (inherit != TX_INHERIT)
 80122f4:	2e01      	cmp	r6, #1
 80122f6:	d000      	beq.n	80122fa <_txe_mutex_create+0x5e>
                if (inherit != TX_NO_INHERIT)
 80122f8:	bb16      	cbnz	r6, 8012340 <_txe_mutex_create+0xa4>
        TX_THREAD_GET_CURRENT(thread_ptr)
 80122fa:	4b15      	ldr	r3, [pc, #84]	@ (8012350 <_txe_mutex_create+0xb4>)
 80122fc:	681a      	ldr	r2, [r3, #0]
        if (thread_ptr == &_tx_timer_thread)
 80122fe:	4b15      	ldr	r3, [pc, #84]	@ (8012354 <_txe_mutex_create+0xb8>)
 8012300:	429a      	cmp	r2, r3
 8012302:	d010      	beq.n	8012326 <_txe_mutex_create+0x8a>
 8012304:	2000      	movs	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012306:	f3ef 8205 	mrs	r2, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801230a:	4b13      	ldr	r3, [pc, #76]	@ (8012358 <_txe_mutex_create+0xbc>)
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	4313      	orrs	r3, r2
 8012310:	d00c      	beq.n	801232c <_txe_mutex_create+0x90>
 8012312:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012316:	4b10      	ldr	r3, [pc, #64]	@ (8012358 <_txe_mutex_create+0xbc>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	4313      	orrs	r3, r2
 801231c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8012320:	d204      	bcs.n	801232c <_txe_mutex_create+0x90>
                status =  TX_CALLER_ERROR;
 8012322:	2013      	movs	r0, #19
    return(status);
 8012324:	e7c3      	b.n	80122ae <_txe_mutex_create+0x12>
            status =  TX_CALLER_ERROR;
 8012326:	2013      	movs	r0, #19
 8012328:	e7ed      	b.n	8012306 <_txe_mutex_create+0x6a>
        status =  TX_MUTEX_ERROR;
 801232a:	201c      	movs	r0, #28
    if (status == TX_SUCCESS)
 801232c:	2800      	cmp	r0, #0
 801232e:	d1be      	bne.n	80122ae <_txe_mutex_create+0x12>
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 8012330:	4632      	mov	r2, r6
 8012332:	4639      	mov	r1, r7
 8012334:	4628      	mov	r0, r5
 8012336:	f7fe fbfd 	bl	8010b34 <_tx_mutex_create>
 801233a:	e7b8      	b.n	80122ae <_txe_mutex_create+0x12>
            status =  TX_MUTEX_ERROR;
 801233c:	201c      	movs	r0, #28
 801233e:	e7b6      	b.n	80122ae <_txe_mutex_create+0x12>
                    status =  TX_INHERIT_ERROR;
 8012340:	201f      	movs	r0, #31
 8012342:	e7b4      	b.n	80122ae <_txe_mutex_create+0x12>
 8012344:	20010940 	.word	0x20010940
 8012348:	2001091c 	.word	0x2001091c
 801234c:	20010918 	.word	0x20010918
 8012350:	200109d8 	.word	0x200109d8
 8012354:	20010df0 	.word	0x20010df0
 8012358:	20000024 	.word	0x20000024

0801235c <_txe_mutex_delete>:
    /* Default status to success.  */
    status =  TX_SUCCESS;
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 801235c:	b1a0      	cbz	r0, 8012388 <_txe_mutex_delete+0x2c>
{
 801235e:	b508      	push	{r3, lr}
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8012360:	6801      	ldr	r1, [r0, #0]
 8012362:	4a0c      	ldr	r2, [pc, #48]	@ (8012394 <_txe_mutex_delete+0x38>)
 8012364:	4291      	cmp	r1, r2
 8012366:	d001      	beq.n	801236c <_txe_mutex_delete+0x10>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8012368:	201c      	movs	r0, #28
#endif
    }

    /* Return completion status.  */
    return(status);
}
 801236a:	bd08      	pop	{r3, pc}
 801236c:	f3ef 8105 	mrs	r1, IPSR
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012370:	4a09      	ldr	r2, [pc, #36]	@ (8012398 <_txe_mutex_delete+0x3c>)
 8012372:	6812      	ldr	r2, [r2, #0]
 8012374:	430a      	orrs	r2, r1
 8012376:	d109      	bne.n	801238c <_txe_mutex_delete+0x30>
        TX_THREAD_GET_CURRENT(thread_ptr)
 8012378:	4a08      	ldr	r2, [pc, #32]	@ (801239c <_txe_mutex_delete+0x40>)
 801237a:	6811      	ldr	r1, [r2, #0]
        if (thread_ptr == &_tx_timer_thread)
 801237c:	4a08      	ldr	r2, [pc, #32]	@ (80123a0 <_txe_mutex_delete+0x44>)
 801237e:	4291      	cmp	r1, r2
 8012380:	d006      	beq.n	8012390 <_txe_mutex_delete+0x34>
            status =  _tx_mutex_delete(mutex_ptr);
 8012382:	f7fe fc09 	bl	8010b98 <_tx_mutex_delete>
 8012386:	e7f0      	b.n	801236a <_txe_mutex_delete+0xe>
        status =  TX_MUTEX_ERROR;
 8012388:	201c      	movs	r0, #28
}
 801238a:	4770      	bx	lr
        status =  TX_CALLER_ERROR;
 801238c:	2013      	movs	r0, #19
 801238e:	e7ec      	b.n	801236a <_txe_mutex_delete+0xe>
            status =  TX_CALLER_ERROR;
 8012390:	2013      	movs	r0, #19
    return(status);
 8012392:	e7ea      	b.n	801236a <_txe_mutex_delete+0xe>
 8012394:	4d555445 	.word	0x4d555445
 8012398:	20000024 	.word	0x20000024
 801239c:	200109d8 	.word	0x200109d8
 80123a0:	20010df0 	.word	0x20010df0

080123a4 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80123a4:	b508      	push	{r3, lr}

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80123a6:	4602      	mov	r2, r0
 80123a8:	b308      	cbz	r0, 80123ee <_txe_mutex_get+0x4a>
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80123aa:	6800      	ldr	r0, [r0, #0]
 80123ac:	4b16      	ldr	r3, [pc, #88]	@ (8012408 <_txe_mutex_get+0x64>)
 80123ae:	4298      	cmp	r0, r3
 80123b0:	d001      	beq.n	80123b6 <_txe_mutex_get+0x12>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80123b2:	201c      	movs	r0, #28
        status =  _tx_mutex_get(mutex_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 80123b4:	bd08      	pop	{r3, pc}
        if (wait_option != TX_NO_WAIT)
 80123b6:	b151      	cbz	r1, 80123ce <_txe_mutex_get+0x2a>
 80123b8:	f3ef 8005 	mrs	r0, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80123bc:	4b13      	ldr	r3, [pc, #76]	@ (801240c <_txe_mutex_get+0x68>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	4303      	orrs	r3, r0
 80123c2:	d11b      	bne.n	80123fc <_txe_mutex_get+0x58>
                TX_THREAD_GET_CURRENT(current_thread)
 80123c4:	4b12      	ldr	r3, [pc, #72]	@ (8012410 <_txe_mutex_get+0x6c>)
 80123c6:	6818      	ldr	r0, [r3, #0]
                if (current_thread == &_tx_timer_thread)
 80123c8:	4b12      	ldr	r3, [pc, #72]	@ (8012414 <_txe_mutex_get+0x70>)
 80123ca:	4298      	cmp	r0, r3
 80123cc:	d018      	beq.n	8012400 <_txe_mutex_get+0x5c>
 80123ce:	f3ef 8005 	mrs	r0, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80123d2:	4b0e      	ldr	r3, [pc, #56]	@ (801240c <_txe_mutex_get+0x68>)
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	4318      	orrs	r0, r3
 80123d8:	d00a      	beq.n	80123f0 <_txe_mutex_get+0x4c>
 80123da:	f3ef 8005 	mrs	r0, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80123de:	4b0b      	ldr	r3, [pc, #44]	@ (801240c <_txe_mutex_get+0x68>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	4303      	orrs	r3, r0
 80123e4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80123e8:	d30c      	bcc.n	8012404 <_txe_mutex_get+0x60>
 80123ea:	2000      	movs	r0, #0
 80123ec:	e000      	b.n	80123f0 <_txe_mutex_get+0x4c>
        status =  TX_MUTEX_ERROR;
 80123ee:	201c      	movs	r0, #28
    if (status == TX_SUCCESS)
 80123f0:	2800      	cmp	r0, #0
 80123f2:	d1df      	bne.n	80123b4 <_txe_mutex_get+0x10>
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 80123f4:	4610      	mov	r0, r2
 80123f6:	f7fe fc29 	bl	8010c4c <_tx_mutex_get>
 80123fa:	e7db      	b.n	80123b4 <_txe_mutex_get+0x10>
                status =  TX_WAIT_ERROR;
 80123fc:	2004      	movs	r0, #4
 80123fe:	e7d9      	b.n	80123b4 <_txe_mutex_get+0x10>
                    status =  TX_WAIT_ERROR;
 8012400:	2004      	movs	r0, #4
 8012402:	e7d7      	b.n	80123b4 <_txe_mutex_get+0x10>
                status =  TX_CALLER_ERROR;
 8012404:	2013      	movs	r0, #19
    return(status);
 8012406:	e7d5      	b.n	80123b4 <_txe_mutex_get+0x10>
 8012408:	4d555445 	.word	0x4d555445
 801240c:	20000024 	.word	0x20000024
 8012410:	200109d8 	.word	0x200109d8
 8012414:	20010df0 	.word	0x20010df0

08012418 <_txe_mutex_put>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8012418:	b1c8      	cbz	r0, 801244e <_txe_mutex_put+0x36>
{
 801241a:	b508      	push	{r3, lr}
 801241c:	4603      	mov	r3, r0
        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 801241e:	6801      	ldr	r1, [r0, #0]
 8012420:	4a0d      	ldr	r2, [pc, #52]	@ (8012458 <_txe_mutex_put+0x40>)
 8012422:	4291      	cmp	r1, r2
 8012424:	d001      	beq.n	801242a <_txe_mutex_put+0x12>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8012426:	201c      	movs	r0, #28
        status =  _tx_mutex_put(mutex_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 8012428:	bd08      	pop	{r3, pc}
 801242a:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801242e:	4a0b      	ldr	r2, [pc, #44]	@ (801245c <_txe_mutex_put+0x44>)
 8012430:	6812      	ldr	r2, [r2, #0]
 8012432:	430a      	orrs	r2, r1
 8012434:	d007      	beq.n	8012446 <_txe_mutex_put+0x2e>
 8012436:	f3ef 8105 	mrs	r1, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801243a:	4a08      	ldr	r2, [pc, #32]	@ (801245c <_txe_mutex_put+0x44>)
 801243c:	6812      	ldr	r2, [r2, #0]
 801243e:	430a      	orrs	r2, r1
 8012440:	f1b2 3ff0 	cmp.w	r2, #4042322160	@ 0xf0f0f0f0
 8012444:	d305      	bcc.n	8012452 <_txe_mutex_put+0x3a>
        status =  _tx_mutex_put(mutex_ptr);
 8012446:	4618      	mov	r0, r3
 8012448:	f7fe fd38 	bl	8010ebc <_tx_mutex_put>
 801244c:	e7ec      	b.n	8012428 <_txe_mutex_put+0x10>
        status =  TX_MUTEX_ERROR;
 801244e:	201c      	movs	r0, #28
}
 8012450:	4770      	bx	lr
                status =  TX_CALLER_ERROR;
 8012452:	2013      	movs	r0, #19
    return(status);
 8012454:	e7e8      	b.n	8012428 <_txe_mutex_put+0x10>
 8012456:	bf00      	nop
 8012458:	4d555445 	.word	0x4d555445
 801245c:	20000024 	.word	0x20000024

08012460 <_txe_queue_create>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8012460:	2800      	cmp	r0, #0
 8012462:	d05a      	beq.n	801251a <_txe_queue_create+0xba>
{
 8012464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012468:	b083      	sub	sp, #12
 801246a:	4689      	mov	r9, r1
 801246c:	4617      	mov	r7, r2
 801246e:	4698      	mov	r8, r3
 8012470:	4606      	mov	r6, r0
        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 8012472:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012474:	2b38      	cmp	r3, #56	@ 0x38
 8012476:	d003      	beq.n	8012480 <_txe_queue_create+0x20>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8012478:	2009      	movs	r0, #9
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
    }

    /* Return completion status.  */
    return(status);
}
 801247a:	b003      	add	sp, #12
 801247c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012480:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8012484:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 8012486:	4a2c      	ldr	r2, [pc, #176]	@ (8012538 <_txe_queue_create+0xd8>)
 8012488:	6813      	ldr	r3, [r2, #0]
 801248a:	3301      	adds	r3, #1
 801248c:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801248e:	f381 8810 	msr	PRIMASK, r1
        next_queue =   _tx_queue_created_ptr;
 8012492:	4b2a      	ldr	r3, [pc, #168]	@ (801253c <_txe_queue_create+0xdc>)
 8012494:	681c      	ldr	r4, [r3, #0]
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8012496:	2000      	movs	r0, #0
 8012498:	4d29      	ldr	r5, [pc, #164]	@ (8012540 <_txe_queue_create+0xe0>)
 801249a:	682d      	ldr	r5, [r5, #0]
 801249c:	4285      	cmp	r5, r0
 801249e:	d904      	bls.n	80124aa <_txe_queue_create+0x4a>
            if (queue_ptr == next_queue)
 80124a0:	42b4      	cmp	r4, r6
 80124a2:	d002      	beq.n	80124aa <_txe_queue_create+0x4a>
                next_queue =  next_queue -> tx_queue_created_next;
 80124a4:	6b24      	ldr	r4, [r4, #48]	@ 0x30
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 80124a6:	3001      	adds	r0, #1
 80124a8:	e7f6      	b.n	8012498 <_txe_queue_create+0x38>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80124aa:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80124ae:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 80124b0:	4a21      	ldr	r2, [pc, #132]	@ (8012538 <_txe_queue_create+0xd8>)
 80124b2:	6813      	ldr	r3, [r2, #0]
 80124b4:	3b01      	subs	r3, #1
 80124b6:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80124b8:	f381 8810 	msr	PRIMASK, r1
        _tx_thread_system_preempt_check();
 80124bc:	f7ff faa6 	bl	8011a0c <_tx_thread_system_preempt_check>
        if (queue_ptr == next_queue)
 80124c0:	42b4      	cmp	r4, r6
 80124c2:	d02c      	beq.n	801251e <_txe_queue_create+0xbe>
        else if (queue_start == TX_NULL)
 80124c4:	f1b8 0f00 	cmp.w	r8, #0
 80124c8:	d02b      	beq.n	8012522 <_txe_queue_create+0xc2>
        else if (message_size < TX_1_ULONG)
 80124ca:	b367      	cbz	r7, 8012526 <_txe_queue_create+0xc6>
        else if (message_size > TX_16_ULONG)
 80124cc:	2f10      	cmp	r7, #16
 80124ce:	d82c      	bhi.n	801252a <_txe_queue_create+0xca>
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 80124d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80124d2:	ebb7 0f93 	cmp.w	r7, r3, lsr #2
 80124d6:	d82a      	bhi.n	801252e <_txe_queue_create+0xce>
            TX_THREAD_GET_CURRENT(thread_ptr)
 80124d8:	4b1a      	ldr	r3, [pc, #104]	@ (8012544 <_txe_queue_create+0xe4>)
 80124da:	681a      	ldr	r2, [r3, #0]
            if (thread_ptr == &_tx_timer_thread)
 80124dc:	4b1a      	ldr	r3, [pc, #104]	@ (8012548 <_txe_queue_create+0xe8>)
 80124de:	429a      	cmp	r2, r3
 80124e0:	d019      	beq.n	8012516 <_txe_queue_create+0xb6>
    status =  TX_SUCCESS;
 80124e2:	2000      	movs	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80124e4:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80124e8:	4b18      	ldr	r3, [pc, #96]	@ (801254c <_txe_queue_create+0xec>)
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	4313      	orrs	r3, r2
 80124ee:	d007      	beq.n	8012500 <_txe_queue_create+0xa0>
 80124f0:	f3ef 8205 	mrs	r2, IPSR
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80124f4:	4b15      	ldr	r3, [pc, #84]	@ (801254c <_txe_queue_create+0xec>)
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	4313      	orrs	r3, r2
 80124fa:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80124fe:	d318      	bcc.n	8012532 <_txe_queue_create+0xd2>
    if (status == TX_SUCCESS)
 8012500:	2800      	cmp	r0, #0
 8012502:	d1ba      	bne.n	801247a <_txe_queue_create+0x1a>
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 8012504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012506:	9300      	str	r3, [sp, #0]
 8012508:	4643      	mov	r3, r8
 801250a:	463a      	mov	r2, r7
 801250c:	4649      	mov	r1, r9
 801250e:	4630      	mov	r0, r6
 8012510:	f7fe fe24 	bl	801115c <_tx_queue_create>
 8012514:	e7b1      	b.n	801247a <_txe_queue_create+0x1a>
                status =  TX_CALLER_ERROR;
 8012516:	2013      	movs	r0, #19
 8012518:	e7e4      	b.n	80124e4 <_txe_queue_create+0x84>
        status =  TX_QUEUE_ERROR;
 801251a:	2009      	movs	r0, #9
}
 801251c:	4770      	bx	lr
            status =  TX_QUEUE_ERROR;
 801251e:	2009      	movs	r0, #9
 8012520:	e7ab      	b.n	801247a <_txe_queue_create+0x1a>
            status =  TX_PTR_ERROR;
 8012522:	2003      	movs	r0, #3
 8012524:	e7a9      	b.n	801247a <_txe_queue_create+0x1a>
            status =  TX_SIZE_ERROR;
 8012526:	2005      	movs	r0, #5
 8012528:	e7a7      	b.n	801247a <_txe_queue_create+0x1a>
            status =  TX_SIZE_ERROR;
 801252a:	2005      	movs	r0, #5
 801252c:	e7a5      	b.n	801247a <_txe_queue_create+0x1a>
            status =  TX_SIZE_ERROR;
 801252e:	2005      	movs	r0, #5
 8012530:	e7a3      	b.n	801247a <_txe_queue_create+0x1a>
                    status =  TX_CALLER_ERROR;
 8012532:	2013      	movs	r0, #19
    return(status);
 8012534:	e7a1      	b.n	801247a <_txe_queue_create+0x1a>
 8012536:	bf00      	nop
 8012538:	20010940 	.word	0x20010940
 801253c:	2001092c 	.word	0x2001092c
 8012540:	20010928 	.word	0x20010928
 8012544:	200109d8 	.word	0x200109d8
 8012548:	20010df0 	.word	0x20010df0
 801254c:	20000024 	.word	0x20000024

08012550 <_txe_queue_receive>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8012550:	b1c8      	cbz	r0, 8012586 <_txe_queue_receive+0x36>
{
 8012552:	b510      	push	{r4, lr}
 8012554:	4603      	mov	r3, r0
        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8012556:	4810      	ldr	r0, [pc, #64]	@ (8012598 <_txe_queue_receive+0x48>)
 8012558:	681c      	ldr	r4, [r3, #0]
 801255a:	4284      	cmp	r4, r0
 801255c:	d001      	beq.n	8012562 <_txe_queue_receive+0x12>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801255e:	2009      	movs	r0, #9
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 8012560:	bd10      	pop	{r4, pc}
    else if (destination_ptr == TX_NULL)
 8012562:	b191      	cbz	r1, 801258a <_txe_queue_receive+0x3a>
        if (wait_option != TX_NO_WAIT)
 8012564:	b15a      	cbz	r2, 801257e <_txe_queue_receive+0x2e>
 8012566:	f3ef 8c05 	mrs	ip, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801256a:	480c      	ldr	r0, [pc, #48]	@ (801259c <_txe_queue_receive+0x4c>)
 801256c:	6800      	ldr	r0, [r0, #0]
 801256e:	ea50 000c 	orrs.w	r0, r0, ip
 8012572:	d10c      	bne.n	801258e <_txe_queue_receive+0x3e>
                TX_THREAD_GET_CURRENT(current_thread)
 8012574:	480a      	ldr	r0, [pc, #40]	@ (80125a0 <_txe_queue_receive+0x50>)
 8012576:	6804      	ldr	r4, [r0, #0]
                if (current_thread == &_tx_timer_thread)
 8012578:	480a      	ldr	r0, [pc, #40]	@ (80125a4 <_txe_queue_receive+0x54>)
 801257a:	4284      	cmp	r4, r0
 801257c:	d009      	beq.n	8012592 <_txe_queue_receive+0x42>
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 801257e:	4618      	mov	r0, r3
 8012580:	f7fe fe26 	bl	80111d0 <_tx_queue_receive>
 8012584:	e7ec      	b.n	8012560 <_txe_queue_receive+0x10>
        status =  TX_QUEUE_ERROR;
 8012586:	2009      	movs	r0, #9
}
 8012588:	4770      	bx	lr
        status =  TX_PTR_ERROR;
 801258a:	2003      	movs	r0, #3
 801258c:	e7e8      	b.n	8012560 <_txe_queue_receive+0x10>
                status =  TX_WAIT_ERROR;
 801258e:	2004      	movs	r0, #4
 8012590:	e7e6      	b.n	8012560 <_txe_queue_receive+0x10>
                    status =  TX_WAIT_ERROR;
 8012592:	2004      	movs	r0, #4
    return(status);
 8012594:	e7e4      	b.n	8012560 <_txe_queue_receive+0x10>
 8012596:	bf00      	nop
 8012598:	51554555 	.word	0x51554555
 801259c:	20000024 	.word	0x20000024
 80125a0:	200109d8 	.word	0x200109d8
 80125a4:	20010df0 	.word	0x20010df0

080125a8 <_txe_queue_send>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80125a8:	b1c8      	cbz	r0, 80125de <_txe_queue_send+0x36>
{
 80125aa:	b510      	push	{r4, lr}
 80125ac:	4603      	mov	r3, r0
        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80125ae:	4810      	ldr	r0, [pc, #64]	@ (80125f0 <_txe_queue_send+0x48>)
 80125b0:	681c      	ldr	r4, [r3, #0]
 80125b2:	4284      	cmp	r4, r0
 80125b4:	d001      	beq.n	80125ba <_txe_queue_send+0x12>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80125b6:	2009      	movs	r0, #9
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 80125b8:	bd10      	pop	{r4, pc}
    else if (source_ptr == TX_NULL)
 80125ba:	b191      	cbz	r1, 80125e2 <_txe_queue_send+0x3a>
        if (wait_option != TX_NO_WAIT)
 80125bc:	b15a      	cbz	r2, 80125d6 <_txe_queue_send+0x2e>
 80125be:	f3ef 8c05 	mrs	ip, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80125c2:	480c      	ldr	r0, [pc, #48]	@ (80125f4 <_txe_queue_send+0x4c>)
 80125c4:	6800      	ldr	r0, [r0, #0]
 80125c6:	ea50 000c 	orrs.w	r0, r0, ip
 80125ca:	d10c      	bne.n	80125e6 <_txe_queue_send+0x3e>
                TX_THREAD_GET_CURRENT(current_thread)
 80125cc:	480a      	ldr	r0, [pc, #40]	@ (80125f8 <_txe_queue_send+0x50>)
 80125ce:	6804      	ldr	r4, [r0, #0]
                if (current_thread == &_tx_timer_thread)
 80125d0:	480a      	ldr	r0, [pc, #40]	@ (80125fc <_txe_queue_send+0x54>)
 80125d2:	4284      	cmp	r4, r0
 80125d4:	d009      	beq.n	80125ea <_txe_queue_send+0x42>
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7fe fede 	bl	8011398 <_tx_queue_send>
 80125dc:	e7ec      	b.n	80125b8 <_txe_queue_send+0x10>
        status =  TX_QUEUE_ERROR;
 80125de:	2009      	movs	r0, #9
}
 80125e0:	4770      	bx	lr
        status =  TX_PTR_ERROR;
 80125e2:	2003      	movs	r0, #3
 80125e4:	e7e8      	b.n	80125b8 <_txe_queue_send+0x10>
                status =  TX_WAIT_ERROR;
 80125e6:	2004      	movs	r0, #4
 80125e8:	e7e6      	b.n	80125b8 <_txe_queue_send+0x10>
                    status =  TX_WAIT_ERROR;
 80125ea:	2004      	movs	r0, #4
    return(status);
 80125ec:	e7e4      	b.n	80125b8 <_txe_queue_send+0x10>
 80125ee:	bf00      	nop
 80125f0:	51554555 	.word	0x51554555
 80125f4:	20000024 	.word	0x20000024
 80125f8:	200109d8 	.word	0x200109d8
 80125fc:	20010df0 	.word	0x20010df0

08012600 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8012600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012602:	460e      	mov	r6, r1
 8012604:	4617      	mov	r7, r2

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8012606:	4605      	mov	r5, r0
 8012608:	2800      	cmp	r0, #0
 801260a:	d03a      	beq.n	8012682 <_txe_semaphore_create+0x82>
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 801260c:	2b1c      	cmp	r3, #28
 801260e:	d001      	beq.n	8012614 <_txe_semaphore_create+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8012610:	200c      	movs	r0, #12
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
    }

    /* Return completion status.  */
    return(status);
}
 8012612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012614:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8012618:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 801261a:	4a21      	ldr	r2, [pc, #132]	@ (80126a0 <_txe_semaphore_create+0xa0>)
 801261c:	6813      	ldr	r3, [r2, #0]
 801261e:	3301      	adds	r3, #1
 8012620:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012622:	f381 8810 	msr	PRIMASK, r1
        next_semaphore =  _tx_semaphore_created_ptr;
 8012626:	4b1f      	ldr	r3, [pc, #124]	@ (80126a4 <_txe_semaphore_create+0xa4>)
 8012628:	681c      	ldr	r4, [r3, #0]
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 801262a:	2300      	movs	r3, #0
 801262c:	e001      	b.n	8012632 <_txe_semaphore_create+0x32>
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 801262e:	6964      	ldr	r4, [r4, #20]
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8012630:	3301      	adds	r3, #1
 8012632:	481d      	ldr	r0, [pc, #116]	@ (80126a8 <_txe_semaphore_create+0xa8>)
 8012634:	6800      	ldr	r0, [r0, #0]
 8012636:	4298      	cmp	r0, r3
 8012638:	d901      	bls.n	801263e <_txe_semaphore_create+0x3e>
            if (semaphore_ptr == next_semaphore)
 801263a:	42ac      	cmp	r4, r5
 801263c:	d1f7      	bne.n	801262e <_txe_semaphore_create+0x2e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801263e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8012642:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 8012644:	4a16      	ldr	r2, [pc, #88]	@ (80126a0 <_txe_semaphore_create+0xa0>)
 8012646:	6813      	ldr	r3, [r2, #0]
 8012648:	3b01      	subs	r3, #1
 801264a:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801264c:	f381 8810 	msr	PRIMASK, r1
        _tx_thread_system_preempt_check();
 8012650:	f7ff f9dc 	bl	8011a0c <_tx_thread_system_preempt_check>
        if (semaphore_ptr == next_semaphore)
 8012654:	42ac      	cmp	r4, r5
 8012656:	d01d      	beq.n	8012694 <_txe_semaphore_create+0x94>
            TX_THREAD_GET_CURRENT(thread_ptr)
 8012658:	4b14      	ldr	r3, [pc, #80]	@ (80126ac <_txe_semaphore_create+0xac>)
 801265a:	681a      	ldr	r2, [r3, #0]
            if (thread_ptr == &_tx_timer_thread)
 801265c:	4b14      	ldr	r3, [pc, #80]	@ (80126b0 <_txe_semaphore_create+0xb0>)
 801265e:	429a      	cmp	r2, r3
 8012660:	d01a      	beq.n	8012698 <_txe_semaphore_create+0x98>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012662:	f3ef 8305 	mrs	r3, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012666:	4a13      	ldr	r2, [pc, #76]	@ (80126b4 <_txe_semaphore_create+0xb4>)
 8012668:	6810      	ldr	r0, [r2, #0]
 801266a:	4318      	orrs	r0, r3
 801266c:	d00a      	beq.n	8012684 <_txe_semaphore_create+0x84>
 801266e:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012672:	4b10      	ldr	r3, [pc, #64]	@ (80126b4 <_txe_semaphore_create+0xb4>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	4313      	orrs	r3, r2
 8012678:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 801267c:	d30e      	bcc.n	801269c <_txe_semaphore_create+0x9c>
    status =  TX_SUCCESS;
 801267e:	2000      	movs	r0, #0
 8012680:	e000      	b.n	8012684 <_txe_semaphore_create+0x84>
        status =  TX_SEMAPHORE_ERROR;
 8012682:	200c      	movs	r0, #12
    if (status == TX_SUCCESS)
 8012684:	2800      	cmp	r0, #0
 8012686:	d1c4      	bne.n	8012612 <_txe_semaphore_create+0x12>
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8012688:	463a      	mov	r2, r7
 801268a:	4631      	mov	r1, r6
 801268c:	4628      	mov	r0, r5
 801268e:	f7fe ff57 	bl	8011540 <_tx_semaphore_create>
 8012692:	e7be      	b.n	8012612 <_txe_semaphore_create+0x12>
            status =  TX_SEMAPHORE_ERROR;
 8012694:	200c      	movs	r0, #12
 8012696:	e7bc      	b.n	8012612 <_txe_semaphore_create+0x12>
                status =  TX_CALLER_ERROR;
 8012698:	2013      	movs	r0, #19
 801269a:	e7ba      	b.n	8012612 <_txe_semaphore_create+0x12>
                status =  TX_CALLER_ERROR;
 801269c:	2013      	movs	r0, #19
    return(status);
 801269e:	e7b8      	b.n	8012612 <_txe_semaphore_create+0x12>
 80126a0:	20010940 	.word	0x20010940
 80126a4:	20010934 	.word	0x20010934
 80126a8:	20010930 	.word	0x20010930
 80126ac:	200109d8 	.word	0x200109d8
 80126b0:	20010df0 	.word	0x20010df0
 80126b4:	20000024 	.word	0x20000024

080126b8 <_txe_semaphore_delete>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80126b8:	b1a0      	cbz	r0, 80126e4 <_txe_semaphore_delete+0x2c>
{
 80126ba:	b508      	push	{r3, lr}
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80126bc:	6801      	ldr	r1, [r0, #0]
 80126be:	4a0c      	ldr	r2, [pc, #48]	@ (80126f0 <_txe_semaphore_delete+0x38>)
 80126c0:	4291      	cmp	r1, r2
 80126c2:	d001      	beq.n	80126c8 <_txe_semaphore_delete+0x10>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80126c4:	200c      	movs	r0, #12
        status =  _tx_semaphore_delete(semaphore_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 80126c6:	bd08      	pop	{r3, pc}
 80126c8:	f3ef 8105 	mrs	r1, IPSR
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80126cc:	4a09      	ldr	r2, [pc, #36]	@ (80126f4 <_txe_semaphore_delete+0x3c>)
 80126ce:	6812      	ldr	r2, [r2, #0]
 80126d0:	430a      	orrs	r2, r1
 80126d2:	d109      	bne.n	80126e8 <_txe_semaphore_delete+0x30>
            TX_THREAD_GET_CURRENT(thread_ptr)
 80126d4:	4a08      	ldr	r2, [pc, #32]	@ (80126f8 <_txe_semaphore_delete+0x40>)
 80126d6:	6811      	ldr	r1, [r2, #0]
            if (thread_ptr == &_tx_timer_thread)
 80126d8:	4a08      	ldr	r2, [pc, #32]	@ (80126fc <_txe_semaphore_delete+0x44>)
 80126da:	4291      	cmp	r1, r2
 80126dc:	d006      	beq.n	80126ec <_txe_semaphore_delete+0x34>
        status =  _tx_semaphore_delete(semaphore_ptr);
 80126de:	f7fe ff5d 	bl	801159c <_tx_semaphore_delete>
 80126e2:	e7f0      	b.n	80126c6 <_txe_semaphore_delete+0xe>
        status =  TX_SEMAPHORE_ERROR;
 80126e4:	200c      	movs	r0, #12
}
 80126e6:	4770      	bx	lr
            status =  TX_CALLER_ERROR;
 80126e8:	2013      	movs	r0, #19
 80126ea:	e7ec      	b.n	80126c6 <_txe_semaphore_delete+0xe>
                status =  TX_CALLER_ERROR;
 80126ec:	2013      	movs	r0, #19
    return(status);
 80126ee:	e7ea      	b.n	80126c6 <_txe_semaphore_delete+0xe>
 80126f0:	53454d41 	.word	0x53454d41
 80126f4:	20000024 	.word	0x20000024
 80126f8:	200109d8 	.word	0x200109d8
 80126fc:	20010df0 	.word	0x20010df0

08012700 <_txe_semaphore_get>:

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8012700:	b1b8      	cbz	r0, 8012732 <_txe_semaphore_get+0x32>
{
 8012702:	b508      	push	{r3, lr}
 8012704:	4603      	mov	r3, r0
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8012706:	6800      	ldr	r0, [r0, #0]
 8012708:	4a0d      	ldr	r2, [pc, #52]	@ (8012740 <_txe_semaphore_get+0x40>)
 801270a:	4290      	cmp	r0, r2
 801270c:	d001      	beq.n	8012712 <_txe_semaphore_get+0x12>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801270e:	200c      	movs	r0, #12
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
    }

    /* Return completion status.  */
    return(status);
}
 8012710:	bd08      	pop	{r3, pc}
        if (wait_option != TX_NO_WAIT)
 8012712:	b151      	cbz	r1, 801272a <_txe_semaphore_get+0x2a>
 8012714:	f3ef 8005 	mrs	r0, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012718:	4a0a      	ldr	r2, [pc, #40]	@ (8012744 <_txe_semaphore_get+0x44>)
 801271a:	6812      	ldr	r2, [r2, #0]
 801271c:	4302      	orrs	r2, r0
 801271e:	d10a      	bne.n	8012736 <_txe_semaphore_get+0x36>
                TX_THREAD_GET_CURRENT(current_thread)
 8012720:	4a09      	ldr	r2, [pc, #36]	@ (8012748 <_txe_semaphore_get+0x48>)
 8012722:	6810      	ldr	r0, [r2, #0]
                if (current_thread == &_tx_timer_thread)
 8012724:	4a09      	ldr	r2, [pc, #36]	@ (801274c <_txe_semaphore_get+0x4c>)
 8012726:	4290      	cmp	r0, r2
 8012728:	d007      	beq.n	801273a <_txe_semaphore_get+0x3a>
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 801272a:	4618      	mov	r0, r3
 801272c:	f7fe ff84 	bl	8011638 <_tx_semaphore_get>
 8012730:	e7ee      	b.n	8012710 <_txe_semaphore_get+0x10>
        status =  TX_SEMAPHORE_ERROR;
 8012732:	200c      	movs	r0, #12
}
 8012734:	4770      	bx	lr
                status =  TX_WAIT_ERROR;
 8012736:	2004      	movs	r0, #4
 8012738:	e7ea      	b.n	8012710 <_txe_semaphore_get+0x10>
                    status =  TX_WAIT_ERROR;
 801273a:	2004      	movs	r0, #4
    return(status);
 801273c:	e7e8      	b.n	8012710 <_txe_semaphore_get+0x10>
 801273e:	bf00      	nop
 8012740:	53454d41 	.word	0x53454d41
 8012744:	20000024 	.word	0x20000024
 8012748:	200109d8 	.word	0x200109d8
 801274c:	20010df0 	.word	0x20010df0

08012750 <_txe_semaphore_put>:

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8012750:	b148      	cbz	r0, 8012766 <_txe_semaphore_put+0x16>
{
 8012752:	b508      	push	{r3, lr}
        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8012754:	6801      	ldr	r1, [r0, #0]
 8012756:	4a05      	ldr	r2, [pc, #20]	@ (801276c <_txe_semaphore_put+0x1c>)
 8012758:	4291      	cmp	r1, r2
 801275a:	d001      	beq.n	8012760 <_txe_semaphore_put+0x10>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801275c:	200c      	movs	r0, #12
        status =  _tx_semaphore_put(semaphore_ptr);
    }

    /* Return completion status.  */
    return(status);
}
 801275e:	bd08      	pop	{r3, pc}
        status =  _tx_semaphore_put(semaphore_ptr);
 8012760:	f7fe ffb4 	bl	80116cc <_tx_semaphore_put>
 8012764:	e7fb      	b.n	801275e <_txe_semaphore_put+0xe>
        status =  TX_SEMAPHORE_ERROR;
 8012766:	200c      	movs	r0, #12
}
 8012768:	4770      	bx	lr
 801276a:	bf00      	nop
 801276c:	53454d41 	.word	0x53454d41

08012770 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8012770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012774:	b086      	sub	sp, #24
 8012776:	9e0e      	ldr	r6, [sp, #56]	@ 0x38

    /* Default status to success.  */
    status =  TX_SUCCESS;

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8012778:	2800      	cmp	r0, #0
 801277a:	d07d      	beq.n	8012878 <_txe_thread_create+0x108>
 801277c:	4689      	mov	r9, r1
 801277e:	4690      	mov	r8, r2
 8012780:	469a      	mov	sl, r3
 8012782:	4607      	mov	r7, r0
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8012784:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012786:	2bb0      	cmp	r3, #176	@ 0xb0
 8012788:	d003      	beq.n	8012792 <_txe_thread_create+0x22>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801278a:	200e      	movs	r0, #14
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
}
 801278c:	b006      	add	sp, #24
 801278e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012792:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8012796:	b672      	cpsid	i
        _tx_thread_preempt_disable++;
 8012798:	4a40      	ldr	r2, [pc, #256]	@ (801289c <_txe_thread_create+0x12c>)
 801279a:	6813      	ldr	r3, [r2, #0]
 801279c:	3301      	adds	r3, #1
 801279e:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127a0:	f381 8810 	msr	PRIMASK, r1
        next_thread =  _tx_thread_created_ptr;
 80127a4:	4b3e      	ldr	r3, [pc, #248]	@ (80128a0 <_txe_thread_create+0x130>)
 80127a6:	681c      	ldr	r4, [r3, #0]
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80127a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127aa:	1e5a      	subs	r2, r3, #1
 80127ac:	4432      	add	r2, r6
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80127ae:	2000      	movs	r0, #0
        break_flag =   TX_FALSE;
 80127b0:	4601      	mov	r1, r0
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80127b2:	e002      	b.n	80127ba <_txe_thread_create+0x4a>
            next_thread =  next_thread -> tx_thread_created_next;
 80127b4:	f8d4 4088 	ldr.w	r4, [r4, #136]	@ 0x88
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80127b8:	3001      	adds	r0, #1
 80127ba:	4b3a      	ldr	r3, [pc, #232]	@ (80128a4 <_txe_thread_create+0x134>)
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	4283      	cmp	r3, r0
 80127c0:	d912      	bls.n	80127e8 <_txe_thread_create+0x78>
            if (thread_ptr == next_thread)
 80127c2:	42bc      	cmp	r4, r7
 80127c4:	d010      	beq.n	80127e8 <_txe_thread_create+0x78>
            if (break_flag == TX_TRUE)
 80127c6:	b979      	cbnz	r1, 80127e8 <_txe_thread_create+0x78>
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80127c8:	68e5      	ldr	r5, [r4, #12]
 80127ca:	42b5      	cmp	r5, r6
 80127cc:	d804      	bhi.n	80127d8 <_txe_thread_create+0x68>
                if (stack_start < next_thread -> tx_thread_stack_end)
 80127ce:	6923      	ldr	r3, [r4, #16]
 80127d0:	42b3      	cmp	r3, r6
 80127d2:	d901      	bls.n	80127d8 <_txe_thread_create+0x68>
                    break_flag =  TX_TRUE;
 80127d4:	2101      	movs	r1, #1
                    stack_start =  TX_NULL;
 80127d6:	2600      	movs	r6, #0
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80127d8:	4295      	cmp	r5, r2
 80127da:	d8eb      	bhi.n	80127b4 <_txe_thread_create+0x44>
                if (stack_end < next_thread -> tx_thread_stack_end)
 80127dc:	6923      	ldr	r3, [r4, #16]
 80127de:	4293      	cmp	r3, r2
 80127e0:	d9e8      	bls.n	80127b4 <_txe_thread_create+0x44>
                    break_flag =  TX_TRUE;
 80127e2:	2101      	movs	r1, #1
                    stack_start =  TX_NULL;
 80127e4:	2600      	movs	r6, #0
 80127e6:	e7e5      	b.n	80127b4 <_txe_thread_create+0x44>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80127e8:	f3ef 8110 	mrs	r1, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80127ec:	b672      	cpsid	i
        _tx_thread_preempt_disable--;
 80127ee:	4a2b      	ldr	r2, [pc, #172]	@ (801289c <_txe_thread_create+0x12c>)
 80127f0:	6813      	ldr	r3, [r2, #0]
 80127f2:	3b01      	subs	r3, #1
 80127f4:	6013      	str	r3, [r2, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127f6:	f381 8810 	msr	PRIMASK, r1
        _tx_thread_system_preempt_check();
 80127fa:	f7ff f907 	bl	8011a0c <_tx_thread_system_preempt_check>
        if (thread_ptr == next_thread)
 80127fe:	42bc      	cmp	r4, r7
 8012800:	d03c      	beq.n	801287c <_txe_thread_create+0x10c>
        else if (stack_start == TX_NULL)
 8012802:	2e00      	cmp	r6, #0
 8012804:	d03c      	beq.n	8012880 <_txe_thread_create+0x110>
        else if (entry_function == TX_NULL)
 8012806:	f1b8 0f00 	cmp.w	r8, #0
 801280a:	d03b      	beq.n	8012884 <_txe_thread_create+0x114>
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 801280c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801280e:	2bc7      	cmp	r3, #199	@ 0xc7
 8012810:	d93a      	bls.n	8012888 <_txe_thread_create+0x118>
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8012812:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012814:	2b1f      	cmp	r3, #31
 8012816:	d839      	bhi.n	801288c <_txe_thread_create+0x11c>
        else if (preempt_threshold > priority)
 8012818:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801281a:	4293      	cmp	r3, r2
 801281c:	d338      	bcc.n	8012890 <_txe_thread_create+0x120>
        else if (auto_start > TX_AUTO_START)
 801281e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012820:	2b01      	cmp	r3, #1
 8012822:	d837      	bhi.n	8012894 <_txe_thread_create+0x124>
            TX_THREAD_GET_CURRENT(current_thread)
 8012824:	4b20      	ldr	r3, [pc, #128]	@ (80128a8 <_txe_thread_create+0x138>)
 8012826:	681a      	ldr	r2, [r3, #0]
            if (current_thread == &_tx_timer_thread)
 8012828:	4b20      	ldr	r3, [pc, #128]	@ (80128ac <_txe_thread_create+0x13c>)
 801282a:	429a      	cmp	r2, r3
 801282c:	d022      	beq.n	8012874 <_txe_thread_create+0x104>
    status =  TX_SUCCESS;
 801282e:	2000      	movs	r0, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012830:	f3ef 8205 	mrs	r2, IPSR
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012834:	4b1e      	ldr	r3, [pc, #120]	@ (80128b0 <_txe_thread_create+0x140>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	4313      	orrs	r3, r2
 801283a:	d007      	beq.n	801284c <_txe_thread_create+0xdc>
 801283c:	f3ef 8205 	mrs	r2, IPSR
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012840:	4b1b      	ldr	r3, [pc, #108]	@ (80128b0 <_txe_thread_create+0x140>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	4313      	orrs	r3, r2
 8012846:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 801284a:	d325      	bcc.n	8012898 <_txe_thread_create+0x128>
    if (status == TX_SUCCESS)
 801284c:	2800      	cmp	r0, #0
 801284e:	d19d      	bne.n	801278c <_txe_thread_create+0x1c>
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8012850:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012852:	9305      	str	r3, [sp, #20]
 8012854:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012856:	9304      	str	r3, [sp, #16]
 8012858:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801285a:	9303      	str	r3, [sp, #12]
 801285c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801285e:	9302      	str	r3, [sp, #8]
 8012860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012862:	9301      	str	r3, [sp, #4]
 8012864:	9600      	str	r6, [sp, #0]
 8012866:	4653      	mov	r3, sl
 8012868:	4642      	mov	r2, r8
 801286a:	4649      	mov	r1, r9
 801286c:	4638      	mov	r0, r7
 801286e:	f7fe ff57 	bl	8011720 <_tx_thread_create>
 8012872:	e78b      	b.n	801278c <_txe_thread_create+0x1c>
                status =  TX_CALLER_ERROR;
 8012874:	2013      	movs	r0, #19
 8012876:	e7db      	b.n	8012830 <_txe_thread_create+0xc0>
        status =  TX_THREAD_ERROR;
 8012878:	200e      	movs	r0, #14
 801287a:	e787      	b.n	801278c <_txe_thread_create+0x1c>
            status =  TX_THREAD_ERROR;
 801287c:	200e      	movs	r0, #14
 801287e:	e785      	b.n	801278c <_txe_thread_create+0x1c>
            status =  TX_PTR_ERROR;
 8012880:	2003      	movs	r0, #3
 8012882:	e783      	b.n	801278c <_txe_thread_create+0x1c>
            status =  TX_PTR_ERROR;
 8012884:	2003      	movs	r0, #3
 8012886:	e781      	b.n	801278c <_txe_thread_create+0x1c>
            status =  TX_SIZE_ERROR;
 8012888:	2005      	movs	r0, #5
 801288a:	e77f      	b.n	801278c <_txe_thread_create+0x1c>
            status =  TX_PRIORITY_ERROR;
 801288c:	200f      	movs	r0, #15
 801288e:	e77d      	b.n	801278c <_txe_thread_create+0x1c>
            status =  TX_THRESH_ERROR;
 8012890:	2018      	movs	r0, #24
 8012892:	e77b      	b.n	801278c <_txe_thread_create+0x1c>
            status =  TX_START_ERROR;
 8012894:	2010      	movs	r0, #16
 8012896:	e779      	b.n	801278c <_txe_thread_create+0x1c>
                    status =  TX_CALLER_ERROR;
 8012898:	2013      	movs	r0, #19
    return(status);
 801289a:	e777      	b.n	801278c <_txe_thread_create+0x1c>
 801289c:	20010940 	.word	0x20010940
 80128a0:	200109d0 	.word	0x200109d0
 80128a4:	200109cc 	.word	0x200109cc
 80128a8:	200109d8 	.word	0x200109d8
 80128ac:	20010df0 	.word	0x20010df0
 80128b0:	20000024 	.word	0x20000024

080128b4 <_txe_thread_info_get>:

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80128b4:	b1c0      	cbz	r0, 80128e8 <_txe_thread_info_get+0x34>
{
 80128b6:	b510      	push	{r4, lr}
 80128b8:	b086      	sub	sp, #24
 80128ba:	4684      	mov	ip, r0
        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80128bc:	480b      	ldr	r0, [pc, #44]	@ (80128ec <_txe_thread_info_get+0x38>)
 80128be:	f8dc 4000 	ldr.w	r4, [ip]
 80128c2:	4284      	cmp	r4, r0
 80128c4:	d002      	beq.n	80128cc <_txe_thread_info_get+0x18>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80128c6:	200e      	movs	r0, #14
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
}
 80128c8:	b006      	add	sp, #24
 80128ca:	bd10      	pop	{r4, pc}
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold,
 80128cc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80128ce:	9004      	str	r0, [sp, #16]
 80128d0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80128d2:	9003      	str	r0, [sp, #12]
 80128d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80128d6:	9002      	str	r0, [sp, #8]
 80128d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128da:	9001      	str	r0, [sp, #4]
 80128dc:	9808      	ldr	r0, [sp, #32]
 80128de:	9000      	str	r0, [sp, #0]
 80128e0:	4660      	mov	r0, ip
 80128e2:	f7fe ffc1 	bl	8011868 <_tx_thread_info_get>
 80128e6:	e7ef      	b.n	80128c8 <_txe_thread_info_get+0x14>
        status =  TX_THREAD_ERROR;
 80128e8:	200e      	movs	r0, #14
}
 80128ea:	4770      	bx	lr
 80128ec:	54485244 	.word	0x54485244

080128f0 <_ux_device_stack_alternate_setting_get>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 80128f0:	b510      	push	{r4, lr}
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80128f2:	4b10      	ldr	r3, [pc, #64]	@ (8012934 <_ux_device_stack_alternate_setting_get+0x44>)
 80128f4:	681c      	ldr	r4, [r3, #0]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 80128f6:	6a23      	ldr	r3, [r4, #32]
 80128f8:	2b03      	cmp	r3, #3
 80128fa:	d001      	beq.n	8012900 <_ux_device_stack_alternate_setting_get+0x10>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 80128fc:	20ff      	movs	r0, #255	@ 0xff
}
 80128fe:	bd10      	pop	{r4, pc}
        interface_ptr =  device -> ux_slave_device_first_interface;
 8012900:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
        while (interface_ptr != UX_NULL)
 8012904:	b1a3      	cbz	r3, 8012930 <_ux_device_stack_alternate_setting_get+0x40>
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8012906:	695a      	ldr	r2, [r3, #20]
 8012908:	4282      	cmp	r2, r0
 801290a:	d001      	beq.n	8012910 <_ux_device_stack_alternate_setting_get+0x20>
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 801290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801290e:	e7f9      	b.n	8012904 <_ux_device_stack_alternate_setting_get+0x14>
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8012910:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 8012914:	7e1b      	ldrb	r3, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8012916:	7013      	strb	r3, [r2, #0]
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8012918:	2101      	movs	r1, #1
 801291a:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801291e:	2303      	movs	r3, #3
 8012920:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8012924:	460a      	mov	r2, r1
 8012926:	f104 008c 	add.w	r0, r4, #140	@ 0x8c
 801292a:	f000 ff5b 	bl	80137e4 <_ux_device_stack_transfer_request>
                return(status);
 801292e:	e7e6      	b.n	80128fe <_ux_device_stack_alternate_setting_get+0xe>
    return(UX_ERROR);
 8012930:	20ff      	movs	r0, #255	@ 0xff
 8012932:	e7e4      	b.n	80128fe <_ux_device_stack_alternate_setting_get+0xe>
 8012934:	20010f44 	.word	0x20010f44

08012938 <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 8012938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801293c:	b09d      	sub	sp, #116	@ 0x74

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801293e:	4b75      	ldr	r3, [pc, #468]	@ (8012b14 <_ux_device_stack_alternate_setting_set+0x1dc>)
 8012940:	f8d3 9000 	ldr.w	r9, [r3]

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8012944:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8012948:	2b03      	cmp	r3, #3
 801294a:	f040 80da 	bne.w	8012b02 <_ux_device_stack_alternate_setting_set+0x1ca>
 801294e:	4680      	mov	r8, r0
 8012950:	468a      	mov	sl, r1
 8012952:	f109 0b20 	add.w	fp, r9, #32
        return(UX_FUNCTION_NOT_SUPPORTED);

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 8012956:	f8d9 5110 	ldr.w	r5, [r9, #272]	@ 0x110

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 801295a:	b125      	cbz	r5, 8012966 <_ux_device_stack_alternate_setting_set+0x2e>
    {

        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 801295c:	696b      	ldr	r3, [r5, #20]
 801295e:	4543      	cmp	r3, r8
 8012960:	d001      	beq.n	8012966 <_ux_device_stack_alternate_setting_set+0x2e>
            break;
        else
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8012962:	6b2d      	ldr	r5, [r5, #48]	@ 0x30
 8012964:	e7f9      	b.n	801295a <_ux_device_stack_alternate_setting_set+0x22>
        interface_ptr = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
 8012966:	b145      	cbz	r5, 801297a <_ux_device_stack_alternate_setting_set+0x42>
        return(UX_INTERFACE_HANDLE_UNKNOWN);
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 8012968:	69ab      	ldr	r3, [r5, #24]
 801296a:	4553      	cmp	r3, sl
 801296c:	f000 80cb 	beq.w	8012b06 <_ux_device_stack_alternate_setting_set+0x1ce>

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8012970:	f8d9 4128 	ldr.w	r4, [r9, #296]	@ 0x128
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8012974:	f8d9 612c 	ldr.w	r6, [r9, #300]	@ 0x12c

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 8012978:	e0ad      	b.n	8012ad6 <_ux_device_stack_alternate_setting_set+0x19e>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 801297a:	2252      	movs	r2, #82	@ 0x52
 801297c:	2107      	movs	r1, #7
 801297e:	2002      	movs	r0, #2
 8012980:	f000 ff86 	bl	8013890 <_ux_system_error_handler>
        return(UX_INTERFACE_HANDLE_UNKNOWN);
 8012984:	2052      	movs	r0, #82	@ 0x52
 8012986:	e0b9      	b.n	8012afc <_ux_device_stack_alternate_setting_set+0x1c4>
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
                            while (endpoint != UX_NULL)
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 8012988:	2126      	movs	r1, #38	@ 0x26
 801298a:	4638      	mov	r0, r7
 801298c:	f000 ff24 	bl	80137d8 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 8012990:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8012994:	463a      	mov	r2, r7
 8012996:	210f      	movs	r1, #15
 8012998:	4648      	mov	r0, r9
 801299a:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 801299c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 801299e:	2300      	movs	r3, #0
 80129a0:	603b      	str	r3, [r7, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 80129a2:	607b      	str	r3, [r7, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 80129a4:	627b      	str	r3, [r7, #36]	@ 0x24
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 80129a6:	62bb      	str	r3, [r7, #40]	@ 0x28
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 80129a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 80129aa:	4617      	mov	r7, r2
                            while (endpoint != UX_NULL)
 80129ac:	2f00      	cmp	r7, #0
 80129ae:	d1eb      	bne.n	8012988 <_ux_device_stack_alternate_setting_set+0x50>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 80129b0:	2300      	movs	r3, #0
 80129b2:	636b      	str	r3, [r5, #52]	@ 0x34

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 80129b4:	7827      	ldrb	r7, [r4, #0]
 80129b6:	1bf6      	subs	r6, r6, r7
                            device_framework +=  (ULONG) *device_framework;
 80129b8:	4427      	add	r7, r4
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 80129ba:	e004      	b.n	80129c6 <_ux_device_stack_alternate_setting_set+0x8e>
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 80129bc:	2b02      	cmp	r3, #2
 80129be:	d010      	beq.n	80129e2 <_ux_device_stack_alternate_setting_set+0xaa>
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 80129c0:	eba6 0608 	sub.w	r6, r6, r8
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 80129c4:	4447      	add	r7, r8
                            while (device_framework_length != 0)
 80129c6:	2e00      	cmp	r6, #0
 80129c8:	d050      	beq.n	8012a6c <_ux_device_stack_alternate_setting_set+0x134>
                                descriptor_length =  (ULONG) *device_framework;
 80129ca:	f897 8000 	ldrb.w	r8, [r7]
                                descriptor_type =  *(device_framework + 1);
 80129ce:	787b      	ldrb	r3, [r7, #1]
                                switch(descriptor_type)
 80129d0:	2b04      	cmp	r3, #4
 80129d2:	d049      	beq.n	8012a68 <_ux_device_stack_alternate_setting_set+0x130>
 80129d4:	2b05      	cmp	r3, #5
 80129d6:	d1f1      	bne.n	80129bc <_ux_device_stack_alternate_setting_set+0x84>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 80129d8:	f8d9 411c 	ldr.w	r4, [r9, #284]	@ 0x11c
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 80129dc:	f8d9 3120 	ldr.w	r3, [r9, #288]	@ 0x120
                                    while (endpoints_pool_number != 0)
 80129e0:	e003      	b.n	80129ea <_ux_device_stack_alternate_setting_set+0xb2>
                                    device_framework_length =  descriptor_length;
 80129e2:	4646      	mov	r6, r8
 80129e4:	e7ec      	b.n	80129c0 <_ux_device_stack_alternate_setting_set+0x88>
                                        endpoint++;
 80129e6:	3490      	adds	r4, #144	@ 0x90
                                       endpoints_pool_number--; 
 80129e8:	3b01      	subs	r3, #1
                                    while (endpoints_pool_number != 0)
 80129ea:	b33b      	cbz	r3, 8012a3c <_ux_device_stack_alternate_setting_set+0x104>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 80129ec:	6822      	ldr	r2, [r4, #0]
 80129ee:	2a00      	cmp	r2, #0
 80129f0:	d1f9      	bne.n	80129e6 <_ux_device_stack_alternate_setting_set+0xae>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 80129f2:	4623      	mov	r3, r4
 80129f4:	2201      	movs	r2, #1
 80129f6:	f843 2b0c 	str.w	r2, [r3], #12
                                    _ux_utility_descriptor_parse(device_framework,
 80129fa:	2206      	movs	r2, #6
 80129fc:	4946      	ldr	r1, [pc, #280]	@ (8012b18 <_ux_device_stack_alternate_setting_set+0x1e0>)
 80129fe:	4638      	mov	r0, r7
 8012a00:	f000 ffbc 	bl	801397c <_ux_utility_descriptor_parse>
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8012a04:	69e3      	ldr	r3, [r4, #28]
                                    max_transfer_length =
 8012a06:	f3c3 020a 	ubfx	r2, r3, #0, #11
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8012a0a:	4942      	ldr	r1, [pc, #264]	@ (8012b14 <_ux_device_stack_alternate_setting_set+0x1dc>)
 8012a0c:	6809      	ldr	r1, [r1, #0]
 8012a0e:	f8d1 119c 	ldr.w	r1, [r1, #412]	@ 0x19c
 8012a12:	2902      	cmp	r1, #2
 8012a14:	d014      	beq.n	8012a40 <_ux_device_stack_alternate_setting_set+0x108>
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8012a16:	6522      	str	r2, [r4, #80]	@ 0x50
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8012a18:	63a4      	str	r4, [r4, #56]	@ 0x38
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8012a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8012a1e:	67e3      	str	r3, [r4, #124]	@ 0x7c
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 8012a20:	62a5      	str	r5, [r4, #40]	@ 0x28
                                    endpoint -> ux_slave_endpoint_device =  device;
 8012a22:	f8c4 b02c 	str.w	fp, [r4, #44]	@ 0x2c
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8012a26:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8012a2a:	4622      	mov	r2, r4
 8012a2c:	210e      	movs	r1, #14
 8012a2e:	4648      	mov	r0, r9
 8012a30:	4798      	blx	r3
                                    if (status != UX_SUCCESS)
 8012a32:	b980      	cbnz	r0, 8012a56 <_ux_device_stack_alternate_setting_set+0x11e>
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 8012a34:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8012a36:	b98b      	cbnz	r3, 8012a5c <_ux_device_stack_alternate_setting_set+0x124>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 8012a38:	636c      	str	r4, [r5, #52]	@ 0x34
 8012a3a:	e7c1      	b.n	80129c0 <_ux_device_stack_alternate_setting_set+0x88>
                                        return(UX_MEMORY_INSUFFICIENT);
 8012a3c:	2012      	movs	r0, #18
 8012a3e:	e05d      	b.n	8012afc <_ux_device_stack_alternate_setting_set+0x1c4>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 8012a40:	69a1      	ldr	r1, [r4, #24]
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8012a42:	f011 0f01 	tst.w	r1, #1
 8012a46:	d0e6      	beq.n	8012a16 <_ux_device_stack_alternate_setting_set+0xde>
                                        if (n_trans)
 8012a48:	f413 53c0 	ands.w	r3, r3, #6144	@ 0x1800
 8012a4c:	d0e3      	beq.n	8012a16 <_ux_device_stack_alternate_setting_set+0xde>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8012a4e:	0adb      	lsrs	r3, r3, #11
                                            max_transfer_length *= n_trans;
 8012a50:	fb03 2202 	mla	r2, r3, r2, r2
 8012a54:	e7df      	b.n	8012a16 <_ux_device_stack_alternate_setting_set+0xde>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 8012a56:	2300      	movs	r3, #0
 8012a58:	6023      	str	r3, [r4, #0]
                                        return(status);
 8012a5a:	e04f      	b.n	8012afc <_ux_device_stack_alternate_setting_set+0x1c4>
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8012a5c:	461a      	mov	r2, r3
 8012a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d1fb      	bne.n	8012a5c <_ux_device_stack_alternate_setting_set+0x124>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 8012a64:	6254      	str	r4, [r2, #36]	@ 0x24
 8012a66:	e7ab      	b.n	80129c0 <_ux_device_stack_alternate_setting_set+0x88>
                                    device_framework_length =  descriptor_length;
 8012a68:	4646      	mov	r6, r8
 8012a6a:	e7a9      	b.n	80129c0 <_ux_device_stack_alternate_setting_set+0x88>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 8012a6c:	2224      	movs	r2, #36	@ 0x24
 8012a6e:	a90b      	add	r1, sp, #44	@ 0x2c
 8012a70:	f105 000c 	add.w	r0, r5, #12
 8012a74:	f001 f85f 	bl	8013b36 <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8012a78:	4b26      	ldr	r3, [pc, #152]	@ (8012b14 <_ux_device_stack_alternate_setting_set+0x1dc>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	696a      	ldr	r2, [r5, #20]
 8012a7e:	3256      	adds	r2, #86	@ 0x56
 8012a80:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012a84:	685b      	ldr	r3, [r3, #4]

                            /* Check if class driver is available. */
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d03f      	beq.n	8012b0a <_ux_device_stack_alternate_setting_set+0x1d2>
 8012a8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012a8c:	2a00      	cmp	r2, #0
 8012a8e:	d03e      	beq.n	8012b0e <_ux_device_stack_alternate_setting_set+0x1d6>
                                return (UX_NO_CLASS_MATCH);
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 8012a90:	2206      	movs	r2, #6
 8012a92:	9200      	str	r2, [sp, #0]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 8012a94:	9502      	str	r5, [sp, #8]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8012a96:	9308      	str	r3, [sp, #32]
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 8012a98:	f8c3 5110 	str.w	r5, [r3, #272]	@ 0x110
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8012a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a9e:	4668      	mov	r0, sp
 8012aa0:	4798      	blx	r3

                            /* We are done here.  */
                            return(status); 
 8012aa2:	e02b      	b.n	8012afc <_ux_device_stack_alternate_setting_set+0x1c4>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 8012aa4:	1bf6      	subs	r6, r6, r7

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 8012aa6:	443c      	add	r4, r7
                while (device_framework_length != 0)
 8012aa8:	b18e      	cbz	r6, 8012ace <_ux_device_stack_alternate_setting_set+0x196>
                    descriptor_length =  (ULONG) *device_framework;
 8012aaa:	7827      	ldrb	r7, [r4, #0]
                    descriptor_type = *(device_framework + 1); 
 8012aac:	7863      	ldrb	r3, [r4, #1]
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8012aae:	2b04      	cmp	r3, #4
 8012ab0:	d1f8      	bne.n	8012aa4 <_ux_device_stack_alternate_setting_set+0x16c>
                        _ux_utility_descriptor_parse(device_framework,
 8012ab2:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012ab4:	2209      	movs	r2, #9
 8012ab6:	4919      	ldr	r1, [pc, #100]	@ (8012b1c <_ux_device_stack_alternate_setting_set+0x1e4>)
 8012ab8:	4620      	mov	r0, r4
 8012aba:	f000 ff5f 	bl	801397c <_ux_utility_descriptor_parse>
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8012abe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012ac0:	4543      	cmp	r3, r8
 8012ac2:	d1ef      	bne.n	8012aa4 <_ux_device_stack_alternate_setting_set+0x16c>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 8012ac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8012ac6:	4553      	cmp	r3, sl
 8012ac8:	d1ec      	bne.n	8012aa4 <_ux_device_stack_alternate_setting_set+0x16c>
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8012aca:	6b6f      	ldr	r7, [r5, #52]	@ 0x34
                            while (endpoint != UX_NULL)
 8012acc:	e76e      	b.n	80129ac <_ux_device_stack_alternate_setting_set+0x74>
        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
    }

    /* Return error completion.  */
    return(UX_ERROR);
 8012ace:	20ff      	movs	r0, #255	@ 0xff
 8012ad0:	e014      	b.n	8012afc <_ux_device_stack_alternate_setting_set+0x1c4>
        device_framework_length -=  descriptor_length;
 8012ad2:	1bf6      	subs	r6, r6, r7
        device_framework +=  descriptor_length;
 8012ad4:	443c      	add	r4, r7
    while (device_framework_length != 0)
 8012ad6:	b186      	cbz	r6, 8012afa <_ux_device_stack_alternate_setting_set+0x1c2>
        descriptor_length =  (ULONG) *device_framework;
 8012ad8:	7827      	ldrb	r7, [r4, #0]
        descriptor_type =*  (device_framework + 1);
 8012ada:	7863      	ldrb	r3, [r4, #1]
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8012adc:	2b02      	cmp	r3, #2
 8012ade:	d1f8      	bne.n	8012ad2 <_ux_device_stack_alternate_setting_set+0x19a>
            _ux_utility_descriptor_parse(device_framework,
 8012ae0:	ab14      	add	r3, sp, #80	@ 0x50
 8012ae2:	2208      	movs	r2, #8
 8012ae4:	490e      	ldr	r1, [pc, #56]	@ (8012b20 <_ux_device_stack_alternate_setting_set+0x1e8>)
 8012ae6:	4620      	mov	r0, r4
 8012ae8:	f000 ff48 	bl	801397c <_ux_utility_descriptor_parse>
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 8012aec:	f8d9 30ec 	ldr.w	r3, [r9, #236]	@ 0xec
 8012af0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d1ed      	bne.n	8012ad2 <_ux_device_stack_alternate_setting_set+0x19a>
                device_framework_length = configuration_descriptor.wTotalLength;
 8012af6:	9e16      	ldr	r6, [sp, #88]	@ 0x58
                while (device_framework_length != 0)
 8012af8:	e7d6      	b.n	8012aa8 <_ux_device_stack_alternate_setting_set+0x170>
    return(UX_ERROR);
 8012afa:	20ff      	movs	r0, #255	@ 0xff
#endif
}
 8012afc:	b01d      	add	sp, #116	@ 0x74
 8012afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(UX_FUNCTION_NOT_SUPPORTED);
 8012b02:	2054      	movs	r0, #84	@ 0x54
 8012b04:	e7fa      	b.n	8012afc <_ux_device_stack_alternate_setting_set+0x1c4>
        return(UX_SUCCESS);       
 8012b06:	2000      	movs	r0, #0
 8012b08:	e7f8      	b.n	8012afc <_ux_device_stack_alternate_setting_set+0x1c4>
                                return (UX_NO_CLASS_MATCH);
 8012b0a:	2057      	movs	r0, #87	@ 0x57
 8012b0c:	e7f6      	b.n	8012afc <_ux_device_stack_alternate_setting_set+0x1c4>
 8012b0e:	2057      	movs	r0, #87	@ 0x57
 8012b10:	e7f4      	b.n	8012afc <_ux_device_stack_alternate_setting_set+0x1c4>
 8012b12:	bf00      	nop
 8012b14:	20010f44 	.word	0x20010f44
 8012b18:	20000068 	.word	0x20000068
 8012b1c:	20000044 	.word	0x20000044
 8012b20:	20000050 	.word	0x20000050

08012b24 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 8012b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b28:	b08c      	sub	sp, #48	@ 0x30
 8012b2a:	4607      	mov	r7, r0
 8012b2c:	460c      	mov	r4, r1
 8012b2e:	4616      	mov	r6, r2
 8012b30:	4698      	mov	r8, r3

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 8012b32:	2500      	movs	r5, #0
 8012b34:	9500      	str	r5, [sp, #0]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 8012b36:	223f      	movs	r2, #63	@ 0x3f
 8012b38:	4669      	mov	r1, sp
 8012b3a:	f001 f8f8 	bl	8013d2e <_ux_utility_string_length_check>
    if (status)
 8012b3e:	b930      	cbnz	r0, 8012b4e <_ux_device_stack_class_register+0x2a>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8012b40:	4b11      	ldr	r3, [pc, #68]	@ (8012b88 <_ux_device_stack_class_register+0x64>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	f8d3 5158 	ldr.w	r5, [r3, #344]	@ 0x158
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 8012b48:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8012b4a:	b11b      	cbz	r3, 8012b54 <_ux_device_stack_class_register+0x30>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 8012b4c:	2012      	movs	r0, #18
}
 8012b4e:	b00c      	add	sp, #48	@ 0x30
 8012b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 8012b54:	9a00      	ldr	r2, [sp, #0]
 8012b56:	3201      	adds	r2, #1
 8012b58:	4639      	mov	r1, r7
 8012b5a:	4628      	mov	r0, r5
 8012b5c:	f000 ffeb 	bl	8013b36 <_ux_utility_memory_copy>
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 8012b60:	646c      	str	r4, [r5, #68]	@ 0x44
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 8012b62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012b64:	f8c5 3104 	str.w	r3, [r5, #260]	@ 0x104
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 8012b68:	f8c5 610c 	str.w	r6, [r5, #268]	@ 0x10c
            class_inst -> ux_slave_class_interface_number =  interface_number;
 8012b6c:	f8c5 8108 	str.w	r8, [r5, #264]	@ 0x108
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 8012b70:	2305      	movs	r3, #5
 8012b72:	9301      	str	r3, [sp, #4]
            command.ux_slave_class_command_parameter  =  parameter;
 8012b74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012b76:	930a      	str	r3, [sp, #40]	@ 0x28
            command.ux_slave_class_command_class_ptr  =  class_inst;
 8012b78:	9509      	str	r5, [sp, #36]	@ 0x24
            status = class_entry_function(&command);
 8012b7a:	a801      	add	r0, sp, #4
 8012b7c:	47a0      	blx	r4
            if (status != UX_SUCCESS)
 8012b7e:	2800      	cmp	r0, #0
 8012b80:	d1e5      	bne.n	8012b4e <_ux_device_stack_class_register+0x2a>
            class_inst -> ux_slave_class_status = UX_USED;
 8012b82:	2301      	movs	r3, #1
 8012b84:	642b      	str	r3, [r5, #64]	@ 0x40
            return(UX_SUCCESS);
 8012b86:	e7e2      	b.n	8012b4e <_ux_device_stack_class_register+0x2a>
 8012b88:	20010f44 	.word	0x20010f44

08012b8c <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8012b8c:	b538      	push	{r3, r4, r5, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8012b8e:	4b18      	ldr	r3, [pc, #96]	@ (8012bf0 <_ux_device_stack_clear_feature+0x64>)
 8012b90:	681d      	ldr	r5, [r3, #0]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8012b92:	f010 0003 	ands.w	r0, r0, #3
 8012b96:	d00a      	beq.n	8012bae <_ux_device_stack_clear_feature+0x22>
 8012b98:	4694      	mov	ip, r2
 8012b9a:	f105 025c 	add.w	r2, r5, #92	@ 0x5c
 8012b9e:	2802      	cmp	r0, #2
 8012ba0:	d00e      	beq.n	8012bc0 <_ux_device_stack_clear_feature+0x34>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8012ba2:	69ab      	ldr	r3, [r5, #24]
 8012ba4:	2114      	movs	r1, #20
 8012ba6:	4628      	mov	r0, r5
 8012ba8:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8012baa:	2000      	movs	r0, #0
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
}
 8012bac:	bd38      	pop	{r3, r4, r5, pc}
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8012bae:	2901      	cmp	r1, #1
 8012bb0:	d1fc      	bne.n	8012bac <_ux_device_stack_clear_feature+0x20>
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8012bb2:	f8d5 31a4 	ldr.w	r3, [r5, #420]	@ 0x1a4
 8012bb6:	b1c3      	cbz	r3, 8012bea <_ux_device_stack_clear_feature+0x5e>
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	f8c5 31a8 	str.w	r3, [r5, #424]	@ 0x1a8
 8012bbe:	e7f5      	b.n	8012bac <_ux_device_stack_clear_feature+0x20>
        interface_ptr =  device -> ux_slave_device_first_interface;
 8012bc0:	f8d5 1110 	ldr.w	r1, [r5, #272]	@ 0x110
        while (interface_ptr != UX_NULL)
 8012bc4:	2900      	cmp	r1, #0
 8012bc6:	d0ec      	beq.n	8012ba2 <_ux_device_stack_clear_feature+0x16>
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 8012bc8:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
            while (endpoint_target != UX_NULL)
 8012bca:	b164      	cbz	r4, 8012be6 <_ux_device_stack_clear_feature+0x5a>
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8012bcc:	6963      	ldr	r3, [r4, #20]
 8012bce:	4563      	cmp	r3, ip
 8012bd0:	d001      	beq.n	8012bd6 <_ux_device_stack_clear_feature+0x4a>
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8012bd2:	6a64      	ldr	r4, [r4, #36]	@ 0x24
 8012bd4:	e7f9      	b.n	8012bca <_ux_device_stack_clear_feature+0x3e>
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 8012bd6:	69ab      	ldr	r3, [r5, #24]
 8012bd8:	4622      	mov	r2, r4
 8012bda:	2110      	movs	r1, #16
 8012bdc:	4628      	mov	r0, r5
 8012bde:	4798      	blx	r3
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8012be0:	2000      	movs	r0, #0
 8012be2:	6060      	str	r0, [r4, #4]
                    return(UX_SUCCESS);
 8012be4:	e7e2      	b.n	8012bac <_ux_device_stack_clear_feature+0x20>
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8012be6:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8012be8:	e7ec      	b.n	8012bc4 <_ux_device_stack_clear_feature+0x38>
                return (UX_FUNCTION_NOT_SUPPORTED);
 8012bea:	2054      	movs	r0, #84	@ 0x54
 8012bec:	e7de      	b.n	8012bac <_ux_device_stack_clear_feature+0x20>
 8012bee:	bf00      	nop
 8012bf0:	20010f44 	.word	0x20010f44

08012bf4 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 8012bf4:	b508      	push	{r3, lr}
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8012bf6:	4b08      	ldr	r3, [pc, #32]	@ (8012c18 <_ux_device_stack_configuration_get+0x24>)
 8012bf8:	6818      	ldr	r0, [r3, #0]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 8012bfa:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
                (UCHAR) device -> ux_slave_device_configuration_selected;
 8012bfe:	f890 20ec 	ldrb.w	r2, [r0, #236]	@ 0xec
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 8012c02:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8012c04:	2303      	movs	r3, #3
 8012c06:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8012c0a:	2201      	movs	r2, #1
 8012c0c:	4611      	mov	r1, r2
 8012c0e:	308c      	adds	r0, #140	@ 0x8c
 8012c10:	f000 fde8 	bl	80137e4 <_ux_device_stack_transfer_request>

    /* Return the function status.  */
    return(status);
}
 8012c14:	bd08      	pop	{r3, pc}
 8012c16:	bf00      	nop
 8012c18:	20010f44 	.word	0x20010f44

08012c1c <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 8012c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c20:	b09f      	sub	sp, #124	@ 0x7c
 8012c22:	4680      	mov	r8, r0
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 8012c24:	2220      	movs	r2, #32
 8012c26:	2100      	movs	r1, #0
 8012c28:	a816      	add	r0, sp, #88	@ 0x58
 8012c2a:	f002 ffbd 	bl	8015ba8 <memset>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8012c2e:	4b68      	ldr	r3, [pc, #416]	@ (8012dd0 <_ux_device_stack_configuration_set+0x1b4>)
 8012c30:	681e      	ldr	r6, [r3, #0]
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 8012c32:	f8d6 30ec 	ldr.w	r3, [r6, #236]	@ 0xec
 8012c36:	4543      	cmp	r3, r8
 8012c38:	f000 80c5 	beq.w	8012dc6 <_ux_device_stack_configuration_set+0x1aa>
        return(UX_SUCCESS);

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 8012c3c:	f8d6 4128 	ldr.w	r4, [r6, #296]	@ 0x128
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8012c40:	f8d6 512c 	ldr.w	r5, [r6, #300]	@ 0x12c

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 8012c44:	e001      	b.n	8012c4a <_ux_device_stack_configuration_set+0x2e>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 8012c46:	1bed      	subs	r5, r5, r7
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 8012c48:	443c      	add	r4, r7
    while (device_framework_length != 0)
 8012c4a:	b165      	cbz	r5, 8012c66 <_ux_device_stack_configuration_set+0x4a>
        descriptor_length =  (ULONG) *device_framework;
 8012c4c:	7827      	ldrb	r7, [r4, #0]
        descriptor_type =  *(device_framework + 1);
 8012c4e:	7863      	ldrb	r3, [r4, #1]
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8012c50:	2b02      	cmp	r3, #2
 8012c52:	d1f8      	bne.n	8012c46 <_ux_device_stack_configuration_set+0x2a>
            _ux_utility_descriptor_parse(device_framework,
 8012c54:	ab16      	add	r3, sp, #88	@ 0x58
 8012c56:	2208      	movs	r2, #8
 8012c58:	495e      	ldr	r1, [pc, #376]	@ (8012dd4 <_ux_device_stack_configuration_set+0x1b8>)
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	f000 fe8e 	bl	801397c <_ux_utility_descriptor_parse>
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 8012c60:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012c62:	4543      	cmp	r3, r8
 8012c64:	d1ef      	bne.n	8012c46 <_ux_device_stack_configuration_set+0x2a>
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 8012c66:	b91d      	cbnz	r5, 8012c70 <_ux_device_stack_configuration_set+0x54>
 8012c68:	f1b8 0f00 	cmp.w	r8, #0
 8012c6c:	f040 80ad 	bne.w	8012dca <_ux_device_stack_configuration_set+0x1ae>
        return(UX_ERROR);

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 8012c70:	f8d6 30ec 	ldr.w	r3, [r6, #236]	@ 0xec
 8012c74:	b19b      	cbz	r3, 8012c9e <_ux_device_stack_configuration_set+0x82>
    {

        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 8012c76:	f8d6 5110 	ldr.w	r5, [r6, #272]	@ 0x110

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 8012c7a:	e004      	b.n	8012c86 <_ux_device_stack_configuration_set+0x6a>
                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8012c7c:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 8012c7e:	4628      	mov	r0, r5
 8012c80:	f000 fc72 	bl	8013568 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 8012c84:	463d      	mov	r5, r7
        while (interface_ptr != UX_NULL)
 8012c86:	b155      	cbz	r5, 8012c9e <_ux_device_stack_configuration_set+0x82>
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8012c88:	2303      	movs	r3, #3
 8012c8a:	9302      	str	r3, [sp, #8]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 8012c8c:	9504      	str	r5, [sp, #16]
            class_inst =  interface_ptr -> ux_slave_interface_class;
 8012c8e:	686b      	ldr	r3, [r5, #4]
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 8012c90:	930a      	str	r3, [sp, #40]	@ 0x28
            if (class_inst != UX_NULL)
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d0f2      	beq.n	8012c7c <_ux_device_stack_configuration_set+0x60>
                class_inst -> ux_slave_class_entry_function(&class_command);
 8012c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c98:	a802      	add	r0, sp, #8
 8012c9a:	4798      	blx	r3
 8012c9c:	e7ee      	b.n	8012c7c <_ux_device_stack_configuration_set+0x60>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	f8c6 30ec 	str.w	r3, [r6, #236]	@ 0xec

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8012ca4:	2201      	movs	r2, #1
 8012ca6:	6232      	str	r2, [r6, #32]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 8012ca8:	69b3      	ldr	r3, [r6, #24]
 8012caa:	2113      	movs	r1, #19
 8012cac:	4630      	mov	r0, r6
 8012cae:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 8012cb0:	f1b8 0f00 	cmp.w	r8, #0
 8012cb4:	d104      	bne.n	8012cc0 <_ux_device_stack_configuration_set+0xa4>
        return(UX_SUCCESS);
 8012cb6:	4645      	mov	r5, r8
    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);

    /* Configuration mounted. */
    return(UX_SUCCESS);
}
 8012cb8:	4628      	mov	r0, r5
 8012cba:	b01f      	add	sp, #124	@ 0x7c
 8012cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    device -> ux_slave_device_configuration_selected =  configuration_value;
 8012cc0:	f8c6 80ec 	str.w	r8, [r6, #236]	@ 0xec
    _ux_utility_descriptor_parse(device_framework,
 8012cc4:	f106 03f0 	add.w	r3, r6, #240	@ 0xf0
 8012cc8:	2208      	movs	r2, #8
 8012cca:	4942      	ldr	r1, [pc, #264]	@ (8012dd4 <_ux_device_stack_configuration_set+0x1b8>)
 8012ccc:	4620      	mov	r0, r4
 8012cce:	f000 fe55 	bl	801397c <_ux_utility_descriptor_parse>
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8012cd2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012cd4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8012cd8:	d010      	beq.n	8012cfc <_ux_device_stack_configuration_set+0xe0>
 8012cda:	2102      	movs	r1, #2
 8012cdc:	4a3c      	ldr	r2, [pc, #240]	@ (8012dd0 <_ux_device_stack_configuration_set+0x1b4>)
 8012cde:	6812      	ldr	r2, [r2, #0]
 8012ce0:	f8c2 11a0 	str.w	r1, [r2, #416]	@ 0x1a0
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 8012ce4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8012ce8:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
    device_framework_length =  configuration_descriptor.wTotalLength;
 8012cec:	9d18      	ldr	r5, [sp, #96]	@ 0x60
ULONG                           iad_number_interfaces =  0;
 8012cee:	f04f 0900 	mov.w	r9, #0
ULONG                           iad_first_interface =  0;
 8012cf2:	46cb      	mov	fp, r9
    iad_flag =  UX_FALSE;
 8012cf4:	46ca      	mov	sl, r9
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 8012cf6:	f8cd 9004 	str.w	r9, [sp, #4]
    while (device_framework_length != 0)
 8012cfa:	e005      	b.n	8012d08 <_ux_device_stack_configuration_set+0xec>
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8012cfc:	2101      	movs	r1, #1
 8012cfe:	e7ed      	b.n	8012cdc <_ux_device_stack_configuration_set+0xc0>
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8012d00:	2b04      	cmp	r3, #4
 8012d02:	d00e      	beq.n	8012d22 <_ux_device_stack_configuration_set+0x106>
        device_framework_length -=  descriptor_length;
 8012d04:	1bed      	subs	r5, r5, r7
        device_framework +=  descriptor_length;
 8012d06:	443c      	add	r4, r7
    while (device_framework_length != 0)
 8012d08:	2d00      	cmp	r5, #0
 8012d0a:	d055      	beq.n	8012db8 <_ux_device_stack_configuration_set+0x19c>
        descriptor_length =  (ULONG) *device_framework;
 8012d0c:	7827      	ldrb	r7, [r4, #0]
        descriptor_type =  *(device_framework + 1);
 8012d0e:	7863      	ldrb	r3, [r4, #1]
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 8012d10:	2b0b      	cmp	r3, #11
 8012d12:	d1f5      	bne.n	8012d00 <_ux_device_stack_configuration_set+0xe4>
            iad_first_interface = (ULONG)  *(device_framework + 2);
 8012d14:	f894 b002 	ldrb.w	fp, [r4, #2]
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 8012d18:	f894 9003 	ldrb.w	r9, [r4, #3]
            iad_flag = UX_TRUE;
 8012d1c:	f04f 0a01 	mov.w	sl, #1
 8012d20:	e7ee      	b.n	8012d00 <_ux_device_stack_configuration_set+0xe4>
            _ux_utility_descriptor_parse(device_framework,
 8012d22:	ab0d      	add	r3, sp, #52	@ 0x34
 8012d24:	2209      	movs	r2, #9
 8012d26:	492c      	ldr	r1, [pc, #176]	@ (8012dd8 <_ux_device_stack_configuration_set+0x1bc>)
 8012d28:	4620      	mov	r0, r4
 8012d2a:	f000 fe27 	bl	801397c <_ux_utility_descriptor_parse>
            if (interface_descriptor.bAlternateSetting == 0)
 8012d2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d1e7      	bne.n	8012d04 <_ux_device_stack_configuration_set+0xe8>
                if (iad_flag == UX_TRUE)
 8012d34:	f1ba 0f01 	cmp.w	sl, #1
 8012d38:	d00c      	beq.n	8012d54 <_ux_device_stack_configuration_set+0x138>
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8012d3a:	4b25      	ldr	r3, [pc, #148]	@ (8012dd0 <_ux_device_stack_configuration_set+0x1b4>)
 8012d3c:	681a      	ldr	r2, [r3, #0]
 8012d3e:	f8d2 3158 	ldr.w	r3, [r2, #344]	@ 0x158
                        if (class_inst -> ux_slave_class_status == UX_USED)
 8012d42:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8012d44:	2901      	cmp	r1, #1
 8012d46:	d029      	beq.n	8012d9c <_ux_device_stack_configuration_set+0x180>
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 8012d48:	2200      	movs	r2, #0
 8012d4a:	4629      	mov	r1, r5
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	f000 fc2d 	bl	80135ac <_ux_device_stack_interface_set>
 8012d52:	e7d7      	b.n	8012d04 <_ux_device_stack_configuration_set+0xe8>
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 8012d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d56:	455b      	cmp	r3, fp
 8012d58:	d00b      	beq.n	8012d72 <_ux_device_stack_configuration_set+0x156>
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 8012d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8012dd0 <_ux_device_stack_configuration_set+0x1b4>)
 8012d5c:	6812      	ldr	r2, [r2, #0]
 8012d5e:	3356      	adds	r3, #86	@ 0x56
 8012d60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012d64:	9a01      	ldr	r2, [sp, #4]
 8012d66:	605a      	str	r2, [r3, #4]
                    if (iad_number_interfaces == 0)
 8012d68:	f1b9 0901 	subs.w	r9, r9, #1
 8012d6c:	d1ec      	bne.n	8012d48 <_ux_device_stack_configuration_set+0x12c>
                        iad_flag = UX_FALSE;
 8012d6e:	46ca      	mov	sl, r9
 8012d70:	e7ea      	b.n	8012d48 <_ux_device_stack_configuration_set+0x12c>
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8012d72:	4a17      	ldr	r2, [pc, #92]	@ (8012dd0 <_ux_device_stack_configuration_set+0x1b4>)
 8012d74:	6811      	ldr	r1, [r2, #0]
 8012d76:	f8d1 2158 	ldr.w	r2, [r1, #344]	@ 0x158
                            if (class_inst -> ux_slave_class_status == UX_USED)
 8012d7a:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8012d7c:	2801      	cmp	r0, #1
 8012d7e:	d1f3      	bne.n	8012d68 <_ux_device_stack_configuration_set+0x14c>
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8012d80:	f8d2 0108 	ldr.w	r0, [r2, #264]	@ 0x108
 8012d84:	4283      	cmp	r3, r0
 8012d86:	d1ef      	bne.n	8012d68 <_ux_device_stack_configuration_set+0x14c>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 8012d88:	f8d2 010c 	ldr.w	r0, [r2, #268]	@ 0x10c
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8012d8c:	4540      	cmp	r0, r8
 8012d8e:	d1eb      	bne.n	8012d68 <_ux_device_stack_configuration_set+0x14c>
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 8012d90:	3356      	adds	r3, #86	@ 0x56
 8012d92:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012d96:	604a      	str	r2, [r1, #4]
                                    current_class = class_inst;
 8012d98:	9201      	str	r2, [sp, #4]
 8012d9a:	e7e5      	b.n	8012d68 <_ux_device_stack_configuration_set+0x14c>
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8012d9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012d9e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012da2:	4281      	cmp	r1, r0
 8012da4:	d1d0      	bne.n	8012d48 <_ux_device_stack_configuration_set+0x12c>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 8012da6:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8012daa:	4540      	cmp	r0, r8
 8012dac:	d1cc      	bne.n	8012d48 <_ux_device_stack_configuration_set+0x12c>
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 8012dae:	3156      	adds	r1, #86	@ 0x56
 8012db0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012db4:	6053      	str	r3, [r2, #4]
 8012db6:	e7c7      	b.n	8012d48 <_ux_device_stack_configuration_set+0x12c>
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 8012db8:	2203      	movs	r2, #3
 8012dba:	6232      	str	r2, [r6, #32]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 8012dbc:	69b3      	ldr	r3, [r6, #24]
 8012dbe:	2113      	movs	r1, #19
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	4798      	blx	r3
    return(UX_SUCCESS);
 8012dc4:	e778      	b.n	8012cb8 <_ux_device_stack_configuration_set+0x9c>
        return(UX_SUCCESS);
 8012dc6:	2500      	movs	r5, #0
 8012dc8:	e776      	b.n	8012cb8 <_ux_device_stack_configuration_set+0x9c>
        return(UX_ERROR);
 8012dca:	25ff      	movs	r5, #255	@ 0xff
 8012dcc:	e774      	b.n	8012cb8 <_ux_device_stack_configuration_set+0x9c>
 8012dce:	bf00      	nop
 8012dd0:	20010f44 	.word	0x20010f44
 8012dd4:	20000050 	.word	0x20000050
 8012dd8:	20000044 	.word	0x20000044

08012ddc <_ux_device_stack_control_request_process>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 8012ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012de0:	b08f      	sub	sp, #60	@ 0x3c
UINT                        status =  UX_ERROR;
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8012de2:	4b6e      	ldr	r3, [pc, #440]	@ (8012f9c <_ux_device_stack_control_request_process+0x1c0>)
 8012de4:	f8d3 a000 	ldr.w	sl, [r3]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 8012de8:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8012dea:	b124      	cbz	r4, 8012df6 <_ux_device_stack_control_request_process+0x1a>
UINT                        status =  UX_ERROR;
 8012dec:	26ff      	movs	r6, #255	@ 0xff
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
    }

    /* Return the function status.  */
    return(status);
}
 8012dee:	4630      	mov	r0, r6
 8012df0:	b00f      	add	sp, #60	@ 0x3c
 8012df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012df6:	4605      	mov	r5, r0
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 8012df8:	f890 7054 	ldrb.w	r7, [r0, #84]	@ 0x54
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8012dfc:	f890 9055 	ldrb.w	r9, [r0, #85]	@ 0x55
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8012e00:	3056      	adds	r0, #86	@ 0x56
 8012e02:	f000 ff8f 	bl	8013d24 <_ux_utility_short_get>
 8012e06:	4606      	mov	r6, r0
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8012e08:	f105 0058 	add.w	r0, r5, #88	@ 0x58
 8012e0c:	f000 ff8a 	bl	8013d24 <_ux_utility_short_get>
 8012e10:	4680      	mov	r8, r0
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8012e12:	f105 005a 	add.w	r0, r5, #90	@ 0x5a
 8012e16:	f000 ff85 	bl	8013d24 <_ux_utility_short_get>
 8012e1a:	4683      	mov	fp, r0
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 8012e1c:	f1a9 0306 	sub.w	r3, r9, #6
 8012e20:	2b01      	cmp	r3, #1
 8012e22:	d914      	bls.n	8012e4e <_ux_device_stack_control_request_process+0x72>
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 8012e24:	f007 0360 	and.w	r3, r7, #96	@ 0x60
 8012e28:	2b40      	cmp	r3, #64	@ 0x40
 8012e2a:	d019      	beq.n	8012e60 <_ux_device_stack_control_request_process+0x84>
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8012e2c:	2b20      	cmp	r3, #32
 8012e2e:	d03d      	beq.n	8012eac <_ux_device_stack_control_request_process+0xd0>
 8012e30:	2b40      	cmp	r3, #64	@ 0x40
 8012e32:	d03b      	beq.n	8012eac <_ux_device_stack_control_request_process+0xd0>
        switch (request)
 8012e34:	f1b9 0f0c 	cmp.w	r9, #12
 8012e38:	f200 80ac 	bhi.w	8012f94 <_ux_device_stack_control_request_process+0x1b8>
 8012e3c:	e8df f009 	tbb	[pc, r9]
 8012e40:	7eaa7769 	.word	0x7eaa7769
 8012e44:	aa8f85aa 	.word	0xaa8f85aa
 8012e48:	a49f9a96 	.word	0xa49f9a96
 8012e4c:	ac          	.byte	0xac
 8012e4d:	00          	.byte	0x00
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 8012e4e:	0a33      	lsrs	r3, r6, #8
 8012e50:	f013 0f60 	tst.w	r3, #96	@ 0x60
 8012e54:	d0e6      	beq.n	8012e24 <_ux_device_stack_control_request_process+0x48>
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 8012e56:	f027 0760 	bic.w	r7, r7, #96	@ 0x60
            request_type |= UX_REQUEST_TYPE_CLASS;
 8012e5a:	f047 0720 	orr.w	r7, r7, #32
 8012e5e:	e7e1      	b.n	8012e24 <_ux_device_stack_control_request_process+0x48>
            if (request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 8012e60:	4a4e      	ldr	r2, [pc, #312]	@ (8012f9c <_ux_device_stack_control_request_process+0x1c0>)
 8012e62:	6812      	ldr	r2, [r2, #0]
 8012e64:	f8d2 11c4 	ldr.w	r1, [r2, #452]	@ 0x1c4
 8012e68:	4549      	cmp	r1, r9
 8012e6a:	d1df      	bne.n	8012e2c <_ux_device_stack_control_request_process+0x50>
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8012e6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012e70:	9302      	str	r3, [sp, #8]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 8012e72:	f8d2 71c8 	ldr.w	r7, [r2, #456]	@ 0x1c8
 8012e76:	ab02      	add	r3, sp, #8
 8012e78:	9301      	str	r3, [sp, #4]
 8012e7a:	68eb      	ldr	r3, [r5, #12]
 8012e7c:	9300      	str	r3, [sp, #0]
 8012e7e:	465b      	mov	r3, fp
 8012e80:	4642      	mov	r2, r8
 8012e82:	4631      	mov	r1, r6
 8012e84:	4648      	mov	r0, r9
 8012e86:	47b8      	blx	r7
                if (status == UX_SUCCESS)
 8012e88:	4606      	mov	r6, r0
 8012e8a:	b948      	cbnz	r0, 8012ea0 <_ux_device_stack_control_request_process+0xc4>
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8012e8c:	2303      	movs	r3, #3
 8012e8e:	f8ca 30b4 	str.w	r3, [sl, #180]	@ 0xb4
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 8012e92:	465a      	mov	r2, fp
 8012e94:	9902      	ldr	r1, [sp, #8]
 8012e96:	f10a 008c 	add.w	r0, sl, #140	@ 0x8c
 8012e9a:	f000 fca3 	bl	80137e4 <_ux_device_stack_transfer_request>
                    return(UX_SUCCESS);
 8012e9e:	e7a6      	b.n	8012dee <_ux_device_stack_control_request_process+0x12>
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8012ea0:	f10a 005c 	add.w	r0, sl, #92	@ 0x5c
 8012ea4:	f000 f9ee 	bl	8013284 <_ux_device_stack_endpoint_stall>
                    return(UX_SUCCESS);
 8012ea8:	4626      	mov	r6, r4
 8012eaa:	e7a0      	b.n	8012dee <_ux_device_stack_control_request_process+0x12>
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 8012eac:	2304      	movs	r3, #4
 8012eae:	9303      	str	r3, [sp, #12]
UINT                        status =  UX_ERROR;
 8012eb0:	26ff      	movs	r6, #255	@ 0xff
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8012eb2:	e006      	b.n	8012ec2 <_ux_device_stack_control_request_process+0xe6>
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 8012eb4:	930b      	str	r3, [sp, #44]	@ 0x2c
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8012eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012eb8:	a803      	add	r0, sp, #12
 8012eba:	4798      	blx	r3
                if (status == UX_SUCCESS)
 8012ebc:	4606      	mov	r6, r0
 8012ebe:	b300      	cbz	r0, 8012f02 <_ux_device_stack_control_request_process+0x126>
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8012ec0:	3401      	adds	r4, #1
 8012ec2:	2c0f      	cmp	r4, #15
 8012ec4:	d81d      	bhi.n	8012f02 <_ux_device_stack_control_request_process+0x126>
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 8012ec6:	4b35      	ldr	r3, [pc, #212]	@ (8012f9c <_ux_device_stack_control_request_process+0x1c0>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	f104 0256 	add.w	r2, r4, #86	@ 0x56
 8012ece:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012ed2:	685b      	ldr	r3, [r3, #4]
                if (class_ptr == UX_NULL)
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d0f3      	beq.n	8012ec0 <_ux_device_stack_control_request_process+0xe4>
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 8012ed8:	f007 0203 	and.w	r2, r7, #3
 8012edc:	2a01      	cmp	r2, #1
 8012ede:	d1e9      	bne.n	8012eb4 <_ux_device_stack_control_request_process+0xd8>
                    if (((request_index & 0xFF) != class_index) ||
 8012ee0:	fa5f f288 	uxtb.w	r2, r8
 8012ee4:	42a2      	cmp	r2, r4
 8012ee6:	d1eb      	bne.n	8012ec0 <_ux_device_stack_control_request_process+0xe4>
                        ((class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 8012ee8:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8012eec:	6a12      	ldr	r2, [r2, #32]
                    if (((request_index & 0xFF) != class_index) ||
 8012eee:	2a07      	cmp	r2, #7
 8012ef0:	d1e0      	bne.n	8012eb4 <_ux_device_stack_control_request_process+0xd8>
                        ((class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 8012ef2:	f1b9 0f00 	cmp.w	r9, #0
 8012ef6:	d1dd      	bne.n	8012eb4 <_ux_device_stack_control_request_process+0xd8>
                         *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index))
 8012ef8:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
                         (request == 0x00) &&
 8012efc:	42a2      	cmp	r2, r4
 8012efe:	d0d9      	beq.n	8012eb4 <_ux_device_stack_control_request_process+0xd8>
 8012f00:	e7de      	b.n	8012ec0 <_ux_device_stack_control_request_process+0xe4>
            if (status != UX_SUCCESS)
 8012f02:	2e00      	cmp	r6, #0
 8012f04:	f43f af73 	beq.w	8012dee <_ux_device_stack_control_request_process+0x12>
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8012f08:	f10a 005c 	add.w	r0, sl, #92	@ 0x5c
 8012f0c:	f000 f9ba 	bl	8013284 <_ux_device_stack_endpoint_stall>
            return(status);
 8012f10:	e76d      	b.n	8012dee <_ux_device_stack_control_request_process+0x12>
            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 8012f12:	465a      	mov	r2, fp
 8012f14:	4641      	mov	r1, r8
 8012f16:	4638      	mov	r0, r7
 8012f18:	f000 f9d4 	bl	80132c4 <_ux_device_stack_get_status>
 8012f1c:	4606      	mov	r6, r0
        if (status != UX_SUCCESS)
 8012f1e:	2e00      	cmp	r6, #0
 8012f20:	f43f af65 	beq.w	8012dee <_ux_device_stack_control_request_process+0x12>
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8012f24:	f10a 005c 	add.w	r0, sl, #92	@ 0x5c
 8012f28:	f000 f9ac 	bl	8013284 <_ux_device_stack_endpoint_stall>
 8012f2c:	e75f      	b.n	8012dee <_ux_device_stack_control_request_process+0x12>
            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 8012f2e:	4642      	mov	r2, r8
 8012f30:	4631      	mov	r1, r6
 8012f32:	4638      	mov	r0, r7
 8012f34:	f7ff fe2a 	bl	8012b8c <_ux_device_stack_clear_feature>
 8012f38:	4606      	mov	r6, r0
            break;
 8012f3a:	e7f0      	b.n	8012f1e <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 8012f3c:	4642      	mov	r2, r8
 8012f3e:	4631      	mov	r1, r6
 8012f40:	4638      	mov	r0, r7
 8012f42:	f000 fbf7 	bl	8013734 <_ux_device_stack_set_feature>
 8012f46:	4606      	mov	r6, r0
            break;
 8012f48:	e7e9      	b.n	8012f1e <_ux_device_stack_control_request_process+0x142>
            dcd -> ux_slave_dcd_device_address =  request_value;
 8012f4a:	f8ca 6014 	str.w	r6, [sl, #20]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 8012f4e:	f8da 3018 	ldr.w	r3, [sl, #24]
 8012f52:	4632      	mov	r2, r6
 8012f54:	2111      	movs	r1, #17
 8012f56:	4650      	mov	r0, sl
 8012f58:	4798      	blx	r3
 8012f5a:	4606      	mov	r6, r0
            break;
 8012f5c:	e7df      	b.n	8012f1e <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 8012f5e:	465a      	mov	r2, fp
 8012f60:	4641      	mov	r1, r8
 8012f62:	4630      	mov	r0, r6
 8012f64:	f000 f81c 	bl	8012fa0 <_ux_device_stack_descriptor_send>
 8012f68:	4606      	mov	r6, r0
            break;
 8012f6a:	e7d8      	b.n	8012f1e <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_configuration_get();
 8012f6c:	f7ff fe42 	bl	8012bf4 <_ux_device_stack_configuration_get>
 8012f70:	4606      	mov	r6, r0
            break;
 8012f72:	e7d4      	b.n	8012f1e <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_configuration_set(request_value);
 8012f74:	4630      	mov	r0, r6
 8012f76:	f7ff fe51 	bl	8012c1c <_ux_device_stack_configuration_set>
 8012f7a:	4606      	mov	r6, r0
            break;
 8012f7c:	e7cf      	b.n	8012f1e <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_alternate_setting_get(request_index);
 8012f7e:	4640      	mov	r0, r8
 8012f80:	f7ff fcb6 	bl	80128f0 <_ux_device_stack_alternate_setting_get>
 8012f84:	4606      	mov	r6, r0
            break;
 8012f86:	e7ca      	b.n	8012f1e <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 8012f88:	4631      	mov	r1, r6
 8012f8a:	4640      	mov	r0, r8
 8012f8c:	f7ff fcd4 	bl	8012938 <_ux_device_stack_alternate_setting_set>
 8012f90:	4606      	mov	r6, r0
            break;
 8012f92:	e7c4      	b.n	8012f1e <_ux_device_stack_control_request_process+0x142>
        switch (request)
 8012f94:	2654      	movs	r6, #84	@ 0x54
 8012f96:	e7c5      	b.n	8012f24 <_ux_device_stack_control_request_process+0x148>
 8012f98:	4626      	mov	r6, r4
 8012f9a:	e728      	b.n	8012dee <_ux_device_stack_control_request_process+0x12>
 8012f9c:	20010f44 	.word	0x20010f44

08012fa0 <_ux_device_stack_descriptor_send>:
/*                                            internal clean up,          */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 8012fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa4:	b08d      	sub	sp, #52	@ 0x34
 8012fa6:	4617      	mov	r7, r2

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8012fa8:	4b96      	ldr	r3, [pc, #600]	@ (8013204 <_ux_device_stack_descriptor_send+0x264>)
 8012faa:	681e      	ldr	r6, [r3, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8012fac:	f106 0a5c 	add.w	sl, r6, #92	@ 0x5c

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8012fb0:	f106 088c 	add.w	r8, r6, #140	@ 0x8c

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8012fb4:	2303      	movs	r3, #3
 8012fb6:	f8c6 30b4 	str.w	r3, [r6, #180]	@ 0xb4

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 8012fba:	fa5f f980 	uxtb.w	r9, r0

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8012fbe:	f3c0 2407 	ubfx	r4, r0, #8, #8

    /* Default descriptor length is host length.  */
    length =  host_length;

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8012fc2:	1e63      	subs	r3, r4, #1
 8012fc4:	2b0e      	cmp	r3, #14
 8012fc6:	f200 8115 	bhi.w	80131f4 <_ux_device_stack_descriptor_send+0x254>
 8012fca:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012fce:	000f      	.short	0x000f
 8012fd0:	0090003e 	.word	0x0090003e
 8012fd4:	01130113 	.word	0x01130113
 8012fd8:	003e0017 	.word	0x003e0017
 8012fdc:	002a0113 	.word	0x002a0113
 8012fe0:	01130113 	.word	0x01130113
 8012fe4:	01130113 	.word	0x01130113
 8012fe8:	003e0113 	.word	0x003e0113
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 8012fec:	2f12      	cmp	r7, #18
 8012fee:	d803      	bhi.n	8012ff8 <_ux_device_stack_descriptor_send+0x58>
    length =  host_length;
 8012ff0:	463d      	mov	r5, r7

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 8012ff2:	2c06      	cmp	r4, #6
 8012ff4:	d106      	bne.n	8013004 <_ux_device_stack_descriptor_send+0x64>
 8012ff6:	e002      	b.n	8012ffe <_ux_device_stack_descriptor_send+0x5e>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 8012ff8:	2512      	movs	r5, #18
 8012ffa:	e7fa      	b.n	8012ff2 <_ux_device_stack_descriptor_send+0x52>
    switch (descriptor_type)
 8012ffc:	463d      	mov	r5, r7
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 8012ffe:	2f0a      	cmp	r7, #10
 8013000:	d900      	bls.n	8013004 <_ux_device_stack_descriptor_send+0x64>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 8013002:	250a      	movs	r5, #10

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 8013004:	2c09      	cmp	r4, #9
 8013006:	d00d      	beq.n	8013024 <_ux_device_stack_descriptor_send+0x84>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8013008:	f8d6 1128 	ldr.w	r1, [r6, #296]	@ 0x128
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 801300c:	f8d6 212c 	ldr.w	r2, [r6, #300]	@ 0x12c
        device_framework_end = device_framework + device_framework_length;
 8013010:	440a      	add	r2, r1

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 8013012:	4291      	cmp	r1, r2
 8013014:	d215      	bcs.n	8013042 <_ux_device_stack_descriptor_send+0xa2>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 8013016:	7808      	ldrb	r0, [r1, #0]

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 8013018:	784b      	ldrb	r3, [r1, #1]
 801301a:	42a3      	cmp	r3, r4
 801301c:	d006      	beq.n	801302c <_ux_device_stack_descriptor_send+0x8c>

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 801301e:	4401      	add	r1, r0
 8013020:	e7f7      	b.n	8013012 <_ux_device_stack_descriptor_send+0x72>
    switch (descriptor_type)
 8013022:	463d      	mov	r5, r7
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 8013024:	2f05      	cmp	r7, #5
 8013026:	d9ef      	bls.n	8013008 <_ux_device_stack_descriptor_send+0x68>
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 8013028:	2505      	movs	r5, #5
 801302a:	e7ed      	b.n	8013008 <_ux_device_stack_descriptor_send+0x68>
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 801302c:	462a      	mov	r2, r5
 801302e:	f8d6 0098 	ldr.w	r0, [r6, #152]	@ 0x98
 8013032:	f000 fd80 	bl	8013b36 <_ux_utility_memory_copy>
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8013036:	463a      	mov	r2, r7
 8013038:	4629      	mov	r1, r5
 801303a:	4640      	mov	r0, r8
 801303c:	f000 fbd2 	bl	80137e4 <_ux_device_stack_transfer_request>
                break;
 8013040:	e000      	b.n	8013044 <_ux_device_stack_descriptor_send+0xa4>
UINT                            status =  UX_ERROR;
 8013042:	20ff      	movs	r0, #255	@ 0xff
        return(UX_ERROR);
    }

    /* Return the status to the caller.  */
    return(status);
}
 8013044:	b00d      	add	sp, #52	@ 0x34
 8013046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 801304a:	2c07      	cmp	r4, #7
 801304c:	d006      	beq.n	801305c <_ux_device_stack_descriptor_send+0xbc>
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801304e:	f8d6 5128 	ldr.w	r5, [r6, #296]	@ 0x128
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8013052:	f8d6 112c 	ldr.w	r1, [r6, #300]	@ 0x12c
            device_framework_end = device_framework + device_framework_length;
 8013056:	4429      	add	r1, r5
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 8013058:	2000      	movs	r0, #0
 801305a:	e009      	b.n	8013070 <_ux_device_stack_descriptor_send+0xd0>
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 801305c:	f8d6 5130 	ldr.w	r5, [r6, #304]	@ 0x130
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8013060:	f8d6 1134 	ldr.w	r1, [r6, #308]	@ 0x134
            device_framework_end = device_framework + device_framework_length;
 8013064:	4429      	add	r1, r5
 8013066:	e7f7      	b.n	8013058 <_ux_device_stack_descriptor_send+0xb8>
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 8013068:	786a      	ldrb	r2, [r5, #1]
 801306a:	2a0f      	cmp	r2, #15
 801306c:	d00c      	beq.n	8013088 <_ux_device_stack_descriptor_send+0xe8>
            device_framework +=  descriptor_length;
 801306e:	441d      	add	r5, r3
        while (device_framework < device_framework_end)
 8013070:	428d      	cmp	r5, r1
 8013072:	d22b      	bcs.n	80130cc <_ux_device_stack_descriptor_send+0x12c>
            descriptor_length =  (ULONG) *device_framework;
 8013074:	782b      	ldrb	r3, [r5, #0]
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 8013076:	2c0f      	cmp	r4, #15
 8013078:	d0f6      	beq.n	8013068 <_ux_device_stack_descriptor_send+0xc8>
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 801307a:	786a      	ldrb	r2, [r5, #1]
 801307c:	2a02      	cmp	r2, #2
 801307e:	d1f6      	bne.n	801306e <_ux_device_stack_descriptor_send+0xce>
                    if (parsed_descriptor_index == descriptor_index)
 8013080:	4548      	cmp	r0, r9
 8013082:	d01a      	beq.n	80130ba <_ux_device_stack_descriptor_send+0x11a>
                        parsed_descriptor_index++;
 8013084:	3001      	adds	r0, #1
 8013086:	e7f2      	b.n	801306e <_ux_device_stack_descriptor_send+0xce>
                    _ux_utility_descriptor_parse(device_framework,
 8013088:	466b      	mov	r3, sp
 801308a:	2204      	movs	r2, #4
 801308c:	495e      	ldr	r1, [pc, #376]	@ (8013208 <_ux_device_stack_descriptor_send+0x268>)
 801308e:	4628      	mov	r0, r5
 8013090:	f000 fc74 	bl	801397c <_ux_utility_descriptor_parse>
                    target_descriptor_length = bos_descriptor.wTotalLength;
 8013094:	f8dd 9008 	ldr.w	r9, [sp, #8]
            if (target_descriptor_length < host_length)
 8013098:	45b9      	cmp	r9, r7
 801309a:	d300      	bcc.n	801309e <_ux_device_stack_descriptor_send+0xfe>
                length =  host_length;
 801309c:	46b9      	mov	r9, r7
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 801309e:	f5b9 7f80 	cmp.w	r9, #256	@ 0x100
 80130a2:	d915      	bls.n	80130d0 <_ux_device_stack_descriptor_send+0x130>
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 80130a4:	2212      	movs	r2, #18
 80130a6:	2109      	movs	r1, #9
 80130a8:	2002      	movs	r0, #2
 80130aa:	f000 fbf1 	bl	8013890 <_ux_system_error_handler>
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80130ae:	69b3      	ldr	r3, [r6, #24]
 80130b0:	4652      	mov	r2, sl
 80130b2:	2114      	movs	r1, #20
 80130b4:	4630      	mov	r0, r6
 80130b6:	4798      	blx	r3
                break;
 80130b8:	e7c4      	b.n	8013044 <_ux_device_stack_descriptor_send+0xa4>
                        _ux_utility_descriptor_parse(device_framework,
 80130ba:	ab04      	add	r3, sp, #16
 80130bc:	2208      	movs	r2, #8
 80130be:	4953      	ldr	r1, [pc, #332]	@ (801320c <_ux_device_stack_descriptor_send+0x26c>)
 80130c0:	4628      	mov	r0, r5
 80130c2:	f000 fc5b 	bl	801397c <_ux_utility_descriptor_parse>
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 80130c6:	f8dd 9018 	ldr.w	r9, [sp, #24]
        if (status == UX_SUCCESS)
 80130ca:	e7e5      	b.n	8013098 <_ux_device_stack_descriptor_send+0xf8>
UINT                            status =  UX_ERROR;
 80130cc:	20ff      	movs	r0, #255	@ 0xff
 80130ce:	e7b9      	b.n	8013044 <_ux_device_stack_descriptor_send+0xa4>
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 80130d0:	464a      	mov	r2, r9
 80130d2:	4629      	mov	r1, r5
 80130d4:	f8d6 0098 	ldr.w	r0, [r6, #152]	@ 0x98
 80130d8:	f000 fd2d 	bl	8013b36 <_ux_utility_memory_copy>
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 80130dc:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 80130e0:	705c      	strb	r4, [r3, #1]
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 80130e2:	463a      	mov	r2, r7
 80130e4:	4649      	mov	r1, r9
 80130e6:	4640      	mov	r0, r8
 80130e8:	f000 fb7c 	bl	80137e4 <_ux_device_stack_transfer_request>
 80130ec:	e7aa      	b.n	8013044 <_ux_device_stack_descriptor_send+0xa4>
 80130ee:	460d      	mov	r5, r1
        if (descriptor_index == 0)
 80130f0:	f1b9 0f00 	cmp.w	r9, #0
 80130f4:	d12b      	bne.n	801314e <_ux_device_stack_descriptor_send+0x1ae>
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80130f6:	f8d6 314c 	ldr.w	r3, [r6, #332]	@ 0x14c
 80130fa:	1c9a      	adds	r2, r3, #2
 80130fc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8013100:	d90a      	bls.n	8013118 <_ux_device_stack_descriptor_send+0x178>
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8013102:	2212      	movs	r2, #18
 8013104:	2109      	movs	r1, #9
 8013106:	2002      	movs	r0, #2
 8013108:	f000 fbc2 	bl	8013890 <_ux_system_error_handler>
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801310c:	69b3      	ldr	r3, [r6, #24]
 801310e:	4652      	mov	r2, sl
 8013110:	2114      	movs	r1, #20
 8013112:	4630      	mov	r0, r6
 8013114:	4798      	blx	r3
                break;
 8013116:	e795      	b.n	8013044 <_ux_device_stack_descriptor_send+0xa4>
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8013118:	f8d6 0098 	ldr.w	r0, [r6, #152]	@ 0x98
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 801311c:	3302      	adds	r3, #2
 801311e:	7003      	strb	r3, [r0, #0]
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 8013120:	2303      	movs	r3, #3
 8013122:	7043      	strb	r3, [r0, #1]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8013124:	4c37      	ldr	r4, [pc, #220]	@ (8013204 <_ux_device_stack_descriptor_send+0x264>)
 8013126:	6823      	ldr	r3, [r4, #0]
 8013128:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 801312c:	f8d3 1148 	ldr.w	r1, [r3, #328]	@ 0x148
 8013130:	3002      	adds	r0, #2
 8013132:	f000 fd00 	bl	8013b36 <_ux_utility_memory_copy>
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 8013136:	6823      	ldr	r3, [r4, #0]
 8013138:	f8d3 114c 	ldr.w	r1, [r3, #332]	@ 0x14c
 801313c:	3102      	adds	r1, #2
 801313e:	42b9      	cmp	r1, r7
 8013140:	d300      	bcc.n	8013144 <_ux_device_stack_descriptor_send+0x1a4>
                length =  host_length;
 8013142:	4639      	mov	r1, r7
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8013144:	463a      	mov	r2, r7
 8013146:	4640      	mov	r0, r8
 8013148:	f000 fb4c 	bl	80137e4 <_ux_device_stack_transfer_request>
 801314c:	e77a      	b.n	8013044 <_ux_device_stack_descriptor_send+0xa4>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 801314e:	f8d6 b140 	ldr.w	fp, [r6, #320]	@ 0x140
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 8013152:	f8d6 4144 	ldr.w	r4, [r6, #324]	@ 0x144
            while (string_framework_length != 0)
 8013156:	e01b      	b.n	8013190 <_ux_device_stack_descriptor_send+0x1f0>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8013158:	2212      	movs	r2, #18
 801315a:	2109      	movs	r1, #9
 801315c:	2002      	movs	r0, #2
 801315e:	f000 fb97 	bl	8013890 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8013162:	69b3      	ldr	r3, [r6, #24]
 8013164:	4652      	mov	r2, sl
 8013166:	2114      	movs	r1, #20
 8013168:	4630      	mov	r0, r6
 801316a:	4798      	blx	r3
                            break;
 801316c:	e038      	b.n	80131e0 <_ux_device_stack_descriptor_send+0x240>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 801316e:	3201      	adds	r2, #1
 8013170:	0051      	lsls	r1, r2, #1
 8013172:	ebb7 0f42 	cmp.w	r7, r2, lsl #1
 8013176:	d800      	bhi.n	801317a <_ux_device_stack_descriptor_send+0x1da>
                            length =  host_length;
 8013178:	4639      	mov	r1, r7
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801317a:	463a      	mov	r2, r7
 801317c:	4640      	mov	r0, r8
 801317e:	f000 fb31 	bl	80137e4 <_ux_device_stack_transfer_request>
                        break;
 8013182:	e02d      	b.n	80131e0 <_ux_device_stack_descriptor_send+0x240>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 8013184:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8013188:	1ae4      	subs	r4, r4, r3
 801318a:	3c04      	subs	r4, #4
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 801318c:	3304      	adds	r3, #4
 801318e:	449b      	add	fp, r3
            while (string_framework_length != 0)
 8013190:	b32c      	cbz	r4, 80131de <_ux_device_stack_descriptor_send+0x23e>
                if (_ux_utility_short_get(string_framework) == request_index)
 8013192:	4658      	mov	r0, fp
 8013194:	f000 fdc6 	bl	8013d24 <_ux_utility_short_get>
 8013198:	42a8      	cmp	r0, r5
 801319a:	d1f3      	bne.n	8013184 <_ux_device_stack_descriptor_send+0x1e4>
                    if (*(string_framework + 2) == descriptor_index)
 801319c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80131a0:	454b      	cmp	r3, r9
 80131a2:	d1ef      	bne.n	8013184 <_ux_device_stack_descriptor_send+0x1e4>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80131a4:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80131a8:	1c5a      	adds	r2, r3, #1
 80131aa:	2a80      	cmp	r2, #128	@ 0x80
 80131ac:	dcd4      	bgt.n	8013158 <_ux_device_stack_descriptor_send+0x1b8>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 80131ae:	f8d6 1098 	ldr.w	r1, [r6, #152]	@ 0x98
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 80131b2:	3301      	adds	r3, #1
 80131b4:	b2db      	uxtb	r3, r3
 80131b6:	005b      	lsls	r3, r3, #1
 80131b8:	700b      	strb	r3, [r1, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 80131ba:	2303      	movs	r3, #3
 80131bc:	704b      	strb	r3, [r1, #1]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 80131be:	2300      	movs	r3, #0
 80131c0:	f89b 2003 	ldrb.w	r2, [fp, #3]
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d9d2      	bls.n	801316e <_ux_device_stack_descriptor_send+0x1ce>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 80131c8:	1d18      	adds	r0, r3, #4
 80131ca:	3301      	adds	r3, #1
 80131cc:	005a      	lsls	r2, r3, #1
 80131ce:	f81b 0000 	ldrb.w	r0, [fp, r0]
 80131d2:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 80131d6:	3201      	adds	r2, #1
 80131d8:	2000      	movs	r0, #0
 80131da:	5488      	strb	r0, [r1, r2]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 80131dc:	e7f0      	b.n	80131c0 <_ux_device_stack_descriptor_send+0x220>
UINT                            status =  UX_ERROR;
 80131de:	20ff      	movs	r0, #255	@ 0xff
            if (string_framework_length == 0)
 80131e0:	2c00      	cmp	r4, #0
 80131e2:	f47f af2f 	bne.w	8013044 <_ux_device_stack_descriptor_send+0xa4>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80131e6:	69b3      	ldr	r3, [r6, #24]
 80131e8:	4652      	mov	r2, sl
 80131ea:	2114      	movs	r1, #20
 80131ec:	4630      	mov	r0, r6
 80131ee:	4798      	blx	r3
                return(UX_ERROR);
 80131f0:	20ff      	movs	r0, #255	@ 0xff
 80131f2:	e727      	b.n	8013044 <_ux_device_stack_descriptor_send+0xa4>
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80131f4:	69b3      	ldr	r3, [r6, #24]
 80131f6:	4652      	mov	r2, sl
 80131f8:	2114      	movs	r1, #20
 80131fa:	4630      	mov	r0, r6
 80131fc:	4798      	blx	r3
        return(UX_ERROR);
 80131fe:	20ff      	movs	r0, #255	@ 0xff
 8013200:	e720      	b.n	8013044 <_ux_device_stack_descriptor_send+0xa4>
 8013202:	bf00      	nop
 8013204:	20010f44 	.word	0x20010f44
 8013208:	20000040 	.word	0x20000040
 801320c:	20000050 	.word	0x20000050

08013210 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 8013210:	b570      	push	{r4, r5, r6, lr}
 8013212:	b08c      	sub	sp, #48	@ 0x30
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8013214:	4b1a      	ldr	r3, [pc, #104]	@ (8013280 <_ux_device_stack_disconnect+0x70>)
 8013216:	681d      	ldr	r5, [r3, #0]
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8013218:	6a2b      	ldr	r3, [r5, #32]
 801321a:	2b03      	cmp	r3, #3
 801321c:	d011      	beq.n	8013242 <_ux_device_stack_disconnect+0x32>
        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 801321e:	6a2b      	ldr	r3, [r5, #32]
 8013220:	2b01      	cmp	r3, #1
 8013222:	d025      	beq.n	8013270 <_ux_device_stack_disconnect+0x60>
UINT                        status = UX_ERROR;
 8013224:	24ff      	movs	r4, #255	@ 0xff
        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
                                (VOID *) &device -> ux_slave_device_control_endpoint);

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 8013226:	2300      	movs	r3, #0
 8013228:	f8c5 30ec 	str.w	r3, [r5, #236]	@ 0xec

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 801322c:	622b      	str	r3, [r5, #32]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 801322e:	4b14      	ldr	r3, [pc, #80]	@ (8013280 <_ux_device_stack_disconnect+0x70>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8013236:	b10b      	cbz	r3, 801323c <_ux_device_stack_disconnect+0x2c>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 8013238:	200a      	movs	r0, #10
 801323a:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
}
 801323c:	4620      	mov	r0, r4
 801323e:	b00c      	add	sp, #48	@ 0x30
 8013240:	bd70      	pop	{r4, r5, r6, pc}
        interface_ptr =  device -> ux_slave_device_first_interface;
 8013242:	f8d5 4110 	ldr.w	r4, [r5, #272]	@ 0x110
        while (interface_ptr != UX_NULL)
 8013246:	e004      	b.n	8013252 <_ux_device_stack_disconnect+0x42>
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8013248:	6b26      	ldr	r6, [r4, #48]	@ 0x30
            _ux_device_stack_interface_delete(interface_ptr);
 801324a:	4620      	mov	r0, r4
 801324c:	f000 f98c 	bl	8013568 <_ux_device_stack_interface_delete>
            interface_ptr =  next_interface;
 8013250:	4634      	mov	r4, r6
        while (interface_ptr != UX_NULL)
 8013252:	b154      	cbz	r4, 801326a <_ux_device_stack_disconnect+0x5a>
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8013254:	2303      	movs	r3, #3
 8013256:	9301      	str	r3, [sp, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 8013258:	9403      	str	r4, [sp, #12]
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 801325a:	6863      	ldr	r3, [r4, #4]
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 801325c:	9309      	str	r3, [sp, #36]	@ 0x24
            if (class_ptr != UX_NULL)
 801325e:	2b00      	cmp	r3, #0
 8013260:	d0f2      	beq.n	8013248 <_ux_device_stack_disconnect+0x38>
                class_ptr -> ux_slave_class_entry_function(&class_command);
 8013262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013264:	a801      	add	r0, sp, #4
 8013266:	4798      	blx	r3
 8013268:	e7ee      	b.n	8013248 <_ux_device_stack_disconnect+0x38>
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801326a:	2301      	movs	r3, #1
 801326c:	622b      	str	r3, [r5, #32]
 801326e:	e7d6      	b.n	801321e <_ux_device_stack_disconnect+0xe>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8013270:	69ab      	ldr	r3, [r5, #24]
 8013272:	f105 025c 	add.w	r2, r5, #92	@ 0x5c
 8013276:	210f      	movs	r1, #15
 8013278:	4628      	mov	r0, r5
 801327a:	4798      	blx	r3
 801327c:	4604      	mov	r4, r0
 801327e:	e7d2      	b.n	8013226 <_ux_device_stack_disconnect+0x16>
 8013280:	20010f44 	.word	0x20010f44

08013284 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 8013284:	b538      	push	{r3, r4, r5, lr}
 8013286:	4604      	mov	r4, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8013288:	4b0d      	ldr	r3, [pc, #52]	@ (80132c0 <_ux_device_stack_endpoint_stall+0x3c>)
 801328a:	6818      	ldr	r0, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801328c:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8013290:	b672      	cpsid	i
       resets it.  */
    UX_DISABLE

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	6a1b      	ldr	r3, [r3, #32]
 8013296:	b16b      	cbz	r3, 80132b4 <_ux_device_stack_endpoint_stall+0x30>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 8013298:	6863      	ldr	r3, [r4, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 801329a:	2b02      	cmp	r3, #2
 801329c:	d00e      	beq.n	80132bc <_ux_device_stack_endpoint_stall+0x38>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801329e:	6983      	ldr	r3, [r0, #24]
 80132a0:	4622      	mov	r2, r4
 80132a2:	2114      	movs	r1, #20
 80132a4:	4798      	blx	r3

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 80132a6:	69a3      	ldr	r3, [r4, #24]
 80132a8:	f013 0f03 	tst.w	r3, #3
 80132ac:	d003      	beq.n	80132b6 <_ux_device_stack_endpoint_stall+0x32>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 80132ae:	2302      	movs	r3, #2
 80132b0:	6063      	str	r3, [r4, #4]
 80132b2:	e000      	b.n	80132b6 <_ux_device_stack_endpoint_stall+0x32>
    status =  UX_ERROR;
 80132b4:	20ff      	movs	r0, #255	@ 0xff
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132b6:	f385 8810 	msr	PRIMASK, r5
    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
}
 80132ba:	bd38      	pop	{r3, r4, r5, pc}
    status =  UX_ERROR;
 80132bc:	20ff      	movs	r0, #255	@ 0xff
 80132be:	e7fa      	b.n	80132b6 <_ux_device_stack_endpoint_stall+0x32>
 80132c0:	20010f44 	.word	0x20010f44

080132c4 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 80132c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80132c6:	4b2b      	ldr	r3, [pc, #172]	@ (8013374 <_ux_device_stack_get_status+0xb0>)
 80132c8:	681c      	ldr	r4, [r3, #0]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80132ca:	f104 068c 	add.w	r6, r4, #140	@ 0x8c

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 80132ce:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 80132d2:	2300      	movs	r3, #0
 80132d4:	7013      	strb	r3, [r2, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 80132d6:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 80132da:	7053      	strb	r3, [r2, #1]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 80132dc:	f010 0503 	ands.w	r5, r0, #3
 80132e0:	d00a      	beq.n	80132f8 <_ux_device_stack_get_status+0x34>
 80132e2:	f104 075c 	add.w	r7, r4, #92	@ 0x5c
 80132e6:	2d02      	cmp	r5, #2
 80132e8:	d021      	beq.n	801332e <_ux_device_stack_get_status+0x6a>
        break;

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80132ea:	69a3      	ldr	r3, [r4, #24]
 80132ec:	463a      	mov	r2, r7
 80132ee:	2114      	movs	r1, #20
 80132f0:	4620      	mov	r0, r4
 80132f2:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 80132f4:	2000      	movs	r0, #0
 80132f6:	e02b      	b.n	8013350 <_ux_device_stack_get_status+0x8c>
        if (request_index == UX_OTG_STATUS_SELECTOR)
 80132f8:	f5b1 4f70 	cmp.w	r1, #61440	@ 0xf000
 80132fc:	d035      	beq.n	801336a <_ux_device_stack_get_status+0xa6>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 80132fe:	4b1d      	ldr	r3, [pc, #116]	@ (8013374 <_ux_device_stack_get_status+0xb0>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8013306:	2b02      	cmp	r3, #2
 8013308:	d00c      	beq.n	8013324 <_ux_device_stack_get_status+0x60>
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 801330a:	4b1a      	ldr	r3, [pc, #104]	@ (8013374 <_ux_device_stack_get_status+0xb0>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8013312:	b363      	cbz	r3, 801336e <_ux_device_stack_get_status+0xaa>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 8013314:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8013318:	7813      	ldrb	r3, [r2, #0]
 801331a:	f043 0302 	orr.w	r3, r3, #2
 801331e:	7013      	strb	r3, [r2, #0]
    data_length = 2;
 8013320:	2502      	movs	r5, #2
 8013322:	e00d      	b.n	8013340 <_ux_device_stack_get_status+0x7c>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 8013324:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8013328:	2201      	movs	r2, #1
 801332a:	701a      	strb	r2, [r3, #0]
 801332c:	e7ed      	b.n	801330a <_ux_device_stack_get_status+0x46>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 801332e:	69a3      	ldr	r3, [r4, #24]
 8013330:	460a      	mov	r2, r1
 8013332:	2115      	movs	r1, #21
 8013334:	4620      	mov	r0, r4
 8013336:	4798      	blx	r3
        if (status != UX_ERROR)
 8013338:	28ff      	cmp	r0, #255	@ 0xff
 801333a:	d00f      	beq.n	801335c <_ux_device_stack_get_status+0x98>
            if (status == UX_TRUE)
 801333c:	2801      	cmp	r0, #1
 801333e:	d008      	beq.n	8013352 <_ux_device_stack_get_status+0x8e>
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8013340:	2303      	movs	r3, #3
 8013342:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 8013346:	462a      	mov	r2, r5
 8013348:	4629      	mov	r1, r5
 801334a:	4630      	mov	r0, r6
 801334c:	f000 fa4a 	bl	80137e4 <_ux_device_stack_transfer_request>

    /* Return the function status.  */
    return(status);
}
 8013350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 8013352:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8013356:	2201      	movs	r2, #1
 8013358:	701a      	strb	r2, [r3, #0]
 801335a:	e7f1      	b.n	8013340 <_ux_device_stack_get_status+0x7c>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801335c:	69a3      	ldr	r3, [r4, #24]
 801335e:	463a      	mov	r2, r7
 8013360:	2114      	movs	r1, #20
 8013362:	4620      	mov	r0, r4
 8013364:	4798      	blx	r3
            return(UX_SUCCESS);            
 8013366:	2000      	movs	r0, #0
 8013368:	e7f2      	b.n	8013350 <_ux_device_stack_get_status+0x8c>
            data_length = 1;
 801336a:	2501      	movs	r5, #1
 801336c:	e7e8      	b.n	8013340 <_ux_device_stack_get_status+0x7c>
    data_length = 2;
 801336e:	2502      	movs	r5, #2
 8013370:	e7e6      	b.n	8013340 <_ux_device_stack_get_status+0x7c>
 8013372:	bf00      	nop
 8013374:	20010f44 	.word	0x20010f44

08013378 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 8013378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801337c:	4c78      	ldr	r4, [pc, #480]	@ (8013560 <_ux_device_stack_initialize+0x1e8>)
 801337e:	6826      	ldr	r6, [r4, #0]

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 8013380:	f8c6 0138 	str.w	r0, [r6, #312]	@ 0x138
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 8013384:	f8c6 113c 	str.w	r1, [r6, #316]	@ 0x13c

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 8013388:	f8c6 2130 	str.w	r2, [r6, #304]	@ 0x130
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 801338c:	f8c6 3134 	str.w	r3, [r6, #308]	@ 0x134

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 8013390:	9b08      	ldr	r3, [sp, #32]
 8013392:	f8c6 3140 	str.w	r3, [r6, #320]	@ 0x140
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 8013396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013398:	f8c6 3144 	str.w	r3, [r6, #324]	@ 0x144

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 801339c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801339e:	f8c6 3148 	str.w	r3, [r6, #328]	@ 0x148
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 80133a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80133a4:	f8c6 314c 	str.w	r3, [r6, #332]	@ 0x14c

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 80133a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80133aa:	f8c6 31c0 	str.w	r3, [r6, #448]	@ 0x1c0

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 80133ae:	f44f 728a 	mov.w	r2, #276	@ 0x114
 80133b2:	2100      	movs	r1, #0
 80133b4:	4608      	mov	r0, r1
 80133b6:	f000 fb15 	bl	80139e4 <_ux_utility_memory_allocate>
    if (memory == UX_NULL)
 80133ba:	2800      	cmp	r0, #0
 80133bc:	f000 80ce 	beq.w	801355c <_ux_device_stack_initialize+0x1e4>
        return(UX_MEMORY_INSUFFICIENT);
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 80133c0:	6822      	ldr	r2, [r4, #0]
 80133c2:	f8c2 0158 	str.w	r0, [r2, #344]	@ 0x158
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 80133c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80133ca:	2101      	movs	r1, #1
 80133cc:	2000      	movs	r0, #0
 80133ce:	f000 fb09 	bl	80139e4 <_ux_utility_memory_allocate>
    transfer_request -> ux_slave_transfer_request_data_pointer =
 80133d2:	f8c6 0098 	str.w	r0, [r6, #152]	@ 0x98

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 80133d6:	2800      	cmp	r0, #0
 80133d8:	d055      	beq.n	8013486 <_ux_device_stack_initialize+0x10e>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 80133da:	6822      	ldr	r2, [r4, #0]
 80133dc:	f8d2 3130 	ldr.w	r3, [r2, #304]	@ 0x130
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 80133e0:	f8d2 5134 	ldr.w	r5, [r2, #308]	@ 0x134

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
        local_endpoints_found              =  0;
        endpoints_in_interface_found       =  0;
 80133e4:	2000      	movs	r0, #0
        local_endpoints_found              =  0;
 80133e6:	4684      	mov	ip, r0
        local_interfaces_found             =  0;
 80133e8:	4604      	mov	r4, r0
    max_interface_number               =  0;
 80133ea:	4681      	mov	r9, r0
    endpoints_found                    =  0;
 80133ec:	4686      	mov	lr, r0
    interfaces_found                   =  0;
 80133ee:	4607      	mov	r7, r0

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 80133f0:	e008      	b.n	8013404 <_ux_device_stack_initialize+0x8c>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 80133f2:	7919      	ldrb	r1, [r3, #4]
 80133f4:	4281      	cmp	r1, r0
 80133f6:	d900      	bls.n	80133fa <_ux_device_stack_initialize+0x82>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 80133f8:	4608      	mov	r0, r1
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 80133fa:	7899      	ldrb	r1, [r3, #2]
 80133fc:	4549      	cmp	r1, r9
 80133fe:	d819      	bhi.n	8013434 <_ux_device_stack_initialize+0xbc>
            default:
                break;
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 8013400:	1aad      	subs	r5, r5, r2

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8013402:	4413      	add	r3, r2
        while (device_framework_length != 0)
 8013404:	b1ed      	cbz	r5, 8013442 <_ux_device_stack_initialize+0xca>
            descriptor_length =  (ULONG) *device_framework;
 8013406:	781a      	ldrb	r2, [r3, #0]
            descriptor_type =  *(device_framework + 1);
 8013408:	7859      	ldrb	r1, [r3, #1]
            switch(descriptor_type)
 801340a:	2902      	cmp	r1, #2
 801340c:	d008      	beq.n	8013420 <_ux_device_stack_initialize+0xa8>
 801340e:	2904      	cmp	r1, #4
 8013410:	d1f6      	bne.n	8013400 <_ux_device_stack_initialize+0x88>
                if (*(device_framework + 3) == 0)
 8013412:	78d9      	ldrb	r1, [r3, #3]
 8013414:	2900      	cmp	r1, #0
 8013416:	d1ec      	bne.n	80133f2 <_ux_device_stack_initialize+0x7a>
                    local_endpoints_found += endpoints_in_interface_found;
 8013418:	4484      	add	ip, r0
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 801341a:	7918      	ldrb	r0, [r3, #4]
                    local_interfaces_found++;
 801341c:	3401      	adds	r4, #1
 801341e:	e7ec      	b.n	80133fa <_ux_device_stack_initialize+0x82>
                if (local_interfaces_found > interfaces_found)
 8013420:	42a7      	cmp	r7, r4
 8013422:	d200      	bcs.n	8013426 <_ux_device_stack_initialize+0xae>
                    interfaces_found =  local_interfaces_found;
 8013424:	4627      	mov	r7, r4
                local_endpoints_found += endpoints_in_interface_found;
 8013426:	4484      	add	ip, r0
                if (local_endpoints_found > endpoints_found)
 8013428:	45e6      	cmp	lr, ip
 801342a:	d305      	bcc.n	8013438 <_ux_device_stack_initialize+0xc0>
                endpoints_in_interface_found  =  0;
 801342c:	2000      	movs	r0, #0
                local_endpoints_found         =  0;
 801342e:	4684      	mov	ip, r0
                local_interfaces_found =  0;
 8013430:	4604      	mov	r4, r0
 8013432:	e7e5      	b.n	8013400 <_ux_device_stack_initialize+0x88>
                    max_interface_number = *(device_framework + 2);
 8013434:	4689      	mov	r9, r1
 8013436:	e7e3      	b.n	8013400 <_ux_device_stack_initialize+0x88>
                    endpoints_found =  local_endpoints_found;
 8013438:	46e6      	mov	lr, ip
                endpoints_in_interface_found  =  0;
 801343a:	2000      	movs	r0, #0
                local_endpoints_found         =  0;
 801343c:	4684      	mov	ip, r0
                local_interfaces_found =  0;
 801343e:	4604      	mov	r4, r0
 8013440:	e7de      	b.n	8013400 <_ux_device_stack_initialize+0x88>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 8013442:	eb0c 0800 	add.w	r8, ip, r0

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 8013446:	45c6      	cmp	lr, r8
 8013448:	d300      	bcc.n	801344c <_ux_device_stack_initialize+0xd4>
 801344a:	46f0      	mov	r8, lr
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 801344c:	42a7      	cmp	r7, r4
 801344e:	d301      	bcc.n	8013454 <_ux_device_stack_initialize+0xdc>
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 8013450:	b157      	cbz	r7, 8013468 <_ux_device_stack_initialize+0xf0>
 8013452:	463c      	mov	r4, r7

            status = UX_DESCRIPTOR_CORRUPTED;
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 8013454:	f1b9 0f0f 	cmp.w	r9, #15
 8013458:	d80e      	bhi.n	8013478 <_ux_device_stack_initialize+0x100>
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 801345a:	b1cd      	cbz	r5, 8013490 <_ux_device_stack_initialize+0x118>
            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 801345c:	f1b8 0f00 	cmp.w	r8, #0
 8013460:	d04a      	beq.n	80134f8 <_ux_device_stack_initialize+0x180>
 8013462:	b32d      	cbz	r5, 80134b0 <_ux_device_stack_initialize+0x138>
                endpoints_pool++;
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 8013464:	2400      	movs	r4, #0
 8013466:	e049      	b.n	80134fc <_ux_device_stack_initialize+0x184>
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 8013468:	2242      	movs	r2, #66	@ 0x42
 801346a:	2103      	movs	r1, #3
 801346c:	2002      	movs	r0, #2
 801346e:	f000 fa0f 	bl	8013890 <_ux_system_error_handler>
 8013472:	463c      	mov	r4, r7
            status = UX_DESCRIPTOR_CORRUPTED;
 8013474:	2542      	movs	r5, #66	@ 0x42
 8013476:	e7f0      	b.n	801345a <_ux_device_stack_initialize+0xe2>
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 8013478:	2212      	movs	r2, #18
 801347a:	2103      	movs	r1, #3
 801347c:	2002      	movs	r0, #2
 801347e:	f000 fa07 	bl	8013890 <_ux_system_error_handler>
            status = UX_MEMORY_INSUFFICIENT;
 8013482:	2512      	movs	r5, #18
 8013484:	e7e9      	b.n	801345a <_ux_device_stack_initialize+0xe2>
    endpoints_found                    =  0;
 8013486:	f04f 0800 	mov.w	r8, #0
    interfaces_found                   =  0;
 801348a:	4644      	mov	r4, r8
        status = UX_MEMORY_INSUFFICIENT;
 801348c:	2512      	movs	r5, #18
 801348e:	e7e4      	b.n	801345a <_ux_device_stack_initialize+0xe2>
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 8013490:	f8c6 4118 	str.w	r4, [r6, #280]	@ 0x118
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 8013494:	f8c6 8120 	str.w	r8, [r6, #288]	@ 0x120
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 8013498:	2338      	movs	r3, #56	@ 0x38
 801349a:	4622      	mov	r2, r4
 801349c:	2100      	movs	r1, #0
 801349e:	4608      	mov	r0, r1
 80134a0:	f000 fb38 	bl	8013b14 <_ux_utility_memory_allocate_mulc_safe>
        if (interfaces_pool == UX_NULL)
 80134a4:	b110      	cbz	r0, 80134ac <_ux_device_stack_initialize+0x134>
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 80134a6:	f8c6 0114 	str.w	r0, [r6, #276]	@ 0x114
 80134aa:	e7d7      	b.n	801345c <_ux_device_stack_initialize+0xe4>
            status = UX_MEMORY_INSUFFICIENT;
 80134ac:	2512      	movs	r5, #18
 80134ae:	e7d5      	b.n	801345c <_ux_device_stack_initialize+0xe4>
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 80134b0:	2390      	movs	r3, #144	@ 0x90
 80134b2:	4642      	mov	r2, r8
 80134b4:	2100      	movs	r1, #0
 80134b6:	4608      	mov	r0, r1
 80134b8:	f000 fb2c 	bl	8013b14 <_ux_utility_memory_allocate_mulc_safe>
        if (endpoints_pool == UX_NULL)
 80134bc:	4604      	mov	r4, r0
 80134be:	b318      	cbz	r0, 8013508 <_ux_device_stack_initialize+0x190>
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 80134c0:	f8c6 011c 	str.w	r0, [r6, #284]	@ 0x11c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 80134c4:	f8d6 311c 	ldr.w	r3, [r6, #284]	@ 0x11c
 80134c8:	eb08 02c8 	add.w	r2, r8, r8, lsl #3
 80134cc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80134d0:	42a3      	cmp	r3, r4
 80134d2:	d912      	bls.n	80134fa <_ux_device_stack_initialize+0x182>
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 80134d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80134d8:	2101      	movs	r1, #1
 80134da:	2000      	movs	r0, #0
 80134dc:	f000 fa82 	bl	80139e4 <_ux_utility_memory_allocate>
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 80134e0:	63e0      	str	r0, [r4, #60]	@ 0x3c
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 80134e2:	b168      	cbz	r0, 8013500 <_ux_device_stack_initialize+0x188>
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 80134e4:	2200      	movs	r2, #0
 80134e6:	491f      	ldr	r1, [pc, #124]	@ (8013564 <_ux_device_stack_initialize+0x1ec>)
 80134e8:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 80134ec:	f000 fbe0 	bl	8013cb0 <_ux_utility_semaphore_create>
                if (status != UX_SUCCESS)
 80134f0:	4605      	mov	r5, r0
 80134f2:	b938      	cbnz	r0, 8013504 <_ux_device_stack_initialize+0x18c>
                endpoints_pool++;
 80134f4:	3490      	adds	r4, #144	@ 0x90
 80134f6:	e7e5      	b.n	80134c4 <_ux_device_stack_initialize+0x14c>
        endpoints_pool = UX_NULL;
 80134f8:	2400      	movs	r4, #0

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 80134fa:	b365      	cbz	r5, 8013556 <_ux_device_stack_initialize+0x1de>
        return(UX_SUCCESS);
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 80134fc:	b964      	cbnz	r4, 8013518 <_ux_device_stack_initialize+0x1a0>
 80134fe:	e01a      	b.n	8013536 <_ux_device_stack_initialize+0x1be>
                    status = UX_MEMORY_INSUFFICIENT;
 8013500:	2512      	movs	r5, #18
 8013502:	e7fa      	b.n	80134fa <_ux_device_stack_initialize+0x182>
                    status = UX_SEMAPHORE_ERROR;
 8013504:	2515      	movs	r5, #21
 8013506:	e7f8      	b.n	80134fa <_ux_device_stack_initialize+0x182>
            status = UX_MEMORY_INSUFFICIENT;
 8013508:	2512      	movs	r5, #18
 801350a:	e7f7      	b.n	80134fc <_ux_device_stack_initialize+0x184>
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 801350c:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 8013510:	f000 fbdc 	bl	8013ccc <_ux_utility_semaphore_delete>
 8013514:	e007      	b.n	8013526 <_ux_device_stack_initialize+0x1ae>
            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);

            /* Move to previous endpoint.  */
            endpoints_pool --;
 8013516:	3c90      	subs	r4, #144	@ 0x90
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 8013518:	f8d6 011c 	ldr.w	r0, [r6, #284]	@ 0x11c
 801351c:	42a0      	cmp	r0, r4
 801351e:	d808      	bhi.n	8013532 <_ux_device_stack_initialize+0x1ba>
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 8013520:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8013522:	2b00      	cmp	r3, #0
 8013524:	d1f2      	bne.n	801350c <_ux_device_stack_initialize+0x194>
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 8013526:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8013528:	2800      	cmp	r0, #0
 801352a:	d0f4      	beq.n	8013516 <_ux_device_stack_initialize+0x19e>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 801352c:	f000 fb0e 	bl	8013b4c <_ux_utility_memory_free>
 8013530:	e7f1      	b.n	8013516 <_ux_device_stack_initialize+0x19e>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 8013532:	f000 fb0b 	bl	8013b4c <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 8013536:	f8d6 0114 	ldr.w	r0, [r6, #276]	@ 0x114
 801353a:	b108      	cbz	r0, 8013540 <_ux_device_stack_initialize+0x1c8>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 801353c:	f000 fb06 	bl	8013b4c <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 8013540:	f8d6 0098 	ldr.w	r0, [r6, #152]	@ 0x98
 8013544:	b108      	cbz	r0, 801354a <_ux_device_stack_initialize+0x1d2>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 8013546:	f000 fb01 	bl	8013b4c <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 801354a:	4b05      	ldr	r3, [pc, #20]	@ (8013560 <_ux_device_stack_initialize+0x1e8>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	f8d3 0158 	ldr.w	r0, [r3, #344]	@ 0x158
 8013552:	f000 fafb 	bl	8013b4c <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
}
 8013556:	4628      	mov	r0, r5
 8013558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return(UX_MEMORY_INSUFFICIENT);
 801355c:	2512      	movs	r5, #18
 801355e:	e7fa      	b.n	8013556 <_ux_device_stack_initialize+0x1de>
 8013560:	20010f44 	.word	0x20010f44
 8013564:	0801782c 	.word	0x0801782c

08013568 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 8013568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801356a:	4606      	mov	r6, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801356c:	4b0e      	ldr	r3, [pc, #56]	@ (80135a8 <_ux_device_stack_interface_delete+0x40>)
 801356e:	681f      	ldr	r7, [r3, #0]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 8013570:	6b44      	ldr	r4, [r0, #52]	@ 0x34
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 8013572:	e00d      	b.n	8013590 <_ux_device_stack_interface_delete+0x28>

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8013574:	6a65      	ldr	r5, [r4, #36]	@ 0x24
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8013576:	4b0c      	ldr	r3, [pc, #48]	@ (80135a8 <_ux_device_stack_interface_delete+0x40>)
 8013578:	6818      	ldr	r0, [r3, #0]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 801357a:	6983      	ldr	r3, [r0, #24]
 801357c:	4622      	mov	r2, r4
 801357e:	210f      	movs	r1, #15
 8013580:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8013582:	2300      	movs	r3, #0
 8013584:	6023      	str	r3, [r4, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 8013586:	6063      	str	r3, [r4, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 8013588:	6263      	str	r3, [r4, #36]	@ 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 801358a:	62a3      	str	r3, [r4, #40]	@ 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 801358c:	62e3      	str	r3, [r4, #44]	@ 0x2c
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 801358e:	462c      	mov	r4, r5
    while (next_endpoint != UX_NULL)
 8013590:	2c00      	cmp	r4, #0
 8013592:	d1ef      	bne.n	8013574 <_ux_device_stack_interface_delete+0xc>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8013594:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8013596:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 801359a:	2000      	movs	r0, #0
 801359c:	6070      	str	r0, [r6, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 801359e:	60b0      	str	r0, [r6, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 80135a0:	6330      	str	r0, [r6, #48]	@ 0x30
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 80135a2:	6370      	str	r0, [r6, #52]	@ 0x34
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 80135a4:	6030      	str	r0, [r6, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
}
 80135a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135a8:	20010f44 	.word	0x20010f44

080135ac <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 80135ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135b0:	4680      	mov	r8, r0
 80135b2:	4689      	mov	r9, r1

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80135b4:	4b44      	ldr	r3, [pc, #272]	@ (80136c8 <_ux_device_stack_interface_set+0x11c>)
 80135b6:	681e      	ldr	r6, [r3, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80135b8:	f106 0720 	add.w	r7, r6, #32

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 80135bc:	f8d6 4114 	ldr.w	r4, [r6, #276]	@ 0x114

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 80135c0:	f8d6 3118 	ldr.w	r3, [r6, #280]	@ 0x118
    while (interfaces_pool_number != 0)
 80135c4:	e001      	b.n	80135ca <_ux_device_stack_interface_set+0x1e>
        /* Check if this interface is free.  */
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
            break;
    
        /* Try the next interface.  */
        interface_ptr++;
 80135c6:	3438      	adds	r4, #56	@ 0x38
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 80135c8:	3b01      	subs	r3, #1
    while (interfaces_pool_number != 0)
 80135ca:	b113      	cbz	r3, 80135d2 <_ux_device_stack_interface_set+0x26>
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 80135cc:	6822      	ldr	r2, [r4, #0]
 80135ce:	2a00      	cmp	r2, #0
 80135d0:	d1f9      	bne.n	80135c6 <_ux_device_stack_interface_set+0x1a>
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d075      	beq.n	80136c2 <_ux_device_stack_interface_set+0x116>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface_ptr -> ux_slave_interface_status = UX_USED;
 80135d6:	4623      	mov	r3, r4
 80135d8:	2201      	movs	r2, #1
 80135da:	f843 2b0c 	str.w	r2, [r3], #12

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, interface_ptr, 0, 0, 0)

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
 80135de:	2209      	movs	r2, #9
 80135e0:	493a      	ldr	r1, [pc, #232]	@ (80136cc <_ux_device_stack_interface_set+0x120>)
 80135e2:	4640      	mov	r0, r8
 80135e4:	f000 f9ca 	bl	801397c <_ux_utility_descriptor_parse>
                (UCHAR *) &interface_ptr -> ux_slave_interface_descriptor);

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 80135e8:	f8d6 3110 	ldr.w	r3, [r6, #272]	@ 0x110
 80135ec:	b1d3      	cbz	r3, 8013624 <_ux_device_stack_interface_set+0x78>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 80135ee:	461a      	mov	r2, r3
 80135f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d1fb      	bne.n	80135ee <_ux_device_stack_interface_set+0x42>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 80135f6:	6314      	str	r4, [r2, #48]	@ 0x30
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface_ptr;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 80135f8:	f898 3000 	ldrb.w	r3, [r8]
 80135fc:	eba9 0903 	sub.w	r9, r9, r3
    device_framework +=  (ULONG) *device_framework;
 8013600:	4498      	add	r8, r3

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 8013602:	f1b9 0f00 	cmp.w	r9, #0
 8013606:	d058      	beq.n	80136ba <_ux_device_stack_interface_set+0x10e>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8013608:	f898 a000 	ldrb.w	sl, [r8]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 801360c:	f898 3001 	ldrb.w	r3, [r8, #1]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 8013610:	2b04      	cmp	r3, #4
 8013612:	d04d      	beq.n	80136b0 <_ux_device_stack_interface_set+0x104>
 8013614:	2b05      	cmp	r3, #5
 8013616:	d008      	beq.n	801362a <_ux_device_stack_interface_set+0x7e>
 8013618:	2b02      	cmp	r3, #2
 801361a:	d049      	beq.n	80136b0 <_ux_device_stack_interface_set+0x104>
        default:
            break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 801361c:	eba9 090a 	sub.w	r9, r9, sl

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8013620:	44d0      	add	r8, sl
 8013622:	e7ee      	b.n	8013602 <_ux_device_stack_interface_set+0x56>
        device -> ux_slave_device_first_interface =  interface_ptr;
 8013624:	f8c6 4110 	str.w	r4, [r6, #272]	@ 0x110
 8013628:	e7e6      	b.n	80135f8 <_ux_device_stack_interface_set+0x4c>
            endpoint = device -> ux_slave_device_endpoints_pool;
 801362a:	f8d6 511c 	ldr.w	r5, [r6, #284]	@ 0x11c
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 801362e:	f8d6 3120 	ldr.w	r3, [r6, #288]	@ 0x120
            while (endpoints_pool_number != 0)
 8013632:	b33b      	cbz	r3, 8013684 <_ux_device_stack_interface_set+0xd8>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 8013634:	682a      	ldr	r2, [r5, #0]
 8013636:	b112      	cbz	r2, 801363e <_ux_device_stack_interface_set+0x92>
                endpoint++;
 8013638:	3590      	adds	r5, #144	@ 0x90
               endpoints_pool_number--; 
 801363a:	3b01      	subs	r3, #1
 801363c:	e7f9      	b.n	8013632 <_ux_device_stack_interface_set+0x86>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 801363e:	462b      	mov	r3, r5
 8013640:	2201      	movs	r2, #1
 8013642:	f843 2b0c 	str.w	r2, [r3], #12
            _ux_utility_descriptor_parse(device_framework,
 8013646:	2206      	movs	r2, #6
 8013648:	4921      	ldr	r1, [pc, #132]	@ (80136d0 <_ux_device_stack_interface_set+0x124>)
 801364a:	4640      	mov	r0, r8
 801364c:	f000 f996 	bl	801397c <_ux_utility_descriptor_parse>
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8013650:	69eb      	ldr	r3, [r5, #28]
            max_transfer_length =
 8013652:	f3c3 020a 	ubfx	r2, r3, #0, #11
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8013656:	491c      	ldr	r1, [pc, #112]	@ (80136c8 <_ux_device_stack_interface_set+0x11c>)
 8013658:	6809      	ldr	r1, [r1, #0]
 801365a:	f8d1 119c 	ldr.w	r1, [r1, #412]	@ 0x19c
 801365e:	2902      	cmp	r1, #2
 8013660:	d012      	beq.n	8013688 <_ux_device_stack_interface_set+0xdc>
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8013662:	652a      	str	r2, [r5, #80]	@ 0x50
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8013664:	63ad      	str	r5, [r5, #56]	@ 0x38
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8013666:	f04f 33ff 	mov.w	r3, #4294967295
 801366a:	67eb      	str	r3, [r5, #124]	@ 0x7c
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 801366c:	62ac      	str	r4, [r5, #40]	@ 0x28
            endpoint -> ux_slave_endpoint_device =  device;
 801366e:	62ef      	str	r7, [r5, #44]	@ 0x2c
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8013670:	69b3      	ldr	r3, [r6, #24]
 8013672:	462a      	mov	r2, r5
 8013674:	210e      	movs	r1, #14
 8013676:	4630      	mov	r0, r6
 8013678:	4798      	blx	r3
            if (status != UX_SUCCESS)
 801367a:	b980      	cbnz	r0, 801369e <_ux_device_stack_interface_set+0xf2>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 801367c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801367e:	b98b      	cbnz	r3, 80136a4 <_ux_device_stack_interface_set+0xf8>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 8013680:	6365      	str	r5, [r4, #52]	@ 0x34
 8013682:	e7cb      	b.n	801361c <_ux_device_stack_interface_set+0x70>
                return(UX_MEMORY_INSUFFICIENT);
 8013684:	2012      	movs	r0, #18
 8013686:	e016      	b.n	80136b6 <_ux_device_stack_interface_set+0x10a>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 8013688:	69a9      	ldr	r1, [r5, #24]
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801368a:	f011 0f01 	tst.w	r1, #1
 801368e:	d0e8      	beq.n	8013662 <_ux_device_stack_interface_set+0xb6>
                if (n_trans)
 8013690:	f413 53c0 	ands.w	r3, r3, #6144	@ 0x1800
 8013694:	d0e5      	beq.n	8013662 <_ux_device_stack_interface_set+0xb6>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8013696:	0adb      	lsrs	r3, r3, #11
                    max_transfer_length *= n_trans;
 8013698:	fb03 2202 	mla	r2, r3, r2, r2
 801369c:	e7e1      	b.n	8013662 <_ux_device_stack_interface_set+0xb6>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 801369e:	2300      	movs	r3, #0
 80136a0:	602b      	str	r3, [r5, #0]
                return(status);
 80136a2:	e008      	b.n	80136b6 <_ux_device_stack_interface_set+0x10a>
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 80136a4:	461a      	mov	r2, r3
 80136a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d1fb      	bne.n	80136a4 <_ux_device_stack_interface_set+0xf8>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 80136ac:	6255      	str	r5, [r2, #36]	@ 0x24
 80136ae:	e7b5      	b.n	801361c <_ux_device_stack_interface_set+0x70>
            status =  _ux_device_stack_interface_start(interface_ptr);
 80136b0:	4620      	mov	r0, r4
 80136b2:	f000 f80f 	bl	80136d4 <_ux_device_stack_interface_start>
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);

    /* Return the status to the caller.  */
    return(status);
}
 80136b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status =  _ux_device_stack_interface_start(interface_ptr);
 80136ba:	4620      	mov	r0, r4
 80136bc:	f000 f80a 	bl	80136d4 <_ux_device_stack_interface_start>
    return(status);
 80136c0:	e7f9      	b.n	80136b6 <_ux_device_stack_interface_set+0x10a>
        return(UX_MEMORY_INSUFFICIENT);
 80136c2:	2012      	movs	r0, #18
 80136c4:	e7f7      	b.n	80136b6 <_ux_device_stack_interface_set+0x10a>
 80136c6:	bf00      	nop
 80136c8:	20010f44 	.word	0x20010f44
 80136cc:	20000044 	.word	0x20000044
 80136d0:	20000068 	.word	0x20000068

080136d4 <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 80136d4:	b530      	push	{r4, r5, lr}
 80136d6:	b08d      	sub	sp, #52	@ 0x34
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 80136d8:	4b15      	ldr	r3, [pc, #84]	@ (8013730 <_ux_device_stack_interface_start+0x5c>)
 80136da:	681a      	ldr	r2, [r3, #0]
 80136dc:	6943      	ldr	r3, [r0, #20]
 80136de:	3356      	adds	r3, #86	@ 0x56
 80136e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80136e4:	685d      	ldr	r5, [r3, #4]

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 80136e6:	b305      	cbz	r5, 801372a <_ux_device_stack_interface_start+0x56>
 80136e8:	4604      	mov	r4, r0

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 80136ea:	2301      	movs	r3, #1
 80136ec:	9301      	str	r3, [sp, #4]
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 80136ee:	9003      	str	r0, [sp, #12]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 80136f0:	6a03      	ldr	r3, [r0, #32]
 80136f2:	9306      	str	r3, [sp, #24]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 80136f4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80136f6:	9307      	str	r3, [sp, #28]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 80136f8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80136fa:	9308      	str	r3, [sp, #32]
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 80136fc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80136fe:	9305      	str	r3, [sp, #20]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 8013700:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8013702:	9304      	str	r3, [sp, #16]

    /* We can now memorize the interface pointer associated with this class.  */
    class_ptr -> ux_slave_class_interface = interface_ptr;
 8013704:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8013708:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801370a:	a801      	add	r0, sp, #4
 801370c:	4798      	blx	r3

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 801370e:	b110      	cbz	r0, 8013716 <_ux_device_stack_interface_start+0x42>

        return(status); 
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 8013710:	2057      	movs	r0, #87	@ 0x57
}
 8013712:	b00d      	add	sp, #52	@ 0x34
 8013714:	bd30      	pop	{r4, r5, pc}
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8013716:	9509      	str	r5, [sp, #36]	@ 0x24
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 8013718:	2302      	movs	r3, #2
 801371a:	9301      	str	r3, [sp, #4]
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 801371c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801371e:	a801      	add	r0, sp, #4
 8013720:	4798      	blx	r3
        if(status == UX_SUCCESS)
 8013722:	2800      	cmp	r0, #0
 8013724:	d1f5      	bne.n	8013712 <_ux_device_stack_interface_start+0x3e>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 8013726:	6065      	str	r5, [r4, #4]
        return(status); 
 8013728:	e7f3      	b.n	8013712 <_ux_device_stack_interface_start+0x3e>
        return (UX_NO_CLASS_MATCH);
 801372a:	2057      	movs	r0, #87	@ 0x57
 801372c:	e7f1      	b.n	8013712 <_ux_device_stack_interface_start+0x3e>
 801372e:	bf00      	nop
 8013730:	20010f44 	.word	0x20010f44

08013734 <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8013734:	b538      	push	{r3, r4, r5, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8013736:	4b18      	ldr	r3, [pc, #96]	@ (8013798 <_ux_device_stack_set_feature+0x64>)
 8013738:	681c      	ldr	r4, [r3, #0]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 801373a:	f010 0003 	ands.w	r0, r0, #3
 801373e:	d00a      	beq.n	8013756 <_ux_device_stack_set_feature+0x22>
 8013740:	4694      	mov	ip, r2
 8013742:	f104 025c 	add.w	r2, r4, #92	@ 0x5c
 8013746:	2802      	cmp	r0, #2
 8013748:	d010      	beq.n	801376c <_ux_device_stack_set_feature+0x38>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801374a:	69a3      	ldr	r3, [r4, #24]
 801374c:	2114      	movs	r1, #20
 801374e:	4620      	mov	r0, r4
 8013750:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8013752:	2000      	movs	r0, #0
    }
}
 8013754:	bd38      	pop	{r3, r4, r5, pc}
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8013756:	2901      	cmp	r1, #1
 8013758:	d001      	beq.n	801375e <_ux_device_stack_set_feature+0x2a>
        return(UX_FUNCTION_NOT_SUPPORTED);
 801375a:	2054      	movs	r0, #84	@ 0x54
 801375c:	e7fa      	b.n	8013754 <_ux_device_stack_set_feature+0x20>
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 801375e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	@ 0x1a4
 8013762:	b1bb      	cbz	r3, 8013794 <_ux_device_stack_set_feature+0x60>
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 8013764:	2301      	movs	r3, #1
 8013766:	f8c4 31a8 	str.w	r3, [r4, #424]	@ 0x1a8
                return (UX_SUCCESS);
 801376a:	e7f3      	b.n	8013754 <_ux_device_stack_set_feature+0x20>
        interface_ptr =  device -> ux_slave_device_first_interface;
 801376c:	f8d4 0110 	ldr.w	r0, [r4, #272]	@ 0x110
        while (interface_ptr != UX_NULL)
 8013770:	2800      	cmp	r0, #0
 8013772:	d0ea      	beq.n	801374a <_ux_device_stack_set_feature+0x16>
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 8013774:	6b43      	ldr	r3, [r0, #52]	@ 0x34
            while (endpoint_target != UX_NULL)
 8013776:	b15b      	cbz	r3, 8013790 <_ux_device_stack_set_feature+0x5c>
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8013778:	6959      	ldr	r1, [r3, #20]
 801377a:	4561      	cmp	r1, ip
 801377c:	d001      	beq.n	8013782 <_ux_device_stack_set_feature+0x4e>
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 801377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013780:	e7f9      	b.n	8013776 <_ux_device_stack_set_feature+0x42>
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 8013782:	69a5      	ldr	r5, [r4, #24]
 8013784:	461a      	mov	r2, r3
 8013786:	2114      	movs	r1, #20
 8013788:	4620      	mov	r0, r4
 801378a:	47a8      	blx	r5
                    return(UX_SUCCESS);
 801378c:	2000      	movs	r0, #0
 801378e:	e7e1      	b.n	8013754 <_ux_device_stack_set_feature+0x20>
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8013790:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8013792:	e7ed      	b.n	8013770 <_ux_device_stack_set_feature+0x3c>
                return (UX_FUNCTION_NOT_SUPPORTED);
 8013794:	2054      	movs	r0, #84	@ 0x54
 8013796:	e7dd      	b.n	8013754 <_ux_device_stack_set_feature+0x20>
 8013798:	20010f44 	.word	0x20010f44

0801379c <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 801379c:	b538      	push	{r3, r4, r5, lr}
 801379e:	4604      	mov	r4, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80137a0:	4b0c      	ldr	r3, [pc, #48]	@ (80137d4 <_ux_device_stack_transfer_abort+0x38>)
 80137a2:	6818      	ldr	r0, [r3, #0]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 80137a4:	6261      	str	r1, [r4, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80137a6:	f3ef 8510 	mrs	r5, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80137aa:	b672      	cpsid	i

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 80137ac:	6823      	ldr	r3, [r4, #0]
 80137ae:	2b01      	cmp	r3, #1
 80137b0:	d003      	beq.n	80137ba <_ux_device_stack_transfer_abort+0x1e>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80137b2:	f385 8810 	msr	PRIMASK, r5
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
}
 80137b6:	2000      	movs	r0, #0
 80137b8:	bd38      	pop	{r3, r4, r5, pc}
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 80137ba:	6983      	ldr	r3, [r0, #24]
 80137bc:	4622      	mov	r2, r4
 80137be:	210d      	movs	r1, #13
 80137c0:	4798      	blx	r3
 80137c2:	f385 8810 	msr	PRIMASK, r5
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 80137c6:	4620      	mov	r0, r4
 80137c8:	2304      	movs	r3, #4
 80137ca:	f840 3b30 	str.w	r3, [r0], #48
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 80137ce:	f000 faa5 	bl	8013d1c <_ux_utility_semaphore_put>
 80137d2:	e7f0      	b.n	80137b6 <_ux_device_stack_transfer_abort+0x1a>
 80137d4:	20010f44 	.word	0x20010f44

080137d8 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 80137d8:	b508      	push	{r3, lr}

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 80137da:	3030      	adds	r0, #48	@ 0x30
 80137dc:	f7ff ffde 	bl	801379c <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 80137e0:	2000      	movs	r0, #0
 80137e2:	bd08      	pop	{r3, pc}

080137e4 <_ux_device_stack_transfer_request>:
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 80137e4:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80137e6:	2b01      	cmp	r3, #1
 80137e8:	d04e      	beq.n	8013888 <_ux_device_stack_transfer_request+0xa4>
{
 80137ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137ee:	4604      	mov	r4, r0
 80137f0:	460d      	mov	r5, r1
 80137f2:	4617      	mov	r7, r2
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80137f4:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 80137f8:	b672      	cpsid	i
    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 80137fa:	4b24      	ldr	r3, [pc, #144]	@ (801388c <_ux_device_stack_transfer_request+0xa8>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	6a1b      	ldr	r3, [r3, #32]

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
            || (device_state == UX_DEVICE_CONFIGURED))
 8013800:	3b01      	subs	r3, #1
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 8013802:	2b02      	cmp	r3, #2
 8013804:	d81e      	bhi.n	8013844 <_ux_device_stack_transfer_request+0x60>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 8013806:	2301      	movs	r3, #1
 8013808:	6003      	str	r3, [r0, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801380a:	f382 8810 	msr	PRIMASK, r2
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801380e:	4b1f      	ldr	r3, [pc, #124]	@ (801388c <_ux_device_stack_transfer_request+0xa8>)
 8013810:	f8d3 8000 	ldr.w	r8, [r3]

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8013814:	6886      	ldr	r6, [r0, #8]
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 8013816:	69b3      	ldr	r3, [r6, #24]
 8013818:	f013 0f03 	tst.w	r3, #3
 801381c:	d119      	bne.n	8013852 <_ux_device_stack_transfer_request+0x6e>

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 801381e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8013820:	2b03      	cmp	r3, #3
 8013822:	d023      	beq.n	801386c <_ux_device_stack_transfer_request+0x88>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8013824:	2300      	movs	r3, #0
 8013826:	6523      	str	r3, [r4, #80]	@ 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8013828:	2300      	movs	r3, #0
 801382a:	61a3      	str	r3, [r4, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 801382c:	6165      	str	r5, [r4, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 801382e:	61e5      	str	r5, [r4, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 8013830:	68e3      	ldr	r3, [r4, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 8013832:	6123      	str	r3, [r4, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 8013834:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8013838:	4622      	mov	r2, r4
 801383a:	210c      	movs	r1, #12
 801383c:	4640      	mov	r0, r8
 801383e:	4798      	blx	r3

    /* And return the status.  */
    return(status);

#endif
}
 8013840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013844:	f382 8810 	msr	PRIMASK, r2
        return(UX_TRANSFER_NOT_READY);
 8013848:	2025      	movs	r0, #37	@ 0x25
 801384a:	e7f9      	b.n	8013840 <_ux_device_stack_transfer_request+0x5c>
            _ux_utility_delay_ms(100);
 801384c:	2064      	movs	r0, #100	@ 0x64
 801384e:	f000 f885 	bl	801395c <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8013852:	6873      	ldr	r3, [r6, #4]
 8013854:	2b02      	cmp	r3, #2
 8013856:	d0f9      	beq.n	801384c <_ux_device_stack_transfer_request+0x68>
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 8013858:	6973      	ldr	r3, [r6, #20]
 801385a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801385e:	d002      	beq.n	8013866 <_ux_device_stack_transfer_request+0x82>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8013860:	2303      	movs	r3, #3
 8013862:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013864:	e7db      	b.n	801381e <_ux_device_stack_transfer_request+0x3a>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 8013866:	2302      	movs	r3, #2
 8013868:	62a3      	str	r3, [r4, #40]	@ 0x28
 801386a:	e7d8      	b.n	801381e <_ux_device_stack_transfer_request+0x3a>
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 801386c:	2d00      	cmp	r5, #0
 801386e:	d0d9      	beq.n	8013824 <_ux_device_stack_transfer_request+0x40>
        (slave_length != 0) && (host_length != slave_length) && 
 8013870:	42bd      	cmp	r5, r7
 8013872:	d0d7      	beq.n	8013824 <_ux_device_stack_transfer_request+0x40>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 8013874:	69f2      	ldr	r2, [r6, #28]
 8013876:	fbb5 f3f2 	udiv	r3, r5, r2
 801387a:	fb02 5313 	mls	r3, r2, r3, r5
        (slave_length != 0) && (host_length != slave_length) && 
 801387e:	2b00      	cmp	r3, #0
 8013880:	d1d0      	bne.n	8013824 <_ux_device_stack_transfer_request+0x40>
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 8013882:	2301      	movs	r3, #1
 8013884:	6523      	str	r3, [r4, #80]	@ 0x50
 8013886:	e7cf      	b.n	8013828 <_ux_device_stack_transfer_request+0x44>
        return(UX_SUCCESS);
 8013888:	2000      	movs	r0, #0
}
 801388a:	4770      	bx	lr
 801388c:	20010f44 	.word	0x20010f44

08013890 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 8013890:	b510      	push	{r4, lr}

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 8013892:	4b05      	ldr	r3, [pc, #20]	@ (80138a8 <_ux_system_error_handler+0x18>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	651a      	str	r2, [r3, #80]	@ 0x50
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 8013898:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 801389a:	3401      	adds	r4, #1
 801389c:	655c      	str	r4, [r3, #84]	@ 0x54

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 801389e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80138a0:	b103      	cbz	r3, 80138a4 <_ux_system_error_handler+0x14>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 80138a2:	4798      	blx	r3
    }
}
 80138a4:	bd10      	pop	{r4, pc}
 80138a6:	bf00      	nop
 80138a8:	20010f48 	.word	0x20010f48

080138ac <_ux_system_initialize>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size, 
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 80138ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138ae:	4604      	mov	r4, r0
 80138b0:	460f      	mov	r7, r1
 80138b2:	4615      	mov	r5, r2
 80138b4:	461e      	mov	r6, r3
UINT                status;
#endif


    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 80138b6:	460a      	mov	r2, r1
 80138b8:	2100      	movs	r1, #0
 80138ba:	f000 f9cd 	bl	8013c58 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 80138be:	4b24      	ldr	r3, [pc, #144]	@ (8013950 <_ux_system_initialize+0xa4>)
 80138c0:	601c      	str	r4, [r3, #0]
#endif 

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 80138c2:	f104 015c 	add.w	r1, r4, #92	@ 0x5c
 80138c6:	4a23      	ldr	r2, [pc, #140]	@ (8013954 <_ux_system_initialize+0xa8>)
 80138c8:	6011      	str	r1, [r2, #0]
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif 


    /* Set the cache safe memory for the dynamic pool */
    _ux_system -> ux_system_regular_memory_pool_start =  (UX_MEMORY_BLOCK *) (((UCHAR *) regular_memory_pool_start) 
 80138ca:	f504 720a 	add.w	r2, r4, #552	@ 0x228
 80138ce:	6022      	str	r2, [r4, #0]
                                                            + memory_pool_offset);

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start =   (ALIGN_TYPE) _ux_system -> ux_system_regular_memory_pool_start;
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	6818      	ldr	r0, [r3, #0]
    int_memory_pool_start +=  UX_ALIGN_MIN;
 80138d4:	300f      	adds	r0, #15
    int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 80138d6:	f020 000f 	bic.w	r0, r0, #15
    
    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 80138da:	443c      	add	r4, r7

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 80138dc:	4284      	cmp	r4, r0
 80138de:	d932      	bls.n	8013946 <_ux_system_initialize+0x9a>
        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
    }

    /* Now, we have a project structure allocated, save the regular memory allocation details */
    _ux_system -> ux_system_regular_memory_pool_size =     (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 80138e0:	1a24      	subs	r4, r4, r0
 80138e2:	605c      	str	r4, [r3, #4]
    _ux_system -> ux_system_regular_memory_pool_free =     _ux_system -> ux_system_regular_memory_pool_size;
 80138e4:	609c      	str	r4, [r3, #8]
    _ux_system -> ux_system_regular_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 80138e6:	6018      	str	r0, [r3, #0]

    /* Build the first free memory block */
    memory_block =                             _ux_system -> ux_system_regular_memory_pool_start;
 80138e8:	4b19      	ldr	r3, [pc, #100]	@ (8013950 <_ux_system_initialize+0xa4>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	681a      	ldr	r2, [r3, #0]
    memory_block -> ux_memory_block_size =     _ux_system -> ux_system_regular_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 80138ee:	685b      	ldr	r3, [r3, #4]
 80138f0:	3b10      	subs	r3, #16
 80138f2:	6013      	str	r3, [r2, #0]
    memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 80138f4:	2300      	movs	r3, #0
 80138f6:	6053      	str	r3, [r2, #4]

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if (cache_safe_memory_pool_start == UX_NULL)
 80138f8:	b1e5      	cbz	r5, 8013934 <_ux_system_initialize+0x88>
    else
    {
    
        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
        int_memory_pool_start +=  UX_ALIGN_MIN;
 80138fa:	f105 000f 	add.w	r0, r5, #15
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 80138fe:	f020 000f 	bic.w	r0, r0, #15
    
        /* Save the cache safe memory allocation details */
        _ux_system -> ux_system_cache_safe_memory_pool_size =     cache_safe_memory_size - UX_ALIGN_MIN;
 8013902:	4c13      	ldr	r4, [pc, #76]	@ (8013950 <_ux_system_initialize+0xa4>)
 8013904:	6823      	ldr	r3, [r4, #0]
 8013906:	f1a6 020f 	sub.w	r2, r6, #15
 801390a:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =     _ux_system -> ux_system_cache_safe_memory_pool_size;
 801390c:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 801390e:	60d8      	str	r0, [r3, #12]
    
        /* Reset this memory block */
        _ux_utility_memory_set(_ux_system -> ux_system_cache_safe_memory_pool_start, 0, _ux_system -> ux_system_cache_safe_memory_pool_size); /* Use case of memset is verified. */
 8013910:	2100      	movs	r1, #0
 8013912:	f000 f9a1 	bl	8013c58 <_ux_utility_memory_set>
    
        /* Build the first free memory block */
        memory_block =                             _ux_system -> ux_system_cache_safe_memory_pool_start;
 8013916:	6823      	ldr	r3, [r4, #0]
 8013918:	68da      	ldr	r2, [r3, #12]
        memory_block -> ux_memory_block_size =     _ux_system -> ux_system_cache_safe_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 801391a:	691b      	ldr	r3, [r3, #16]
 801391c:	3b10      	subs	r3, #16
 801391e:	6013      	str	r3, [r2, #0]
        memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 8013920:	2300      	movs	r3, #0
 8013922:	6053      	str	r3, [r2, #4]
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 8013924:	4b0a      	ldr	r3, [pc, #40]	@ (8013950 <_ux_system_initialize+0xa4>)
 8013926:	6818      	ldr	r0, [r3, #0]
 8013928:	490b      	ldr	r1, [pc, #44]	@ (8013958 <_ux_system_initialize+0xac>)
 801392a:	301c      	adds	r0, #28
 801392c:	f000 f99c 	bl	8013c68 <_ux_utility_mutex_create>
    if(status != UX_SUCCESS)
 8013930:	b958      	cbnz	r0, 801394a <_ux_system_initialize+0x9e>
        return(UX_MUTEX_ERROR);
#endif

    return(UX_SUCCESS);
}
 8013932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _ux_system -> ux_system_cache_safe_memory_pool_size =  _ux_system -> ux_system_regular_memory_pool_size;
 8013934:	4b06      	ldr	r3, [pc, #24]	@ (8013950 <_ux_system_initialize+0xa4>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	685a      	ldr	r2, [r3, #4]
 801393a:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =  _ux_system -> ux_system_regular_memory_pool_free;
 801393c:	689a      	ldr	r2, [r3, #8]
 801393e:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start = _ux_system -> ux_system_regular_memory_pool_start;
 8013940:	681a      	ldr	r2, [r3, #0]
 8013942:	60da      	str	r2, [r3, #12]
 8013944:	e7ee      	b.n	8013924 <_ux_system_initialize+0x78>
        return(UX_MEMORY_INSUFFICIENT);
 8013946:	2012      	movs	r0, #18
 8013948:	e7f3      	b.n	8013932 <_ux_system_initialize+0x86>
        return(UX_MUTEX_ERROR);
 801394a:	2017      	movs	r0, #23
 801394c:	e7f1      	b.n	8013932 <_ux_system_initialize+0x86>
 801394e:	bf00      	nop
 8013950:	20010f48 	.word	0x20010f48
 8013954:	20010f44 	.word	0x20010f44
 8013958:	0801784c 	.word	0x0801784c

0801395c <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 801395c:	b508      	push	{r3, lr}
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 801395e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013962:	fb03 f000 	mul.w	r0, r3, r0
 8013966:	4b04      	ldr	r3, [pc, #16]	@ (8013978 <_ux_utility_delay_ms+0x1c>)
 8013968:	fba3 3000 	umull	r3, r0, r3, r0
 801396c:	0980      	lsrs	r0, r0, #6
    
    /* For safety add 1 to ticks.  */
    ticks++;

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 801396e:	3001      	adds	r0, #1
 8013970:	f7fe f808 	bl	8011984 <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
}
 8013974:	bd08      	pop	{r3, pc}
 8013976:	bf00      	nop
 8013978:	10624dd3 	.word	0x10624dd3

0801397c <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 801397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801397e:	4606      	mov	r6, r0
 8013980:	460c      	mov	r4, r1
 8013982:	461d      	mov	r5, r3

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 8013984:	e006      	b.n	8013994 <_ux_utility_descriptor_parse+0x18>
            raw_descriptor +=  4;
            break;                   

        case 2:

            *((ULONG *) descriptor) = (ULONG) _ux_utility_short_get(raw_descriptor);
 8013986:	4630      	mov	r0, r6
 8013988:	f000 f9cc 	bl	8013d24 <_ux_utility_short_get>
 801398c:	6028      	str	r0, [r5, #0]
            raw_descriptor += 2;
 801398e:	3602      	adds	r6, #2
            *((ULONG *) descriptor) =  (ULONG) *raw_descriptor;
            raw_descriptor++;
        }

        /* Add the size of the component to the destination.  */
        descriptor +=  4;
 8013990:	3504      	adds	r5, #4
    while(descriptor_entries--)
 8013992:	463a      	mov	r2, r7
 8013994:	1e57      	subs	r7, r2, #1
 8013996:	b17a      	cbz	r2, 80139b8 <_ux_utility_descriptor_parse+0x3c>
        switch(*descriptor_structure++)
 8013998:	f814 3b01 	ldrb.w	r3, [r4], #1
 801399c:	2b02      	cmp	r3, #2
 801399e:	d0f2      	beq.n	8013986 <_ux_utility_descriptor_parse+0xa>
 80139a0:	2b04      	cmp	r3, #4
 80139a2:	d105      	bne.n	80139b0 <_ux_utility_descriptor_parse+0x34>
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 80139a4:	4630      	mov	r0, r6
 80139a6:	f000 f808 	bl	80139ba <_ux_utility_long_get>
 80139aa:	6028      	str	r0, [r5, #0]
            raw_descriptor +=  4;
 80139ac:	3604      	adds	r6, #4
            break;                   
 80139ae:	e7ef      	b.n	8013990 <_ux_utility_descriptor_parse+0x14>
            *((ULONG *) descriptor) =  (ULONG) *raw_descriptor;
 80139b0:	f816 3b01 	ldrb.w	r3, [r6], #1
 80139b4:	602b      	str	r3, [r5, #0]
            raw_descriptor++;
 80139b6:	e7eb      	b.n	8013990 <_ux_utility_descriptor_parse+0x14>
    }

    /* Return to caller.  */
    return;
}
 80139b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080139ba <_ux_utility_long_get>:
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 80139ba:	7803      	ldrb	r3, [r0, #0]
    value |=  (ULONG)*address++ << 8;
 80139bc:	7842      	ldrb	r2, [r0, #1]
 80139be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    value |=  (ULONG)*address++ << 16;
 80139c2:	7882      	ldrb	r2, [r0, #2]
 80139c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    value |=  (ULONG)*address << 24;
 80139c8:	78c0      	ldrb	r0, [r0, #3]

    /* Return 32-bit value.  */
    return(value);
}
 80139ca:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80139ce:	4770      	bx	lr

080139d0 <_ux_utility_long_put>:
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 80139d0:	7001      	strb	r1, [r0, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 80139d2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80139d6:	7043      	strb	r3, [r0, #1]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 80139d8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80139dc:	7083      	strb	r3, [r0, #2]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 80139de:	0e09      	lsrs	r1, r1, #24
 80139e0:	70c1      	strb	r1, [r0, #3]

    /* Return to caller.  */
    return;
}
 80139e2:	4770      	bx	lr

080139e4 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 80139e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139e8:	4606      	mov	r6, r0
 80139ea:	460f      	mov	r7, r1
 80139ec:	4615      	mov	r5, r2
UCHAR               *memory_buffer;
ALIGN_TYPE          int_memory_buffer;


    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 80139ee:	4b48      	ldr	r3, [pc, #288]	@ (8013b10 <_ux_utility_memory_allocate+0x12c>)
 80139f0:	6818      	ldr	r0, [r3, #0]
 80139f2:	301c      	adds	r0, #28
 80139f4:	f000 f94f 	bl	8013c96 <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 80139f8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80139fc:	d003      	beq.n	8013a06 <_ux_utility_memory_allocate+0x22>
        memory_alignment = UX_NO_ALIGN;
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 80139fe:	2e0e      	cmp	r6, #14
 8013a00:	d802      	bhi.n	8013a08 <_ux_utility_memory_allocate+0x24>
        memory_alignment =  UX_ALIGN_MIN;
 8013a02:	260f      	movs	r6, #15
 8013a04:	e000      	b.n	8013a08 <_ux_utility_memory_allocate+0x24>
 8013a06:	260f      	movs	r6, #15

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
    memory_alignment++;
 8013a08:	f106 0801 	add.w	r8, r6, #1
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 8013a0c:	350f      	adds	r5, #15
 8013a0e:	f025 050f 	bic.w	r5, r5, #15
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8013a12:	1971      	adds	r1, r6, r5
 8013a14:	3110      	adds	r1, #16
 8013a16:	4638      	mov	r0, r7
 8013a18:	f000 f8ec 	bl	8013bf4 <_ux_utility_memory_free_block_best_get>

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 8013a1c:	4604      	mov	r4, r0
 8013a1e:	b358      	cbz	r0, 8013a78 <_ux_utility_memory_allocate+0x94>
        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 8013a20:	f100 0310 	add.w	r3, r0, #16

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 8013a24:	421e      	tst	r6, r3
 8013a26:	d132      	bne.n	8013a8e <_ux_utility_memory_allocate+0xaa>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 8013a28:	f105 0610 	add.w	r6, r5, #16
 8013a2c:	1982      	adds	r2, r0, r6
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8013a2e:	6883      	ldr	r3, [r0, #8]
 8013a30:	6093      	str	r3, [r2, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8013a32:	60d0      	str	r0, [r2, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8013a34:	6803      	ldr	r3, [r0, #0]
 8013a36:	1b5b      	subs	r3, r3, r5
 8013a38:	3b10      	subs	r3, #16
 8013a3a:	5183      	str	r3, [r0, r6]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	6053      	str	r3, [r2, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 8013a40:	6005      	str	r5, [r0, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8013a42:	6082      	str	r2, [r0, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 8013a44:	f047 4300 	orr.w	r3, r7, #2147483648	@ 0x80000000
 8013a48:	6043      	str	r3, [r0, #4]
        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 8013a4a:	3410      	adds	r4, #16

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested); /* Use case of memset is verified. */
 8013a4c:	462a      	mov	r2, r5
 8013a4e:	2100      	movs	r1, #0
 8013a50:	4620      	mov	r0, r4
 8013a52:	f000 f901 	bl	8013c58 <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 8013a56:	4b2e      	ldr	r3, [pc, #184]	@ (8013b10 <_ux_utility_memory_allocate+0x12c>)
 8013a58:	6818      	ldr	r0, [r3, #0]
 8013a5a:	68c2      	ldr	r2, [r0, #12]
 8013a5c:	6803      	ldr	r3, [r0, #0]
 8013a5e:	429a      	cmp	r2, r3
 8013a60:	d04e      	beq.n	8013b00 <_ux_utility_memory_allocate+0x11c>
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
    }
    else
    {

       switch (memory_cache_flag)
 8013a62:	2f01      	cmp	r7, #1
 8013a64:	d050      	beq.n	8013b08 <_ux_utility_memory_allocate+0x124>

            break;

            default:
                /* Update the amount of free memory in the regular memory pool.  */
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8013a66:	6883      	ldr	r3, [r0, #8]
 8013a68:	1b9b      	subs	r3, r3, r6
 8013a6a:	6083      	str	r3, [r0, #8]
        _ux_system -> ux_system_cache_safe_memory_pool_min_free = _ux_system -> ux_system_cache_safe_memory_pool_free;

#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8013a6c:	301c      	adds	r0, #28
 8013a6e:	f000 f90e 	bl	8013c8e <_ux_utility_mutex_off>

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
}                                
 8013a72:	4620      	mov	r0, r4
 8013a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8013a78:	4b25      	ldr	r3, [pc, #148]	@ (8013b10 <_ux_utility_memory_allocate+0x12c>)
 8013a7a:	6818      	ldr	r0, [r3, #0]
 8013a7c:	301c      	adds	r0, #28
 8013a7e:	f000 f906 	bl	8013c8e <_ux_utility_mutex_off>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 8013a82:	2212      	movs	r2, #18
 8013a84:	2108      	movs	r1, #8
 8013a86:	2002      	movs	r0, #2
 8013a88:	f7ff ff02 	bl	8013890 <_ux_system_error_handler>
        return(UX_NULL);
 8013a8c:	e7f1      	b.n	8013a72 <_ux_utility_memory_allocate+0x8e>
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 8013a8e:	f103 0210 	add.w	r2, r3, #16
        int_memory_buffer +=  memory_alignment - 1;
 8013a92:	4442      	add	r2, r8
 8013a94:	3a01      	subs	r2, #1
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 8013a96:	ea22 0206 	bic.w	r2, r2, r6
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 8013a9a:	f1a2 0110 	sub.w	r1, r2, #16
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8013a9e:	60c8      	str	r0, [r1, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8013aa0:	6880      	ldr	r0, [r0, #8]
 8013aa2:	6088      	str	r0, [r1, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 8013aa4:	6820      	ldr	r0, [r4, #0]
 8013aa6:	f842 0c10 	str.w	r0, [r2, #-16]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 8013aaa:	f047 4000 	orr.w	r0, r7, #2147483648	@ 0x80000000
 8013aae:	6048      	str	r0, [r1, #4]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8013ab0:	60a1      	str	r1, [r4, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 8013ab2:	1ac8      	subs	r0, r1, r3
 8013ab4:	6020      	str	r0, [r4, #0]
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8013ab6:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8013aba:	1a5b      	subs	r3, r3, r1
 8013abc:	4403      	add	r3, r0
 8013abe:	3b10      	subs	r3, #16
 8013ac0:	f842 3c10 	str.w	r3, [r2, #-16]
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 8013ac4:	1b58      	subs	r0, r3, r5
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 8013ac6:	2810      	cmp	r0, #16
 8013ac8:	d915      	bls.n	8013af6 <_ux_utility_memory_allocate+0x112>
            leftover_memory_block = (UX_MEMORY_BLOCK *) (((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested) & 0xFFFFFFFFu);
 8013aca:	eb01 0c05 	add.w	ip, r1, r5
 8013ace:	f10c 0410 	add.w	r4, ip, #16
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 8013ad2:	688e      	ldr	r6, [r1, #8]
 8013ad4:	f8cc 6018 	str.w	r6, [ip, #24]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 8013ad8:	f8cc 101c 	str.w	r1, [ip, #28]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8013adc:	3810      	subs	r0, #16
 8013ade:	f8cc 0010 	str.w	r0, [ip, #16]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8013ae2:	2000      	movs	r0, #0
 8013ae4:	f8cc 0014 	str.w	r0, [ip, #20]
            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 8013ae8:	608c      	str	r4, [r1, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 8013aea:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8013aee:	1aeb      	subs	r3, r5, r3
 8013af0:	4403      	add	r3, r0
 8013af2:	f842 3c10 	str.w	r3, [r2, #-16]
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8013af6:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8013afa:	3610      	adds	r6, #16
        memory_block =  new_memory_block;
 8013afc:	460c      	mov	r4, r1
 8013afe:	e7a4      	b.n	8013a4a <_ux_utility_memory_allocate+0x66>
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8013b00:	6883      	ldr	r3, [r0, #8]
 8013b02:	1b9b      	subs	r3, r3, r6
 8013b04:	6083      	str	r3, [r0, #8]
 8013b06:	e7b1      	b.n	8013a6c <_ux_utility_memory_allocate+0x88>
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 8013b08:	6943      	ldr	r3, [r0, #20]
 8013b0a:	1b9b      	subs	r3, r3, r6
 8013b0c:	6143      	str	r3, [r0, #20]
            break;
 8013b0e:	e7ad      	b.n	8013a6c <_ux_utility_memory_allocate+0x88>
 8013b10:	20010f48 	.word	0x20010f48

08013b14 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 8013b14:	b510      	push	{r4, lr}
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 8013b16:	469c      	mov	ip, r3
 8013b18:	b123      	cbz	r3, 8013b24 <_ux_utility_memory_allocate_mulc_safe+0x10>
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	fba2 e40c 	umull	lr, r4, r2, ip
 8013b20:	b92c      	cbnz	r4, 8013b2e <_ux_utility_memory_allocate_mulc_safe+0x1a>
 8013b22:	b933      	cbnz	r3, 8013b32 <_ux_utility_memory_allocate_mulc_safe+0x1e>
 8013b24:	fb02 f20c 	mul.w	r2, r2, ip
 8013b28:	f7ff ff5c 	bl	80139e4 <_ux_utility_memory_allocate>
}
 8013b2c:	bd10      	pop	{r4, pc}
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 8013b2e:	2301      	movs	r3, #1
 8013b30:	e7f7      	b.n	8013b22 <_ux_utility_memory_allocate_mulc_safe+0xe>
 8013b32:	2000      	movs	r0, #0
 8013b34:	e7fa      	b.n	8013b2c <_ux_utility_memory_allocate_mulc_safe+0x18>

08013b36 <_ux_utility_memory_copy>:
    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
    destination =  (UCHAR *) memory_destination;

    /* Loop to perform the copy.  */
    while(length--)
 8013b36:	e004      	b.n	8013b42 <_ux_utility_memory_copy+0xc>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 8013b38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b3c:	f800 2b01 	strb.w	r2, [r0], #1
    while(length--)
 8013b40:	461a      	mov	r2, r3
 8013b42:	1e53      	subs	r3, r2, #1
 8013b44:	2a00      	cmp	r2, #0
 8013b46:	d1f7      	bne.n	8013b38 <_ux_utility_memory_copy+0x2>
    }

    /* Return to caller.  */
    return; 
}
 8013b48:	4770      	bx	lr
	...

08013b4c <_ux_utility_memory_free>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 8013b4c:	b510      	push	{r4, lr}
 8013b4e:	4604      	mov	r4, r0
UCHAR               *regular_start, *regular_end;
UCHAR               *cache_safe_start, *cache_safe_end;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 8013b50:	4b27      	ldr	r3, [pc, #156]	@ (8013bf0 <_ux_utility_memory_free+0xa4>)
 8013b52:	6818      	ldr	r0, [r3, #0]
 8013b54:	301c      	adds	r0, #28
 8013b56:	f000 f89e 	bl	8013c96 <_ux_utility_mutex_on>
    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8013b5a:	f854 2c10 	ldr.w	r2, [r4, #-16]
 8013b5e:	f102 0c10 	add.w	ip, r2, #16

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 8013b62:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8013b66:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8013b6a:	2a01      	cmp	r2, #1
 8013b6c:	d817      	bhi.n	8013b9e <_ux_utility_memory_free+0x52>
 8013b6e:	f1a4 0310 	sub.w	r3, r4, #16
        _ux_system -> ux_system_cache_safe_memory_pool_alloc_total -= memory_block -> ux_memory_block_size;
    }
#endif

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8013b72:	2200      	movs	r2, #0
 8013b74:	f844 2c0c 	str.w	r2, [r4, #-12]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 8013b78:	4619      	mov	r1, r3
 8013b7a:	68db      	ldr	r3, [r3, #12]
 8013b7c:	b113      	cbz	r3, 8013b84 <_ux_utility_memory_free+0x38>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 8013b7e:	685a      	ldr	r2, [r3, #4]
 8013b80:	2a00      	cmp	r2, #0
 8013b82:	d0f9      	beq.n	8013b78 <_ux_utility_memory_free+0x2c>
            break;
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 8013b84:	688b      	ldr	r3, [r1, #8]
    while (next_block != UX_NULL)
 8013b86:	b1bb      	cbz	r3, 8013bb8 <_ux_utility_memory_free+0x6c>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status != UX_MEMORY_UNUSED)
 8013b88:	685a      	ldr	r2, [r3, #4]
 8013b8a:	b99a      	cbnz	r2, 8013bb4 <_ux_utility_memory_free+0x68>
            memory_block -> ux_memory_block_next =  next_block;
            next_block -> ux_memory_block_previous =  memory_block;
            break;
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 8013b8c:	689a      	ldr	r2, [r3, #8]
 8013b8e:	608a      	str	r2, [r1, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8013b90:	680a      	ldr	r2, [r1, #0]
 8013b92:	6818      	ldr	r0, [r3, #0]
 8013b94:	4402      	add	r2, r0
 8013b96:	3210      	adds	r2, #16
 8013b98:	600a      	str	r2, [r1, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 8013b9a:	689b      	ldr	r3, [r3, #8]
 8013b9c:	e7f3      	b.n	8013b86 <_ux_utility_memory_free+0x3a>
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8013b9e:	4b14      	ldr	r3, [pc, #80]	@ (8013bf0 <_ux_utility_memory_free+0xa4>)
 8013ba0:	6818      	ldr	r0, [r3, #0]
 8013ba2:	301c      	adds	r0, #28
 8013ba4:	f000 f873 	bl	8013c8e <_ux_utility_mutex_off>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 8013ba8:	2219      	movs	r2, #25
 8013baa:	2108      	movs	r1, #8
 8013bac:	2002      	movs	r0, #2
 8013bae:	f7ff fe6f 	bl	8013890 <_ux_system_error_handler>
        return;
 8013bb2:	e01b      	b.n	8013bec <_ux_utility_memory_free+0xa0>
            memory_block -> ux_memory_block_next =  next_block;
 8013bb4:	608b      	str	r3, [r1, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 8013bb6:	60d9      	str	r1, [r3, #12]
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 8013bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8013bf0 <_ux_utility_memory_free+0xa4>)
 8013bba:	6818      	ldr	r0, [r3, #0]
 8013bbc:	68c2      	ldr	r2, [r0, #12]
 8013bbe:	6803      	ldr	r3, [r0, #0]
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	d009      	beq.n	8013bd8 <_ux_utility_memory_free+0x8c>

        /* Which pool is this memory in ?  */
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
        
        /* If the memory address is in this range, we are in the regular memory pool.  */
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 8013bc4:	428b      	cmp	r3, r1
 8013bc6:	d80b      	bhi.n	8013be0 <_ux_utility_memory_free+0x94>
 8013bc8:	6842      	ldr	r2, [r0, #4]
 8013bca:	4413      	add	r3, r2
 8013bcc:	428b      	cmp	r3, r1
 8013bce:	d907      	bls.n	8013be0 <_ux_utility_memory_free+0x94>

            /* Update the regular memory pool.  */
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 8013bd0:	6883      	ldr	r3, [r0, #8]
 8013bd2:	4463      	add	r3, ip
 8013bd4:	6083      	str	r3, [r0, #8]
 8013bd6:	e006      	b.n	8013be6 <_ux_utility_memory_free+0x9a>
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 8013bd8:	6883      	ldr	r3, [r0, #8]
 8013bda:	4463      	add	r3, ip
 8013bdc:	6083      	str	r3, [r0, #8]
 8013bde:	e002      	b.n	8013be6 <_ux_utility_memory_free+0x9a>

        else
        
            /* Update the cache safe memory pool.  */
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 8013be0:	6943      	ldr	r3, [r0, #20]
 8013be2:	4463      	add	r3, ip
 8013be4:	6143      	str	r3, [r0, #20]
        
    }

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8013be6:	301c      	adds	r0, #28
 8013be8:	f000 f851 	bl	8013c8e <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
}
 8013bec:	bd10      	pop	{r4, pc}
 8013bee:	bf00      	nop
 8013bf0:	20010f48 	.word	0x20010f48

08013bf4 <_ux_utility_memory_free_block_best_get>:

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 8013bf4:	b118      	cbz	r0, 8013bfe <_ux_utility_memory_free_block_best_get+0xa>
 8013bf6:	2801      	cmp	r0, #1
 8013bf8:	d006      	beq.n	8013c08 <_ux_utility_memory_free_block_best_get+0x14>
 8013bfa:	2000      	movs	r0, #0
 8013bfc:	4770      	bx	lr
    {

        case UX_REGULAR_MEMORY            :

            /* Start at the beginning of the regular memory pool.  */
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 8013bfe:	4b15      	ldr	r3, [pc, #84]	@ (8013c54 <_ux_utility_memory_free_block_best_get+0x60>)
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	681b      	ldr	r3, [r3, #0]
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 8013c04:	2000      	movs	r0, #0
 8013c06:	e018      	b.n	8013c3a <_ux_utility_memory_free_block_best_get+0x46>
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 8013c08:	4b12      	ldr	r3, [pc, #72]	@ (8013c54 <_ux_utility_memory_free_block_best_get+0x60>)
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	68db      	ldr	r3, [r3, #12]
            break;
 8013c0e:	e7f9      	b.n	8013c04 <_ux_utility_memory_free_block_best_get+0x10>
                    best_memory_block =  memory_block;
 8013c10:	4618      	mov	r0, r3
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 8013c12:	689b      	ldr	r3, [r3, #8]
    while (memory_block != UX_NULL)
 8013c14:	b163      	cbz	r3, 8013c30 <_ux_utility_memory_free_block_best_get+0x3c>
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 8013c16:	685a      	ldr	r2, [r3, #4]
 8013c18:	2a00      	cmp	r2, #0
 8013c1a:	d1fa      	bne.n	8013c12 <_ux_utility_memory_free_block_best_get+0x1e>
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 8013c1c:	681a      	ldr	r2, [r3, #0]
 8013c1e:	428a      	cmp	r2, r1
 8013c20:	d9f7      	bls.n	8013c12 <_ux_utility_memory_free_block_best_get+0x1e>
                if (best_memory_block == UX_NULL)
 8013c22:	2800      	cmp	r0, #0
 8013c24:	d0f4      	beq.n	8013c10 <_ux_utility_memory_free_block_best_get+0x1c>
                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 8013c26:	6804      	ldr	r4, [r0, #0]
 8013c28:	42a2      	cmp	r2, r4
 8013c2a:	d2f2      	bcs.n	8013c12 <_ux_utility_memory_free_block_best_get+0x1e>
                        best_memory_block =  memory_block;
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	e7f0      	b.n	8013c12 <_ux_utility_memory_free_block_best_get+0x1e>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
}                                
 8013c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c34:	4770      	bx	lr
                    best_memory_block =  memory_block;
 8013c36:	4618      	mov	r0, r3
        memory_block =  memory_block -> ux_memory_block_next;
 8013c38:	689b      	ldr	r3, [r3, #8]
    while (memory_block != UX_NULL)
 8013c3a:	b14b      	cbz	r3, 8013c50 <_ux_utility_memory_free_block_best_get+0x5c>
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 8013c3c:	685a      	ldr	r2, [r3, #4]
 8013c3e:	2a00      	cmp	r2, #0
 8013c40:	d1fa      	bne.n	8013c38 <_ux_utility_memory_free_block_best_get+0x44>
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 8013c42:	681a      	ldr	r2, [r3, #0]
 8013c44:	428a      	cmp	r2, r1
 8013c46:	d9f7      	bls.n	8013c38 <_ux_utility_memory_free_block_best_get+0x44>
                if (best_memory_block == UX_NULL)
 8013c48:	2800      	cmp	r0, #0
 8013c4a:	d0f4      	beq.n	8013c36 <_ux_utility_memory_free_block_best_get+0x42>
{
 8013c4c:	b410      	push	{r4}
 8013c4e:	e7ea      	b.n	8013c26 <_ux_utility_memory_free_block_best_get+0x32>
 8013c50:	4770      	bx	lr
 8013c52:	bf00      	nop
 8013c54:	20010f48 	.word	0x20010f48

08013c58 <_ux_utility_memory_set>:

    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;

    /* Loop to set the memory.  */
    while(length--)
 8013c58:	e002      	b.n	8013c60 <_ux_utility_memory_set+0x8>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 8013c5a:	f800 1b01 	strb.w	r1, [r0], #1
    while(length--)
 8013c5e:	461a      	mov	r2, r3
 8013c60:	1e53      	subs	r3, r2, #1
 8013c62:	2a00      	cmp	r2, #0
 8013c64:	d1f9      	bne.n	8013c5a <_ux_utility_memory_set+0x2>
    }

    /* Return to caller.  */
    return; 
}
 8013c66:	4770      	bx	lr

08013c68 <_ux_utility_mutex_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 8013c68:	b510      	push	{r4, lr}

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 8013c6a:	2334      	movs	r3, #52	@ 0x34
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	f7fe fb15 	bl	801229c <_txe_mutex_create>

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8013c72:	4604      	mov	r4, r0
 8013c74:	b908      	cbnz	r0, 8013c7a <_ux_utility_mutex_create+0x12>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
}
 8013c76:	4620      	mov	r0, r4
 8013c78:	bd10      	pop	{r4, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8013c7a:	4602      	mov	r2, r0
 8013c7c:	2108      	movs	r1, #8
 8013c7e:	2002      	movs	r0, #2
 8013c80:	f7ff fe06 	bl	8013890 <_ux_system_error_handler>
    return(status);
 8013c84:	e7f7      	b.n	8013c76 <_ux_utility_mutex_create+0xe>

08013c86 <_ux_utility_mutex_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_delete(UX_MUTEX *mutex)
{
 8013c86:	b508      	push	{r3, lr}

UINT    status;


    /* Call ThreadX to delete the Mutex object.  */
    status =  tx_mutex_delete(mutex);
 8013c88:	f7fe fb68 	bl	801235c <_txe_mutex_delete>

    /* Return completion status.  */
    return(status);
}
 8013c8c:	bd08      	pop	{r3, pc}

08013c8e <_ux_utility_mutex_off>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 8013c8e:	b508      	push	{r3, lr}

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 8013c90:	f7fe fbc2 	bl	8012418 <_txe_mutex_put>

    /* Return to caller.  */
    return;
}
 8013c94:	bd08      	pop	{r3, pc}

08013c96 <_ux_utility_mutex_on>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 8013c96:	b508      	push	{r3, lr}

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 8013c98:	f04f 31ff 	mov.w	r1, #4294967295
 8013c9c:	f7fe fb82 	bl	80123a4 <_txe_mutex_get>

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8013ca0:	b900      	cbnz	r0, 8013ca4 <_ux_utility_mutex_on+0xe>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
    }

    /* Return to caller.  */
    return;
}
 8013ca2:	bd08      	pop	{r3, pc}
 8013ca4:	4602      	mov	r2, r0
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8013ca6:	2108      	movs	r1, #8
 8013ca8:	2002      	movs	r0, #2
 8013caa:	f7ff fdf1 	bl	8013890 <_ux_system_error_handler>
    return;
 8013cae:	e7f8      	b.n	8013ca2 <_ux_utility_mutex_on+0xc>

08013cb0 <_ux_utility_semaphore_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 8013cb0:	b510      	push	{r4, lr}

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 8013cb2:	231c      	movs	r3, #28
 8013cb4:	f7fe fca4 	bl	8012600 <_txe_semaphore_create>

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8013cb8:	4604      	mov	r4, r0
 8013cba:	b908      	cbnz	r0, 8013cc0 <_ux_utility_semaphore_create+0x10>

    }

    /* Return completion status.  */
    return(status);
}
 8013cbc:	4620      	mov	r0, r4
 8013cbe:	bd10      	pop	{r4, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8013cc0:	4602      	mov	r2, r0
 8013cc2:	2108      	movs	r1, #8
 8013cc4:	2002      	movs	r0, #2
 8013cc6:	f7ff fde3 	bl	8013890 <_ux_system_error_handler>
    return(status);
 8013cca:	e7f7      	b.n	8013cbc <_ux_utility_semaphore_create+0xc>

08013ccc <_ux_utility_semaphore_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 8013ccc:	b508      	push	{r3, lr}

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 8013cce:	f7fe fcf3 	bl	80126b8 <_txe_semaphore_delete>

    /* Return completion status.  */
    return(status);
}
 8013cd2:	bd08      	pop	{r3, pc}

08013cd4 <_ux_utility_semaphore_get>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(UX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 8013cd4:	b530      	push	{r4, r5, lr}
 8013cd6:	b08f      	sub	sp, #60	@ 0x3c
 8013cd8:	4604      	mov	r4, r0
 8013cda:	460d      	mov	r5, r1
ULONG       time_slice;
UX_THREAD   *next_thread;
UX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 8013cdc:	f7fd fdba 	bl	8011854 <_tx_thread_identify>

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 8013ce0:	ab06      	add	r3, sp, #24
 8013ce2:	9304      	str	r3, [sp, #16]
 8013ce4:	ab07      	add	r3, sp, #28
 8013ce6:	9303      	str	r3, [sp, #12]
 8013ce8:	ab08      	add	r3, sp, #32
 8013cea:	9302      	str	r3, [sp, #8]
 8013cec:	ab09      	add	r3, sp, #36	@ 0x24
 8013cee:	9301      	str	r3, [sp, #4]
 8013cf0:	ab0a      	add	r3, sp, #40	@ 0x28
 8013cf2:	9300      	str	r3, [sp, #0]
 8013cf4:	ab0b      	add	r3, sp, #44	@ 0x2c
 8013cf6:	aa0c      	add	r2, sp, #48	@ 0x30
 8013cf8:	a90d      	add	r1, sp, #52	@ 0x34
 8013cfa:	f7fe fddb 	bl	80128b4 <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 8013cfe:	4b06      	ldr	r3, [pc, #24]	@ (8013d18 <_ux_utility_semaphore_get+0x44>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	6999      	ldr	r1, [r3, #24]
 8013d04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013d06:	4291      	cmp	r1, r2
 8013d08:	d200      	bcs.n	8013d0c <_ux_utility_semaphore_get+0x38>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 8013d0a:	619a      	str	r2, [r3, #24]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 8013d0c:	4629      	mov	r1, r5
 8013d0e:	4620      	mov	r0, r4
 8013d10:	f7fe fcf6 	bl	8012700 <_txe_semaphore_get>

    /* Return completion status.  */
    return(status);
}
 8013d14:	b00f      	add	sp, #60	@ 0x3c
 8013d16:	bd30      	pop	{r4, r5, pc}
 8013d18:	20010f48 	.word	0x20010f48

08013d1c <_ux_utility_semaphore_put>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 8013d1c:	b508      	push	{r3, lr}

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 8013d1e:	f7fe fd17 	bl	8012750 <_txe_semaphore_put>

    /* Return completion status.  */
    return(status);
}
 8013d22:	bd08      	pop	{r3, pc}

08013d24 <_ux_utility_short_get>:
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 8013d24:	7803      	ldrb	r3, [r0, #0]
    value |=  (USHORT)(*address << 8);
 8013d26:	7840      	ldrb	r0, [r0, #1]

    /* Return to caller.  */
    return((ULONG) value);
}
 8013d28:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8013d2c:	4770      	bx	lr

08013d2e <_ux_utility_string_length_check>:
{

UINT    string_length;


    if (string == UX_NULL)
 8013d2e:	b198      	cbz	r0, 8013d58 <_ux_utility_string_length_check+0x2a>
{
 8013d30:	b508      	push	{r3, lr}
 8013d32:	4684      	mov	ip, r0
        return(UX_ERROR);

    string_length = 0;
 8013d34:	2300      	movs	r3, #0

    while (1)
    {

        if (string[string_length] == '\0')
 8013d36:	f81c 0003 	ldrb.w	r0, [ip, r3]
 8013d3a:	b148      	cbz	r0, 8013d50 <_ux_utility_string_length_check+0x22>
            break;

        string_length++;
 8013d3c:	3301      	adds	r3, #1
        if (string_length > max_string_length)
 8013d3e:	4293      	cmp	r3, r2
 8013d40:	d9f9      	bls.n	8013d36 <_ux_utility_string_length_check+0x8>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 8013d42:	22ff      	movs	r2, #255	@ 0xff
 8013d44:	2108      	movs	r1, #8
 8013d46:	2002      	movs	r0, #2
 8013d48:	f7ff fda2 	bl	8013890 <_ux_system_error_handler>

            return(UX_ERROR);
 8013d4c:	20ff      	movs	r0, #255	@ 0xff

    if (string_length_ptr)
        *string_length_ptr = string_length;

    return(UX_SUCCESS); 
}
 8013d4e:	bd08      	pop	{r3, pc}
    if (string_length_ptr)
 8013d50:	b121      	cbz	r1, 8013d5c <_ux_utility_string_length_check+0x2e>
        *string_length_ptr = string_length;
 8013d52:	600b      	str	r3, [r1, #0]
    return(UX_SUCCESS); 
 8013d54:	2000      	movs	r0, #0
 8013d56:	e7fa      	b.n	8013d4e <_ux_utility_string_length_check+0x20>
        return(UX_ERROR);
 8013d58:	20ff      	movs	r0, #255	@ 0xff
}
 8013d5a:	4770      	bx	lr
    return(UX_SUCCESS); 
 8013d5c:	2000      	movs	r0, #0
 8013d5e:	e7f6      	b.n	8013d4e <_ux_utility_string_length_check+0x20>

08013d60 <_ux_device_class_cdc_acm_activate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 8013d60:	b508      	push	{r3, lr}
 8013d62:	4603      	mov	r3, r0
UX_SLAVE_INTERFACE                      *interface_ptr;         
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_CDC_ACM                  *cdc_acm;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8013d64:	6a02      	ldr	r2, [r0, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 8013d66:	6c90      	ldr	r0, [r2, #72]	@ 0x48

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 8013d68:	689b      	ldr	r3, [r3, #8]
    
    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)cdc_acm;
 8013d6a:	6098      	str	r0, [r3, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    cdc_acm -> ux_slave_class_cdc_acm_interface =  interface_ptr;
 8013d6c:	6003      	str	r3, [r0, #0]

    /* If there is a activate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate != UX_NULL)
 8013d6e:	6843      	ldr	r3, [r0, #4]
 8013d70:	b103      	cbz	r3, 8013d74 <_ux_device_class_cdc_acm_activate+0x14>
    {        
        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 8013d72:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8013d74:	2000      	movs	r0, #0
 8013d76:	bd08      	pop	{r3, pc}

08013d78 <_ux_device_class_cdc_acm_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 8013d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
ULONG                                   value;
ULONG                                   request_length;
ULONG                                   transmit_length;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8013d7c:	6a03      	ldr	r3, [r0, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 8013d7e:	6c9d      	ldr	r5, [r3, #72]	@ 0x48

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013d80:	4b38      	ldr	r3, [pc, #224]	@ (8013e64 <_ux_device_class_cdc_acm_control_request+0xec>)
 8013d82:	681c      	ldr	r4, [r3, #0]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8013d84:	f894 60e1 	ldrb.w	r6, [r4, #225]	@ 0xe1

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8013d88:	f104 00e2 	add.w	r0, r4, #226	@ 0xe2
 8013d8c:	f7ff ffca 	bl	8013d24 <_ux_utility_short_get>
 8013d90:	4680      	mov	r8, r0

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8013d92:	f104 00e6 	add.w	r0, r4, #230	@ 0xe6
 8013d96:	f7ff ffc5 	bl	8013d24 <_ux_utility_short_get>

    transmit_length = request_length ;
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 8013d9a:	2e21      	cmp	r6, #33	@ 0x21
 8013d9c:	d01e      	beq.n	8013ddc <_ux_device_class_cdc_acm_control_request+0x64>
 8013d9e:	2e22      	cmp	r6, #34	@ 0x22
 8013da0:	d004      	beq.n	8013dac <_ux_device_class_cdc_acm_control_request+0x34>
 8013da2:	2e20      	cmp	r6, #32
 8013da4:	d040      	beq.n	8013e28 <_ux_device_class_cdc_acm_control_request+0xb0>
 8013da6:	20ff      	movs	r0, #255	@ 0xff
            return(UX_ERROR);
    }

    /* It's handled.  */
    return(UX_SUCCESS);
}
 8013da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 8013dac:	2300      	movs	r3, #0
 8013dae:	f885 307f 	strb.w	r3, [r5, #127]	@ 0x7f
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 8013db2:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 8013db6:	f018 0f01 	tst.w	r8, #1
 8013dba:	d002      	beq.n	8013dc2 <_ux_device_class_cdc_acm_control_request+0x4a>
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	f885 307f 	strb.w	r3, [r5, #127]	@ 0x7f
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 8013dc2:	f018 0f02 	tst.w	r8, #2
 8013dc6:	d002      	beq.n	8013dce <_ux_device_class_cdc_acm_control_request+0x56>
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 8013dc8:	2301      	movs	r3, #1
 8013dca:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 8013dce:	68eb      	ldr	r3, [r5, #12]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d043      	beq.n	8013e5c <_ux_device_class_cdc_acm_control_request+0xe4>
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	4798      	blx	r3
    return(UX_SUCCESS);
 8013dd8:	2000      	movs	r0, #0
 8013dda:	e7e5      	b.n	8013da8 <_ux_device_class_cdc_acm_control_request+0x30>
 8013ddc:	f104 098c 	add.w	r9, r4, #140	@ 0x8c
 8013de0:	4607      	mov	r7, r0
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 8013de2:	2807      	cmp	r0, #7
 8013de4:	d81e      	bhi.n	8013e24 <_ux_device_class_cdc_acm_control_request+0xac>
    transmit_length = request_length ;
 8013de6:	4606      	mov	r6, r0
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 8013de8:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 8013dea:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8013dee:	f7ff fdef 	bl	80139d0 <_ux_utility_long_put>
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 8013df2:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8013df6:	f895 207c 	ldrb.w	r2, [r5, #124]	@ 0x7c
 8013dfa:	711a      	strb	r2, [r3, #4]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 8013dfc:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8013e00:	f895 207d 	ldrb.w	r2, [r5, #125]	@ 0x7d
 8013e04:	715a      	strb	r2, [r3, #5]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 8013e06:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8013e0a:	f895 207e 	ldrb.w	r2, [r5, #126]	@ 0x7e
 8013e0e:	719a      	strb	r2, [r3, #6]
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8013e10:	2303      	movs	r3, #3
 8013e12:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 8013e16:	463a      	mov	r2, r7
 8013e18:	4631      	mov	r1, r6
 8013e1a:	4648      	mov	r0, r9
 8013e1c:	f7ff fce2 	bl	80137e4 <_ux_device_stack_transfer_request>
    return(UX_SUCCESS);
 8013e20:	2000      	movs	r0, #0
            break; 
 8013e22:	e7c1      	b.n	8013da8 <_ux_device_class_cdc_acm_control_request+0x30>
                transmit_length = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE;
 8013e24:	2607      	movs	r6, #7
 8013e26:	e7df      	b.n	8013de8 <_ux_device_class_cdc_acm_control_request+0x70>
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 8013e28:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8013e2c:	f7ff fdc5 	bl	80139ba <_ux_utility_long_get>
 8013e30:	67a8      	str	r0, [r5, #120]	@ 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 8013e32:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8013e36:	791b      	ldrb	r3, [r3, #4]
 8013e38:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 8013e3c:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8013e40:	795b      	ldrb	r3, [r3, #5]
 8013e42:	f885 307d 	strb.w	r3, [r5, #125]	@ 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 8013e46:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8013e4a:	799b      	ldrb	r3, [r3, #6]
 8013e4c:	f885 307e 	strb.w	r3, [r5, #126]	@ 0x7e
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 8013e50:	68eb      	ldr	r3, [r5, #12]
 8013e52:	b12b      	cbz	r3, 8013e60 <_ux_device_class_cdc_acm_control_request+0xe8>
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 8013e54:	4628      	mov	r0, r5
 8013e56:	4798      	blx	r3
    return(UX_SUCCESS);
 8013e58:	2000      	movs	r0, #0
 8013e5a:	e7a5      	b.n	8013da8 <_ux_device_class_cdc_acm_control_request+0x30>
 8013e5c:	2000      	movs	r0, #0
 8013e5e:	e7a3      	b.n	8013da8 <_ux_device_class_cdc_acm_control_request+0x30>
 8013e60:	2000      	movs	r0, #0
 8013e62:	e7a1      	b.n	8013da8 <_ux_device_class_cdc_acm_control_request+0x30>
 8013e64:	20010f44 	.word	0x20010f44

08013e68 <_ux_device_class_cdc_acm_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 8013e68:	b538      	push	{r3, r4, r5, lr}
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8013e6a:	6a03      	ldr	r3, [r0, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 8013e6c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48

    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8013e6e:	6823      	ldr	r3, [r4, #0]
    
    /* Locate the endpoints.  */
    endpoint_in =  interface_ptr -> ux_slave_interface_first_endpoint;
 8013e70:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8013e72:	696b      	ldr	r3, [r5, #20]
 8013e74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013e78:	d116      	bne.n	8013ea8 <_ux_device_class_cdc_acm_deactivate+0x40>

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 8013e7a:	6a68      	ldr	r0, [r5, #36]	@ 0x24
        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 8013e7c:	2126      	movs	r1, #38	@ 0x26
 8013e7e:	f7ff fcab 	bl	80137d8 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 8013e82:	2126      	movs	r1, #38	@ 0x26
 8013e84:	4628      	mov	r0, r5
 8013e86:	f7ff fca7 	bl	80137d8 <_ux_device_stack_transfer_all_request_abort>

    /* Terminate transmission and free resources.  */
    _ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP, UX_NULL);
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	2107      	movs	r1, #7
 8013e8e:	4620      	mov	r0, r4
 8013e90:	f000 f870 	bl	8013f74 <_ux_device_class_cdc_acm_ioctl>

    /* If there is a deactivate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate != UX_NULL)
 8013e94:	68a3      	ldr	r3, [r4, #8]
 8013e96:	b10b      	cbz	r3, 8013e9c <_ux_device_class_cdc_acm_deactivate+0x34>
    {

        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(cdc_acm);
 8013e98:	4620      	mov	r0, r4
 8013e9a:	4798      	blx	r3
    }

    /* We need to reset the DTR and RTS values so they do not carry over to the 
       next connection.  */
    cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state =  0;
 8013e9c:	2000      	movs	r0, #0
 8013e9e:	f884 007f 	strb.w	r0, [r4, #127]	@ 0x7f
    cdc_acm -> ux_slave_class_cdc_acm_data_rts_state =  0;
 8013ea2:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8013ea6:	bd38      	pop	{r3, r4, r5, pc}
    endpoint_in =  interface_ptr -> ux_slave_interface_first_endpoint;
 8013ea8:	4628      	mov	r0, r5
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 8013eaa:	6a6d      	ldr	r5, [r5, #36]	@ 0x24
 8013eac:	e7e6      	b.n	8013e7c <_ux_device_class_cdc_acm_deactivate+0x14>

08013eae <_ux_device_class_cdc_acm_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 8013eae:	b508      	push	{r3, lr}
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 8013eb0:	6803      	ldr	r3, [r0, #0]
 8013eb2:	3b01      	subs	r3, #1
 8013eb4:	2b06      	cmp	r3, #6
 8013eb6:	d81b      	bhi.n	8013ef0 <_ux_device_class_cdc_acm_entry+0x42>
 8013eb8:	e8df f003 	tbb	[pc, r3]
 8013ebc:	1714110a 	.word	0x1714110a
 8013ec0:	1a04      	.short	0x1a04
 8013ec2:	07          	.byte	0x07
 8013ec3:	00          	.byte	0x00
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_initialize(command);
 8013ec4:	f000 f816 	bl	8013ef4 <_ux_device_class_cdc_acm_initialize>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
    }   
}
 8013ec8:	bd08      	pop	{r3, pc}
        status =  _ux_device_class_cdc_acm_uninitialize(command);
 8013eca:	f000 f927 	bl	801411c <_ux_device_class_cdc_acm_uninitialize>
        return(status);
 8013ece:	e7fb      	b.n	8013ec8 <_ux_device_class_cdc_acm_entry+0x1a>
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 8013ed0:	6943      	ldr	r3, [r0, #20]
 8013ed2:	2b0a      	cmp	r3, #10
 8013ed4:	d001      	beq.n	8013eda <_ux_device_class_cdc_acm_entry+0x2c>
            return(UX_NO_CLASS_MATCH);
 8013ed6:	2057      	movs	r0, #87	@ 0x57
 8013ed8:	e7f6      	b.n	8013ec8 <_ux_device_class_cdc_acm_entry+0x1a>
            return(UX_SUCCESS);
 8013eda:	2000      	movs	r0, #0
 8013edc:	e7f4      	b.n	8013ec8 <_ux_device_class_cdc_acm_entry+0x1a>
        status =  _ux_device_class_cdc_acm_activate(command);
 8013ede:	f7ff ff3f 	bl	8013d60 <_ux_device_class_cdc_acm_activate>
        return(status);
 8013ee2:	e7f1      	b.n	8013ec8 <_ux_device_class_cdc_acm_entry+0x1a>
        status =  _ux_device_class_cdc_acm_deactivate(command);
 8013ee4:	f7ff ffc0 	bl	8013e68 <_ux_device_class_cdc_acm_deactivate>
        return(status);
 8013ee8:	e7ee      	b.n	8013ec8 <_ux_device_class_cdc_acm_entry+0x1a>
        status = _ux_device_class_cdc_acm_control_request(command);
 8013eea:	f7ff ff45 	bl	8013d78 <_ux_device_class_cdc_acm_control_request>
        return(status);
 8013eee:	e7eb      	b.n	8013ec8 <_ux_device_class_cdc_acm_entry+0x1a>
    switch (command -> ux_slave_class_command_request)
 8013ef0:	2054      	movs	r0, #84	@ 0x54
 8013ef2:	e7e9      	b.n	8013ec8 <_ux_device_class_cdc_acm_entry+0x1a>

08013ef4 <_ux_device_class_cdc_acm_initialize>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8013ef4:	b570      	push	{r4, r5, r6, lr}
 8013ef6:	4605      	mov	r5, r0
#if !defined(UX_DEVICE_STANDALONE)
UINT                                    status;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8013ef8:	6a06      	ldr	r6, [r0, #32]

    /* Create an instance of the device cdc_acm class.  */
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 8013efa:	2284      	movs	r2, #132	@ 0x84
 8013efc:	2100      	movs	r1, #0
 8013efe:	4608      	mov	r0, r1
 8013f00:	f7ff fd70 	bl	80139e4 <_ux_utility_memory_allocate>

    /* Check for successful allocation.  */
    if (cdc_acm == UX_NULL)
 8013f04:	b378      	cbz	r0, 8013f66 <_ux_device_class_cdc_acm_initialize+0x72>
 8013f06:	4604      	mov	r4, r0
        return(UX_MEMORY_INSUFFICIENT);

    /* Save the address of the CDC instance inside the CDC container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) cdc_acm;
 8013f08:	64b0      	str	r0, [r6, #72]	@ 0x48

    /* Get the pointer to the application parameters for the cdc_acm class.  */
    cdc_acm_parameter =  command -> ux_slave_class_command_parameter;
 8013f0a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24

    /* Store the start and stop signals if needed by the application.  */
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_activate;
 8013f0c:	681a      	ldr	r2, [r3, #0]
 8013f0e:	6042      	str	r2, [r0, #4]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_deactivate;
 8013f10:	685a      	ldr	r2, [r3, #4]
 8013f12:	6082      	str	r2, [r0, #8]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = cdc_acm_parameter -> ux_slave_class_cdc_acm_parameter_change;
 8013f14:	689b      	ldr	r3, [r3, #8]
 8013f16:	60c3      	str	r3, [r0, #12]

#if !defined(UX_DEVICE_STANDALONE)

    /* Create the Mutex for each endpoint as multiple threads cannot access each pipe at the same time.  */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex, "ux_slave_class_cdc_acm_in_mutex");
 8013f18:	f100 0510 	add.w	r5, r0, #16
 8013f1c:	4913      	ldr	r1, [pc, #76]	@ (8013f6c <_ux_device_class_cdc_acm_initialize+0x78>)
 8013f1e:	4628      	mov	r0, r5
 8013f20:	f7ff fea2 	bl	8013c68 <_ux_utility_mutex_create>

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 8013f24:	b990      	cbnz	r0, 8013f4c <_ux_device_class_cdc_acm_initialize+0x58>
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
    }        

    /* Out Mutex. */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex, "ux_slave_class_cdc_acm_out_mutex");
 8013f26:	4912      	ldr	r1, [pc, #72]	@ (8013f70 <_ux_device_class_cdc_acm_initialize+0x7c>)
 8013f28:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 8013f2c:	f7ff fe9c 	bl	8013c68 <_ux_utility_mutex_create>

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 8013f30:	b988      	cbnz	r0, 8013f56 <_ux_device_class_cdc_acm_initialize+0x62>
    }        

#endif

    /* Update the line coding fields with default values.  */
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 8013f32:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8013f36:	67a3      	str	r3, [r4, #120]	@ 0x78
    cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 8013f38:	2301      	movs	r3, #1
 8013f3a:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    cdc_acm -> ux_slave_class_cdc_acm_parity    =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 8013f44:	2308      	movs	r3, #8
 8013f46:	f884 307e 	strb.w	r3, [r4, #126]	@ 0x7e
#endif
#endif

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8013f4a:	bd70      	pop	{r4, r5, r6, pc}
        _ux_utility_memory_free(cdc_acm);
 8013f4c:	4620      	mov	r0, r4
 8013f4e:	f7ff fdfd 	bl	8013b4c <_ux_utility_memory_free>
        return(UX_MUTEX_ERROR);
 8013f52:	2017      	movs	r0, #23
 8013f54:	e7f9      	b.n	8013f4a <_ux_device_class_cdc_acm_initialize+0x56>
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8013f56:	4628      	mov	r0, r5
 8013f58:	f7ff fe95 	bl	8013c86 <_ux_utility_mutex_delete>
        _ux_utility_memory_free(cdc_acm);
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	f7ff fdf5 	bl	8013b4c <_ux_utility_memory_free>
        return(UX_MUTEX_ERROR);
 8013f62:	2017      	movs	r0, #23
 8013f64:	e7f1      	b.n	8013f4a <_ux_device_class_cdc_acm_initialize+0x56>
        return(UX_MEMORY_INSUFFICIENT);
 8013f66:	2012      	movs	r0, #18
 8013f68:	e7ef      	b.n	8013f4a <_ux_device_class_cdc_acm_initialize+0x56>
 8013f6a:	bf00      	nop
 8013f6c:	0801785c 	.word	0x0801785c
 8013f70:	0801787c 	.word	0x0801787c

08013f74 <_ux_device_class_cdc_acm_ioctl>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 8013f74:	b510      	push	{r4, lr}

    /* Let's be optimist ! */
    status = UX_SUCCESS;

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 8013f76:	1e4b      	subs	r3, r1, #1
 8013f78:	2b08      	cmp	r3, #8
 8013f7a:	d863      	bhi.n	8014044 <_ux_device_class_cdc_acm_ioctl+0xd0>
 8013f7c:	e8df f003 	tbb	[pc, r3]
 8013f80:	30201305 	.word	0x30201305
 8013f84:	4f626228 	.word	0x4f626228
 8013f88:	4f          	.byte	0x4f
 8013f89:	00          	.byte	0x00
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
    
            /* Save the parameters in the cdc_acm function.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 8013f8a:	6813      	ldr	r3, [r2, #0]
 8013f8c:	6783      	str	r3, [r0, #120]	@ 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 8013f8e:	7913      	ldrb	r3, [r2, #4]
 8013f90:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 8013f94:	7953      	ldrb	r3, [r2, #5]
 8013f96:	f880 307d 	strb.w	r3, [r0, #125]	@ 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 8013f9a:	7993      	ldrb	r3, [r2, #6]
 8013f9c:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
    status = UX_SUCCESS;
 8013fa0:	2400      	movs	r4, #0
    }   

    /* Return status to caller.  */
    return(status);
          
}
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	bd10      	pop	{r4, pc}
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 8013fa6:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8013fa8:	6013      	str	r3, [r2, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 8013faa:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 8013fae:	7113      	strb	r3, [r2, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 8013fb0:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8013fb4:	7153      	strb	r3, [r2, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 8013fb6:	f890 307e 	ldrb.w	r3, [r0, #126]	@ 0x7e
 8013fba:	7193      	strb	r3, [r2, #6]
    status = UX_SUCCESS;
 8013fbc:	2400      	movs	r4, #0
            break;
 8013fbe:	e7f0      	b.n	8013fa2 <_ux_device_class_cdc_acm_ioctl+0x2e>
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 8013fc0:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8013fc4:	7013      	strb	r3, [r2, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 8013fc6:	f890 307f 	ldrb.w	r3, [r0, #127]	@ 0x7f
 8013fca:	7053      	strb	r3, [r2, #1]
    status = UX_SUCCESS;
 8013fcc:	2400      	movs	r4, #0
            break;
 8013fce:	e7e8      	b.n	8013fa2 <_ux_device_class_cdc_acm_ioctl+0x2e>
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 8013fd0:	7813      	ldrb	r3, [r2, #0]
 8013fd2:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 8013fd6:	7853      	ldrb	r3, [r2, #1]
 8013fd8:	f880 307f 	strb.w	r3, [r0, #127]	@ 0x7f
    status = UX_SUCCESS;
 8013fdc:	2400      	movs	r4, #0
            break;
 8013fde:	e7e0      	b.n	8013fa2 <_ux_device_class_cdc_acm_ioctl+0x2e>
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8013fe0:	6803      	ldr	r3, [r0, #0]
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8013fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            switch( (ULONG) (ALIGN_TYPE) parameter)
 8013fe4:	2a01      	cmp	r2, #1
 8013fe6:	d00b      	beq.n	8014000 <_ux_device_class_cdc_acm_ioctl+0x8c>
 8013fe8:	2a02      	cmp	r2, #2
 8013fea:	d00f      	beq.n	801400c <_ux_device_class_cdc_acm_ioctl+0x98>
 8013fec:	2453      	movs	r4, #83	@ 0x53
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8013fee:	f103 0030 	add.w	r0, r3, #48	@ 0x30
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 8013ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ff4:	2b01      	cmp	r3, #1
 8013ff6:	d1d4      	bne.n	8013fa2 <_ux_device_class_cdc_acm_ioctl+0x2e>
            _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);
 8013ff8:	21f9      	movs	r1, #249	@ 0xf9
 8013ffa:	f7ff fbcf 	bl	801379c <_ux_device_stack_transfer_abort>
 8013ffe:	e7d0      	b.n	8013fa2 <_ux_device_class_cdc_acm_ioctl+0x2e>
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8014000:	695c      	ldr	r4, [r3, #20]
 8014002:	f014 0480 	ands.w	r4, r4, #128	@ 0x80
 8014006:	d108      	bne.n	801401a <_ux_device_class_cdc_acm_ioctl+0xa6>
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8014008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801400a:	e7f0      	b.n	8013fee <_ux_device_class_cdc_acm_ioctl+0x7a>
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 801400c:	695c      	ldr	r4, [r3, #20]
 801400e:	f014 0480 	ands.w	r4, r4, #128	@ 0x80
 8014012:	d0ec      	beq.n	8013fee <_ux_device_class_cdc_acm_ioctl+0x7a>
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8014014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    status = UX_SUCCESS;
 8014016:	2400      	movs	r4, #0
 8014018:	e7e9      	b.n	8013fee <_ux_device_class_cdc_acm_ioctl+0x7a>
 801401a:	2400      	movs	r4, #0
 801401c:	e7e7      	b.n	8013fee <_ux_device_class_cdc_acm_ioctl+0x7a>
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 801401e:	6803      	ldr	r3, [r0, #0]
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8014020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 8014022:	6958      	ldr	r0, [r3, #20]
 8014024:	f000 0080 	and.w	r0, r0, #128	@ 0x80
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 8014028:	2908      	cmp	r1, #8
 801402a:	d009      	beq.n	8014040 <_ux_device_class_cdc_acm_ioctl+0xcc>
 801402c:	2180      	movs	r1, #128	@ 0x80
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 801402e:	4288      	cmp	r0, r1
 8014030:	d000      	beq.n	8014034 <_ux_device_class_cdc_acm_ioctl+0xc0>
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 8014032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 8014034:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8014036:	2901      	cmp	r1, #1
 8014038:	d00b      	beq.n	8014052 <_ux_device_class_cdc_acm_ioctl+0xde>
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 801403a:	67da      	str	r2, [r3, #124]	@ 0x7c
    status = UX_SUCCESS;
 801403c:	2400      	movs	r4, #0
 801403e:	e7b0      	b.n	8013fa2 <_ux_device_class_cdc_acm_ioctl+0x2e>
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 8014040:	2100      	movs	r1, #0
 8014042:	e7f4      	b.n	801402e <_ux_device_class_cdc_acm_ioctl+0xba>
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 8014044:	2254      	movs	r2, #84	@ 0x54
 8014046:	2107      	movs	r1, #7
 8014048:	2002      	movs	r0, #2
 801404a:	f7ff fc21 	bl	8013890 <_ux_system_error_handler>
            status =  UX_FUNCTION_NOT_SUPPORTED;
 801404e:	2454      	movs	r4, #84	@ 0x54
 8014050:	e7a7      	b.n	8013fa2 <_ux_device_class_cdc_acm_ioctl+0x2e>
                status = UX_ERROR;
 8014052:	24ff      	movs	r4, #255	@ 0xff
    return(status);
 8014054:	e7a5      	b.n	8013fa2 <_ux_device_class_cdc_acm_ioctl+0x2e>
	...

08014058 <_ux_device_class_cdc_acm_read>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_read(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 8014058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801405c:	461f      	mov	r7, r3
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801405e:	4b2e      	ldr	r3, [pc, #184]	@ (8014118 <_ux_device_class_cdc_acm_read+0xc0>)
 8014060:	f8d3 9000 	ldr.w	r9, [r3]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8014064:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8014068:	2b03      	cmp	r3, #3
 801406a:	d113      	bne.n	8014094 <_ux_device_class_cdc_acm_read+0x3c>
 801406c:	460e      	mov	r6, r1
 801406e:	4615      	mov	r5, r2
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
    }
    
    /* This is the first time we are activated. We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8014070:	6803      	ldr	r3, [r0, #0]
    
    /* Locate the endpoints.  */
    endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8014072:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
    
    /* Check the endpoint direction, if OUT we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 8014074:	6963      	ldr	r3, [r4, #20]
 8014076:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801407a:	d000      	beq.n	801407e <_ux_device_class_cdc_acm_read+0x26>
    {

        /* So the next endpoint has to be the OUT endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 801407c:	6a64      	ldr	r4, [r4, #36]	@ 0x24
    }

    /* Protect this thread.  */
    _ux_device_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 801407e:	f100 0b44 	add.w	fp, r0, #68	@ 0x44
 8014082:	4658      	mov	r0, fp
 8014084:	f7ff fe07 	bl	8013c96 <_ux_utility_mutex_on>
        
    /* All CDC reading  are on the endpoint OUT, from the host.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8014088:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
    
    /* Reset the actual length.  */
    *actual_length =  0;
 801408c:	2300      	movs	r3, #0
 801408e:	603b      	str	r3, [r7, #0]
UINT                        status= UX_SUCCESS;
 8014090:	4698      	mov	r8, r3
    
    /* Check if we need more transactions.  */
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8014092:	e01c      	b.n	80140ce <_ux_device_class_cdc_acm_read+0x76>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 8014094:	2251      	movs	r2, #81	@ 0x51
 8014096:	2107      	movs	r1, #7
 8014098:	2002      	movs	r0, #2
 801409a:	f7ff fbf9 	bl	8013890 <_ux_system_error_handler>
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 801409e:	f04f 0851 	mov.w	r8, #81	@ 0x51
 80140a2:	e02d      	b.n	8014100 <_ux_device_class_cdc_acm_read+0xa8>
        
            /* We can proceed with the demanded length.  */
            local_requested_length = requested_length;
        
        /* Send the request to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_requested_length);
 80140a4:	460a      	mov	r2, r1
 80140a6:	4650      	mov	r0, sl
 80140a8:	f7ff fb9c 	bl	80137e4 <_ux_device_stack_transfer_request>
        
        /* Check the status */    
        if (status == UX_SUCCESS)
 80140ac:	4680      	mov	r8, r0
 80140ae:	b9e0      	cbnz	r0, 80140ea <_ux_device_class_cdc_acm_read+0x92>
        {

            /* We need to copy the buffer locally.  */
            _ux_utility_memory_copy(buffer, transfer_request -> ux_slave_transfer_request_data_pointer,
 80140b0:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80140b2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80140b4:	4630      	mov	r0, r6
 80140b6:	f7ff fd3e 	bl	8013b36 <_ux_utility_memory_copy>
                            transfer_request -> ux_slave_transfer_request_actual_length); /* Use case of memcpy is verified. */
    
            /* Next buffer address.  */
            buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 80140ba:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80140bc:	441e      	add	r6, r3
    
            /* Set the length actually received. */
            *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 80140be:	683a      	ldr	r2, [r7, #0]
 80140c0:	4413      	add	r3, r2
 80140c2:	603b      	str	r3, [r7, #0]
    
            /* Decrement what left has to be done.  */
            requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 80140c4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80140c6:	1aed      	subs	r5, r5, r3


            /* Is this a short packet or a ZLP indicating we are done with this transfer ?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length < endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 80140c8:	69e2      	ldr	r2, [r4, #28]
 80140ca:	4293      	cmp	r3, r2
 80140cc:	d309      	bcc.n	80140e2 <_ux_device_class_cdc_acm_read+0x8a>
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 80140ce:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80140d2:	2b03      	cmp	r3, #3
 80140d4:	d10d      	bne.n	80140f2 <_ux_device_class_cdc_acm_read+0x9a>
 80140d6:	b165      	cbz	r5, 80140f2 <_ux_device_class_cdc_acm_read+0x9a>
        if (requested_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 80140d8:	69e1      	ldr	r1, [r4, #28]
 80140da:	42a9      	cmp	r1, r5
 80140dc:	d3e2      	bcc.n	80140a4 <_ux_device_class_cdc_acm_read+0x4c>
            local_requested_length = requested_length;
 80140de:	4629      	mov	r1, r5
 80140e0:	e7e0      	b.n	80140a4 <_ux_device_class_cdc_acm_read+0x4c>
            {            

                /* We are done.  */
                /* Free Mutex resource.  */
                _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 80140e2:	4658      	mov	r0, fp
 80140e4:	f7ff fdd3 	bl	8013c8e <_ux_utility_mutex_off>
    
                /* Return with success.  */
                return(UX_SUCCESS);
 80140e8:	e00a      	b.n	8014100 <_ux_device_class_cdc_acm_read+0xa8>
        }
        else
        {
            
            /* Free Mutex resource.  */
            _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 80140ea:	4658      	mov	r0, fp
 80140ec:	f7ff fdcf 	bl	8013c8e <_ux_utility_mutex_off>
    
            /* We got an error.  */
            return(status);
 80140f0:	e006      	b.n	8014100 <_ux_device_class_cdc_acm_read+0xa8>
        }            
    }

    
    /* Free Mutex resource.  */
    _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 80140f2:	4658      	mov	r0, fp
 80140f4:	f7ff fdcb 	bl	8013c8e <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80140f8:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80140fc:	2b03      	cmp	r3, #3
 80140fe:	d102      	bne.n	8014106 <_ux_device_class_cdc_acm_read+0xae>
    }
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
}
 8014100:	4640      	mov	r0, r8
 8014102:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 8014106:	2222      	movs	r2, #34	@ 0x22
 8014108:	2107      	movs	r1, #7
 801410a:	2002      	movs	r0, #2
 801410c:	f7ff fbc0 	bl	8013890 <_ux_system_error_handler>
        return (UX_TRANSFER_NO_ANSWER);
 8014110:	f04f 0822 	mov.w	r8, #34	@ 0x22
 8014114:	e7f4      	b.n	8014100 <_ux_device_class_cdc_acm_read+0xa8>
 8014116:	bf00      	nop
 8014118:	20010f44 	.word	0x20010f44

0801411c <_ux_device_class_cdc_acm_uninitialize>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 801411c:	b510      	push	{r4, lr}
                                          
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_CLASS              *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 801411e:	6a03      	ldr	r3, [r0, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 8014120:	6c9c      	ldr	r4, [r3, #72]	@ 0x48

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 8014122:	b154      	cbz	r4, 801413a <_ux_device_class_cdc_acm_uninitialize+0x1e>
    {

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete the IN endpoint mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8014124:	f104 0010 	add.w	r0, r4, #16
 8014128:	f7ff fdad 	bl	8013c86 <_ux_utility_mutex_delete>

        /* Out Mutex. */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 801412c:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 8014130:	f7ff fda9 	bl	8013c86 <_ux_utility_mutex_delete>
        _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack);
#endif
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 8014134:	4620      	mov	r0, r4
 8014136:	f7ff fd09 	bl	8013b4c <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
}
 801413a:	2000      	movs	r0, #0
 801413c:	bd10      	pop	{r4, pc}
	...

08014140 <_ux_device_class_cdc_acm_write>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_write(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 8014140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014144:	b083      	sub	sp, #12
 8014146:	4698      	mov	r8, r3
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014148:	4b38      	ldr	r3, [pc, #224]	@ (801422c <_ux_device_class_cdc_acm_write+0xec>)
 801414a:	f8d3 a000 	ldr.w	sl, [r3]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 801414e:	f8da 3020 	ldr.w	r3, [sl, #32]
 8014152:	2b03      	cmp	r3, #3
 8014154:	d11b      	bne.n	801418e <_ux_device_class_cdc_acm_write+0x4e>
 8014156:	460e      	mov	r6, r1
 8014158:	4614      	mov	r4, r2
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
    }
        
    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 801415a:	6803      	ldr	r3, [r0, #0]
    
    /* Locate the endpoints.  */
    endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 801415c:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 801415e:	696b      	ldr	r3, [r5, #20]
 8014160:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014164:	d100      	bne.n	8014168 <_ux_device_class_cdc_acm_write+0x28>
    {

        /* So the next endpoint has to be the IN endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8014166:	6a6d      	ldr	r5, [r5, #36]	@ 0x24
    }

    /* Protect this thread.  */
    _ux_device_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8014168:	f100 0310 	add.w	r3, r0, #16
 801416c:	9301      	str	r3, [sp, #4]
 801416e:	4618      	mov	r0, r3
 8014170:	f7ff fd91 	bl	8013c96 <_ux_utility_mutex_on>
        
    /* We are writing to the IN endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8014174:	f105 0b30 	add.w	fp, r5, #48	@ 0x30

    /* Reset the actual length.  */
    *actual_length =  0;
 8014178:	2300      	movs	r3, #0
 801417a:	f8c8 3000 	str.w	r3, [r8]

    /* Check if the application forces a 0 length packet.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length == 0)
 801417e:	f8da 3020 	ldr.w	r3, [sl, #32]
 8014182:	2b03      	cmp	r3, #3
 8014184:	d00a      	beq.n	801419c <_ux_device_class_cdc_acm_write+0x5c>
 8014186:	2700      	movs	r7, #0
 8014188:	f44f 7900 	mov.w	r9, #512	@ 0x200
 801418c:	e02c      	b.n	80141e8 <_ux_device_class_cdc_acm_write+0xa8>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 801418e:	2251      	movs	r2, #81	@ 0x51
 8014190:	2107      	movs	r1, #7
 8014192:	2002      	movs	r0, #2
 8014194:	f7ff fb7c 	bl	8013890 <_ux_system_error_handler>
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 8014198:	2751      	movs	r7, #81	@ 0x51
 801419a:	e03b      	b.n	8014214 <_ux_device_class_cdc_acm_write+0xd4>
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length == 0)
 801419c:	b11c      	cbz	r4, 80141a6 <_ux_device_class_cdc_acm_write+0x66>
 801419e:	2700      	movs	r7, #0
 80141a0:	f44f 7900 	mov.w	r9, #512	@ 0x200
 80141a4:	e020      	b.n	80141e8 <_ux_device_class_cdc_acm_write+0xa8>
    {
        
        /* Send the request for 0 byte packet to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, 0, 0);
 80141a6:	2200      	movs	r2, #0
 80141a8:	4611      	mov	r1, r2
 80141aa:	4658      	mov	r0, fp
 80141ac:	f7ff fb1a 	bl	80137e4 <_ux_device_stack_transfer_request>
 80141b0:	4607      	mov	r7, r0

        /* Free Mutex resource.  */
        _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 80141b2:	9801      	ldr	r0, [sp, #4]
 80141b4:	f7ff fd6b 	bl	8013c8e <_ux_utility_mutex_off>

        /* Return the status.  */
        return(status);
 80141b8:	e02c      	b.n	8014214 <_ux_device_class_cdc_acm_write+0xd4>
                local_requested_length = requested_length;

#if !defined(UX_DEVICE_CLASS_CDC_ACM_WRITE_AUTO_ZLP)

                /* Assume the length match expectation.  */
                local_host_length = requested_length;
 80141ba:	46a1      	mov	r9, r4
                local_requested_length = requested_length;
 80141bc:	4627      	mov	r7, r4
#endif
            }
                            
            /* On a out, we copy the buffer to the caller. Not very efficient but it makes the API
               easier.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 80141be:	463a      	mov	r2, r7
 80141c0:	4631      	mov	r1, r6
 80141c2:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 80141c4:	f7ff fcb7 	bl	8013b36 <_ux_utility_memory_copy>
                                buffer, local_requested_length); /* Use case of memcpy is verified. */
        
            /* Send the request to the device controller.  */
            status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_host_length);
 80141c8:	464a      	mov	r2, r9
 80141ca:	4639      	mov	r1, r7
 80141cc:	4658      	mov	r0, fp
 80141ce:	f7ff fb09 	bl	80137e4 <_ux_device_stack_transfer_request>
        
            /* Check the status */    
            if (status == UX_SUCCESS)
 80141d2:	4607      	mov	r7, r0
 80141d4:	b998      	cbnz	r0, 80141fe <_ux_device_class_cdc_acm_write+0xbe>
            {
    
                /* Next buffer address.  */
                buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 80141d6:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80141d8:	441e      	add	r6, r3
    
                /* Set the length actually received. */
                *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 80141da:	f8d8 2000 	ldr.w	r2, [r8]
 80141de:	4413      	add	r3, r2
 80141e0:	f8c8 3000 	str.w	r3, [r8]
    
                /* Decrement what left has to be done.  */
                requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 80141e4:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80141e6:	1ae4      	subs	r4, r4, r3
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 80141e8:	f8da 3020 	ldr.w	r3, [sl, #32]
 80141ec:	2b03      	cmp	r3, #3
 80141ee:	d10a      	bne.n	8014206 <_ux_device_class_cdc_acm_write+0xc6>
 80141f0:	b14c      	cbz	r4, 8014206 <_ux_device_class_cdc_acm_write+0xc6>
            if (requested_length > UX_SLAVE_REQUEST_DATA_MAX_LENGTH)
 80141f2:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 80141f6:	d9e0      	bls.n	80141ba <_ux_device_class_cdc_acm_write+0x7a>
                local_requested_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH;
 80141f8:	f44f 7700 	mov.w	r7, #512	@ 0x200
 80141fc:	e7df      	b.n	80141be <_ux_device_class_cdc_acm_write+0x7e>
            
            else
            {
             
                /* Free Mutex resource.  */
                _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 80141fe:	9801      	ldr	r0, [sp, #4]
 8014200:	f7ff fd45 	bl	8013c8e <_ux_utility_mutex_off>
                
                /* We had an error, abort.  */
                return(status);
 8014204:	e006      	b.n	8014214 <_ux_device_class_cdc_acm_write+0xd4>
        }
    }

    
    /* Free Mutex resource.  */
    _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8014206:	9801      	ldr	r0, [sp, #4]
 8014208:	f7ff fd41 	bl	8013c8e <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 801420c:	f8da 3020 	ldr.w	r3, [sl, #32]
 8014210:	2b03      	cmp	r3, #3
 8014212:	d103      	bne.n	801421c <_ux_device_class_cdc_acm_write+0xdc>
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
          
}
 8014214:	4638      	mov	r0, r7
 8014216:	b003      	add	sp, #12
 8014218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 801421c:	2222      	movs	r2, #34	@ 0x22
 801421e:	2107      	movs	r1, #7
 8014220:	2002      	movs	r0, #2
 8014222:	f7ff fb35 	bl	8013890 <_ux_system_error_handler>
        return (UX_TRANSFER_NO_ANSWER);
 8014226:	2722      	movs	r7, #34	@ 0x22
 8014228:	e7f4      	b.n	8014214 <_ux_device_class_cdc_acm_write+0xd4>
 801422a:	bf00      	nop
 801422c:	20010f44 	.word	0x20010f44

08014230 <_ux_dcd_stm32_setup_status>:
    }
}

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 8014230:	b538      	push	{r3, r4, r5, lr}
 8014232:	4604      	mov	r4, r0
 8014234:	4615      	mov	r5, r2

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8014236:	2380      	movs	r3, #128	@ 0x80
 8014238:	7283      	strb	r3, [r0, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 801423a:	4608      	mov	r0, r1
 801423c:	f7fe fdce 	bl	8012ddc <_ux_device_stack_control_request_process>
 8014240:	b100      	cbz	r0, 8014244 <_ux_dcd_stm32_setup_status+0x14>

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
    }
}
 8014242:	bd38      	pop	{r3, r4, r5, pc}
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8014244:	2304      	movs	r3, #4
 8014246:	7223      	strb	r3, [r4, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8014248:	2300      	movs	r3, #0
 801424a:	461a      	mov	r2, r3
 801424c:	4619      	mov	r1, r3
 801424e:	4628      	mov	r0, r5
 8014250:	f7f4 ff30 	bl	80090b4 <HAL_PCD_EP_Transmit>
}
 8014254:	e7f5      	b.n	8014242 <_ux_dcd_stm32_setup_status+0x12>

08014256 <_ux_dcd_stm32_setup_out>:
{
 8014256:	b538      	push	{r3, r4, r5, lr}
 8014258:	4604      	mov	r4, r0
 801425a:	4608      	mov	r0, r1
 801425c:	4615      	mov	r5, r2
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801425e:	2300      	movs	r3, #0
 8014260:	624b      	str	r3, [r1, #36]	@ 0x24
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8014262:	2380      	movs	r3, #128	@ 0x80
 8014264:	72a3      	strb	r3, [r4, #10]
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8014266:	f7fe fdb9 	bl	8012ddc <_ux_device_stack_control_request_process>
 801426a:	b100      	cbz	r0, 801426e <_ux_dcd_stm32_setup_out+0x18>
}
 801426c:	bd38      	pop	{r3, r4, r5, pc}
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 801426e:	2303      	movs	r3, #3
 8014270:	7223      	strb	r3, [r4, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8014272:	2300      	movs	r3, #0
 8014274:	461a      	mov	r2, r3
 8014276:	4619      	mov	r1, r3
 8014278:	4628      	mov	r0, r5
 801427a:	f7f4 ff1b 	bl	80090b4 <HAL_PCD_EP_Transmit>
}
 801427e:	e7f5      	b.n	801426c <_ux_dcd_stm32_setup_out+0x16>

08014280 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8014280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014284:	4606      	mov	r6, r0
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014286:	4b27      	ldr	r3, [pc, #156]	@ (8014324 <HAL_PCD_SetupStageCallback+0xa4>)
 8014288:	681b      	ldr	r3, [r3, #0]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801428a:	69dd      	ldr	r5, [r3, #28]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 801428c:	686c      	ldr	r4, [r5, #4]
 801428e:	f104 0730 	add.w	r7, r4, #48	@ 0x30

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 8014292:	2208      	movs	r2, #8
 8014294:	f200 41c4 	addw	r1, r0, #1220	@ 0x4c4
 8014298:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 801429c:	f7ff fc4b 	bl	8013b36 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80142a0:	2300      	movs	r3, #0
 80142a2:	64a3      	str	r3, [r4, #72]	@ 0x48

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 80142a4:	2201      	movs	r2, #1
 80142a6:	6362      	str	r2, [r4, #52]	@ 0x34

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 80142a8:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 80142aa:	68ab      	ldr	r3, [r5, #8]
 80142ac:	f023 030e 	bic.w	r3, r3, #14
 80142b0:	60ab      	str	r3, [r5, #8]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 80142b2:	f994 3084 	ldrsb.w	r3, [r4, #132]	@ 0x84
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	db1f      	blt.n	80142fa <HAL_PCD_SetupStageCallback+0x7a>
 80142ba:	f105 0804 	add.w	r8, r5, #4
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 80142be:	2300      	movs	r3, #0
 80142c0:	73ab      	strb	r3, [r5, #14]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 80142c2:	f894 308a 	ldrb.w	r3, [r4, #138]	@ 0x8a
 80142c6:	b913      	cbnz	r3, 80142ce <HAL_PCD_SetupStageCallback+0x4e>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 80142c8:	f894 308b 	ldrb.w	r3, [r4, #139]	@ 0x8b
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 80142cc:	b1e3      	cbz	r3, 8014308 <HAL_PCD_SetupStageCallback+0x88>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80142ce:	6ba7      	ldr	r7, [r4, #56]	@ 0x38

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 80142d0:	f104 008a 	add.w	r0, r4, #138	@ 0x8a
 80142d4:	f7ff fd26 	bl	8013d24 <_ux_utility_short_get>
 80142d8:	4603      	mov	r3, r0
 80142da:	6460      	str	r0, [r4, #68]	@ 0x44

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80142dc:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80142e0:	d818      	bhi.n	8014314 <HAL_PCD_SetupStageCallback+0x94>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80142e2:	2200      	movs	r2, #0
 80142e4:	64a2      	str	r2, [r4, #72]	@ 0x48

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 80142e6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80142e8:	6422      	str	r2, [r4, #64]	@ 0x40

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
 80142ea:	7d39      	ldrb	r1, [r7, #20]
 80142ec:	4630      	mov	r0, r6
 80142ee:	f7f4 feb3 	bl	8009058 <HAL_PCD_EP_Receive>
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 80142f2:	2302      	movs	r3, #2
 80142f4:	732b      	strb	r3, [r5, #12]
            }
        }
    }
}
 80142f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 80142fa:	2380      	movs	r3, #128	@ 0x80
 80142fc:	73ab      	strb	r3, [r5, #14]
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 80142fe:	732a      	strb	r2, [r5, #12]
    _ux_device_stack_control_request_process(transfer_request);
 8014300:	4638      	mov	r0, r7
 8014302:	f7fe fd6b 	bl	8012ddc <_ux_device_stack_control_request_process>
}
 8014306:	e7f6      	b.n	80142f6 <HAL_PCD_SetupStageCallback+0x76>
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 8014308:	4632      	mov	r2, r6
 801430a:	4639      	mov	r1, r7
 801430c:	4640      	mov	r0, r8
 801430e:	f7ff ff8f 	bl	8014230 <_ux_dcd_stm32_setup_status>
 8014312:	e7f0      	b.n	80142f6 <HAL_PCD_SetupStageCallback+0x76>
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 8014314:	4639      	mov	r1, r7
 8014316:	4628      	mov	r0, r5
 8014318:	f000 f99e 	bl	8014658 <_ux_dcd_stm32_endpoint_stall>
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 801431c:	2300      	movs	r3, #0
 801431e:	732b      	strb	r3, [r5, #12]
                return;
 8014320:	e7e9      	b.n	80142f6 <HAL_PCD_SetupStageCallback+0x76>
 8014322:	bf00      	nop
 8014324:	20010f44 	.word	0x20010f44

08014328 <HAL_PCD_DataInStageCallback>:
/*                                            fixed transmit ZLP issue,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8014328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801432c:	4605      	mov	r5, r0
UX_SLAVE_TRANSFER       *transfer_request;
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801432e:	4b36      	ldr	r3, [pc, #216]	@ (8014408 <HAL_PCD_DataInStageCallback+0xe0>)
 8014330:	681b      	ldr	r3, [r3, #0]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8014332:	69de      	ldr	r6, [r3, #28]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 8014334:	f011 030f 	ands.w	r3, r1, #15
 8014338:	d010      	beq.n	801435c <HAL_PCD_DataInStageCallback+0x34>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 801433a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801433e:	009b      	lsls	r3, r3, #2
 8014340:	3370      	adds	r3, #112	@ 0x70
 8014342:	441e      	add	r6, r3
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8014344:	6834      	ldr	r4, [r6, #0]
 8014346:	f104 0730 	add.w	r7, r4, #48	@ 0x30

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 801434a:	2900      	cmp	r1, #0
 801434c:	d142      	bne.n	80143d4 <HAL_PCD_DataInStageCallback+0xac>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801434e:	f8d4 8038 	ldr.w	r8, [r4, #56]	@ 0x38

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 8014352:	7a33      	ldrb	r3, [r6, #8]
 8014354:	2b01      	cmp	r3, #1
 8014356:	d007      	beq.n	8014368 <HAL_PCD_DataInStageCallback+0x40>
        	_ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);

#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 8014358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 801435c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014360:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8014364:	3604      	adds	r6, #4
 8014366:	e7ed      	b.n	8014344 <HAL_PCD_DataInStageCallback+0x1c>
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 8014368:	2300      	movs	r3, #0
 801436a:	461a      	mov	r2, r3
 801436c:	4619      	mov	r1, r3
 801436e:	4628      	mov	r0, r5
 8014370:	f7f4 fe72 	bl	8009058 <HAL_PCD_EP_Receive>
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8014374:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8014376:	f8d8 001c 	ldr.w	r0, [r8, #28]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 801437a:	4281      	cmp	r1, r0
 801437c:	d81b      	bhi.n	80143b6 <HAL_PCD_DataInStageCallback+0x8e>
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 801437e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8014382:	2b01      	cmp	r3, #1
 8014384:	d00c      	beq.n	80143a0 <HAL_PCD_DataInStageCallback+0x78>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8014386:	2300      	movs	r3, #0
 8014388:	6563      	str	r3, [r4, #84]	@ 0x54
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801438a:	2302      	movs	r3, #2
 801438c:	6323      	str	r3, [r4, #48]	@ 0x30
                        transfer_request -> ux_slave_transfer_request_requested_length;
 801438e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
                    transfer_request -> ux_slave_transfer_request_actual_length =
 8014390:	64a3      	str	r3, [r4, #72]	@ 0x48
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 8014392:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8014394:	b10b      	cbz	r3, 801439a <HAL_PCD_DataInStageCallback+0x72>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request);
 8014396:	4638      	mov	r0, r7
 8014398:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 801439a:	2304      	movs	r3, #4
 801439c:	7233      	strb	r3, [r6, #8]
 801439e:	e7db      	b.n	8014358 <HAL_PCD_DataInStageCallback+0x30>
                    HAL_PCD_EP_Transmit(hpcd,
 80143a0:	2300      	movs	r3, #0
 80143a2:	461a      	mov	r2, r3
 80143a4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80143a8:	4628      	mov	r0, r5
 80143aa:	f7f4 fe83 	bl	80090b4 <HAL_PCD_EP_Transmit>
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 80143ae:	2300      	movs	r3, #0
 80143b0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 80143b4:	e7d0      	b.n	8014358 <HAL_PCD_DataInStageCallback+0x30>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80143b6:	1a0b      	subs	r3, r1, r0
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 80143b8:	4298      	cmp	r0, r3
 80143ba:	d200      	bcs.n	80143be <HAL_PCD_DataInStageCallback+0x96>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80143bc:	4603      	mov	r3, r0
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80143be:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80143c0:	4402      	add	r2, r0
 80143c2:	6422      	str	r2, [r4, #64]	@ 0x40
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 80143c4:	1ac9      	subs	r1, r1, r3
 80143c6:	64e1      	str	r1, [r4, #76]	@ 0x4c
                HAL_PCD_EP_Transmit(hpcd,
 80143c8:	f898 1014 	ldrb.w	r1, [r8, #20]
 80143cc:	4628      	mov	r0, r5
 80143ce:	f7f4 fe71 	bl	80090b4 <HAL_PCD_EP_Transmit>
 80143d2:	e7c1      	b.n	8014358 <HAL_PCD_DataInStageCallback+0x30>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 80143d4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80143d8:	b10b      	cbz	r3, 80143de <HAL_PCD_DataInStageCallback+0xb6>
            transfer_request -> ux_slave_transfer_request_requested_length)
 80143da:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 80143dc:	b953      	cbnz	r3, 80143f4 <HAL_PCD_DataInStageCallback+0xcc>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 80143de:	2300      	movs	r3, #0
 80143e0:	6563      	str	r3, [r4, #84]	@ 0x54
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 80143e2:	2302      	movs	r3, #2
 80143e4:	6323      	str	r3, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_requested_length;
 80143e6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
            transfer_request -> ux_slave_transfer_request_actual_length =
 80143e8:	64a3      	str	r3, [r4, #72]	@ 0x48
        	_ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 80143ea:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 80143ee:	f7ff fc95 	bl	8013d1c <_ux_utility_semaphore_put>
}
 80143f2:	e7b1      	b.n	8014358 <HAL_PCD_DataInStageCallback+0x30>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 80143f4:	2200      	movs	r2, #0
 80143f6:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 80143fa:	64e2      	str	r2, [r4, #76]	@ 0x4c
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 80143fc:	4613      	mov	r3, r2
 80143fe:	4628      	mov	r0, r5
 8014400:	f7f4 fe58 	bl	80090b4 <HAL_PCD_EP_Transmit>
 8014404:	e7a8      	b.n	8014358 <HAL_PCD_DataInStageCallback+0x30>
 8014406:	bf00      	nop
 8014408:	20010f44 	.word	0x20010f44

0801440c <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 801440c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014410:	4605      	mov	r5, r0
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 8014412:	4b25      	ldr	r3, [pc, #148]	@ (80144a8 <HAL_PCD_DataOutStageCallback+0x9c>)
 8014414:	681b      	ldr	r3, [r3, #0]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8014416:	69da      	ldr	r2, [r3, #28]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8014418:	f001 030f 	and.w	r3, r1, #15
 801441c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8014420:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8014424:	f8dc 4004 	ldr.w	r4, [ip, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8014428:	bb89      	cbnz	r1, 801448e <HAL_PCD_DataOutStageCallback+0x82>
 801442a:	f10c 0604 	add.w	r6, ip, #4
 801442e:	f104 0730 	add.w	r7, r4, #48	@ 0x30
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 8014432:	f89c 300c 	ldrb.w	r3, [ip, #12]
 8014436:	2b02      	cmp	r3, #2
 8014438:	d001      	beq.n	801443e <HAL_PCD_DataOutStageCallback+0x32>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 801443a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 801443e:	f8d4 8038 	ldr.w	r8, [r4, #56]	@ 0x38
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8014442:	f7f4 fe2e 	bl	80090a2 <HAL_PCD_EP_GetRxCount>
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 8014446:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8014448:	4403      	add	r3, r0
 801444a:	64a3      	str	r3, [r4, #72]	@ 0x48
                transfer_request -> ux_slave_transfer_request_requested_length)
 801444c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 801444e:	4293      	cmp	r3, r2
 8014450:	d815      	bhi.n	801447e <HAL_PCD_DataOutStageCallback+0x72>
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 8014452:	d003      	beq.n	801445c <HAL_PCD_DataOutStageCallback+0x50>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 8014454:	f8d8 301c 	ldr.w	r3, [r8, #28]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8014458:	4283      	cmp	r3, r0
 801445a:	d005      	beq.n	8014468 <HAL_PCD_DataOutStageCallback+0x5c>
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 801445c:	462a      	mov	r2, r5
 801445e:	4639      	mov	r1, r7
 8014460:	4630      	mov	r0, r6
 8014462:	f7ff fef8 	bl	8014256 <_ux_dcd_stm32_setup_out>
 8014466:	e7e8      	b.n	801443a <HAL_PCD_DataOutStageCallback+0x2e>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8014468:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801446a:	441a      	add	r2, r3
 801446c:	6422      	str	r2, [r4, #64]	@ 0x40
                    HAL_PCD_EP_Receive(hpcd,
 801446e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8014472:	f898 1014 	ldrb.w	r1, [r8, #20]
 8014476:	4628      	mov	r0, r5
 8014478:	f7f4 fdee 	bl	8009058 <HAL_PCD_EP_Receive>
 801447c:	e7dd      	b.n	801443a <HAL_PCD_DataOutStageCallback+0x2e>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 801447e:	2327      	movs	r3, #39	@ 0x27
 8014480:	6563      	str	r3, [r4, #84]	@ 0x54
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 8014482:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8014484:	2b00      	cmp	r3, #0
 8014486:	d0d8      	beq.n	801443a <HAL_PCD_DataOutStageCallback+0x2e>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8014488:	4638      	mov	r0, r7
 801448a:	4798      	blx	r3
 801448c:	e7d5      	b.n	801443a <HAL_PCD_DataOutStageCallback+0x2e>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 801448e:	f7f4 fe08 	bl	80090a2 <HAL_PCD_EP_GetRxCount>
 8014492:	64a0      	str	r0, [r4, #72]	@ 0x48
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8014494:	2300      	movs	r3, #0
 8014496:	6563      	str	r3, [r4, #84]	@ 0x54
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8014498:	2302      	movs	r3, #2
 801449a:	6323      	str	r3, [r4, #48]	@ 0x30
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 801449c:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 80144a0:	f7ff fc3c 	bl	8013d1c <_ux_utility_semaphore_put>
}
 80144a4:	e7c9      	b.n	801443a <HAL_PCD_DataOutStageCallback+0x2e>
 80144a6:	bf00      	nop
 80144a8:	20010f44 	.word	0x20010f44

080144ac <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80144ac:	b510      	push	{r4, lr}
 80144ae:	4604      	mov	r4, r0

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 80144b0:	4b11      	ldr	r3, [pc, #68]	@ (80144f8 <HAL_PCD_ResetCallback+0x4c>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	6a1b      	ldr	r3, [r3, #32]
 80144b6:	b94b      	cbnz	r3, 80144cc <HAL_PCD_ResetCallback+0x20>
        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 80144b8:	6923      	ldr	r3, [r4, #16]
 80144ba:	b153      	cbz	r3, 80144d2 <HAL_PCD_ResetCallback+0x26>
 80144bc:	2b02      	cmp	r3, #2
 80144be:	d014      	beq.n	80144ea <HAL_PCD_ResetCallback+0x3e>
        break;

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 80144c0:	4b0d      	ldr	r3, [pc, #52]	@ (80144f8 <HAL_PCD_ResetCallback+0x4c>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	2201      	movs	r2, #1
 80144c6:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
        break;
 80144ca:	e007      	b.n	80144dc <HAL_PCD_ResetCallback+0x30>
        _ux_device_stack_disconnect();
 80144cc:	f7fe fea0 	bl	8013210 <_ux_device_stack_disconnect>
 80144d0:	e7f2      	b.n	80144b8 <HAL_PCD_ResetCallback+0xc>
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
 80144d2:	4b09      	ldr	r3, [pc, #36]	@ (80144f8 <HAL_PCD_ResetCallback+0x4c>)
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	2202      	movs	r2, #2
 80144d8:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 80144dc:	f000 f958 	bl	8014790 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 80144e0:	4b05      	ldr	r3, [pc, #20]	@ (80144f8 <HAL_PCD_ResetCallback+0x4c>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	2201      	movs	r2, #1
 80144e6:	621a      	str	r2, [r3, #32]
}
 80144e8:	bd10      	pop	{r4, pc}
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 80144ea:	4b03      	ldr	r3, [pc, #12]	@ (80144f8 <HAL_PCD_ResetCallback+0x4c>)
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	2201      	movs	r2, #1
 80144f0:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
        break;
 80144f4:	e7f2      	b.n	80144dc <HAL_PCD_ResetCallback+0x30>
 80144f6:	bf00      	nop
 80144f8:	20010f44 	.word	0x20010f44

080144fc <HAL_PCD_ConnectCallback>:
/*                                                                        */
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80144fc:	b508      	push	{r3, lr}
	(void)hpcd;

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80144fe:	4b04      	ldr	r3, [pc, #16]	@ (8014510 <HAL_PCD_ConnectCallback+0x14>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8014506:	b10b      	cbz	r3, 801450c <HAL_PCD_ConnectCallback+0x10>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
 8014508:	20f1      	movs	r0, #241	@ 0xf1
 801450a:	4798      	blx	r3
    }
}
 801450c:	bd08      	pop	{r3, pc}
 801450e:	bf00      	nop
 8014510:	20010f44 	.word	0x20010f44

08014514 <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8014514:	b508      	push	{r3, lr}
	(void)hpcd;

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8014516:	4b07      	ldr	r3, [pc, #28]	@ (8014534 <HAL_PCD_DisconnectCallback+0x20>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 801451e:	b10b      	cbz	r3, 8014524 <HAL_PCD_DisconnectCallback+0x10>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
 8014520:	20f2      	movs	r0, #242	@ 0xf2
 8014522:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 8014524:	4b03      	ldr	r3, [pc, #12]	@ (8014534 <HAL_PCD_DisconnectCallback+0x20>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	6a1b      	ldr	r3, [r3, #32]
 801452a:	b903      	cbnz	r3, 801452e <HAL_PCD_DisconnectCallback+0x1a>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
    }
}
 801452c:	bd08      	pop	{r3, pc}
        _ux_device_stack_disconnect();
 801452e:	f7fe fe6f 	bl	8013210 <_ux_device_stack_disconnect>
}
 8014532:	e7fb      	b.n	801452c <HAL_PCD_DisconnectCallback+0x18>
 8014534:	20010f44 	.word	0x20010f44

08014538 <HAL_PCD_SuspendCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8014538:	b508      	push	{r3, lr}
	(void)hpcd;

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 801453a:	4b04      	ldr	r3, [pc, #16]	@ (801454c <HAL_PCD_SuspendCallback+0x14>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8014542:	b10b      	cbz	r3, 8014548 <HAL_PCD_SuspendCallback+0x10>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 8014544:	20f4      	movs	r0, #244	@ 0xf4
 8014546:	4798      	blx	r3
    }
}
 8014548:	bd08      	pop	{r3, pc}
 801454a:	bf00      	nop
 801454c:	20010f44 	.word	0x20010f44

08014550 <HAL_PCD_ResumeCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8014550:	b508      	push	{r3, lr}
	(void)hpcd;

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8014552:	4b04      	ldr	r3, [pc, #16]	@ (8014564 <HAL_PCD_ResumeCallback+0x14>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 801455a:	b10b      	cbz	r3, 8014560 <HAL_PCD_ResumeCallback+0x10>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 801455c:	20f3      	movs	r0, #243	@ 0xf3
 801455e:	4798      	blx	r3
    }
}
 8014560:	bd08      	pop	{r3, pc}
 8014562:	bf00      	nop
 8014564:	20010f44 	.word	0x20010f44

08014568 <HAL_PCD_SOFCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8014568:	b508      	push	{r3, lr}
	(void)hpcd;

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 801456a:	4b04      	ldr	r3, [pc, #16]	@ (801457c <HAL_PCD_SOFCallback+0x14>)
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8014572:	b10b      	cbz	r3, 8014578 <HAL_PCD_SOFCallback+0x10>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 8014574:	20f0      	movs	r0, #240	@ 0xf0
 8014576:	4798      	blx	r3
    }
}
 8014578:	bd08      	pop	{r3, pc}
 801457a:	bf00      	nop
 801457c:	20010f44 	.word	0x20010f44

08014580 <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8014580:	b538      	push	{r3, r4, r5, lr}
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 8014582:	694b      	ldr	r3, [r1, #20]
 8014584:	f023 0580 	bic.w	r5, r3, #128	@ 0x80
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
 8014588:	f003 0280 	and.w	r2, r3, #128	@ 0x80
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 801458c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8014590:	2b08      	cmp	r3, #8
 8014592:	d82e      	bhi.n	80145f2 <_ux_dcd_stm32_endpoint_create+0x72>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 8014594:	f8d0 40dc 	ldr.w	r4, [r0, #220]	@ 0xdc
 8014598:	6864      	ldr	r4, [r4, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801459a:	42a3      	cmp	r3, r4
 801459c:	d22b      	bcs.n	80145f6 <_ux_dcd_stm32_endpoint_create+0x76>
        return(UX_NULL);

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 801459e:	b962      	cbnz	r2, 80145ba <_ux_dcd_stm32_endpoint_create+0x3a>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 80145a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80145a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80145a8:	3304      	adds	r3, #4

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);

    if (ed == UX_NULL)
 80145aa:	b333      	cbz	r3, 80145fa <_ux_dcd_stm32_endpoint_create+0x7a>
        return(UX_NO_ED_AVAILABLE);

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 80145ac:	685a      	ldr	r2, [r3, #4]
 80145ae:	f012 0401 	ands.w	r4, r2, #1
 80145b2:	d008      	beq.n	80145c6 <_ux_dcd_stm32_endpoint_create+0x46>
        /* Return successful completion.  */
        return(UX_SUCCESS);
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 80145b4:	2414      	movs	r4, #20
}
 80145b6:	4620      	mov	r0, r4
 80145b8:	bd38      	pop	{r3, r4, r5, pc}
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 80145ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80145be:	009b      	lsls	r3, r3, #2
 80145c0:	3370      	adds	r3, #112	@ 0x70
 80145c2:	4403      	add	r3, r0
 80145c4:	e7f1      	b.n	80145aa <_ux_dcd_stm32_endpoint_create+0x2a>
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 80145c6:	f042 0201 	orr.w	r2, r2, #1
 80145ca:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 80145cc:	608b      	str	r3, [r1, #8]
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 80145ce:	6019      	str	r1, [r3, #0]
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 80145d0:	725d      	strb	r5, [r3, #9]
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 80145d2:	694a      	ldr	r2, [r1, #20]
 80145d4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80145d8:	729a      	strb	r2, [r3, #10]
        if (stm32_endpoint_index != 0)
 80145da:	2d00      	cmp	r5, #0
 80145dc:	d0eb      	beq.n	80145b6 <_ux_dcd_stm32_endpoint_create+0x36>
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 80145de:	698b      	ldr	r3, [r1, #24]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 80145e0:	f003 0303 	and.w	r3, r3, #3
 80145e4:	8b8a      	ldrh	r2, [r1, #28]
 80145e6:	7d09      	ldrb	r1, [r1, #20]
 80145e8:	f8d0 00dc 	ldr.w	r0, [r0, #220]	@ 0xdc
 80145ec:	f7f4 fcb6 	bl	8008f5c <HAL_PCD_EP_Open>
        return(UX_SUCCESS);
 80145f0:	e7e1      	b.n	80145b6 <_ux_dcd_stm32_endpoint_create+0x36>
        return(UX_NO_ED_AVAILABLE);
 80145f2:	2414      	movs	r4, #20
 80145f4:	e7df      	b.n	80145b6 <_ux_dcd_stm32_endpoint_create+0x36>
 80145f6:	2414      	movs	r4, #20
 80145f8:	e7dd      	b.n	80145b6 <_ux_dcd_stm32_endpoint_create+0x36>
 80145fa:	2414      	movs	r4, #20
 80145fc:	e7db      	b.n	80145b6 <_ux_dcd_stm32_endpoint_create+0x36>

080145fe <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 80145fe:	b510      	push	{r4, lr}

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8014600:	688b      	ldr	r3, [r1, #8]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 8014602:	2400      	movs	r4, #0
 8014604:	605c      	str	r4, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8014606:	7d09      	ldrb	r1, [r1, #20]
 8014608:	f8d0 00dc 	ldr.w	r0, [r0, #220]	@ 0xdc
 801460c:	f7f4 fceb 	bl	8008fe6 <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
 8014610:	4620      	mov	r0, r4
 8014612:	bd10      	pop	{r4, pc}

08014614 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8014614:	b570      	push	{r4, r5, r6, lr}
 8014616:	4605      	mov	r5, r0
 8014618:	460c      	mov	r4, r1
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801461a:	688b      	ldr	r3, [r1, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801461c:	f3ef 8610 	mrs	r6, PRIMASK
    __asm__ volatile ("CPSID i" : : : "memory");
 8014620:	b672      	cpsid	i

    UX_DISABLE

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8014622:	685a      	ldr	r2, [r3, #4]
 8014624:	f422 7243 	bic.w	r2, r2, #780	@ 0x30c
 8014628:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 801462a:	2200      	movs	r2, #0
 801462c:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 801462e:	7d09      	ldrb	r1, [r1, #20]
 8014630:	f8d0 00dc 	ldr.w	r0, [r0, #220]	@ 0xdc
 8014634:	f7f4 fda7 	bl	8009186 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8014638:	7d21      	ldrb	r1, [r4, #20]
 801463a:	f8d5 00dc 	ldr.w	r0, [r5, #220]	@ 0xdc
 801463e:	f7f5 f8fb 	bl	8009838 <HAL_PCD_EP_Flush>

#ifndef UX_DEVICE_STANDALONE

    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
 8014642:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014644:	b91b      	cbnz	r3, 801464e <_ux_dcd_stm32_endpoint_reset+0x3a>
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014646:	f386 8810 	msr	PRIMASK, r6

    UX_RESTORE

    /* This function never fails.  */
    return(UX_SUCCESS);
}
 801464a:	2000      	movs	r0, #0
 801464c:	bd70      	pop	{r4, r5, r6, pc}
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 801464e:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 8014652:	f7ff fb63 	bl	8013d1c <_ux_utility_semaphore_put>
 8014656:	e7f6      	b.n	8014646 <_ux_dcd_stm32_endpoint_reset+0x32>

08014658 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8014658:	b508      	push	{r3, lr}

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801465a:	688b      	ldr	r3, [r1, #8]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 801465c:	685a      	ldr	r2, [r3, #4]
 801465e:	f042 0204 	orr.w	r2, r2, #4
 8014662:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 8014664:	694a      	ldr	r2, [r1, #20]
 8014666:	7a99      	ldrb	r1, [r3, #10]
 8014668:	4311      	orrs	r1, r2
 801466a:	b2c9      	uxtb	r1, r1
 801466c:	f8d0 00dc 	ldr.w	r0, [r0, #220]	@ 0xdc
 8014670:	f7f4 fd45 	bl	80090fe <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
 8014674:	2000      	movs	r0, #0
 8014676:	bd08      	pop	{r3, pc}

08014678 <_ux_dcd_stm32_endpoint_status>:
ULONG ep_dir = ep_addr & 0x80u;
 8014678:	f001 0380 	and.w	r3, r1, #128	@ 0x80
ULONG ep_num = ep_addr & 0x7Fu;
 801467c:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8014680:	2908      	cmp	r1, #8
 8014682:	d818      	bhi.n	80146b6 <_ux_dcd_stm32_endpoint_status+0x3e>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 8014684:	f8d0 20dc 	ldr.w	r2, [r0, #220]	@ 0xdc
 8014688:	6852      	ldr	r2, [r2, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801468a:	4291      	cmp	r1, r2
 801468c:	d215      	bcs.n	80146ba <_ux_dcd_stm32_endpoint_status+0x42>
    if (ep_dir)
 801468e:	b963      	cbnz	r3, 80146aa <_ux_dcd_stm32_endpoint_status+0x32>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 8014690:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014694:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8014698:	3004      	adds	r0, #4

    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 801469a:	6840      	ldr	r0, [r0, #4]
 801469c:	f010 0f01 	tst.w	r0, #1
 80146a0:	d00d      	beq.n	80146be <_ux_dcd_stm32_endpoint_status+0x46>
        return(UX_ERROR);

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 80146a2:	f010 0004 	ands.w	r0, r0, #4
 80146a6:	d10c      	bne.n	80146c2 <_ux_dcd_stm32_endpoint_status+0x4a>
 80146a8:	4770      	bx	lr
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 80146aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80146ae:	0089      	lsls	r1, r1, #2
 80146b0:	3170      	adds	r1, #112	@ 0x70
 80146b2:	4408      	add	r0, r1
 80146b4:	e7f1      	b.n	801469a <_ux_dcd_stm32_endpoint_status+0x22>
        return(UX_NULL);
 80146b6:	2000      	movs	r0, #0
 80146b8:	e7ef      	b.n	801469a <_ux_dcd_stm32_endpoint_status+0x22>
 80146ba:	2000      	movs	r0, #0
 80146bc:	e7ed      	b.n	801469a <_ux_dcd_stm32_endpoint_status+0x22>
        return(UX_ERROR);
 80146be:	20ff      	movs	r0, #255	@ 0xff
 80146c0:	4770      	bx	lr
        return(UX_FALSE);
    else
        return(UX_TRUE);
 80146c2:	2001      	movs	r0, #1
}
 80146c4:	4770      	bx	lr

080146c6 <_ux_dcd_stm32_frame_number_get>:
	(void) dcd_stm32;
	(void) frame_number;

    /* This function never fails. */
    return(UX_SUCCESS);
}
 80146c6:	2000      	movs	r0, #0
 80146c8:	4770      	bx	lr

080146ca <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 80146ca:	b508      	push	{r3, lr}
 80146cc:	460b      	mov	r3, r1
 80146ce:	4611      	mov	r1, r2
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 80146d0:	6802      	ldr	r2, [r0, #0]
 80146d2:	b15a      	cbz	r2, 80146ec <_ux_dcd_stm32_function+0x22>

        return(UX_CONTROLLER_UNKNOWN);
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80146d4:	69c0      	ldr	r0, [r0, #28]

    /* Look at the function and route it.  */
    switch(function)
 80146d6:	3b0a      	subs	r3, #10
 80146d8:	2b0b      	cmp	r3, #11
 80146da:	d835      	bhi.n	8014748 <_ux_dcd_stm32_function+0x7e>
 80146dc:	e8df f003 	tbb	[pc, r3]
 80146e0:	1310340d 	.word	0x1310340d
 80146e4:	221c1916 	.word	0x221c1916
 80146e8:	311f2834 	.word	0x311f2834
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 80146ec:	2255      	movs	r2, #85	@ 0x55
 80146ee:	2102      	movs	r1, #2
 80146f0:	4608      	mov	r0, r1
 80146f2:	f7ff f8cd 	bl	8013890 <_ux_system_error_handler>
        return(UX_CONTROLLER_UNKNOWN);
 80146f6:	2055      	movs	r0, #85	@ 0x55
        break;
    }

    /* Return completion status.  */
    return(status);
}
 80146f8:	bd08      	pop	{r3, pc}
        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 80146fa:	f7ff ffe4 	bl	80146c6 <_ux_dcd_stm32_frame_number_get>
        break;
 80146fe:	e7fb      	b.n	80146f8 <_ux_dcd_stm32_function+0x2e>
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 8014700:	f000 f8cd 	bl	801489e <_ux_dcd_stm32_transfer_request>
        break;
 8014704:	e7f8      	b.n	80146f8 <_ux_dcd_stm32_function+0x2e>
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 8014706:	f000 f8bb 	bl	8014880 <_ux_dcd_stm32_transfer_abort>
        break;
 801470a:	e7f5      	b.n	80146f8 <_ux_dcd_stm32_function+0x2e>
        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 801470c:	f7ff ff38 	bl	8014580 <_ux_dcd_stm32_endpoint_create>
        break;
 8014710:	e7f2      	b.n	80146f8 <_ux_dcd_stm32_function+0x2e>
        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 8014712:	f7ff ff74 	bl	80145fe <_ux_dcd_stm32_endpoint_destroy>
        break;
 8014716:	e7ef      	b.n	80146f8 <_ux_dcd_stm32_function+0x2e>
        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 8014718:	f7ff ff7c 	bl	8014614 <_ux_dcd_stm32_endpoint_reset>
        break;
 801471c:	e7ec      	b.n	80146f8 <_ux_dcd_stm32_function+0x2e>
        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 801471e:	f7ff ff9b 	bl	8014658 <_ux_dcd_stm32_endpoint_stall>
        break;
 8014722:	e7e9      	b.n	80146f8 <_ux_dcd_stm32_function+0x2e>
        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 8014724:	b2c9      	uxtb	r1, r1
 8014726:	f8d0 00dc 	ldr.w	r0, [r0, #220]	@ 0xdc
 801472a:	f7f4 fc03 	bl	8008f34 <HAL_PCD_SetAddress>
        break;
 801472e:	e7e3      	b.n	80146f8 <_ux_dcd_stm32_function+0x2e>
        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 8014730:	290b      	cmp	r1, #11
 8014732:	d001      	beq.n	8014738 <_ux_dcd_stm32_function+0x6e>
          status = UX_SUCCESS;
 8014734:	2000      	movs	r0, #0
 8014736:	e7df      	b.n	80146f8 <_ux_dcd_stm32_function+0x2e>
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 8014738:	f8d0 00dc 	ldr.w	r0, [r0, #220]	@ 0xdc
 801473c:	f7f4 fb34 	bl	8008da8 <HAL_PCD_Stop>
 8014740:	e7da      	b.n	80146f8 <_ux_dcd_stm32_function+0x2e>
        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 8014742:	f7ff ff99 	bl	8014678 <_ux_dcd_stm32_endpoint_status>
        break;
 8014746:	e7d7      	b.n	80146f8 <_ux_dcd_stm32_function+0x2e>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 8014748:	2254      	movs	r2, #84	@ 0x54
 801474a:	2102      	movs	r1, #2
 801474c:	4608      	mov	r0, r1
 801474e:	f7ff f89f 	bl	8013890 <_ux_system_error_handler>
        status =  UX_FUNCTION_NOT_SUPPORTED;
 8014752:	2054      	movs	r0, #84	@ 0x54
        break;
 8014754:	e7d0      	b.n	80146f8 <_ux_dcd_stm32_function+0x2e>
	...

08014758 <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 8014758:	b538      	push	{r3, r4, r5, lr}
 801475a:	460d      	mov	r5, r1


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801475c:	4b0a      	ldr	r3, [pc, #40]	@ (8014788 <_ux_dcd_stm32_initialize+0x30>)
 801475e:	681c      	ldr	r4, [r3, #0]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 8014760:	2380      	movs	r3, #128	@ 0x80
 8014762:	6063      	str	r3, [r4, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 8014764:	22e0      	movs	r2, #224	@ 0xe0
 8014766:	2100      	movs	r1, #0
 8014768:	4608      	mov	r0, r1
 801476a:	f7ff f93b 	bl	80139e4 <_ux_utility_memory_allocate>

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 801476e:	b148      	cbz	r0, 8014784 <_ux_dcd_stm32_initialize+0x2c>
        return(UX_MEMORY_INSUFFICIENT);

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 8014770:	61e0      	str	r0, [r4, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 8014772:	6004      	str	r4, [r0, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 8014774:	4a05      	ldr	r2, [pc, #20]	@ (801478c <_ux_dcd_stm32_initialize+0x34>)
 8014776:	61a2      	str	r2, [r4, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 8014778:	f8c0 50dc 	str.w	r5, [r0, #220]	@ 0xdc

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 801477c:	2301      	movs	r3, #1
 801477e:	6023      	str	r3, [r4, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8014780:	2000      	movs	r0, #0
}
 8014782:	bd38      	pop	{r3, r4, r5, pc}
        return(UX_MEMORY_INSUFFICIENT);
 8014784:	2012      	movs	r0, #18
 8014786:	e7fc      	b.n	8014782 <_ux_dcd_stm32_initialize+0x2a>
 8014788:	20010f44 	.word	0x20010f44
 801478c:	080146cb 	.word	0x080146cb

08014790 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 8014790:	b538      	push	{r3, r4, r5, lr}
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014792:	4b39      	ldr	r3, [pc, #228]	@ (8014878 <_ux_dcd_stm32_initialize_complete+0xe8>)
 8014794:	681c      	ldr	r4, [r3, #0]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8014796:	69e5      	ldr	r5, [r4, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 8014798:	f8d4 31b8 	ldr.w	r3, [r4, #440]	@ 0x1b8
 801479c:	2b01      	cmp	r3, #1
 801479e:	d059      	beq.n	8014854 <_ux_dcd_stm32_initialize_complete+0xc4>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 80147a0:	2300      	movs	r3, #0
 80147a2:	f8c4 31b8 	str.w	r3, [r4, #440]	@ 0x1b8

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 80147a6:	f8d4 319c 	ldr.w	r3, [r4, #412]	@ 0x19c
 80147aa:	2b01      	cmp	r3, #1
 80147ac:	d05b      	beq.n	8014866 <_ux_dcd_stm32_initialize_complete+0xd6>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 80147ae:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
 80147b2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 80147b6:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
 80147ba:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
 80147be:	f104 0324 	add.w	r3, r4, #36	@ 0x24
 80147c2:	220e      	movs	r2, #14
 80147c4:	492d      	ldr	r1, [pc, #180]	@ (801487c <_ux_dcd_stm32_initialize_complete+0xec>)
 80147c6:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 80147ca:	f7ff f8d7 	bl	801397c <_ux_utility_descriptor_parse>
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 80147ce:	f242 7310 	movw	r3, #10000	@ 0x2710
 80147d2:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 80147d6:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 80147da:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 80147de:	f104 025c 	add.w	r2, r4, #92	@ 0x5c
 80147e2:	f8c4 2094 	str.w	r2, [r4, #148]	@ 0x94

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 80147e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 80147e8:	61d3      	str	r3, [r2, #28]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
 80147ea:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 80147ee:	69a3      	ldr	r3, [r4, #24]
 80147f0:	210e      	movs	r1, #14
 80147f2:	4620      	mov	r0, r4
 80147f4:	4798      	blx	r3
                                    (VOID *) &device -> ux_slave_device_control_endpoint);

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 80147f6:	2100      	movs	r1, #0
 80147f8:	f8d5 00dc 	ldr.w	r0, [r5, #220]	@ 0xdc
 80147fc:	f7f5 f81c 	bl	8009838 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8014800:	2300      	movs	r3, #0
 8014802:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8014804:	4619      	mov	r1, r3
 8014806:	f8d5 00dc 	ldr.w	r0, [r5, #220]	@ 0xdc
 801480a:	f7f4 fba7 	bl	8008f5c <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 801480e:	2180      	movs	r1, #128	@ 0x80
 8014810:	f8d5 00dc 	ldr.w	r0, [r5, #220]	@ 0xdc
 8014814:	f7f5 f810 	bl	8009838 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8014818:	2300      	movs	r3, #0
 801481a:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 801481c:	2180      	movs	r1, #128	@ 0x80
 801481e:	f8d5 00dc 	ldr.w	r0, [r5, #220]	@ 0xdc
 8014822:	f7f4 fb9b 	bl	8008f5c <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8014826:	2300      	movs	r3, #0
 8014828:	6623      	str	r3, [r4, #96]	@ 0x60

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 801482a:	2201      	movs	r2, #1
 801482c:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 8014830:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 8014834:	2208      	movs	r2, #8
 8014836:	f8c4 20a0 	str.w	r2, [r4, #160]	@ 0xa0
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 801483a:	f8c4 20a8 	str.w	r2, [r4, #168]	@ 0xa8

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 801483e:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8014842:	4b0d      	ldr	r3, [pc, #52]	@ (8014878 <_ux_dcd_stm32_initialize_complete+0xe8>)
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 801484a:	b10b      	cbz	r3, 8014850 <_ux_dcd_stm32_initialize_complete+0xc0>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 801484c:	2001      	movs	r0, #1
 801484e:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
}
 8014850:	2000      	movs	r0, #0
 8014852:	bd38      	pop	{r3, r4, r5, pc}
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 8014854:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
 8014858:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 801485c:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
 8014860:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
 8014864:	e7ab      	b.n	80147be <_ux_dcd_stm32_initialize_complete+0x2e>
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8014866:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 801486a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 801486e:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
 8014872:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
 8014876:	e7a2      	b.n	80147be <_ux_dcd_stm32_initialize_complete+0x2e>
 8014878:	20010f44 	.word	0x20010f44
 801487c:	20000058 	.word	0x20000058

08014880 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 8014880:	b538      	push	{r3, r4, r5, lr}
 8014882:	4604      	mov	r4, r0

UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8014884:	688d      	ldr	r5, [r1, #8]

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8014886:	7d29      	ldrb	r1, [r5, #20]
 8014888:	f8d0 00dc 	ldr.w	r0, [r0, #220]	@ 0xdc
 801488c:	f7f4 fcb6 	bl	80091fc <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8014890:	7d29      	ldrb	r1, [r5, #20]
 8014892:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
 8014896:	f7f4 ffcf 	bl	8009838 <HAL_PCD_EP_Flush>

    /* No semaphore put here since it's already done in stack.  */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
}
 801489a:	2000      	movs	r0, #0
 801489c:	bd38      	pop	{r3, r4, r5, pc}

0801489e <_ux_dcd_stm32_transfer_request>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_request(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 801489e:	b538      	push	{r3, r4, r5, lr}
 80148a0:	460c      	mov	r4, r1
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80148a2:	688d      	ldr	r5, [r1, #8]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 80148a4:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80148a6:	2b03      	cmp	r3, #3
 80148a8:	d00b      	beq.n	80148c2 <_ux_dcd_stm32_transfer_request+0x24>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 80148aa:	694b      	ldr	r3, [r1, #20]
 80148ac:	68ca      	ldr	r2, [r1, #12]
 80148ae:	7d29      	ldrb	r1, [r5, #20]
 80148b0:	f8d0 00dc 	ldr.w	r0, [r0, #220]	@ 0xdc
 80148b4:	f7f4 fbd0 	bl	8009058 <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_data_pointer,
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 80148b8:	6968      	ldr	r0, [r5, #20]
 80148ba:	f030 0080 	bics.w	r0, r0, #128	@ 0x80
 80148be:	d116      	bne.n	80148ee <_ux_dcd_stm32_transfer_request+0x50>
        }
    }

    /* Return to caller with success.  */
    return(UX_SUCCESS);
}
 80148c0:	bd38      	pop	{r3, r4, r5, pc}
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 80148c2:	694b      	ldr	r3, [r1, #20]
 80148c4:	68ca      	ldr	r2, [r1, #12]
 80148c6:	7d29      	ldrb	r1, [r5, #20]
 80148c8:	f8d0 00dc 	ldr.w	r0, [r0, #220]	@ 0xdc
 80148cc:	f7f4 fbf2 	bl	80090b4 <HAL_PCD_EP_Transmit>
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 80148d0:	6968      	ldr	r0, [r5, #20]
 80148d2:	f030 0080 	bics.w	r0, r0, #128	@ 0x80
 80148d6:	d0f3      	beq.n	80148c0 <_ux_dcd_stm32_transfer_request+0x22>
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 80148d8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80148da:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80148de:	f7ff f9f9 	bl	8013cd4 <_ux_utility_semaphore_get>
            if (status != UX_SUCCESS)
 80148e2:	2800      	cmp	r0, #0
 80148e4:	d1ec      	bne.n	80148c0 <_ux_dcd_stm32_transfer_request+0x22>
            transfer_request -> ux_slave_transfer_request_actual_length = transfer_request->ux_slave_transfer_request_requested_length;
 80148e6:	6963      	ldr	r3, [r4, #20]
 80148e8:	61a3      	str	r3, [r4, #24]
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 80148ea:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80148ec:	e7e8      	b.n	80148c0 <_ux_dcd_stm32_transfer_request+0x22>
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 80148ee:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80148f0:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80148f4:	f7ff f9ee 	bl	8013cd4 <_ux_utility_semaphore_get>
            if (status != UX_SUCCESS)
 80148f8:	2800      	cmp	r0, #0
 80148fa:	d1e1      	bne.n	80148c0 <_ux_dcd_stm32_transfer_request+0x22>
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 80148fc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80148fe:	e7df      	b.n	80148c0 <_ux_dcd_stm32_transfer_request+0x22>

08014900 <USBPD_PreInitOs>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
unsigned int USBPD_PreInitOs(void)
{
 8014900:	b508      	push	{r3, lr}
 /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 8014902:	f000 f83f 	bl	8014984 <USBPD_DPM_InitCore>
 8014906:	b900      	cbnz	r0, 801490a <USBPD_PreInitOs+0xa>
  {
    return USBPD_ERROR;
  }

  return USBPD_OK;
}
 8014908:	bd08      	pop	{r3, pc}
    return USBPD_ERROR;
 801490a:	2002      	movs	r0, #2
 801490c:	e7fc      	b.n	8014908 <USBPD_PreInitOs+0x8>

0801490e <MX_USBPD_Init>:

/* USBPD init function */
unsigned int MX_USBPD_Init(void *memory_ptr)
{
 801490e:	b508      	push	{r3, lr}
  unsigned int result = USBPD_OK;

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS((void*)memory_ptr))
 8014910:	f000 f85e 	bl	80149d0 <USBPD_DPM_InitOS>
 8014914:	b900      	cbnz	r0, 8014918 <MX_USBPD_Init+0xa>
  {
    return USBPD_ERROR;
  }
  return result;
}
 8014916:	bd08      	pop	{r3, pc}
    return USBPD_ERROR;
 8014918:	2002      	movs	r0, #2
 801491a:	e7fc      	b.n	8014916 <MX_USBPD_Init+0x8>

0801491c <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 801491c:	b500      	push	{lr}
 801491e:	b083      	sub	sp, #12
  OS_PUT_MESSAGE_QUEUE(CADQueueId, 0xFFFF, 0);
 8014920:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014924:	9301      	str	r3, [sp, #4]
 8014926:	2200      	movs	r2, #0
 8014928:	a901      	add	r1, sp, #4
 801492a:	4803      	ldr	r0, [pc, #12]	@ (8014938 <USBPD_DPM_CADTaskWakeUp+0x1c>)
 801492c:	f7fd fe3c 	bl	80125a8 <_txe_queue_send>
}
 8014930:	b003      	add	sp, #12
 8014932:	f85d fb04 	ldr.w	pc, [sp], #4
 8014936:	bf00      	nop
 8014938:	20011000 	.word	0x20011000

0801493c <USBPD_CAD_Task>:
  * @brief  Main task for CAD layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_CAD_Task)
{
 801493c:	b500      	push	{lr}
 801493e:	b083      	sub	sp, #12
#ifdef _LOW_POWER
  UTIL_LPM_SetOffMode(LPM_CAD, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
  for (;;)
  {
    _timing = USBPD_CAD_Process();
 8014940:	f7eb fdf3 	bl	800052a <USBPD_CAD_Process>
 8014944:	4602      	mov	r2, r0
    OS_GETMESSAGE_QUEUE(CADQueueId, _timing);
 8014946:	a901      	add	r1, sp, #4
 8014948:	4801      	ldr	r0, [pc, #4]	@ (8014950 <USBPD_CAD_Task+0x14>)
 801494a:	f7fd fe01 	bl	8012550 <_txe_queue_receive>
  for (;;)
 801494e:	e7f7      	b.n	8014940 <USBPD_CAD_Task+0x4>
 8014950:	20011000 	.word	0x20011000

08014954 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8014954:	b510      	push	{r4, lr}
 8014956:	4604      	mov	r4, r0
  (void) Cc;
#ifdef _TRACE
  USBPD_TRACE_Add(USBPD_TRACE_CADEVENT, PortNum, (uint8_t)State, NULL, 0);
#endif /* _TRACE */

  switch (State)
 8014958:	1e4b      	subs	r3, r1, #1
 801495a:	2b03      	cmp	r3, #3
 801495c:	d809      	bhi.n	8014972 <USBPD_DPM_CADCallback+0x1e>
 801495e:	e8df f003 	tbb	[pc, r3]
 8014962:	0209      	.short	0x0209
 8014964:	0209      	.short	0x0209
    case USPPD_CAD_EVENT_VPD :
#endif /* USBPDCORE_VPD */
    case USBPD_CAD_EVENT_ATTEMC :
    case USBPD_CAD_EVENT_ATTACHED :
    {
      USBPD_DPM_UserCableDetection(PortNum, State);
 8014966:	f000 f917 	bl	8014b98 <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_START);
 801496a:	2168      	movs	r1, #104	@ 0x68
 801496c:	4620      	mov	r0, r4
 801496e:	f000 f915 	bl	8014b9c <USBPD_DPM_Notification>
    }
    default :
      /* nothing to do */
      break;
  }
}
 8014972:	bd10      	pop	{r4, pc}
      USBPD_DPM_UserCableDetection(PortNum, State);
 8014974:	f000 f910 	bl	8014b98 <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
 8014978:	2169      	movs	r1, #105	@ 0x69
 801497a:	4620      	mov	r0, r4
 801497c:	f000 f90e 	bl	8014b9c <USBPD_DPM_Notification>
}
 8014980:	e7f7      	b.n	8014972 <USBPD_DPM_CADCallback+0x1e>
	...

08014984 <USBPD_DPM_InitCore>:
{
 8014984:	b510      	push	{r4, lr}
  if (USBPD_TRUE != USBPD_PE_CheckLIB(LIB_ID))
 8014986:	480e      	ldr	r0, [pc, #56]	@ (80149c0 <USBPD_DPM_InitCore+0x3c>)
 8014988:	f7eb fe4f 	bl	800062a <USBPD_PE_CheckLIB>
 801498c:	2801      	cmp	r0, #1
 801498e:	d002      	beq.n	8014996 <USBPD_DPM_InitCore+0x12>
    _retr = USBPD_ERROR;
 8014990:	2402      	movs	r4, #2
}
 8014992:	4620      	mov	r0, r4
 8014994:	bd10      	pop	{r4, pc}
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 8014996:	f7eb fe53 	bl	8000640 <USBPD_PE_GetMemoryConsumption>
  DPM_Params[USBPD_PORT_0].PE_PowerRole     = DPM_Settings[USBPD_PORT_0].PE_DefaultRole;
 801499a:	4a0a      	ldr	r2, [pc, #40]	@ (80149c4 <USBPD_DPM_InitCore+0x40>)
 801499c:	7810      	ldrb	r0, [r2, #0]
 801499e:	4b0a      	ldr	r3, [pc, #40]	@ (80149c8 <USBPD_DPM_InitCore+0x44>)
 80149a0:	7819      	ldrb	r1, [r3, #0]
 80149a2:	f360 0182 	bfi	r1, r0, #2, #1
 80149a6:	7019      	strb	r1, [r3, #0]
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(USBPD_PORT_0, &CAD_cbs, (USBPD_SettingsTypeDef *)&DPM_Settings[USBPD_PORT_0],
 80149a8:	4908      	ldr	r1, [pc, #32]	@ (80149cc <USBPD_DPM_InitCore+0x48>)
 80149aa:	2000      	movs	r0, #0
 80149ac:	f7eb fd8e 	bl	80004cc <USBPD_CAD_Init>
 80149b0:	4604      	mov	r4, r0
 80149b2:	b918      	cbnz	r0, 80149bc <USBPD_DPM_InitCore+0x38>
    USBPD_CAD_PortEnable(USBPD_PORT_0, USBPD_CAD_ENABLE);
 80149b4:	2101      	movs	r1, #1
 80149b6:	f7eb fdb1 	bl	800051c <USBPD_CAD_PortEnable>
 80149ba:	e7ea      	b.n	8014992 <USBPD_DPM_InitCore+0xe>
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(USBPD_PORT_0, &CAD_cbs, (USBPD_SettingsTypeDef *)&DPM_Settings[USBPD_PORT_0],
 80149bc:	2402      	movs	r4, #2
 80149be:	e7e8      	b.n	8014992 <USBPD_DPM_InitCore+0xe>
 80149c0:	00410100 	.word	0x00410100
 80149c4:	20011038 	.word	0x20011038
 80149c8:	20010f4c 	.word	0x20010f4c
 80149cc:	080178ac 	.word	0x080178ac

080149d0 <USBPD_DPM_InitOS>:
{
 80149d0:	b510      	push	{r4, lr}
 80149d2:	b08a      	sub	sp, #40	@ 0x28
 80149d4:	4604      	mov	r4, r0
    OS_CREATE_QUEUE(CADQueueId, "QCAD", USBPD_PORT_COUNT, OS_ELEMENT_SIZE);
 80149d6:	2300      	movs	r3, #0
 80149d8:	2204      	movs	r2, #4
 80149da:	a909      	add	r1, sp, #36	@ 0x24
 80149dc:	f7fd fb02 	bl	8011fe4 <_txe_byte_allocate>
 80149e0:	4603      	mov	r3, r0
 80149e2:	b110      	cbz	r0, 80149ea <USBPD_DPM_InitOS+0x1a>
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	b00a      	add	sp, #40	@ 0x28
 80149e8:	bd10      	pop	{r4, pc}
    OS_CREATE_QUEUE(CADQueueId, "QCAD", USBPD_PORT_COUNT, OS_ELEMENT_SIZE);
 80149ea:	2338      	movs	r3, #56	@ 0x38
 80149ec:	9301      	str	r3, [sp, #4]
 80149ee:	2304      	movs	r3, #4
 80149f0:	9300      	str	r3, [sp, #0]
 80149f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149f4:	2201      	movs	r2, #1
 80149f6:	4912      	ldr	r1, [pc, #72]	@ (8014a40 <USBPD_DPM_InitOS+0x70>)
 80149f8:	4812      	ldr	r0, [pc, #72]	@ (8014a44 <USBPD_DPM_InitOS+0x74>)
 80149fa:	f7fd fd31 	bl	8012460 <_txe_queue_create>
 80149fe:	4603      	mov	r3, r0
 8014a00:	2800      	cmp	r0, #0
 8014a02:	d1ef      	bne.n	80149e4 <USBPD_DPM_InitOS+0x14>
    OS_CREATE_TASK(CADThread, CAD, USBPD_CAD_Task,  OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, (int)NULL);
 8014a04:	2300      	movs	r3, #0
 8014a06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8014a0a:	a909      	add	r1, sp, #36	@ 0x24
 8014a0c:	4620      	mov	r0, r4
 8014a0e:	f7fd fae9 	bl	8011fe4 <_txe_byte_allocate>
 8014a12:	4603      	mov	r3, r0
 8014a14:	2800      	cmp	r0, #0
 8014a16:	d1e5      	bne.n	80149e4 <USBPD_DPM_InitOS+0x14>
 8014a18:	23b0      	movs	r3, #176	@ 0xb0
 8014a1a:	9306      	str	r3, [sp, #24]
 8014a1c:	2201      	movs	r2, #1
 8014a1e:	9205      	str	r2, [sp, #20]
 8014a20:	2300      	movs	r3, #0
 8014a22:	9304      	str	r3, [sp, #16]
 8014a24:	9203      	str	r2, [sp, #12]
 8014a26:	9202      	str	r2, [sp, #8]
 8014a28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8014a2c:	9201      	str	r2, [sp, #4]
 8014a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014a30:	9200      	str	r2, [sp, #0]
 8014a32:	4a05      	ldr	r2, [pc, #20]	@ (8014a48 <USBPD_DPM_InitOS+0x78>)
 8014a34:	4905      	ldr	r1, [pc, #20]	@ (8014a4c <USBPD_DPM_InitOS+0x7c>)
 8014a36:	4806      	ldr	r0, [pc, #24]	@ (8014a50 <USBPD_DPM_InitOS+0x80>)
 8014a38:	f7fd fe9a 	bl	8012770 <_txe_thread_create>
 8014a3c:	4603      	mov	r3, r0
  return _retr;
 8014a3e:	e7d1      	b.n	80149e4 <USBPD_DPM_InitOS+0x14>
 8014a40:	080178a0 	.word	0x080178a0
 8014a44:	20011000 	.word	0x20011000
 8014a48:	0801493d 	.word	0x0801493d
 8014a4c:	080178a8 	.word	0x080178a8
 8014a50:	20010f50 	.word	0x20010f50

08014a54 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 8014a54:	b510      	push	{r4, lr}
 8014a56:	460c      	mov	r4, r1
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 8014a58:	f7fb fc4e 	bl	80102f8 <HW_IF_PWR_GetVoltage>

  switch(PowerTypeStatus)
 8014a5c:	2c01      	cmp	r4, #1
 8014a5e:	d00a      	beq.n	8014a76 <USBPD_PWR_IF_GetVBUSStatus+0x22>
 8014a60:	2c02      	cmp	r4, #2
 8014a62:	d00d      	beq.n	8014a80 <USBPD_PWR_IF_GetVBUSStatus+0x2c>
 8014a64:	b10c      	cbz	r4, 8014a6a <USBPD_PWR_IF_GetVBUSStatus+0x16>
 8014a66:	2000      	movs	r0, #0
  default :
    break;
  }
  return _status;
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 8014a68:	bd10      	pop	{r4, pc}
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8014a6a:	f240 23ed 	movw	r3, #749	@ 0x2ed
 8014a6e:	4298      	cmp	r0, r3
 8014a70:	d90b      	bls.n	8014a8a <USBPD_PWR_IF_GetVBUSStatus+0x36>
  uint8_t _status = USBPD_FALSE;
 8014a72:	4620      	mov	r0, r4
 8014a74:	e7f8      	b.n	8014a68 <USBPD_PWR_IF_GetVBUSStatus+0x14>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8014a76:	f5b0 6f2f 	cmp.w	r0, #2800	@ 0xaf0
 8014a7a:	d208      	bcs.n	8014a8e <USBPD_PWR_IF_GetVBUSStatus+0x3a>
  uint8_t _status = USBPD_FALSE;
 8014a7c:	2000      	movs	r0, #0
 8014a7e:	e7f3      	b.n	8014a68 <USBPD_PWR_IF_GetVBUSStatus+0x14>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8014a80:	f5b0 6f2f 	cmp.w	r0, #2800	@ 0xaf0
 8014a84:	d305      	bcc.n	8014a92 <USBPD_PWR_IF_GetVBUSStatus+0x3e>
  uint8_t _status = USBPD_FALSE;
 8014a86:	2000      	movs	r0, #0
 8014a88:	e7ee      	b.n	8014a68 <USBPD_PWR_IF_GetVBUSStatus+0x14>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8014a8a:	2001      	movs	r0, #1
 8014a8c:	e7ec      	b.n	8014a68 <USBPD_PWR_IF_GetVBUSStatus+0x14>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8014a8e:	4620      	mov	r0, r4
 8014a90:	e7ea      	b.n	8014a68 <USBPD_PWR_IF_GetVBUSStatus+0x14>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8014a92:	2001      	movs	r0, #1
 8014a94:	e7e8      	b.n	8014a68 <USBPD_PWR_IF_GetVBUSStatus+0x14>
	...

08014a98 <USBPD_USBIF_DeviceStart>:

/** @addtogroup USBPD_CORE_USBIF_Exported_Functions
  * @{
  */
void USBPD_USBIF_DeviceStart(uint32_t PortNum)
{
 8014a98:	b500      	push	{lr}
 8014a9a:	b083      	sub	sp, #12
/* USER CODE BEGIN USBPD_USBIF_DeviceStart */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF Device start", 18);
 8014a9c:	2312      	movs	r3, #18
 8014a9e:	9300      	str	r3, [sp, #0]
 8014aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8014acc <USBPD_USBIF_DeviceStart+0x34>)
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	b2c1      	uxtb	r1, r0
 8014aa6:	2006      	movs	r0, #6
 8014aa8:	f7fa fee2 	bl	800f870 <USBPD_TRACE_Add>

  /* Set Device state */
  USB_Device_EVENT = START_USB_DEVICE;
 8014aac:	4908      	ldr	r1, [pc, #32]	@ (8014ad0 <USBPD_USBIF_DeviceStart+0x38>)
 8014aae:	2302      	movs	r3, #2
 8014ab0:	700b      	strb	r3, [r1, #0]

  /* Send message to start device */
  if (tx_queue_send(&ux_app_MsgQueue, &USB_Device_EVENT, TX_WAIT_FOREVER) != TX_SUCCESS)
 8014ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8014ab6:	4807      	ldr	r0, [pc, #28]	@ (8014ad4 <USBPD_USBIF_DeviceStart+0x3c>)
 8014ab8:	f7fd fd76 	bl	80125a8 <_txe_queue_send>
 8014abc:	b910      	cbnz	r0, 8014ac4 <USBPD_USBIF_DeviceStart+0x2c>
  {
    Error_Handler();
  }
/* USER CODE END USBPD_USBIF_DeviceStart */
}
 8014abe:	b003      	add	sp, #12
 8014ac0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8014ac4:	f7ee fb76 	bl	80031b4 <Error_Handler>
}
 8014ac8:	e7f9      	b.n	8014abe <USBPD_USBIF_DeviceStart+0x26>
 8014aca:	bf00      	nop
 8014acc:	080178b4 	.word	0x080178b4
 8014ad0:	2001103c 	.word	0x2001103c
 8014ad4:	20011044 	.word	0x20011044

08014ad8 <USBPD_USBIF_DeviceStop>:

void USBPD_USBIF_DeviceStop(uint32_t PortNum)
{
 8014ad8:	b500      	push	{lr}
 8014ada:	b083      	sub	sp, #12
/* USER CODE BEGIN USBPD_USBIF_DeviceStop */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF Device stop", 17);
 8014adc:	2311      	movs	r3, #17
 8014ade:	9300      	str	r3, [sp, #0]
 8014ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8014b0c <USBPD_USBIF_DeviceStop+0x34>)
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	b2c1      	uxtb	r1, r0
 8014ae6:	2006      	movs	r0, #6
 8014ae8:	f7fa fec2 	bl	800f870 <USBPD_TRACE_Add>

  /* Set Device state */
  USB_Device_EVENT = STOP_USB_DEVICE;
 8014aec:	4908      	ldr	r1, [pc, #32]	@ (8014b10 <USBPD_USBIF_DeviceStop+0x38>)
 8014aee:	2301      	movs	r3, #1
 8014af0:	700b      	strb	r3, [r1, #0]

  /* Send message to stop device */
  if (tx_queue_send(&ux_app_MsgQueue, &USB_Device_EVENT, TX_WAIT_FOREVER) != TX_SUCCESS)
 8014af2:	f04f 32ff 	mov.w	r2, #4294967295
 8014af6:	4807      	ldr	r0, [pc, #28]	@ (8014b14 <USBPD_USBIF_DeviceStop+0x3c>)
 8014af8:	f7fd fd56 	bl	80125a8 <_txe_queue_send>
 8014afc:	b910      	cbnz	r0, 8014b04 <USBPD_USBIF_DeviceStop+0x2c>
  {
    Error_Handler();
  }
/* USER CODE END USBPD_USBIF_DeviceStop */
}
 8014afe:	b003      	add	sp, #12
 8014b00:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8014b04:	f7ee fb56 	bl	80031b4 <Error_Handler>
}
 8014b08:	e7f9      	b.n	8014afe <USBPD_USBIF_DeviceStop+0x26>
 8014b0a:	bf00      	nop
 8014b0c:	080178c8 	.word	0x080178c8
 8014b10:	2001103c 	.word	0x2001103c
 8014b14:	20011044 	.word	0x20011044

08014b18 <USBPD_USBIF_HostStart>:

void USBPD_USBIF_HostStart(uint32_t PortNum)
{
 8014b18:	b500      	push	{lr}
 8014b1a:	b083      	sub	sp, #12
/* USER CODE BEGIN USBPD_USBIF_HostStart */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF host start", 16);
 8014b1c:	2310      	movs	r3, #16
 8014b1e:	9300      	str	r3, [sp, #0]
 8014b20:	4b04      	ldr	r3, [pc, #16]	@ (8014b34 <USBPD_USBIF_HostStart+0x1c>)
 8014b22:	2200      	movs	r2, #0
 8014b24:	b2c1      	uxtb	r1, r0
 8014b26:	2006      	movs	r0, #6
 8014b28:	f7fa fea2 	bl	800f870 <USBPD_TRACE_Add>
/* USER CODE END USBPD_USBIF_HostStart */
}
 8014b2c:	b003      	add	sp, #12
 8014b2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b32:	bf00      	nop
 8014b34:	080178dc 	.word	0x080178dc

08014b38 <USBPD_USBIF_HostStop>:

void USBPD_USBIF_HostStop(uint32_t PortNum)
{
 8014b38:	b500      	push	{lr}
 8014b3a:	b083      	sub	sp, #12
/* USER CODE BEGIN USBPD_USBIF_HostStop */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF host stop", 15);
 8014b3c:	230f      	movs	r3, #15
 8014b3e:	9300      	str	r3, [sp, #0]
 8014b40:	4b04      	ldr	r3, [pc, #16]	@ (8014b54 <USBPD_USBIF_HostStop+0x1c>)
 8014b42:	2200      	movs	r2, #0
 8014b44:	b2c1      	uxtb	r1, r0
 8014b46:	2006      	movs	r0, #6
 8014b48:	f7fa fe92 	bl	800f870 <USBPD_TRACE_Add>
/* USER CODE END USBPD_USBIF_HostStop */
}
 8014b4c:	b003      	add	sp, #12
 8014b4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b52:	bf00      	nop
 8014b54:	080178f0 	.word	0x080178f0

08014b58 <USBPD_USBIF_Swap2Host>:
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF device billboard", 22);
/* USER CODE END USBPD_USBIF_DeviceBillboard */
}

void USBPD_USBIF_Swap2Host(uint32_t PortNum)
{
 8014b58:	b500      	push	{lr}
 8014b5a:	b083      	sub	sp, #12
/* USER CODE BEGIN USBPD_USBIF_Swap2Host */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF swap to host", 18);
 8014b5c:	2312      	movs	r3, #18
 8014b5e:	9300      	str	r3, [sp, #0]
 8014b60:	4b04      	ldr	r3, [pc, #16]	@ (8014b74 <USBPD_USBIF_Swap2Host+0x1c>)
 8014b62:	2200      	movs	r2, #0
 8014b64:	b2c1      	uxtb	r1, r0
 8014b66:	2006      	movs	r0, #6
 8014b68:	f7fa fe82 	bl	800f870 <USBPD_TRACE_Add>
/* USER CODE END USBPD_USBIF_Swap2Host */
}
 8014b6c:	b003      	add	sp, #12
 8014b6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b72:	bf00      	nop
 8014b74:	08017900 	.word	0x08017900

08014b78 <USBPD_USBIF_Swap2Device>:

void USBPD_USBIF_Swap2Device(uint32_t PortNum)
{
 8014b78:	b500      	push	{lr}
 8014b7a:	b083      	sub	sp, #12
/* USER CODE BEGIN USBPD_USBIF_Swap2Device */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF swap to device", 20);
 8014b7c:	2314      	movs	r3, #20
 8014b7e:	9300      	str	r3, [sp, #0]
 8014b80:	4b04      	ldr	r3, [pc, #16]	@ (8014b94 <USBPD_USBIF_Swap2Device+0x1c>)
 8014b82:	2200      	movs	r2, #0
 8014b84:	b2c1      	uxtb	r1, r0
 8014b86:	2006      	movs	r0, #6
 8014b88:	f7fa fe72 	bl	800f870 <USBPD_TRACE_Add>
/* USER CODE END USBPD_USBIF_Swap2Device */
}
 8014b8c:	b003      	add	sp, #12
 8014b8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b92:	bf00      	nop
 8014b94:	08017914 	.word	0x08017914

08014b98 <USBPD_DPM_UserCableDetection>:
{
	(void) State;
	(void) PortNum;

	DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
}
 8014b98:	4770      	bx	lr
	...

08014b9c <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 8014b9c:	b508      	push	{r3, lr}
/* USER CODE BEGIN USBPD_DPM_Notification */
  /* Manage event notified by the stack? */
  switch(EventVal)
 8014b9e:	2968      	cmp	r1, #104	@ 0x68
 8014ba0:	d012      	beq.n	8014bc8 <USBPD_DPM_Notification+0x2c>
 8014ba2:	d806      	bhi.n	8014bb2 <USBPD_DPM_Notification+0x16>
 8014ba4:	2924      	cmp	r1, #36	@ 0x24
 8014ba6:	d01e      	beq.n	8014be6 <USBPD_DPM_Notification+0x4a>
 8014ba8:	2925      	cmp	r1, #37	@ 0x25
 8014baa:	d101      	bne.n	8014bb0 <USBPD_DPM_Notification+0x14>
      }
      break;
    }
  case USBPD_NOTIFY_DATAROLESWAP_DFP :
    {
      USBPD_USBIF_Swap2Host(PortNum);
 8014bac:	f7ff ffd4 	bl	8014b58 <USBPD_USBIF_Swap2Host>

  default:
    break;
  }
/* USER CODE END USBPD_DPM_Notification */
}
 8014bb0:	bd08      	pop	{r3, pc}
  switch(EventVal)
 8014bb2:	2969      	cmp	r1, #105	@ 0x69
 8014bb4:	d1fc      	bne.n	8014bb0 <USBPD_DPM_Notification+0x14>
      if (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)
 8014bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8014bec <USBPD_DPM_Notification+0x50>)
 8014bb8:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
 8014bbc:	f013 0f08 	tst.w	r3, #8
 8014bc0:	d10e      	bne.n	8014be0 <USBPD_DPM_Notification+0x44>
        USBPD_USBIF_DeviceStop(PortNum);
 8014bc2:	f7ff ff89 	bl	8014ad8 <USBPD_USBIF_DeviceStop>
 8014bc6:	e7f3      	b.n	8014bb0 <USBPD_DPM_Notification+0x14>
      if (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)
 8014bc8:	4b08      	ldr	r3, [pc, #32]	@ (8014bec <USBPD_DPM_Notification+0x50>)
 8014bca:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
 8014bce:	f013 0f08 	tst.w	r3, #8
 8014bd2:	d102      	bne.n	8014bda <USBPD_DPM_Notification+0x3e>
        USBPD_USBIF_DeviceStart(PortNum);
 8014bd4:	f7ff ff60 	bl	8014a98 <USBPD_USBIF_DeviceStart>
 8014bd8:	e7ea      	b.n	8014bb0 <USBPD_DPM_Notification+0x14>
        USBPD_USBIF_HostStart(PortNum);
 8014bda:	f7ff ff9d 	bl	8014b18 <USBPD_USBIF_HostStart>
 8014bde:	e7e7      	b.n	8014bb0 <USBPD_DPM_Notification+0x14>
        USBPD_USBIF_HostStop(PortNum);
 8014be0:	f7ff ffaa 	bl	8014b38 <USBPD_USBIF_HostStop>
 8014be4:	e7e4      	b.n	8014bb0 <USBPD_DPM_Notification+0x14>
      USBPD_USBIF_Swap2Device(PortNum);
 8014be6:	f7ff ffc7 	bl	8014b78 <USBPD_USBIF_Swap2Device>
}
 8014bea:	e7e1      	b.n	8014bb0 <USBPD_DPM_Notification+0x14>
 8014bec:	20010f4c 	.word	0x20010f4c

08014bf0 <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param  memory_ptr: memory pointer
  * @retval status
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 8014bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bf2:	b08f      	sub	sp, #60	@ 0x3c
 8014bf4:	4604      	mov	r4, r0
  UCHAR *language_id_framework;
  UCHAR *pointer;
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;

  /* Allocate the stack for USBX Memory */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8014bfc:	a909      	add	r1, sp, #36	@ 0x24
 8014bfe:	f7fd f9f1 	bl	8011fe4 <_txe_byte_allocate>
 8014c02:	2800      	cmp	r0, #0
 8014c04:	f040 80bb 	bne.w	8014d7e <MX_USBX_Device_Init+0x18e>
    return TX_POOL_ERROR;
    /* USER CODE END USBX_ALLOCATE_STACK_ERROR */
  }

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8014c08:	2300      	movs	r3, #0
 8014c0a:	461a      	mov	r2, r3
 8014c0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8014c10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014c12:	f7fe fe4b 	bl	80138ac <_ux_system_initialize>
 8014c16:	2800      	cmp	r0, #0
 8014c18:	f040 80b4 	bne.w	8014d84 <MX_USBX_Device_Init+0x194>
    return UX_ERROR;
    /* USER CODE END USBX_SYSTEM_INITIALIZE_ERROR */
  }

  /* Get Device Framework High Speed and get the length */
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 8014c1c:	a90d      	add	r1, sp, #52	@ 0x34
 8014c1e:	2001      	movs	r0, #1
 8014c20:	f000 fdf8 	bl	8015814 <USBD_Get_Device_Framework_Speed>
 8014c24:	4605      	mov	r5, r0
                                                                &device_framework_hs_length);

  /* Get Device Framework Full Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 8014c26:	a90c      	add	r1, sp, #48	@ 0x30
 8014c28:	2000      	movs	r0, #0
 8014c2a:	f000 fdf3 	bl	8015814 <USBD_Get_Device_Framework_Speed>
 8014c2e:	4606      	mov	r6, r0
                                                                &device_framework_fs_length);

  /* Get String Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 8014c30:	a80b      	add	r0, sp, #44	@ 0x2c
 8014c32:	f000 fe1b 	bl	801586c <USBD_Get_String_Framework>
 8014c36:	4607      	mov	r7, r0

  /* Get Language Id Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 8014c38:	a80a      	add	r0, sp, #40	@ 0x28
 8014c3a:	f000 fe69 	bl	8015910 <USBD_Get_Language_Id_Framework>

  /* Install the device portion of USBX */
  if (ux_device_stack_initialize(device_framework_high_speed,
 8014c3e:	2300      	movs	r3, #0
 8014c40:	9304      	str	r3, [sp, #16]
 8014c42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014c44:	9303      	str	r3, [sp, #12]
 8014c46:	9002      	str	r0, [sp, #8]
 8014c48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014c4a:	9301      	str	r3, [sp, #4]
 8014c4c:	9700      	str	r7, [sp, #0]
 8014c4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014c50:	4632      	mov	r2, r6
 8014c52:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8014c54:	4628      	mov	r0, r5
 8014c56:	f7fe fb8f 	bl	8013378 <_ux_device_stack_initialize>
 8014c5a:	2800      	cmp	r0, #0
 8014c5c:	f040 8094 	bne.w	8014d88 <MX_USBX_Device_Init+0x198>
    return UX_ERROR;
    /* USER CODE END USBX_DEVICE_INITIALIZE_ERROR */
  }

  /* Initialize the cdc acm class parameters for the device */
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate   = USBD_CDC_ACM_Activate;
 8014c60:	4d53      	ldr	r5, [pc, #332]	@ (8014db0 <MX_USBX_Device_Init+0x1c0>)
 8014c62:	4b54      	ldr	r3, [pc, #336]	@ (8014db4 <MX_USBX_Device_Init+0x1c4>)
 8014c64:	602b      	str	r3, [r5, #0]
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = USBD_CDC_ACM_Deactivate;
 8014c66:	4b54      	ldr	r3, [pc, #336]	@ (8014db8 <MX_USBX_Device_Init+0x1c8>)
 8014c68:	606b      	str	r3, [r5, #4]
  cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change    = USBD_CDC_ACM_ParameterChange;
 8014c6a:	4b54      	ldr	r3, [pc, #336]	@ (8014dbc <MX_USBX_Device_Init+0x1cc>)
 8014c6c:	60ab      	str	r3, [r5, #8]
  /* USER CODE BEGIN CDC_ACM_PARAMETER */

  /* USER CODE END CDC_ACM_PARAMETER */

  /* Get cdc acm configuration number */
  cdc_acm_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_CDC_ACM, 0);
 8014c6e:	2100      	movs	r1, #0
 8014c70:	2002      	movs	r0, #2
 8014c72:	f000 fe81 	bl	8015978 <USBD_Get_Configuration_Number>
 8014c76:	4e52      	ldr	r6, [pc, #328]	@ (8014dc0 <MX_USBX_Device_Init+0x1d0>)
 8014c78:	6030      	str	r0, [r6, #0]

  /* Find cdc acm interface number */
  cdc_acm_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_CDC_ACM, 0);
 8014c7a:	2100      	movs	r1, #0
 8014c7c:	2002      	movs	r0, #2
 8014c7e:	f000 fe57 	bl	8015930 <USBD_Get_Interface_Number>
 8014c82:	4603      	mov	r3, r0
 8014c84:	4a4f      	ldr	r2, [pc, #316]	@ (8014dc4 <MX_USBX_Device_Init+0x1d4>)
 8014c86:	6010      	str	r0, [r2, #0]

  /* Initialize the device cdc acm class */
  if (ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 8014c88:	9500      	str	r5, [sp, #0]
 8014c8a:	6832      	ldr	r2, [r6, #0]
 8014c8c:	494e      	ldr	r1, [pc, #312]	@ (8014dc8 <MX_USBX_Device_Init+0x1d8>)
 8014c8e:	484f      	ldr	r0, [pc, #316]	@ (8014dcc <MX_USBX_Device_Init+0x1dc>)
 8014c90:	f7fd ff48 	bl	8012b24 <_ux_device_stack_class_register>
 8014c94:	2800      	cmp	r0, #0
 8014c96:	d179      	bne.n	8014d8c <MX_USBX_Device_Init+0x19c>
    return UX_ERROR;
    /* USER CODE END USBX_DEVICE_CDC_ACM_REGISTER_ERROR */
  }

  /* Allocate the stack for device application main thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_DEVICE_APP_THREAD_STACK_SIZE,
 8014c98:	2300      	movs	r3, #0
 8014c9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014c9e:	a909      	add	r1, sp, #36	@ 0x24
 8014ca0:	4620      	mov	r0, r4
 8014ca2:	f7fd f99f 	bl	8011fe4 <_txe_byte_allocate>
 8014ca6:	2800      	cmp	r0, #0
 8014ca8:	d172      	bne.n	8014d90 <MX_USBX_Device_Init+0x1a0>
    return TX_POOL_ERROR;
    /* USER CODE END MAIN_THREAD_ALLOCATE_STACK_ERROR */
  }

  /* Create the device application main thread */
  if (tx_thread_create(&ux_device_app_thread, UX_DEVICE_APP_THREAD_NAME, app_ux_device_thread_entry,
 8014caa:	23b0      	movs	r3, #176	@ 0xb0
 8014cac:	9306      	str	r3, [sp, #24]
 8014cae:	2301      	movs	r3, #1
 8014cb0:	9305      	str	r3, [sp, #20]
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	9304      	str	r3, [sp, #16]
 8014cb6:	220a      	movs	r2, #10
 8014cb8:	9203      	str	r2, [sp, #12]
 8014cba:	9202      	str	r2, [sp, #8]
 8014cbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014cc0:	9201      	str	r2, [sp, #4]
 8014cc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014cc4:	9200      	str	r2, [sp, #0]
 8014cc6:	4a42      	ldr	r2, [pc, #264]	@ (8014dd0 <MX_USBX_Device_Init+0x1e0>)
 8014cc8:	4942      	ldr	r1, [pc, #264]	@ (8014dd4 <MX_USBX_Device_Init+0x1e4>)
 8014cca:	4843      	ldr	r0, [pc, #268]	@ (8014dd8 <MX_USBX_Device_Init+0x1e8>)
 8014ccc:	f7fd fd50 	bl	8012770 <_txe_thread_create>
 8014cd0:	2800      	cmp	r0, #0
 8014cd2:	d15f      	bne.n	8014d94 <MX_USBX_Device_Init+0x1a4>
  }

  /* USER CODE BEGIN MX_USBX_Device_Init1 */

  /* Allocate the stack for usbx cdc acm read thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_DEVICE_CDC_READ_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014cda:	a909      	add	r1, sp, #36	@ 0x24
 8014cdc:	4620      	mov	r0, r4
 8014cde:	f7fd f981 	bl	8011fe4 <_txe_byte_allocate>
 8014ce2:	2800      	cmp	r0, #0
 8014ce4:	d158      	bne.n	8014d98 <MX_USBX_Device_Init+0x1a8>
  {
    return TX_POOL_ERROR;
  }

  /* Create the usbx cdc acm read thread */
  if (tx_thread_create(&ux_cdc_read_thread, "cdc_acm_read_usbx_app_thread_entry",
 8014ce6:	23b0      	movs	r3, #176	@ 0xb0
 8014ce8:	9306      	str	r3, [sp, #24]
 8014cea:	2301      	movs	r3, #1
 8014cec:	9305      	str	r3, [sp, #20]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	9204      	str	r2, [sp, #16]
 8014cf2:	2214      	movs	r2, #20
 8014cf4:	9203      	str	r2, [sp, #12]
 8014cf6:	9202      	str	r2, [sp, #8]
 8014cf8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014cfc:	9201      	str	r2, [sp, #4]
 8014cfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d00:	9200      	str	r2, [sp, #0]
 8014d02:	4a36      	ldr	r2, [pc, #216]	@ (8014ddc <MX_USBX_Device_Init+0x1ec>)
 8014d04:	4936      	ldr	r1, [pc, #216]	@ (8014de0 <MX_USBX_Device_Init+0x1f0>)
 8014d06:	4837      	ldr	r0, [pc, #220]	@ (8014de4 <MX_USBX_Device_Init+0x1f4>)
 8014d08:	f7fd fd32 	bl	8012770 <_txe_thread_create>
 8014d0c:	2800      	cmp	r0, #0
 8014d0e:	d145      	bne.n	8014d9c <MX_USBX_Device_Init+0x1ac>
  {
    return TX_THREAD_ERROR;
  }

  /* Allocate the stack for usbx cdc acm write thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_DEVICE_CDC_WRITE_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8014d10:	2300      	movs	r3, #0
 8014d12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014d16:	a909      	add	r1, sp, #36	@ 0x24
 8014d18:	4620      	mov	r0, r4
 8014d1a:	f7fd f963 	bl	8011fe4 <_txe_byte_allocate>
 8014d1e:	2800      	cmp	r0, #0
 8014d20:	d13e      	bne.n	8014da0 <MX_USBX_Device_Init+0x1b0>
    return TX_POOL_ERROR;
  }

#ifndef CODEC_SAI
  /* Create the usbx_cdc_acm_write_thread_entry thread */
  if (tx_thread_create(&ux_cdc_write_thread, "cdc_acm_write_usbx_app_thread_entry",
 8014d22:	23b0      	movs	r3, #176	@ 0xb0
 8014d24:	9306      	str	r3, [sp, #24]
 8014d26:	2301      	movs	r3, #1
 8014d28:	9305      	str	r3, [sp, #20]
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	9204      	str	r2, [sp, #16]
 8014d2e:	2214      	movs	r2, #20
 8014d30:	9203      	str	r2, [sp, #12]
 8014d32:	9202      	str	r2, [sp, #8]
 8014d34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014d38:	9201      	str	r2, [sp, #4]
 8014d3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d3c:	9200      	str	r2, [sp, #0]
 8014d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8014de8 <MX_USBX_Device_Init+0x1f8>)
 8014d40:	492a      	ldr	r1, [pc, #168]	@ (8014dec <MX_USBX_Device_Init+0x1fc>)
 8014d42:	482b      	ldr	r0, [pc, #172]	@ (8014df0 <MX_USBX_Device_Init+0x200>)
 8014d44:	f7fd fd14 	bl	8012770 <_txe_thread_create>
 8014d48:	bb60      	cbnz	r0, 8014da4 <MX_USBX_Device_Init+0x1b4>
    return TX_THREAD_ERROR;
  }
#endif

  /* Create the event flags group */
  if (tx_event_flags_create(&EventFlag, "Event Flag") != TX_SUCCESS)
 8014d4a:	2224      	movs	r2, #36	@ 0x24
 8014d4c:	4929      	ldr	r1, [pc, #164]	@ (8014df4 <MX_USBX_Device_Init+0x204>)
 8014d4e:	482a      	ldr	r0, [pc, #168]	@ (8014df8 <MX_USBX_Device_Init+0x208>)
 8014d50:	f7fd f9fc 	bl	801214c <_txe_event_flags_create>
 8014d54:	bb40      	cbnz	r0, 8014da8 <MX_USBX_Device_Init+0x1b8>
  {
    return TX_GROUP_ERROR;
  }

  /* Allocate Memory for the Queue */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, APP_QUEUE_SIZE*sizeof(ULONG),
 8014d56:	2300      	movs	r3, #0
 8014d58:	2214      	movs	r2, #20
 8014d5a:	a909      	add	r1, sp, #36	@ 0x24
 8014d5c:	4620      	mov	r0, r4
 8014d5e:	f7fd f941 	bl	8011fe4 <_txe_byte_allocate>
 8014d62:	bb18      	cbnz	r0, 8014dac <MX_USBX_Device_Init+0x1bc>
  {
    return TX_POOL_ERROR;
  }

  /* Create the MsgQueue */
  if (tx_queue_create(&ux_app_MsgQueue, "Message Queue app", TX_1_ULONG,
 8014d64:	2338      	movs	r3, #56	@ 0x38
 8014d66:	9301      	str	r3, [sp, #4]
 8014d68:	2314      	movs	r3, #20
 8014d6a:	9300      	str	r3, [sp, #0]
 8014d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d6e:	2201      	movs	r2, #1
 8014d70:	4922      	ldr	r1, [pc, #136]	@ (8014dfc <MX_USBX_Device_Init+0x20c>)
 8014d72:	4823      	ldr	r0, [pc, #140]	@ (8014e00 <MX_USBX_Device_Init+0x210>)
 8014d74:	f7fd fb74 	bl	8012460 <_txe_queue_create>
 8014d78:	b110      	cbz	r0, 8014d80 <MX_USBX_Device_Init+0x190>
                      pointer, APP_QUEUE_SIZE*sizeof(ULONG)) != TX_SUCCESS)
  {
    return TX_QUEUE_ERROR;
 8014d7a:	2009      	movs	r0, #9
 8014d7c:	e000      	b.n	8014d80 <MX_USBX_Device_Init+0x190>
    return TX_POOL_ERROR;
 8014d7e:	2002      	movs	r0, #2
  }

  return ret;
}
 8014d80:	b00f      	add	sp, #60	@ 0x3c
 8014d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return UX_ERROR;
 8014d84:	20ff      	movs	r0, #255	@ 0xff
 8014d86:	e7fb      	b.n	8014d80 <MX_USBX_Device_Init+0x190>
    return UX_ERROR;
 8014d88:	20ff      	movs	r0, #255	@ 0xff
 8014d8a:	e7f9      	b.n	8014d80 <MX_USBX_Device_Init+0x190>
    return UX_ERROR;
 8014d8c:	20ff      	movs	r0, #255	@ 0xff
 8014d8e:	e7f7      	b.n	8014d80 <MX_USBX_Device_Init+0x190>
    return TX_POOL_ERROR;
 8014d90:	2002      	movs	r0, #2
 8014d92:	e7f5      	b.n	8014d80 <MX_USBX_Device_Init+0x190>
    return TX_THREAD_ERROR;
 8014d94:	200e      	movs	r0, #14
 8014d96:	e7f3      	b.n	8014d80 <MX_USBX_Device_Init+0x190>
    return TX_POOL_ERROR;
 8014d98:	2002      	movs	r0, #2
 8014d9a:	e7f1      	b.n	8014d80 <MX_USBX_Device_Init+0x190>
    return TX_THREAD_ERROR;
 8014d9c:	200e      	movs	r0, #14
 8014d9e:	e7ef      	b.n	8014d80 <MX_USBX_Device_Init+0x190>
    return TX_POOL_ERROR;
 8014da0:	2002      	movs	r0, #2
 8014da2:	e7ed      	b.n	8014d80 <MX_USBX_Device_Init+0x190>
    return TX_THREAD_ERROR;
 8014da4:	200e      	movs	r0, #14
 8014da6:	e7eb      	b.n	8014d80 <MX_USBX_Device_Init+0x190>
    return TX_GROUP_ERROR;
 8014da8:	2006      	movs	r0, #6
 8014daa:	e7e9      	b.n	8014d80 <MX_USBX_Device_Init+0x190>
    return TX_POOL_ERROR;
 8014dac:	2002      	movs	r0, #2
 8014dae:	e7e7      	b.n	8014d80 <MX_USBX_Device_Init+0x190>
 8014db0:	200112b0 	.word	0x200112b0
 8014db4:	08014ea9 	.word	0x08014ea9
 8014db8:	08014ef9 	.word	0x08014ef9
 8014dbc:	08014f15 	.word	0x08014f15
 8014dc0:	200112bc 	.word	0x200112bc
 8014dc4:	200112c0 	.word	0x200112c0
 8014dc8:	08013eaf 	.word	0x08013eaf
 8014dcc:	20000028 	.word	0x20000028
 8014dd0:	08014e49 	.word	0x08014e49
 8014dd4:	0801792c 	.word	0x0801792c
 8014dd8:	20011200 	.word	0x20011200
 8014ddc:	0801515d 	.word	0x0801515d
 8014de0:	08017948 	.word	0x08017948
 8014de4:	20011150 	.word	0x20011150
 8014de8:	080151d5 	.word	0x080151d5
 8014dec:	0801796c 	.word	0x0801796c
 8014df0:	200110a0 	.word	0x200110a0
 8014df4:	08017990 	.word	0x08017990
 8014df8:	2001107c 	.word	0x2001107c
 8014dfc:	0801799c 	.word	0x0801799c
 8014e00:	20011044 	.word	0x20011044

08014e04 <USBX_APP_Device_Init>:
  *         Initialization of USB device.
  * @param  none
  * @retval none
  */
VOID USBX_APP_Device_Init(VOID)
{
 8014e04:	b510      	push	{r4, lr}
/* Initialize the device controller HAL driver */
#ifndef STM32U5A5xx
  MX_USB_OTG_FS_PCD_Init();
#else
  MX_USB_OTG_HS_PCD_Init();
 8014e06:	f7ee fba7 	bl	8003558 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE END USB_Device_Init_PreTreatment_1 */

  /* Initialize and link controller HAL driver to USBx */
  ux_dcd_stm32_initialize((ULONG)USB_OTG_FS, (ULONG)&hpcd_USB_OTG_FS);
#else
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x100);
 8014e0a:	4c0d      	ldr	r4, [pc, #52]	@ (8014e40 <USBX_APP_Device_Init+0x3c>)
 8014e0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014e10:	4620      	mov	r0, r4
 8014e12:	f7f4 fd52 	bl	80098ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x10);
 8014e16:	2210      	movs	r2, #16
 8014e18:	2100      	movs	r1, #0
 8014e1a:	4620      	mov	r0, r4
 8014e1c:	f7f4 fd27 	bl	800986e <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x20);
 8014e20:	2220      	movs	r2, #32
 8014e22:	2101      	movs	r1, #1
 8014e24:	4620      	mov	r0, r4
 8014e26:	f7f4 fd22 	bl	800986e <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 2, 0x10);
 8014e2a:	2210      	movs	r2, #16
 8014e2c:	2102      	movs	r1, #2
 8014e2e:	4620      	mov	r0, r4
 8014e30:	f7f4 fd1d 	bl	800986e <HAL_PCDEx_SetTxFiFo>

  /* Initialize and link controller HAL driver to USBx */
  ux_dcd_stm32_initialize((ULONG)USB_OTG_HS, (ULONG)&hpcd_USB_OTG_HS);
 8014e34:	4621      	mov	r1, r4
 8014e36:	4803      	ldr	r0, [pc, #12]	@ (8014e44 <USBX_APP_Device_Init+0x40>)
 8014e38:	f7ff fc8e 	bl	8014758 <_ux_dcd_stm32_initialize>
#endif
}
 8014e3c:	bd10      	pop	{r4, pc}
 8014e3e:	bf00      	nop
 8014e40:	2000fea8 	.word	0x2000fea8
 8014e44:	42040000 	.word	0x42040000

08014e48 <app_ux_device_thread_entry>:
{
 8014e48:	b508      	push	{r3, lr}
  USBX_APP_Device_Init();
 8014e4a:	f7ff ffdb 	bl	8014e04 <USBX_APP_Device_Init>
 8014e4e:	e005      	b.n	8014e5c <app_ux_device_thread_entry+0x14>
      Error_Handler();
 8014e50:	f7ee f9b0 	bl	80031b4 <Error_Handler>
 8014e54:	e00a      	b.n	8014e6c <app_ux_device_thread_entry+0x24>
      HAL_PCD_Start(&hpcd_USB_OTG_HS);
 8014e56:	480c      	ldr	r0, [pc, #48]	@ (8014e88 <app_ux_device_thread_entry+0x40>)
 8014e58:	f7f3 ff91 	bl	8008d7e <HAL_PCD_Start>
    if (tx_queue_receive(&ux_app_MsgQueue, &USB_Device_State_Msg,
 8014e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8014e60:	490a      	ldr	r1, [pc, #40]	@ (8014e8c <app_ux_device_thread_entry+0x44>)
 8014e62:	480b      	ldr	r0, [pc, #44]	@ (8014e90 <app_ux_device_thread_entry+0x48>)
 8014e64:	f7fd fb74 	bl	8012550 <_txe_queue_receive>
 8014e68:	2800      	cmp	r0, #0
 8014e6a:	d1f1      	bne.n	8014e50 <app_ux_device_thread_entry+0x8>
    if (USB_Device_State_Msg == START_USB_DEVICE)
 8014e6c:	4b07      	ldr	r3, [pc, #28]	@ (8014e8c <app_ux_device_thread_entry+0x44>)
 8014e6e:	781b      	ldrb	r3, [r3, #0]
 8014e70:	2b02      	cmp	r3, #2
 8014e72:	d0f0      	beq.n	8014e56 <app_ux_device_thread_entry+0xe>
    else if (USB_Device_State_Msg == STOP_USB_DEVICE)
 8014e74:	2b01      	cmp	r3, #1
 8014e76:	d002      	beq.n	8014e7e <app_ux_device_thread_entry+0x36>
      Error_Handler();
 8014e78:	f7ee f99c 	bl	80031b4 <Error_Handler>
 8014e7c:	e7ee      	b.n	8014e5c <app_ux_device_thread_entry+0x14>
      HAL_PCD_Stop(&hpcd_USB_OTG_HS);
 8014e7e:	4802      	ldr	r0, [pc, #8]	@ (8014e88 <app_ux_device_thread_entry+0x40>)
 8014e80:	f7f3 ff92 	bl	8008da8 <HAL_PCD_Stop>
 8014e84:	e7ea      	b.n	8014e5c <app_ux_device_thread_entry+0x14>
 8014e86:	bf00      	nop
 8014e88:	2000fea8 	.word	0x2000fea8
 8014e8c:	20011040 	.word	0x20011040
 8014e90:	20011044 	.word	0x20011044

08014e94 <USBX_APP_UART_Init>:
  *         Initialization of UART.
  * @param  huart: Pointer to UART handler
  * @retval none
  */
VOID USBX_APP_UART_Init(UART_HandleTypeDef **huart)
{
 8014e94:	b510      	push	{r4, lr}
 8014e96:	4604      	mov	r4, r0
#ifndef CODEC_SAI
  MX_USART1_UART_Init();
 8014e98:	f7ee fb2e 	bl	80034f8 <MX_USART1_UART_Init>
#endif
  *huart = &huart1;
 8014e9c:	4b01      	ldr	r3, [pc, #4]	@ (8014ea4 <USBX_APP_UART_Init+0x10>)
 8014e9e:	6023      	str	r3, [r4, #0]
}
 8014ea0:	bd10      	pop	{r4, pc}
 8014ea2:	bf00      	nop
 8014ea4:	2001060c 	.word	0x2001060c

08014ea8 <USBD_CDC_ACM_Activate>:
  *         This function is called when insertion of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Activate(VOID *cdc_acm_instance)
{
 8014ea8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USBD_CDC_ACM_Activate */

  /* Save the CDC instance */
  cdc_acm = (UX_SLAVE_CLASS_CDC_ACM*) cdc_acm_instance;
 8014eaa:	4b10      	ldr	r3, [pc, #64]	@ (8014eec <USBD_CDC_ACM_Activate+0x44>)
 8014eac:	6018      	str	r0, [r3, #0]

  /* ATT: regular UART works only if USB-C UART is connected! */

#if 1
  /* Configure the UART peripheral */
  USBX_APP_UART_Init(&uart_handler);
 8014eae:	4c10      	ldr	r4, [pc, #64]	@ (8014ef0 <USBD_CDC_ACM_Activate+0x48>)
 8014eb0:	4620      	mov	r0, r4
 8014eb2:	f7ff ffef 	bl	8014e94 <USBX_APP_UART_Init>
#endif

  /* Get default UART parameters */
  CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_baudrate = uart_handler->Init.BaudRate;
 8014eb6:	6823      	ldr	r3, [r4, #0]
 8014eb8:	6859      	ldr	r1, [r3, #4]
 8014eba:	4a0e      	ldr	r2, [pc, #56]	@ (8014ef4 <USBD_CDC_ACM_Activate+0x4c>)
 8014ebc:	6011      	str	r1, [r2, #0]

  /* Set the UART data type : only 8bits and 9bits are supported */
  switch (uart_handler->Init.WordLength)
 8014ebe:	689a      	ldr	r2, [r3, #8]
 8014ec0:	b132      	cbz	r2, 8014ed0 <USBD_CDC_ACM_Activate+0x28>
 8014ec2:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8014ec6:	d00c      	beq.n	8014ee2 <USBD_CDC_ACM_Activate+0x3a>
    }

    default :
    {
      /* By default set UART data bit to 8 */
      CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_data_bit = VCP_WORDLENGTH8;
 8014ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8014ef4 <USBD_CDC_ACM_Activate+0x4c>)
 8014eca:	2108      	movs	r1, #8
 8014ecc:	7191      	strb	r1, [r2, #6]
      break;
 8014ece:	e002      	b.n	8014ed6 <USBD_CDC_ACM_Activate+0x2e>
      CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_data_bit = VCP_WORDLENGTH8;
 8014ed0:	4a08      	ldr	r2, [pc, #32]	@ (8014ef4 <USBD_CDC_ACM_Activate+0x4c>)
 8014ed2:	2108      	movs	r1, #8
 8014ed4:	7191      	strb	r1, [r2, #6]
    }
  }

  /* Get UART Parity */
  CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_parity = uart_handler->Init.Parity;
 8014ed6:	6919      	ldr	r1, [r3, #16]
 8014ed8:	4a06      	ldr	r2, [pc, #24]	@ (8014ef4 <USBD_CDC_ACM_Activate+0x4c>)
 8014eda:	7151      	strb	r1, [r2, #5]

  /* Get UART StopBits */
  CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_stop_bit = uart_handler->Init.StopBits;
 8014edc:	68db      	ldr	r3, [r3, #12]
 8014ede:	7113      	strb	r3, [r2, #4]
    /* Transfer error in reception process */
    Error_Handler();
  }
#endif
  return;
}
 8014ee0:	bd10      	pop	{r4, pc}
      CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_data_bit = VCP_WORDLENGTH9;
 8014ee2:	4a04      	ldr	r2, [pc, #16]	@ (8014ef4 <USBD_CDC_ACM_Activate+0x4c>)
 8014ee4:	2109      	movs	r1, #9
 8014ee6:	7191      	strb	r1, [r2, #6]
      break;
 8014ee8:	e7f5      	b.n	8014ed6 <USBD_CDC_ACM_Activate+0x2e>
 8014eea:	bf00      	nop
 8014eec:	200152d8 	.word	0x200152d8
 8014ef0:	200142cc 	.word	0x200142cc
 8014ef4:	20000070 	.word	0x20000070

08014ef8 <USBD_CDC_ACM_Deactivate>:
  *         This function is called when extraction of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Deactivate(VOID *cdc_acm_instance)
{
 8014ef8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USBD_CDC_ACM_Deactivate */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);

  /* Reset the cdc acm instance */
  cdc_acm = UX_NULL;
 8014efa:	4b04      	ldr	r3, [pc, #16]	@ (8014f0c <USBD_CDC_ACM_Deactivate+0x14>)
 8014efc:	2200      	movs	r2, #0
 8014efe:	601a      	str	r2, [r3, #0]

#ifndef CODEC_SAI
  /* DeInitialize the UART peripheral */
  HAL_UART_DeInit(uart_handler);
 8014f00:	4b03      	ldr	r3, [pc, #12]	@ (8014f10 <USBD_CDC_ACM_Deactivate+0x18>)
 8014f02:	6818      	ldr	r0, [r3, #0]
 8014f04:	f7f8 fdeb 	bl	800dade <HAL_UART_DeInit>
#endif

  /* USER CODE END USBD_CDC_ACM_Deactivate */

  return;
}
 8014f08:	bd08      	pop	{r3, pc}
 8014f0a:	bf00      	nop
 8014f0c:	200152d8 	.word	0x200152d8
 8014f10:	200142cc 	.word	0x200142cc

08014f14 <USBD_CDC_ACM_ParameterChange>:
  *         This function is invoked to manage the CDC ACM class requests.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_ParameterChange(VOID *cdc_acm_instance)
{
 8014f14:	b508      	push	{r3, lr}
  ULONG request;
  UX_SLAVE_TRANSFER *transfer_request;
  UX_SLAVE_DEVICE *device;

  /* Get the pointer to the device.  */
  device = &_ux_system_slave -> ux_system_slave_device;
 8014f16:	4b14      	ldr	r3, [pc, #80]	@ (8014f68 <USBD_CDC_ACM_ParameterChange+0x54>)
 8014f18:	681b      	ldr	r3, [r3, #0]

  /* Get the pointer to the transfer request associated with the control endpoint. */
  transfer_request = &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

  request = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8014f1a:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1

  switch (request)
 8014f1e:	2b20      	cmp	r3, #32
 8014f20:	d002      	beq.n	8014f28 <USBD_CDC_ACM_ParameterChange+0x14>
 8014f22:	2b21      	cmp	r3, #33	@ 0x21
 8014f24:	d014      	beq.n	8014f50 <USBD_CDC_ACM_ParameterChange+0x3c>
  }

  /* USER CODE END USBD_CDC_ACM_ParameterChange */

  return;
}
 8014f26:	bd08      	pop	{r3, pc}
      if (ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING,
 8014f28:	4a10      	ldr	r2, [pc, #64]	@ (8014f6c <USBD_CDC_ACM_ParameterChange+0x58>)
 8014f2a:	2102      	movs	r1, #2
 8014f2c:	4b10      	ldr	r3, [pc, #64]	@ (8014f70 <USBD_CDC_ACM_ParameterChange+0x5c>)
 8014f2e:	6818      	ldr	r0, [r3, #0]
 8014f30:	f7ff f820 	bl	8013f74 <_ux_device_class_cdc_acm_ioctl>
 8014f34:	b948      	cbnz	r0, 8014f4a <USBD_CDC_ACM_ParameterChange+0x36>
      if (CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_baudrate < MIN_BAUDRATE)
 8014f36:	4b0d      	ldr	r3, [pc, #52]	@ (8014f6c <USBD_CDC_ACM_ParameterChange+0x58>)
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8014f3e:	d2f2      	bcs.n	8014f26 <USBD_CDC_ACM_ParameterChange+0x12>
        CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_baudrate = MIN_BAUDRATE;
 8014f40:	4b0a      	ldr	r3, [pc, #40]	@ (8014f6c <USBD_CDC_ACM_ParameterChange+0x58>)
 8014f42:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8014f46:	601a      	str	r2, [r3, #0]
 8014f48:	e7ed      	b.n	8014f26 <USBD_CDC_ACM_ParameterChange+0x12>
        Error_Handler();
 8014f4a:	f7ee f933 	bl	80031b4 <Error_Handler>
 8014f4e:	e7f2      	b.n	8014f36 <USBD_CDC_ACM_ParameterChange+0x22>
      if (ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING,
 8014f50:	4a06      	ldr	r2, [pc, #24]	@ (8014f6c <USBD_CDC_ACM_ParameterChange+0x58>)
 8014f52:	2101      	movs	r1, #1
 8014f54:	4b06      	ldr	r3, [pc, #24]	@ (8014f70 <USBD_CDC_ACM_ParameterChange+0x5c>)
 8014f56:	6818      	ldr	r0, [r3, #0]
 8014f58:	f7ff f80c 	bl	8013f74 <_ux_device_class_cdc_acm_ioctl>
 8014f5c:	2800      	cmp	r0, #0
 8014f5e:	d0e2      	beq.n	8014f26 <USBD_CDC_ACM_ParameterChange+0x12>
        Error_Handler();
 8014f60:	f7ee f928 	bl	80031b4 <Error_Handler>
  return;
 8014f64:	e7df      	b.n	8014f26 <USBD_CDC_ACM_ParameterChange+0x12>
 8014f66:	bf00      	nop
 8014f68:	20010f44 	.word	0x20010f44
 8014f6c:	20000070 	.word	0x20000070
 8014f70:	200152d8 	.word	0x200152d8

08014f74 <VCP_UART_Send>:
    }
  }
}

void VCP_UART_Send(const uint8_t *p, size_t l)
{
 8014f74:	b500      	push	{lr}
 8014f76:	b083      	sub	sp, #12
 8014f78:	460a      	mov	r2, r1
    ULONG actual_lengthTx;
    if (ux_device_class_cdc_acm_write(cdc_acm, (UCHAR *)p,
 8014f7a:	ab01      	add	r3, sp, #4
 8014f7c:	4601      	mov	r1, r0
 8014f7e:	4803      	ldr	r0, [pc, #12]	@ (8014f8c <VCP_UART_Send+0x18>)
 8014f80:	6800      	ldr	r0, [r0, #0]
 8014f82:	f7ff f8dd 	bl	8014140 <_ux_device_class_cdc_acm_write>
                                            l, &actual_lengthTx) == UX_SUCCESS)
	{

	}
}
 8014f86:	b003      	add	sp, #12
 8014f88:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f8c:	200152d8 	.word	0x200152d8

08014f90 <UART_Send>:
    }
  }
}

void UART_Send(const uint8_t *p, size_t l)
{
 8014f90:	b500      	push	{lr}
 8014f92:	b085      	sub	sp, #20
	ULONG senddataflag = 0;
 8014f94:	2300      	movs	r3, #0
 8014f96:	9303      	str	r3, [sp, #12]

    if (HAL_UART_Transmit_DMA(uart_handler, p, l) != HAL_OK)
 8014f98:	b28a      	uxth	r2, r1
 8014f9a:	4601      	mov	r1, r0
 8014f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8014fcc <UART_Send+0x3c>)
 8014f9e:	6818      	ldr	r0, [r3, #0]
 8014fa0:	f7f8 fdc0 	bl	800db24 <HAL_UART_Transmit_DMA>
 8014fa4:	b960      	cbnz	r0, 8014fc0 <UART_Send+0x30>
    {
      Error_Handler();
    }

    /* Wait until the requested flag TX_NEW_TRANSMITTED_DATA is received */
    if (tx_event_flags_get(&EventFlag, TX_NEW_TRANSMITTED_DATA, TX_OR_CLEAR,
 8014fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8014faa:	9300      	str	r3, [sp, #0]
 8014fac:	ab03      	add	r3, sp, #12
 8014fae:	2201      	movs	r2, #1
 8014fb0:	2102      	movs	r1, #2
 8014fb2:	4807      	ldr	r0, [pc, #28]	@ (8014fd0 <UART_Send+0x40>)
 8014fb4:	f7fd f924 	bl	8012200 <_txe_event_flags_get>
 8014fb8:	b928      	cbnz	r0, 8014fc6 <UART_Send+0x36>
                           &senddataflag, TX_WAIT_FOREVER) != TX_SUCCESS)
    {
      Error_Handler();
    }
}
 8014fba:	b005      	add	sp, #20
 8014fbc:	f85d fb04 	ldr.w	pc, [sp], #4
      Error_Handler();
 8014fc0:	f7ee f8f8 	bl	80031b4 <Error_Handler>
 8014fc4:	e7ef      	b.n	8014fa6 <UART_Send+0x16>
      Error_Handler();
 8014fc6:	f7ee f8f5 	bl	80031b4 <Error_Handler>
}
 8014fca:	e7f6      	b.n	8014fba <UART_Send+0x2a>
 8014fcc:	200142cc 	.word	0x200142cc
 8014fd0:	2001107c 	.word	0x2001107c

08014fd4 <SendPrompt>:
{
 8014fd4:	b508      	push	{r3, lr}
	if (idx != 0)
 8014fd6:	b120      	cbz	r0, 8014fe2 <SendPrompt+0xe>
		UART_Send((uint8_t *)"> \003", 3);
 8014fd8:	2103      	movs	r1, #3
 8014fda:	4804      	ldr	r0, [pc, #16]	@ (8014fec <SendPrompt+0x18>)
 8014fdc:	f7ff ffd8 	bl	8014f90 <UART_Send>
}
 8014fe0:	bd08      	pop	{r3, pc}
		VCP_UART_Send((uint8_t *)"> \003", 3);
 8014fe2:	2103      	movs	r1, #3
 8014fe4:	4801      	ldr	r0, [pc, #4]	@ (8014fec <SendPrompt+0x18>)
 8014fe6:	f7ff ffc5 	bl	8014f74 <VCP_UART_Send>
}
 8014fea:	e7f9      	b.n	8014fe0 <SendPrompt+0xc>
 8014fec:	080179b0 	.word	0x080179b0

08014ff0 <PutCmdLine>:
{
 8014ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ff2:	4604      	mov	r4, r0
 8014ff4:	460e      	mov	r6, r1
	l = strlen((char *)str);
 8014ff6:	4608      	mov	r0, r1
 8014ff8:	f7eb fb25 	bl	8000646 <strlen>
	oldIdx = CmdLineIdx[idx];
 8014ffc:	4b15      	ldr	r3, [pc, #84]	@ (8015054 <PutCmdLine+0x64>)
 8014ffe:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (l)
 8015002:	b900      	cbnz	r0, 8015006 <PutCmdLine+0x16>
}
 8015004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015006:	4607      	mov	r7, r0
		strcpy((char *)&CmdLine[idx][0], (char *)str);
 8015008:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 801500c:	4631      	mov	r1, r6
 801500e:	4b12      	ldr	r3, [pc, #72]	@ (8015058 <PutCmdLine+0x68>)
 8015010:	eb03 20c0 	add.w	r0, r3, r0, lsl #11
 8015014:	f000 fe32 	bl	8015c7c <strcpy>
		CmdLineIdx[idx] = l;
 8015018:	4b0e      	ldr	r3, [pc, #56]	@ (8015054 <PutCmdLine+0x64>)
 801501a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
		if (idx != 0)
 801501e:	b194      	cbz	r4, 8015046 <PutCmdLine+0x56>
			for (i = 0; i < oldIdx; i++)
 8015020:	2400      	movs	r4, #0
 8015022:	e004      	b.n	801502e <PutCmdLine+0x3e>
				UART_Send((uint8_t *)"\010 \010", 3);
 8015024:	2103      	movs	r1, #3
 8015026:	480d      	ldr	r0, [pc, #52]	@ (801505c <PutCmdLine+0x6c>)
 8015028:	f7ff ffb2 	bl	8014f90 <UART_Send>
			for (i = 0; i < oldIdx; i++)
 801502c:	3401      	adds	r4, #1
 801502e:	42ac      	cmp	r4, r5
 8015030:	d3f8      	bcc.n	8015024 <PutCmdLine+0x34>
			UART_Send((uint8_t *)str, l);
 8015032:	4639      	mov	r1, r7
 8015034:	4630      	mov	r0, r6
 8015036:	f7ff ffab 	bl	8014f90 <UART_Send>
 801503a:	e7e3      	b.n	8015004 <PutCmdLine+0x14>
				VCP_UART_Send((uint8_t *)"\010 \010", 3);
 801503c:	2103      	movs	r1, #3
 801503e:	4807      	ldr	r0, [pc, #28]	@ (801505c <PutCmdLine+0x6c>)
 8015040:	f7ff ff98 	bl	8014f74 <VCP_UART_Send>
			for (i = 0; i < oldIdx; i++)
 8015044:	3401      	adds	r4, #1
 8015046:	42ac      	cmp	r4, r5
 8015048:	d3f8      	bcc.n	801503c <PutCmdLine+0x4c>
			VCP_UART_Send((uint8_t *)str, l);
 801504a:	4639      	mov	r1, r7
 801504c:	4630      	mov	r0, r6
 801504e:	f7ff ff91 	bl	8014f74 <VCP_UART_Send>
}
 8015052:	e7d7      	b.n	8015004 <PutCmdLine+0x14>
 8015054:	200112c4 	.word	0x200112c4
 8015058:	200112cc 	.word	0x200112cc
 801505c:	080179b4 	.word	0x080179b4

08015060 <GetCmdLine>:
{
 8015060:	b530      	push	{r4, r5, lr}
 8015062:	b083      	sub	sp, #12
 8015064:	4604      	mov	r4, r0
 8015066:	f88d 1007 	strb.w	r1, [sp, #7]
	CmdLine[idx][CmdLineIdx[idx]] = c;
 801506a:	4b37      	ldr	r3, [pc, #220]	@ (8015148 <GetCmdLine+0xe8>)
 801506c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8015070:	b2cb      	uxtb	r3, r1
 8015072:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8015076:	4a35      	ldr	r2, [pc, #212]	@ (801514c <GetCmdLine+0xec>)
 8015078:	eb02 22c1 	add.w	r2, r2, r1, lsl #11
 801507c:	5553      	strb	r3, [r2, r5]
	if (CmdLineIdx[idx] >= (CMD_LINE_LEN - 1))
 801507e:	f241 72fe 	movw	r2, #6142	@ 0x17fe
 8015082:	4295      	cmp	r5, r2
 8015084:	dc18      	bgt.n	80150b8 <GetCmdLine+0x58>
	if (c == 0x08)
 8015086:	2b08      	cmp	r3, #8
 8015088:	d025      	beq.n	80150d6 <GetCmdLine+0x76>
	if (c == 0x7F)
 801508a:	2b7f      	cmp	r3, #127	@ 0x7f
 801508c:	d035      	beq.n	80150fa <GetCmdLine+0x9a>
	if ((c == '\r') || (c == '\n'))
 801508e:	2b0d      	cmp	r3, #13
 8015090:	d03c      	beq.n	801510c <GetCmdLine+0xac>
 8015092:	2b0a      	cmp	r3, #10
 8015094:	d03a      	beq.n	801510c <GetCmdLine+0xac>
	if (idx != 0)
 8015096:	2800      	cmp	r0, #0
 8015098:	d050      	beq.n	801513c <GetCmdLine+0xdc>
		UART_Send((uint8_t *)&c, 1);
 801509a:	2101      	movs	r1, #1
 801509c:	f10d 0007 	add.w	r0, sp, #7
 80150a0:	f7ff ff76 	bl	8014f90 <UART_Send>
	CmdLineIdx[idx]++;
 80150a4:	4a28      	ldr	r2, [pc, #160]	@ (8015148 <GetCmdLine+0xe8>)
 80150a6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80150aa:	3301      	adds	r3, #1
 80150ac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	return 0;
 80150b0:	2500      	movs	r5, #0
}
 80150b2:	4628      	mov	r0, r5
 80150b4:	b003      	add	sp, #12
 80150b6:	bd30      	pop	{r4, r5, pc}
		CmdLineIdx[idx] = 0;
 80150b8:	4b23      	ldr	r3, [pc, #140]	@ (8015148 <GetCmdLine+0xe8>)
 80150ba:	2200      	movs	r2, #0
 80150bc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		if (idx != 0)
 80150c0:	b120      	cbz	r0, 80150cc <GetCmdLine+0x6c>
			UART_Send((uint8_t *)"\r\n", 2);
 80150c2:	2102      	movs	r1, #2
 80150c4:	4822      	ldr	r0, [pc, #136]	@ (8015150 <GetCmdLine+0xf0>)
 80150c6:	f7ff ff63 	bl	8014f90 <UART_Send>
 80150ca:	e7f2      	b.n	80150b2 <GetCmdLine+0x52>
			VCP_UART_Send((uint8_t *)"\r\n", 2);
 80150cc:	2102      	movs	r1, #2
 80150ce:	4820      	ldr	r0, [pc, #128]	@ (8015150 <GetCmdLine+0xf0>)
 80150d0:	f7ff ff50 	bl	8014f74 <VCP_UART_Send>
		return l;
 80150d4:	e7ed      	b.n	80150b2 <GetCmdLine+0x52>
		if (CmdLineIdx[idx] > 0)
 80150d6:	2d00      	cmp	r5, #0
 80150d8:	dd08      	ble.n	80150ec <GetCmdLine+0x8c>
			CmdLineIdx[idx]--;
 80150da:	3d01      	subs	r5, #1
 80150dc:	4b1a      	ldr	r3, [pc, #104]	@ (8015148 <GetCmdLine+0xe8>)
 80150de:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
			if (idx != 0)
 80150e2:	b128      	cbz	r0, 80150f0 <GetCmdLine+0x90>
				UART_Send((uint8_t *)"\010 \010", 3);
 80150e4:	2103      	movs	r1, #3
 80150e6:	481b      	ldr	r0, [pc, #108]	@ (8015154 <GetCmdLine+0xf4>)
 80150e8:	f7ff ff52 	bl	8014f90 <UART_Send>
		return 0;
 80150ec:	2500      	movs	r5, #0
 80150ee:	e7e0      	b.n	80150b2 <GetCmdLine+0x52>
				VCP_UART_Send((uint8_t *)"\010 \010", 3);
 80150f0:	2103      	movs	r1, #3
 80150f2:	4818      	ldr	r0, [pc, #96]	@ (8015154 <GetCmdLine+0xf4>)
 80150f4:	f7ff ff3e 	bl	8014f74 <VCP_UART_Send>
 80150f8:	e7f8      	b.n	80150ec <GetCmdLine+0x8c>
		PutCmdLine(idx, &LastCmdLine[idx][0]);
 80150fa:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80150fe:	4b16      	ldr	r3, [pc, #88]	@ (8015158 <GetCmdLine+0xf8>)
 8015100:	eb03 21c1 	add.w	r1, r3, r1, lsl #11
 8015104:	f7ff ff74 	bl	8014ff0 <PutCmdLine>
		return 0;
 8015108:	2500      	movs	r5, #0
 801510a:	e7d2      	b.n	80150b2 <GetCmdLine+0x52>
		(CmdLineIdx[idx])++;
 801510c:	3501      	adds	r5, #1
 801510e:	4a0e      	ldr	r2, [pc, #56]	@ (8015148 <GetCmdLine+0xe8>)
 8015110:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
		CmdLine[idx][CmdLineIdx[idx]] = '\0';
 8015114:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8015118:	4b0c      	ldr	r3, [pc, #48]	@ (801514c <GetCmdLine+0xec>)
 801511a:	eb03 23c1 	add.w	r3, r3, r1, lsl #11
 801511e:	2100      	movs	r1, #0
 8015120:	5559      	strb	r1, [r3, r5]
		CmdLineIdx[idx] = 0;
 8015122:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
		if (idx != 0)
 8015126:	b124      	cbz	r4, 8015132 <GetCmdLine+0xd2>
			UART_Send((uint8_t *)"\r\n", 2);
 8015128:	2102      	movs	r1, #2
 801512a:	4809      	ldr	r0, [pc, #36]	@ (8015150 <GetCmdLine+0xf0>)
 801512c:	f7ff ff30 	bl	8014f90 <UART_Send>
 8015130:	e7bf      	b.n	80150b2 <GetCmdLine+0x52>
			VCP_UART_Send((uint8_t *)"\r\n", 2);
 8015132:	2102      	movs	r1, #2
 8015134:	4806      	ldr	r0, [pc, #24]	@ (8015150 <GetCmdLine+0xf0>)
 8015136:	f7ff ff1d 	bl	8014f74 <VCP_UART_Send>
		return l;
 801513a:	e7ba      	b.n	80150b2 <GetCmdLine+0x52>
		VCP_UART_Send((uint8_t *)&c, 1);
 801513c:	2101      	movs	r1, #1
 801513e:	f10d 0007 	add.w	r0, sp, #7
 8015142:	f7ff ff17 	bl	8014f74 <VCP_UART_Send>
 8015146:	e7ad      	b.n	80150a4 <GetCmdLine+0x44>
 8015148:	200112c4 	.word	0x200112c4
 801514c:	200112cc 	.word	0x200112cc
 8015150:	08016db4 	.word	0x08016db4
 8015154:	080179b4 	.word	0x080179b4
 8015158:	2000c20c 	.word	0x2000c20c

0801515c <usbx_cdc_acm_read_thread_entry>:
{
 801515c:	b530      	push	{r4, r5, lr}
 801515e:	b083      	sub	sp, #12
  device = &_ux_system_slave->ux_system_slave_device;
 8015160:	4b18      	ldr	r3, [pc, #96]	@ (80151c4 <usbx_cdc_acm_read_thread_entry+0x68>)
 8015162:	681d      	ldr	r5, [r3, #0]
 8015164:	e00f      	b.n	8015186 <usbx_cdc_acm_read_thread_entry+0x2a>
        if (l)
 8015166:	b172      	cbz	r2, 8015186 <usbx_cdc_acm_read_thread_entry+0x2a>
        	CMD_DEC_execute((char *)&CmdLine[0][0], VCP_OUT);
 8015168:	2101      	movs	r1, #1
 801516a:	4817      	ldr	r0, [pc, #92]	@ (80151c8 <usbx_cdc_acm_read_thread_entry+0x6c>)
 801516c:	f7ed fc38 	bl	80029e0 <CMD_DEC_execute>
        	SendPrompt(0);
 8015170:	2000      	movs	r0, #0
 8015172:	f7ff ff2f 	bl	8014fd4 <SendPrompt>
 8015176:	e006      	b.n	8015186 <usbx_cdc_acm_read_thread_entry+0x2a>
        tx_thread_sleep(MS_TO_TICK(10));
 8015178:	200a      	movs	r0, #10
 801517a:	f7fc fc03 	bl	8011984 <_tx_thread_sleep>
 801517e:	e002      	b.n	8015186 <usbx_cdc_acm_read_thread_entry+0x2a>
      tx_thread_sleep(MS_TO_TICK(10));
 8015180:	200a      	movs	r0, #10
 8015182:	f7fc fbff 	bl	8011984 <_tx_thread_sleep>
    if ((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (cdc_acm != UX_NULL))
 8015186:	6a2b      	ldr	r3, [r5, #32]
 8015188:	2b03      	cmp	r3, #3
 801518a:	d1f9      	bne.n	8015180 <usbx_cdc_acm_read_thread_entry+0x24>
 801518c:	4b0f      	ldr	r3, [pc, #60]	@ (80151cc <usbx_cdc_acm_read_thread_entry+0x70>)
 801518e:	6818      	ldr	r0, [r3, #0]
 8015190:	2800      	cmp	r0, #0
 8015192:	d0f5      	beq.n	8015180 <usbx_cdc_acm_read_thread_entry+0x24>
      ux_device_class_cdc_acm_read(cdc_acm, (UCHAR *)UserRxBufferFS, 64,
 8015194:	ab01      	add	r3, sp, #4
 8015196:	2240      	movs	r2, #64	@ 0x40
 8015198:	490d      	ldr	r1, [pc, #52]	@ (80151d0 <usbx_cdc_acm_read_thread_entry+0x74>)
 801519a:	f7fe ff5d 	bl	8014058 <_ux_device_class_cdc_acm_read>
      if (actual_length != 0)
 801519e:	9b01      	ldr	r3, [sp, #4]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d0e9      	beq.n	8015178 <usbx_cdc_acm_read_thread_entry+0x1c>
        for (i = 0; i < actual_length; i++)
 80151a4:	2400      	movs	r4, #0
        l = 0;
 80151a6:	4622      	mov	r2, r4
        for (i = 0; i < actual_length; i++)
 80151a8:	9b01      	ldr	r3, [sp, #4]
 80151aa:	42a3      	cmp	r3, r4
 80151ac:	d9db      	bls.n	8015166 <usbx_cdc_acm_read_thread_entry+0xa>
        	l = GetCmdLine(0, UserRxBufferFS[i]);
 80151ae:	4b08      	ldr	r3, [pc, #32]	@ (80151d0 <usbx_cdc_acm_read_thread_entry+0x74>)
 80151b0:	5d19      	ldrb	r1, [r3, r4]
 80151b2:	2000      	movs	r0, #0
 80151b4:	f7ff ff54 	bl	8015060 <GetCmdLine>
        	if (l)
 80151b8:	4602      	mov	r2, r0
 80151ba:	2800      	cmp	r0, #0
 80151bc:	d1d3      	bne.n	8015166 <usbx_cdc_acm_read_thread_entry+0xa>
        for (i = 0; i < actual_length; i++)
 80151be:	3401      	adds	r4, #1
 80151c0:	e7f2      	b.n	80151a8 <usbx_cdc_acm_read_thread_entry+0x4c>
 80151c2:	bf00      	nop
 80151c4:	20010f44 	.word	0x20010f44
 80151c8:	200112cc 	.word	0x200112cc
 80151cc:	200152d8 	.word	0x200152d8
 80151d0:	20014ad8 	.word	0x20014ad8

080151d4 <usbx_cdc_acm_write_thread_entry>:
{
 80151d4:	b570      	push	{r4, r5, r6, lr}
 80151d6:	b084      	sub	sp, #16
  ULONG receivedataflag = 0;
 80151d8:	2300      	movs	r3, #0
 80151da:	9303      	str	r3, [sp, #12]
  USBX_APP_UART_Init(&uart_handler);
 80151dc:	4c24      	ldr	r4, [pc, #144]	@ (8015270 <usbx_cdc_acm_write_thread_entry+0x9c>)
 80151de:	4620      	mov	r0, r4
 80151e0:	f7ff fe58 	bl	8014e94 <USBX_APP_UART_Init>
  if (HAL_UART_Receive_IT(uart_handler, (uint8_t *)UserTxBufferFS, 1) != HAL_OK)
 80151e4:	2201      	movs	r2, #1
 80151e6:	4923      	ldr	r1, [pc, #140]	@ (8015274 <usbx_cdc_acm_write_thread_entry+0xa0>)
 80151e8:	6820      	ldr	r0, [r4, #0]
 80151ea:	f7f9 fc9f 	bl	800eb2c <HAL_UART_Receive_IT>
 80151ee:	b140      	cbz	r0, 8015202 <usbx_cdc_acm_write_thread_entry+0x2e>
    Error_Handler();
 80151f0:	f7ed ffe0 	bl	80031b4 <Error_Handler>
 80151f4:	e005      	b.n	8015202 <usbx_cdc_acm_write_thread_entry+0x2e>
    if (UserTxBufPtrOut != UserTxBufPtrIn)
 80151f6:	4b20      	ldr	r3, [pc, #128]	@ (8015278 <usbx_cdc_acm_write_thread_entry+0xa4>)
 80151f8:	681e      	ldr	r6, [r3, #0]
 80151fa:	4b20      	ldr	r3, [pc, #128]	@ (801527c <usbx_cdc_acm_write_thread_entry+0xa8>)
 80151fc:	681d      	ldr	r5, [r3, #0]
 80151fe:	42ae      	cmp	r6, r5
 8015200:	d10d      	bne.n	801521e <usbx_cdc_acm_write_thread_entry+0x4a>
    if (tx_event_flags_get(&EventFlag, RX_NEW_RECEIVED_DATA, TX_OR_CLEAR,
 8015202:	f04f 33ff 	mov.w	r3, #4294967295
 8015206:	9300      	str	r3, [sp, #0]
 8015208:	ab03      	add	r3, sp, #12
 801520a:	2201      	movs	r2, #1
 801520c:	4611      	mov	r1, r2
 801520e:	481c      	ldr	r0, [pc, #112]	@ (8015280 <usbx_cdc_acm_write_thread_entry+0xac>)
 8015210:	f7fc fff6 	bl	8012200 <_txe_event_flags_get>
 8015214:	2800      	cmp	r0, #0
 8015216:	d0ee      	beq.n	80151f6 <usbx_cdc_acm_write_thread_entry+0x22>
      Error_Handler();
 8015218:	f7ed ffcc 	bl	80031b4 <Error_Handler>
 801521c:	e7eb      	b.n	80151f6 <usbx_cdc_acm_write_thread_entry+0x22>
      if (UserTxBufPtrOut > UserTxBufPtrIn)
 801521e:	d904      	bls.n	801522a <usbx_cdc_acm_write_thread_entry+0x56>
        buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8015220:	f5c6 6500 	rsb	r5, r6, #2048	@ 0x800
      for (i = 0; i < buffsize; i++)
 8015224:	2400      	movs	r4, #0
      l = 0;
 8015226:	4623      	mov	r3, r4
      for (i = 0; i < buffsize; i++)
 8015228:	e002      	b.n	8015230 <usbx_cdc_acm_write_thread_entry+0x5c>
        buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 801522a:	1bad      	subs	r5, r5, r6
 801522c:	e7fa      	b.n	8015224 <usbx_cdc_acm_write_thread_entry+0x50>
      for (i = 0; i < buffsize; i++)
 801522e:	3401      	adds	r4, #1
 8015230:	42a5      	cmp	r5, r4
 8015232:	d908      	bls.n	8015246 <usbx_cdc_acm_write_thread_entry+0x72>
    	  l = GetCmdLine(1, UserTxBufferFS[buffptr + i]);
 8015234:	1933      	adds	r3, r6, r4
 8015236:	4a0f      	ldr	r2, [pc, #60]	@ (8015274 <usbx_cdc_acm_write_thread_entry+0xa0>)
 8015238:	5cd1      	ldrb	r1, [r2, r3]
 801523a:	2001      	movs	r0, #1
 801523c:	f7ff ff10 	bl	8015060 <GetCmdLine>
    	  if (l)
 8015240:	4603      	mov	r3, r0
 8015242:	2800      	cmp	r0, #0
 8015244:	d0f3      	beq.n	801522e <usbx_cdc_acm_write_thread_entry+0x5a>
      if (l)
 8015246:	b953      	cbnz	r3, 801525e <usbx_cdc_acm_write_thread_entry+0x8a>
      UserTxBufPtrOut += buffsize;
 8015248:	4a0b      	ldr	r2, [pc, #44]	@ (8015278 <usbx_cdc_acm_write_thread_entry+0xa4>)
 801524a:	6813      	ldr	r3, [r2, #0]
 801524c:	442b      	add	r3, r5
 801524e:	6013      	str	r3, [r2, #0]
      if (UserTxBufPtrOut == APP_TX_DATA_SIZE)
 8015250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015254:	d1d5      	bne.n	8015202 <usbx_cdc_acm_write_thread_entry+0x2e>
        UserTxBufPtrOut = 0;
 8015256:	4613      	mov	r3, r2
 8015258:	2200      	movs	r2, #0
 801525a:	601a      	str	r2, [r3, #0]
 801525c:	e7d1      	b.n	8015202 <usbx_cdc_acm_write_thread_entry+0x2e>
    	CMD_DEC_execute((char *)&CmdLine[1][0], UART_OUT);
 801525e:	2100      	movs	r1, #0
 8015260:	4808      	ldr	r0, [pc, #32]	@ (8015284 <usbx_cdc_acm_write_thread_entry+0xb0>)
 8015262:	f7ed fbbd 	bl	80029e0 <CMD_DEC_execute>
        SendPrompt(1);
 8015266:	2001      	movs	r0, #1
 8015268:	f7ff feb4 	bl	8014fd4 <SendPrompt>
 801526c:	e7ec      	b.n	8015248 <usbx_cdc_acm_write_thread_entry+0x74>
 801526e:	bf00      	nop
 8015270:	200142cc 	.word	0x200142cc
 8015274:	200142d8 	.word	0x200142d8
 8015278:	200142d0 	.word	0x200142d0
 801527c:	200142d4 	.word	0x200142d4
 8015280:	2001107c 	.word	0x2001107c
 8015284:	20012acc 	.word	0x20012acc

08015288 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  huart UART handle.
  * @retval none
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8015288:	b508      	push	{r3, lr}
	(void)huart;

  /* Set TX_NEW_TRANSMITTED_DATA flag */
  if (tx_event_flags_set(&EventFlag, TX_NEW_TRANSMITTED_DATA, TX_OR) != TX_SUCCESS)
 801528a:	2200      	movs	r2, #0
 801528c:	2102      	movs	r1, #2
 801528e:	4804      	ldr	r0, [pc, #16]	@ (80152a0 <HAL_UART_TxCpltCallback+0x18>)
 8015290:	f7fc ffee 	bl	8012270 <_txe_event_flags_set>
 8015294:	b900      	cbnz	r0, 8015298 <HAL_UART_TxCpltCallback+0x10>
  {
    Error_Handler();
  }
}
 8015296:	bd08      	pop	{r3, pc}
    Error_Handler();
 8015298:	f7ed ff8c 	bl	80031b4 <Error_Handler>
}
 801529c:	e7fb      	b.n	8015296 <HAL_UART_TxCpltCallback+0xe>
 801529e:	bf00      	nop
 80152a0:	2001107c 	.word	0x2001107c

080152a4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  huart: UART handle
  * @retval none
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80152a4:	b508      	push	{r3, lr}
	(void)huart;

  /* Set RX_NEW_RECEIVED_DATA flag */
  if (tx_event_flags_set(&EventFlag, RX_NEW_RECEIVED_DATA, TX_OR) != TX_SUCCESS)
 80152a6:	2200      	movs	r2, #0
 80152a8:	2101      	movs	r1, #1
 80152aa:	4811      	ldr	r0, [pc, #68]	@ (80152f0 <HAL_UART_RxCpltCallback+0x4c>)
 80152ac:	f7fc ffe0 	bl	8012270 <_txe_event_flags_set>
 80152b0:	b9a0      	cbnz	r0, 80152dc <HAL_UART_RxCpltCallback+0x38>
  {
    Error_Handler();
  }

  Generic_SetRxFlag(UART_OUT);
 80152b2:	2000      	movs	r0, #0
 80152b4:	f7ed fb84 	bl	80029c0 <Generic_SetRxFlag>

  /* Increment the UserTxBufPtrIn pointer */
  UserTxBufPtrIn++;
 80152b8:	4a0e      	ldr	r2, [pc, #56]	@ (80152f4 <HAL_UART_RxCpltCallback+0x50>)
 80152ba:	6813      	ldr	r3, [r2, #0]
 80152bc:	3301      	adds	r3, #1
 80152be:	6013      	str	r3, [r2, #0]

  /* Rollback the UserTxBufPtrIn if it equal to APP_TX_DATA_SIZE */
  if (UserTxBufPtrIn == APP_TX_DATA_SIZE)
 80152c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80152c4:	d00d      	beq.n	80152e2 <HAL_UART_RxCpltCallback+0x3e>
  {
    UserTxBufPtrIn = 0;
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  if (HAL_UART_Receive_IT(uart_handler, (uint8_t *)UserTxBufferFS + UserTxBufPtrIn, 1) != HAL_OK)
 80152c6:	4b0b      	ldr	r3, [pc, #44]	@ (80152f4 <HAL_UART_RxCpltCallback+0x50>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	2201      	movs	r2, #1
 80152cc:	490a      	ldr	r1, [pc, #40]	@ (80152f8 <HAL_UART_RxCpltCallback+0x54>)
 80152ce:	4419      	add	r1, r3
 80152d0:	4b0a      	ldr	r3, [pc, #40]	@ (80152fc <HAL_UART_RxCpltCallback+0x58>)
 80152d2:	6818      	ldr	r0, [r3, #0]
 80152d4:	f7f9 fc2a 	bl	800eb2c <HAL_UART_Receive_IT>
 80152d8:	b938      	cbnz	r0, 80152ea <HAL_UART_RxCpltCallback+0x46>
  {
    /* Transfer error in reception process */
    Error_Handler();
  }

}
 80152da:	bd08      	pop	{r3, pc}
    Error_Handler();
 80152dc:	f7ed ff6a 	bl	80031b4 <Error_Handler>
 80152e0:	e7e7      	b.n	80152b2 <HAL_UART_RxCpltCallback+0xe>
    UserTxBufPtrIn = 0;
 80152e2:	4613      	mov	r3, r2
 80152e4:	2200      	movs	r2, #0
 80152e6:	601a      	str	r2, [r3, #0]
 80152e8:	e7ed      	b.n	80152c6 <HAL_UART_RxCpltCallback+0x22>
    Error_Handler();
 80152ea:	f7ed ff63 	bl	80031b4 <Error_Handler>
}
 80152ee:	e7f4      	b.n	80152da <HAL_UART_RxCpltCallback+0x36>
 80152f0:	2001107c 	.word	0x2001107c
 80152f4:	200142d4 	.word	0x200142d4
 80152f8:	200142d8 	.word	0x200142d8
 80152fc:	200142cc 	.word	0x200142cc

08015300 <HAL_UART_ErrorCallback>:
            Transfer error occurred in reception and/or transmission process.
  * @param  UartHandle: UART handle
  * @retval none
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8015300:	b508      	push	{r3, lr}
	(void)UartHandle;

  Error_Handler();
 8015302:	f7ed ff57 	bl	80031b4 <Error_Handler>
}
 8015306:	bd08      	pop	{r3, pc}

08015308 <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 8015308:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 801530a:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 801530c:	e002      	b.n	8015314 <USBD_Desc_GetLen+0xc>
  {
    len++;
 801530e:	3001      	adds	r0, #1
 8015310:	b2c0      	uxtb	r0, r0
    pbuff++;
 8015312:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8015314:	781a      	ldrb	r2, [r3, #0]
 8015316:	2a00      	cmp	r2, #0
 8015318:	d1f9      	bne.n	801530e <USBD_Desc_GetLen+0x6>
  }

  return len;
}
 801531a:	4770      	bx	lr

0801531c <USBD_Desc_GetString>:
  if (desc == NULL)
 801531c:	b188      	cbz	r0, 8015342 <USBD_Desc_GetString+0x26>
{
 801531e:	b570      	push	{r4, r5, r6, lr}
 8015320:	460d      	mov	r5, r1
 8015322:	4616      	mov	r6, r2
 8015324:	4604      	mov	r4, r0
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 8015326:	f7ff ffef 	bl	8015308 <USBD_Desc_GetLen>
 801532a:	8030      	strh	r0, [r6, #0]
  unicode[idx++] = *(uint8_t *)len;
 801532c:	7028      	strb	r0, [r5, #0]
 801532e:	2201      	movs	r2, #1
  while (*pdesc != (uint8_t)'\0')
 8015330:	e003      	b.n	801533a <USBD_Desc_GetString+0x1e>
    unicode[idx++] = *pdesc;
 8015332:	1c50      	adds	r0, r2, #1
 8015334:	54ab      	strb	r3, [r5, r2]
    pdesc++;
 8015336:	3401      	adds	r4, #1
    unicode[idx++] = *pdesc;
 8015338:	b2c2      	uxtb	r2, r0
  while (*pdesc != (uint8_t)'\0')
 801533a:	7823      	ldrb	r3, [r4, #0]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d1f8      	bne.n	8015332 <USBD_Desc_GetString+0x16>
}
 8015340:	bd70      	pop	{r4, r5, r6, pc}
 8015342:	4770      	bx	lr

08015344 <USBD_FrameWork_FindFreeIFNbr>:
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
  uint32_t idx = 0U;

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8015344:	f04f 0c00 	mov.w	ip, #0
  uint32_t idx = 0U;
 8015348:	4661      	mov	r1, ip
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 801534a:	e009      	b.n	8015360 <USBD_FrameWork_FindFreeIFNbr+0x1c>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
    {
      /* Increment the interface counter index */
      idx++;
 801534c:	3101      	adds	r1, #1
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 801534e:	3201      	adds	r2, #1
 8015350:	235c      	movs	r3, #92	@ 0x5c
 8015352:	fb03 030c 	mla	r3, r3, ip, r0
 8015356:	6a1b      	ldr	r3, [r3, #32]
 8015358:	4293      	cmp	r3, r2
 801535a:	d8f7      	bhi.n	801534c <USBD_FrameWork_FindFreeIFNbr+0x8>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 801535c:	f10c 0c01 	add.w	ip, ip, #1
 8015360:	6883      	ldr	r3, [r0, #8]
 8015362:	4563      	cmp	r3, ip
 8015364:	d901      	bls.n	801536a <USBD_FrameWork_FindFreeIFNbr+0x26>
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8015366:	2200      	movs	r2, #0
 8015368:	e7f2      	b.n	8015350 <USBD_FrameWork_FindFreeIFNbr+0xc>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
}
 801536a:	b2c8      	uxtb	r0, r1
 801536c:	4770      	bx	lr

0801536e <USBD_FrameWork_AddConfDesc>:
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 801536e:	2309      	movs	r3, #9
 8015370:	7003      	strb	r3, [r0, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 8015372:	2302      	movs	r3, #2
 8015374:	7043      	strb	r3, [r0, #1]
  ptr->wDescriptorLength = 0U;
 8015376:	2300      	movs	r3, #0
 8015378:	7083      	strb	r3, [r0, #2]
 801537a:	70c3      	strb	r3, [r0, #3]
  ptr->bNumInterfaces = 0U;
 801537c:	7103      	strb	r3, [r0, #4]
  ptr->bConfigurationValue = 1U;
 801537e:	2201      	movs	r2, #1
 8015380:	7142      	strb	r2, [r0, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8015382:	7183      	strb	r3, [r0, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 8015384:	23c0      	movs	r3, #192	@ 0xc0
 8015386:	71c3      	strb	r3, [r0, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 8015388:	23fa      	movs	r3, #250	@ 0xfa
 801538a:	7203      	strb	r3, [r0, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 801538c:	680b      	ldr	r3, [r1, #0]
 801538e:	3309      	adds	r3, #9
 8015390:	600b      	str	r3, [r1, #0]
}
 8015392:	4770      	bx	lr

08015394 <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 8015394:	b530      	push	{r4, r5, lr}
  uint32_t idx = 0U;
 8015396:	f04f 0e00 	mov.w	lr, #0

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801539a:	e001      	b.n	80153a0 <USBD_FrameWork_AssignEp+0xc>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 801539c:	f10e 0e01 	add.w	lr, lr, #1
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 80153a0:	6845      	ldr	r5, [r0, #4]
 80153a2:	f04f 0c5c 	mov.w	ip, #92	@ 0x5c
 80153a6:	fb0c 0c05 	mla	ip, ip, r5, r0
 80153aa:	f8dc 401c 	ldr.w	r4, [ip, #28]
 80153ae:	4574      	cmp	r4, lr
 80153b0:	d90c      	bls.n	80153cc <USBD_FrameWork_AssignEp+0x38>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 80153b2:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80153b6:	f04f 0c5c 	mov.w	ip, #92	@ 0x5c
 80153ba:	fb0c fc05 	mul.w	ip, ip, r5
 80153be:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
 80153c2:	4484      	add	ip, r0
 80153c4:	f89c 4028 	ldrb.w	r4, [ip, #40]	@ 0x28
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 80153c8:	2c00      	cmp	r4, #0
 80153ca:	d1e7      	bne.n	801539c <USBD_FrameWork_AssignEp+0x8>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 80153cc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80153d0:	f04f 0c5c 	mov.w	ip, #92	@ 0x5c
 80153d4:	fb0c f505 	mul.w	r5, ip, r5
 80153d8:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80153dc:	4404      	add	r4, r0
 80153de:	f884 1024 	strb.w	r1, [r4, #36]	@ 0x24
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 80153e2:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 80153e6:	84e3      	strh	r3, [r4, #38]	@ 0x26
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 80153e8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80153ec:	2301      	movs	r3, #1
 80153ee:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
}
 80153f2:	bd30      	pop	{r4, r5, pc}

080153f4 <USBD_FrameWork_CDCDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void USBD_FrameWork_CDCDesc(USBD_DevClassHandleTypeDef *pdev,
                                   uint32_t pConf, uint32_t *Sze)
{
 80153f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypedef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc = ((USBD_IadDescTypedef *)(pConf + *Sze));
 80153f8:	6814      	ldr	r4, [r2, #0]
 80153fa:	1863      	adds	r3, r4, r1
 80153fc:	4d80      	ldr	r5, [pc, #512]	@ (8015600 <USBD_FrameWork_CDCDesc+0x20c>)
 80153fe:	602b      	str	r3, [r5, #0]
  pIadDesc->bLength = (uint8_t)sizeof(USBD_IadDescTypedef);
 8015400:	2508      	movs	r5, #8
 8015402:	5465      	strb	r5, [r4, r1]
  pIadDesc->bDescriptorType = USB_DESC_TYPE_IAD; /* IAD descriptor */
 8015404:	240b      	movs	r4, #11
 8015406:	705c      	strb	r4, [r3, #1]
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 8015408:	6844      	ldr	r4, [r0, #4]
 801540a:	f04f 0c5c 	mov.w	ip, #92	@ 0x5c
 801540e:	fb0c 0404 	mla	r4, ip, r4, r0
 8015412:	f894 405a 	ldrb.w	r4, [r4, #90]	@ 0x5a
 8015416:	709c      	strb	r4, [r3, #2]
  pIadDesc->bInterfaceCount = 2U;    /* 2 interfaces */
 8015418:	f04f 0e02 	mov.w	lr, #2
 801541c:	f883 e003 	strb.w	lr, [r3, #3]
  pIadDesc->bFunctionClass = 0x02U;
 8015420:	f883 e004 	strb.w	lr, [r3, #4]
  pIadDesc->bFunctionSubClass = 0x02U;
 8015424:	f883 e005 	strb.w	lr, [r3, #5]
  pIadDesc->bFunctionProtocol = 0x01U;
 8015428:	2601      	movs	r6, #1
 801542a:	719e      	strb	r6, [r3, #6]
  pIadDesc->iFunction = 0; /* String Index */
 801542c:	2400      	movs	r4, #0
 801542e:	71dc      	strb	r4, [r3, #7]
  *Sze += (uint32_t)sizeof(USBD_IadDescTypedef);
 8015430:	6815      	ldr	r5, [r2, #0]
 8015432:	3508      	adds	r5, #8
 8015434:	6015      	str	r5, [r2, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 8015436:	186b      	adds	r3, r5, r1
 8015438:	4f72      	ldr	r7, [pc, #456]	@ (8015604 <USBD_FrameWork_CDCDesc+0x210>)
 801543a:	603b      	str	r3, [r7, #0]
 801543c:	2709      	movs	r7, #9
 801543e:	546f      	strb	r7, [r5, r1]
 8015440:	2704      	movs	r7, #4
 8015442:	705f      	strb	r7, [r3, #1]
 8015444:	6845      	ldr	r5, [r0, #4]
 8015446:	fb0c 0505 	mla	r5, ip, r5, r0
 801544a:	f895 505a 	ldrb.w	r5, [r5, #90]	@ 0x5a
 801544e:	709d      	strb	r5, [r3, #2]
 8015450:	70dc      	strb	r4, [r3, #3]
 8015452:	711e      	strb	r6, [r3, #4]
 8015454:	f883 e005 	strb.w	lr, [r3, #5]
 8015458:	f883 e006 	strb.w	lr, [r3, #6]
 801545c:	71de      	strb	r6, [r3, #7]
 801545e:	721c      	strb	r4, [r3, #8]
 8015460:	6813      	ldr	r3, [r2, #0]
 8015462:	f103 0809 	add.w	r8, r3, #9
 8015466:	f8c2 8000 	str.w	r8, [r2]
                          0x02U, 0x01U, 0U);

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypedef *)((uint32_t)pConf + *Sze));
 801546a:	eb08 0301 	add.w	r3, r8, r1
 801546e:	4d66      	ldr	r5, [pc, #408]	@ (8015608 <USBD_FrameWork_CDCDesc+0x214>)
 8015470:	602b      	str	r3, [r5, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 8015472:	2505      	movs	r5, #5
 8015474:	f808 5001 	strb.w	r5, [r8, r1]
  pHeadDesc->bDescriptorType = 0x24U;
 8015478:	f04f 0824 	mov.w	r8, #36	@ 0x24
 801547c:	f883 8001 	strb.w	r8, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 8015480:	709c      	strb	r4, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110;
 8015482:	f04f 0910 	mov.w	r9, #16
 8015486:	f883 9003 	strb.w	r9, [r3, #3]
 801548a:	711e      	strb	r6, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypedef);
 801548c:	6813      	ldr	r3, [r2, #0]
 801548e:	442b      	add	r3, r5
 8015490:	6013      	str	r3, [r2, #0]

  /* Call Management Functional Descriptor*/
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8015492:	eb03 0901 	add.w	r9, r3, r1
 8015496:	f8df a180 	ldr.w	sl, [pc, #384]	@ 8015618 <USBD_FrameWork_CDCDesc+0x224>
 801549a:	f8ca 9000 	str.w	r9, [sl]
  pCallMgmDesc->bLength = 0x05U;
 801549e:	545d      	strb	r5, [r3, r1]
  pCallMgmDesc->bDescriptorType = 0x24U;
 80154a0:	f889 8001 	strb.w	r8, [r9, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 80154a4:	f889 6002 	strb.w	r6, [r9, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 80154a8:	f889 4003 	strb.w	r4, [r9, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 80154ac:	6843      	ldr	r3, [r0, #4]
 80154ae:	fb0c 0303 	mla	r3, ip, r3, r0
 80154b2:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 80154b6:	f889 3004 	strb.w	r3, [r9, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypedef);
 80154ba:	6813      	ldr	r3, [r2, #0]
 80154bc:	442b      	add	r3, r5
 80154be:	6013      	str	r3, [r2, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypedef *)((uint32_t)pConf + *Sze));
 80154c0:	185c      	adds	r4, r3, r1
 80154c2:	4e52      	ldr	r6, [pc, #328]	@ (801560c <USBD_FrameWork_CDCDesc+0x218>)
 80154c4:	6034      	str	r4, [r6, #0]
  pACMDesc->bLength = 0x04U;
 80154c6:	545f      	strb	r7, [r3, r1]
  pACMDesc->bDescriptorType = 0x24U;
 80154c8:	f884 8001 	strb.w	r8, [r4, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 80154cc:	f884 e002 	strb.w	lr, [r4, #2]
  pACMDesc->bmCapabilities = 0x02;
 80154d0:	f884 e003 	strb.w	lr, [r4, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypedef);
 80154d4:	6814      	ldr	r4, [r2, #0]
 80154d6:	443c      	add	r4, r7
 80154d8:	6014      	str	r4, [r2, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypedef *)((uint32_t)pConf + *Sze));
 80154da:	1863      	adds	r3, r4, r1
 80154dc:	4e4c      	ldr	r6, [pc, #304]	@ (8015610 <USBD_FrameWork_CDCDesc+0x21c>)
 80154de:	6033      	str	r3, [r6, #0]
  pUnionDesc->bLength = 0x05U;
 80154e0:	5465      	strb	r5, [r4, r1]
  pUnionDesc->bDescriptorType = 0x24U;
 80154e2:	f883 8001 	strb.w	r8, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 80154e6:	2406      	movs	r4, #6
 80154e8:	709c      	strb	r4, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 80154ea:	6844      	ldr	r4, [r0, #4]
 80154ec:	fb0c 0404 	mla	r4, ip, r4, r0
 80154f0:	f894 405a 	ldrb.w	r4, [r4, #90]	@ 0x5a
 80154f4:	70dc      	strb	r4, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 80154f6:	6844      	ldr	r4, [r0, #4]
 80154f8:	fb0c 0404 	mla	r4, ip, r4, r0
 80154fc:	f894 405b 	ldrb.w	r4, [r4, #91]	@ 0x5b
 8015500:	711c      	strb	r4, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypedef);
 8015502:	6814      	ldr	r4, [r2, #0]
 8015504:	442c      	add	r4, r5
 8015506:	6014      	str	r4, [r2, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 8015508:	1863      	adds	r3, r4, r1
 801550a:	4e42      	ldr	r6, [pc, #264]	@ (8015614 <USBD_FrameWork_CDCDesc+0x220>)
 801550c:	6033      	str	r3, [r6, #0]
 801550e:	2607      	movs	r6, #7
 8015510:	5466      	strb	r6, [r4, r1]
 8015512:	705d      	strb	r5, [r3, #1]
 8015514:	6844      	ldr	r4, [r0, #4]
 8015516:	fb0c 0404 	mla	r4, ip, r4, r0
 801551a:	f894 4030 	ldrb.w	r4, [r4, #48]	@ 0x30
 801551e:	709c      	strb	r4, [r3, #2]
 8015520:	2403      	movs	r4, #3
 8015522:	70dc      	strb	r4, [r3, #3]
 8015524:	6844      	ldr	r4, [r0, #4]
 8015526:	fb0c 0404 	mla	r4, ip, r4, r0
 801552a:	8e64      	ldrh	r4, [r4, #50]	@ 0x32
 801552c:	809c      	strh	r4, [r3, #4]
 801552e:	7804      	ldrb	r4, [r0, #0]
 8015530:	2c01      	cmp	r4, #1
 8015532:	d05d      	beq.n	80155f0 <USBD_FrameWork_CDCDesc+0x1fc>
 8015534:	2405      	movs	r4, #5
 8015536:	719c      	strb	r4, [r3, #6]
 8015538:	6814      	ldr	r4, [r2, #0]
 801553a:	3407      	adds	r4, #7
 801553c:	6014      	str	r4, [r2, #0]
                          (uint16_t)pdev->tclasslist[pdev->classId].Eps[2].size,
                          USBD_CDCACM_EPINCMD_HS_BINTERVAL,
                          USBD_CDCACM_EPINCMD_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 801553e:	1863      	adds	r3, r4, r1
 8015540:	4d30      	ldr	r5, [pc, #192]	@ (8015604 <USBD_FrameWork_CDCDesc+0x210>)
 8015542:	602b      	str	r3, [r5, #0]
 8015544:	2509      	movs	r5, #9
 8015546:	5465      	strb	r5, [r4, r1]
 8015548:	2404      	movs	r4, #4
 801554a:	705c      	strb	r4, [r3, #1]
 801554c:	6844      	ldr	r4, [r0, #4]
 801554e:	255c      	movs	r5, #92	@ 0x5c
 8015550:	fb05 0404 	mla	r4, r5, r4, r0
 8015554:	f894 405b 	ldrb.w	r4, [r4, #91]	@ 0x5b
 8015558:	709c      	strb	r4, [r3, #2]
 801555a:	2400      	movs	r4, #0
 801555c:	70dc      	strb	r4, [r3, #3]
 801555e:	2602      	movs	r6, #2
 8015560:	711e      	strb	r6, [r3, #4]
 8015562:	270a      	movs	r7, #10
 8015564:	715f      	strb	r7, [r3, #5]
 8015566:	719c      	strb	r4, [r3, #6]
 8015568:	71dc      	strb	r4, [r3, #7]
 801556a:	721c      	strb	r4, [r3, #8]
 801556c:	6814      	ldr	r4, [r2, #0]
 801556e:	3409      	adds	r4, #9
 8015570:	6014      	str	r4, [r2, #0]
                          0U, 0U, 0U);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 8015572:	1863      	adds	r3, r4, r1
 8015574:	4f27      	ldr	r7, [pc, #156]	@ (8015614 <USBD_FrameWork_CDCDesc+0x220>)
 8015576:	603b      	str	r3, [r7, #0]
 8015578:	2707      	movs	r7, #7
 801557a:	5467      	strb	r7, [r4, r1]
 801557c:	2405      	movs	r4, #5
 801557e:	705c      	strb	r4, [r3, #1]
 8015580:	6844      	ldr	r4, [r0, #4]
 8015582:	fb05 0404 	mla	r4, r5, r4, r0
 8015586:	f894 4024 	ldrb.w	r4, [r4, #36]	@ 0x24
 801558a:	709c      	strb	r4, [r3, #2]
 801558c:	70de      	strb	r6, [r3, #3]
 801558e:	6844      	ldr	r4, [r0, #4]
 8015590:	fb05 0404 	mla	r4, r5, r4, r0
 8015594:	8ce4      	ldrh	r4, [r4, #38]	@ 0x26
 8015596:	809c      	strh	r4, [r3, #4]
 8015598:	7804      	ldrb	r4, [r0, #0]
 801559a:	2c01      	cmp	r4, #1
 801559c:	d02a      	beq.n	80155f4 <USBD_FrameWork_CDCDesc+0x200>
 801559e:	2400      	movs	r4, #0
 80155a0:	719c      	strb	r4, [r3, #6]
 80155a2:	6814      	ldr	r4, [r2, #0]
 80155a4:	3407      	adds	r4, #7
 80155a6:	6014      	str	r4, [r2, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0x00U), (0x00U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 80155a8:	1863      	adds	r3, r4, r1
 80155aa:	4d1a      	ldr	r5, [pc, #104]	@ (8015614 <USBD_FrameWork_CDCDesc+0x220>)
 80155ac:	602b      	str	r3, [r5, #0]
 80155ae:	2507      	movs	r5, #7
 80155b0:	5465      	strb	r5, [r4, r1]
 80155b2:	2405      	movs	r4, #5
 80155b4:	705c      	strb	r4, [r3, #1]
 80155b6:	6844      	ldr	r4, [r0, #4]
 80155b8:	255c      	movs	r5, #92	@ 0x5c
 80155ba:	fb05 0404 	mla	r4, r5, r4, r0
 80155be:	f894 402a 	ldrb.w	r4, [r4, #42]	@ 0x2a
 80155c2:	709c      	strb	r4, [r3, #2]
 80155c4:	2402      	movs	r4, #2
 80155c6:	70dc      	strb	r4, [r3, #3]
 80155c8:	6844      	ldr	r4, [r0, #4]
 80155ca:	fb05 0404 	mla	r4, r5, r4, r0
 80155ce:	8da4      	ldrh	r4, [r4, #44]	@ 0x2c
 80155d0:	809c      	strh	r4, [r3, #4]
 80155d2:	7800      	ldrb	r0, [r0, #0]
 80155d4:	2801      	cmp	r0, #1
 80155d6:	d010      	beq.n	80155fa <USBD_FrameWork_CDCDesc+0x206>
 80155d8:	2000      	movs	r0, #0
 80155da:	7198      	strb	r0, [r3, #6]
 80155dc:	6813      	ldr	r3, [r2, #0]
 80155de:	3307      	adds	r3, #7
 80155e0:	6013      	str	r3, [r2, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0x00U), (0x00U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 2U;
 80155e2:	790b      	ldrb	r3, [r1, #4]
 80155e4:	3302      	adds	r3, #2
 80155e6:	710b      	strb	r3, [r1, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 80155e8:	6813      	ldr	r3, [r2, #0]
 80155ea:	804b      	strh	r3, [r1, #2]
}
 80155ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 80155f0:	719d      	strb	r5, [r3, #6]
 80155f2:	e7a1      	b.n	8015538 <USBD_FrameWork_CDCDesc+0x144>
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 80155f4:	2400      	movs	r4, #0
 80155f6:	719c      	strb	r4, [r3, #6]
 80155f8:	e7d3      	b.n	80155a2 <USBD_FrameWork_CDCDesc+0x1ae>
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 80155fa:	2000      	movs	r0, #0
 80155fc:	7198      	strb	r0, [r3, #6]
 80155fe:	e7ed      	b.n	80155dc <USBD_FrameWork_CDCDesc+0x1e8>
 8015600:	200152f4 	.word	0x200152f4
 8015604:	200152f0 	.word	0x200152f0
 8015608:	200152ec 	.word	0x200152ec
 801560c:	200152e4 	.word	0x200152e4
 8015610:	200152e0 	.word	0x200152e0
 8015614:	200152dc 	.word	0x200152dc
 8015618:	200152e8 	.word	0x200152e8

0801561c <USBD_FrameWork_AddToConfDesc>:
{
 801561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801561e:	4604      	mov	r4, r0
 8015620:	460d      	mov	r5, r1
 8015622:	4616      	mov	r6, r2
  pdev->Speed = Speed;
 8015624:	7001      	strb	r1, [r0, #0]
  if (pdev->classId == 0U)
 8015626:	6843      	ldr	r3, [r0, #4]
 8015628:	b143      	cbz	r3, 801563c <USBD_FrameWork_AddToConfDesc+0x20>
  switch (pdev->tclasslist[pdev->classId].ClassType)
 801562a:	6867      	ldr	r7, [r4, #4]
 801562c:	235c      	movs	r3, #92	@ 0x5c
 801562e:	fb03 4307 	mla	r3, r3, r7, r4
 8015632:	7b1b      	ldrb	r3, [r3, #12]
 8015634:	2b02      	cmp	r3, #2
 8015636:	d007      	beq.n	8015648 <USBD_FrameWork_AddToConfDesc+0x2c>
}
 8015638:	2000      	movs	r0, #0
 801563a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 801563c:	f500 7192 	add.w	r1, r0, #292	@ 0x124
 8015640:	4610      	mov	r0, r2
 8015642:	f7ff fe94 	bl	801536e <USBD_FrameWork_AddConfDesc>
 8015646:	e7f0      	b.n	801562a <USBD_FrameWork_AddToConfDesc+0xe>
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 8015648:	4620      	mov	r0, r4
 801564a:	f7ff fe7b 	bl	8015344 <USBD_FrameWork_FindFreeIFNbr>
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 801564e:	235c      	movs	r3, #92	@ 0x5c
 8015650:	fb03 4707 	mla	r7, r3, r7, r4
 8015654:	2302      	movs	r3, #2
 8015656:	623b      	str	r3, [r7, #32]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 8015658:	f887 005a 	strb.w	r0, [r7, #90]	@ 0x5a
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(interface + 1U);
 801565c:	3001      	adds	r0, #1
 801565e:	f887 005b 	strb.w	r0, [r7, #91]	@ 0x5b
      pdev->tclasslist[pdev->classId].NumEps = 3U;  /* EP_IN, EP_OUT, CMD_EP */
 8015662:	2303      	movs	r3, #3
 8015664:	61fb      	str	r3, [r7, #28]
      if (Speed == USBD_HIGH_SPEED)
 8015666:	2d01      	cmp	r5, #1
 8015668:	d018      	beq.n	801569c <USBD_FrameWork_AddToConfDesc+0x80>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 801566a:	2340      	movs	r3, #64	@ 0x40
 801566c:	2202      	movs	r2, #2
 801566e:	2101      	movs	r1, #1
 8015670:	4620      	mov	r0, r4
 8015672:	f7ff fe8f 	bl	8015394 <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 8015676:	2340      	movs	r3, #64	@ 0x40
 8015678:	2202      	movs	r2, #2
 801567a:	2181      	movs	r1, #129	@ 0x81
 801567c:	4620      	mov	r0, r4
 801567e:	f7ff fe89 	bl	8015394 <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 8015682:	2308      	movs	r3, #8
 8015684:	2203      	movs	r2, #3
 8015686:	2182      	movs	r1, #130	@ 0x82
 8015688:	4620      	mov	r0, r4
 801568a:	f7ff fe83 	bl	8015394 <USBD_FrameWork_AssignEp>
      USBD_FrameWork_CDCDesc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 801568e:	f504 7292 	add.w	r2, r4, #292	@ 0x124
 8015692:	4631      	mov	r1, r6
 8015694:	4620      	mov	r0, r4
 8015696:	f7ff fead 	bl	80153f4 <USBD_FrameWork_CDCDesc>
      break;
 801569a:	e7cd      	b.n	8015638 <USBD_FrameWork_AddToConfDesc+0x1c>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 801569c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80156a0:	2202      	movs	r2, #2
 80156a2:	2101      	movs	r1, #1
 80156a4:	4620      	mov	r0, r4
 80156a6:	f7ff fe75 	bl	8015394 <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 80156aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80156ae:	2202      	movs	r2, #2
 80156b0:	2181      	movs	r1, #129	@ 0x81
 80156b2:	4620      	mov	r0, r4
 80156b4:	f7ff fe6e 	bl	8015394 <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 80156b8:	2308      	movs	r3, #8
 80156ba:	2203      	movs	r2, #3
 80156bc:	2182      	movs	r1, #130	@ 0x82
 80156be:	4620      	mov	r0, r4
 80156c0:	f7ff fe68 	bl	8015394 <USBD_FrameWork_AssignEp>
 80156c4:	e7e3      	b.n	801568e <USBD_FrameWork_AddToConfDesc+0x72>

080156c6 <USBD_FrameWork_AddClass>:
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80156c6:	6842      	ldr	r2, [r0, #4]
 80156c8:	2a02      	cmp	r2, #2
 80156ca:	d818      	bhi.n	80156fe <USBD_FrameWork_AddClass+0x38>
{
 80156cc:	b510      	push	{r4, lr}
      (pdev->tclasslist[pdev->classId].Active == 0U))
 80156ce:	f04f 0c5c 	mov.w	ip, #92	@ 0x5c
 80156d2:	fb0c 0c02 	mla	ip, ip, r2, r0
 80156d6:	f8dc 4018 	ldr.w	r4, [ip, #24]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80156da:	b10c      	cbz	r4, 80156e0 <USBD_FrameWork_AddClass+0x1a>
  return UX_SUCCESS;
 80156dc:	2000      	movs	r0, #0
}
 80156de:	bd10      	pop	{r4, pc}
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 80156e0:	f8cc 2010 	str.w	r2, [ip, #16]
    pdev->tclasslist[pdev->classId].Active = 1U;
 80156e4:	2201      	movs	r2, #1
 80156e6:	f8cc 2018 	str.w	r2, [ip, #24]
    pdev->tclasslist[pdev->classId].ClassType = class;
 80156ea:	f88c 100c 	strb.w	r1, [ip, #12]
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 80156ee:	9a02      	ldr	r2, [sp, #8]
 80156f0:	4619      	mov	r1, r3
 80156f2:	f7ff ff93 	bl	801561c <USBD_FrameWork_AddToConfDesc>
 80156f6:	2800      	cmp	r0, #0
 80156f8:	d0f1      	beq.n	80156de <USBD_FrameWork_AddClass+0x18>
      return UX_ERROR;
 80156fa:	20ff      	movs	r0, #255	@ 0xff
 80156fc:	e7ef      	b.n	80156de <USBD_FrameWork_AddClass+0x18>
  return UX_SUCCESS;
 80156fe:	2000      	movs	r0, #0
}
 8015700:	4770      	bx	lr
	...

08015704 <USBD_Device_Framework_Builder>:
{
 8015704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015708:	b082      	sub	sp, #8
 801570a:	4606      	mov	r6, r0
 801570c:	460c      	mov	r4, r1
 801570e:	4690      	mov	r8, r2
 8015710:	461f      	mov	r7, r3
  pdev->CurrConfDescSz = 0U;
 8015712:	2100      	movs	r1, #0
 8015714:	f8c0 1124 	str.w	r1, [r0, #292]	@ 0x124
  pdev->CurrDevDescSz = 0U;
 8015718:	f8c0 1120 	str.w	r1, [r0, #288]	@ 0x120
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 801571c:	4b3b      	ldr	r3, [pc, #236]	@ (801580c <USBD_Device_Framework_Builder+0x108>)
 801571e:	601c      	str	r4, [r3, #0]
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 8015720:	2312      	movs	r3, #18
 8015722:	7023      	strb	r3, [r4, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 8015724:	2301      	movs	r3, #1
 8015726:	7063      	strb	r3, [r4, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 8015728:	70a1      	strb	r1, [r4, #2]
 801572a:	2202      	movs	r2, #2
 801572c:	70e2      	strb	r2, [r4, #3]
  pDevDesc->bDeviceClass = 0x00;
 801572e:	7121      	strb	r1, [r4, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 8015730:	7161      	strb	r1, [r4, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 8015732:	71a1      	strb	r1, [r4, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 8015734:	2040      	movs	r0, #64	@ 0x40
 8015736:	71e0      	strb	r0, [r4, #7]
  pDevDesc->idVendor = USBD_VID;
 8015738:	205c      	movs	r0, #92	@ 0x5c
 801573a:	7220      	strb	r0, [r4, #8]
 801573c:	200a      	movs	r0, #10
 801573e:	7260      	strb	r0, [r4, #9]
  pDevDesc->idProduct = USBD_PID;
 8015740:	2040      	movs	r0, #64	@ 0x40
 8015742:	72a0      	strb	r0, [r4, #10]
 8015744:	2057      	movs	r0, #87	@ 0x57
 8015746:	72e0      	strb	r0, [r4, #11]
  pDevDesc->bcdDevice = 0x0200;
 8015748:	7321      	strb	r1, [r4, #12]
 801574a:	7362      	strb	r2, [r4, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 801574c:	73a3      	strb	r3, [r4, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 801574e:	73e2      	strb	r2, [r4, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 8015750:	2203      	movs	r2, #3
 8015752:	7422      	strb	r2, [r4, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 8015754:	7463      	strb	r3, [r4, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 8015756:	f8d6 3120 	ldr.w	r3, [r6, #288]	@ 0x120
 801575a:	3312      	adds	r3, #18
 801575c:	f8c6 3120 	str.w	r3, [r6, #288]	@ 0x120
  if (Speed == USBD_HIGH_SPEED)
 8015760:	2f01      	cmp	r7, #1
 8015762:	d001      	beq.n	8015768 <USBD_Device_Framework_Builder+0x64>
{
 8015764:	2500      	movs	r5, #0
 8015766:	e01a      	b.n	801579e <USBD_Device_Framework_Builder+0x9a>
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 8015768:	18e2      	adds	r2, r4, r3
 801576a:	4929      	ldr	r1, [pc, #164]	@ (8015810 <USBD_Device_Framework_Builder+0x10c>)
 801576c:	600a      	str	r2, [r1, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 801576e:	210a      	movs	r1, #10
 8015770:	54e1      	strb	r1, [r4, r3]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 8015772:	2306      	movs	r3, #6
 8015774:	7053      	strb	r3, [r2, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 8015776:	2300      	movs	r3, #0
 8015778:	7093      	strb	r3, [r2, #2]
 801577a:	2102      	movs	r1, #2
 801577c:	70d1      	strb	r1, [r2, #3]
    pDevQualDesc->Class = 0x00;
 801577e:	7113      	strb	r3, [r2, #4]
    pDevQualDesc->SubClass = 0x00;
 8015780:	7153      	strb	r3, [r2, #5]
    pDevQualDesc->Protocol = 0x00;
 8015782:	7193      	strb	r3, [r2, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 8015784:	2140      	movs	r1, #64	@ 0x40
 8015786:	71d1      	strb	r1, [r2, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 8015788:	2101      	movs	r1, #1
 801578a:	7211      	strb	r1, [r2, #8]
    pDevQualDesc->bReserved = 0x00;
 801578c:	7253      	strb	r3, [r2, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 801578e:	f8d6 3120 	ldr.w	r3, [r6, #288]	@ 0x120
 8015792:	330a      	adds	r3, #10
 8015794:	f8c6 3120 	str.w	r3, [r6, #288]	@ 0x120
 8015798:	e7e4      	b.n	8015764 <USBD_Device_Framework_Builder+0x60>
    Idx_Instance++;
 801579a:	3501      	adds	r5, #1
 801579c:	b2ed      	uxtb	r5, r5
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 801579e:	2d02      	cmp	r5, #2
 80157a0:	d819      	bhi.n	80157d6 <USBD_Device_Framework_Builder+0xd2>
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80157a2:	6871      	ldr	r1, [r6, #4]
 80157a4:	2902      	cmp	r1, #2
 80157a6:	d8f8      	bhi.n	801579a <USBD_Device_Framework_Builder+0x96>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 80157a8:	68b3      	ldr	r3, [r6, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80157aa:	2b02      	cmp	r3, #2
 80157ac:	d8f5      	bhi.n	801579a <USBD_Device_Framework_Builder+0x96>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 80157ae:	f818 1005 	ldrb.w	r1, [r8, r5]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 80157b2:	2900      	cmp	r1, #0
 80157b4:	d0f1      	beq.n	801579a <USBD_Device_Framework_Builder+0x96>
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 80157b6:	f8d6 3120 	ldr.w	r3, [r6, #288]	@ 0x120
      (void)USBD_FrameWork_AddClass(pdev,
 80157ba:	4423      	add	r3, r4
 80157bc:	9300      	str	r3, [sp, #0]
 80157be:	463b      	mov	r3, r7
 80157c0:	2200      	movs	r2, #0
 80157c2:	4630      	mov	r0, r6
 80157c4:	f7ff ff7f 	bl	80156c6 <USBD_FrameWork_AddClass>
      pdev->classId ++;
 80157c8:	6873      	ldr	r3, [r6, #4]
 80157ca:	3301      	adds	r3, #1
 80157cc:	6073      	str	r3, [r6, #4]
      pdev->NumClasses ++;
 80157ce:	68b3      	ldr	r3, [r6, #8]
 80157d0:	3301      	adds	r3, #1
 80157d2:	60b3      	str	r3, [r6, #8]
 80157d4:	e7e1      	b.n	801579a <USBD_Device_Framework_Builder+0x96>
  if (pdev->NumClasses > 1)
 80157d6:	68b3      	ldr	r3, [r6, #8]
 80157d8:	2b01      	cmp	r3, #1
 80157da:	d90b      	bls.n	80157f4 <USBD_Device_Framework_Builder+0xf0>
    pDevDesc->bDeviceClass = 0xEF;
 80157dc:	4b0b      	ldr	r3, [pc, #44]	@ (801580c <USBD_Device_Framework_Builder+0x108>)
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	22ef      	movs	r2, #239	@ 0xef
 80157e2:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 80157e4:	2202      	movs	r2, #2
 80157e6:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 80157e8:	2201      	movs	r2, #1
 80157ea:	719a      	strb	r2, [r3, #6]
}
 80157ec:	4620      	mov	r0, r4
 80157ee:	b002      	add	sp, #8
 80157f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 80157f4:	f898 3000 	ldrb.w	r3, [r8]
 80157f8:	2b02      	cmp	r3, #2
 80157fa:	d1f7      	bne.n	80157ec <USBD_Device_Framework_Builder+0xe8>
      pDevDesc->bDeviceClass = 0x02;
 80157fc:	4b03      	ldr	r3, [pc, #12]	@ (801580c <USBD_Device_Framework_Builder+0x108>)
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	2202      	movs	r2, #2
 8015802:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 8015804:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 8015806:	2200      	movs	r2, #0
 8015808:	719a      	strb	r2, [r3, #6]
 801580a:	e7ef      	b.n	80157ec <USBD_Device_Framework_Builder+0xe8>
 801580c:	200152fc 	.word	0x200152fc
 8015810:	200152f8 	.word	0x200152f8

08015814 <USBD_Get_Device_Framework_Speed>:
{
 8015814:	b570      	push	{r4, r5, r6, lr}
 8015816:	460d      	mov	r5, r1
  if (USBD_FULL_SPEED == Speed)
 8015818:	4603      	mov	r3, r0
 801581a:	b970      	cbnz	r0, 801583a <USBD_Get_Device_Framework_Speed+0x26>
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 801581c:	4c0e      	ldr	r4, [pc, #56]	@ (8015858 <USBD_Get_Device_Framework_Speed+0x44>)
 801581e:	4e0f      	ldr	r6, [pc, #60]	@ (801585c <USBD_Get_Device_Framework_Speed+0x48>)
 8015820:	4a0f      	ldr	r2, [pc, #60]	@ (8015860 <USBD_Get_Device_Framework_Speed+0x4c>)
 8015822:	4621      	mov	r1, r4
 8015824:	4630      	mov	r0, r6
 8015826:	f7ff ff6d 	bl	8015704 <USBD_Device_Framework_Builder>
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 801582a:	f8d6 3120 	ldr.w	r3, [r6, #288]	@ 0x120
 801582e:	f8d6 2124 	ldr.w	r2, [r6, #292]	@ 0x124
 8015832:	4413      	add	r3, r2
 8015834:	602b      	str	r3, [r5, #0]
    pFrameWork = pDevFrameWorkDesc_FS;
 8015836:	4620      	mov	r0, r4
}
 8015838:	bd70      	pop	{r4, r5, r6, pc}
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 801583a:	4c0a      	ldr	r4, [pc, #40]	@ (8015864 <USBD_Get_Device_Framework_Speed+0x50>)
 801583c:	4e0a      	ldr	r6, [pc, #40]	@ (8015868 <USBD_Get_Device_Framework_Speed+0x54>)
 801583e:	4a08      	ldr	r2, [pc, #32]	@ (8015860 <USBD_Get_Device_Framework_Speed+0x4c>)
 8015840:	4621      	mov	r1, r4
 8015842:	4630      	mov	r0, r6
 8015844:	f7ff ff5e 	bl	8015704 <USBD_Device_Framework_Builder>
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 8015848:	f8d6 3120 	ldr.w	r3, [r6, #288]	@ 0x120
 801584c:	f8d6 2124 	ldr.w	r2, [r6, #292]	@ 0x124
 8015850:	4413      	add	r3, r2
 8015852:	602b      	str	r3, [r5, #0]
    pFrameWork = pDevFrameWorkDesc_HS;
 8015854:	4620      	mov	r0, r4
  return pFrameWork;
 8015856:	e7ef      	b.n	8015838 <USBD_Get_Device_Framework_Speed+0x24>
 8015858:	200154cc 	.word	0x200154cc
 801585c:	200156bc 	.word	0x200156bc
 8015860:	20000078 	.word	0x20000078
 8015864:	20015404 	.word	0x20015404
 8015868:	20015594 	.word	0x20015594

0801586c <USBD_Get_String_Framework>:
{
 801586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015870:	b082      	sub	sp, #8
 8015872:	4606      	mov	r6, r0
  uint16_t len = 0U;
 8015874:	2300      	movs	r3, #0
 8015876:	f8ad 3006 	strh.w	r3, [sp, #6]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801587a:	4d21      	ldr	r5, [pc, #132]	@ (8015900 <USBD_Get_String_Framework+0x94>)
 801587c:	f04f 0809 	mov.w	r8, #9
 8015880:	f885 8000 	strb.w	r8, [r5]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8015884:	2704      	movs	r7, #4
 8015886:	706f      	strb	r7, [r5, #1]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 8015888:	2301      	movs	r3, #1
 801588a:	70ab      	strb	r3, [r5, #2]
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 801588c:	f10d 0206 	add.w	r2, sp, #6
 8015890:	1ce9      	adds	r1, r5, #3
 8015892:	481c      	ldr	r0, [pc, #112]	@ (8015904 <USBD_Get_String_Framework+0x98>)
 8015894:	f7ff fd42 	bl	801531c <USBD_Desc_GetString>
  count += len + 1;
 8015898:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801589c:	19cb      	adds	r3, r1, r7
 801589e:	b2db      	uxtb	r3, r3
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80158a0:	1d4a      	adds	r2, r1, #5
 80158a2:	b2d2      	uxtb	r2, r2
 80158a4:	f805 8003 	strb.w	r8, [r5, r3]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80158a8:	1d8b      	adds	r3, r1, #6
 80158aa:	b2db      	uxtb	r3, r3
 80158ac:	54af      	strb	r7, [r5, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 80158ae:	3107      	adds	r1, #7
 80158b0:	b2cc      	uxtb	r4, r1
 80158b2:	2202      	movs	r2, #2
 80158b4:	54ea      	strb	r2, [r5, r3]
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 80158b6:	f10d 0206 	add.w	r2, sp, #6
 80158ba:	1929      	adds	r1, r5, r4
 80158bc:	4812      	ldr	r0, [pc, #72]	@ (8015908 <USBD_Get_String_Framework+0x9c>)
 80158be:	f7ff fd2d 	bl	801531c <USBD_Desc_GetString>
  count += len + 1;
 80158c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80158c6:	18e1      	adds	r1, r4, r3
 80158c8:	b2c9      	uxtb	r1, r1
 80158ca:	1c4b      	adds	r3, r1, #1
 80158cc:	b2db      	uxtb	r3, r3
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80158ce:	1c8a      	adds	r2, r1, #2
 80158d0:	b2d2      	uxtb	r2, r2
 80158d2:	f805 8003 	strb.w	r8, [r5, r3]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80158d6:	1ccb      	adds	r3, r1, #3
 80158d8:	b2db      	uxtb	r3, r3
 80158da:	54af      	strb	r7, [r5, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 80158dc:	4439      	add	r1, r7
 80158de:	2203      	movs	r2, #3
 80158e0:	54ea      	strb	r2, [r5, r3]
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 80158e2:	f10d 0206 	add.w	r2, sp, #6
 80158e6:	fa55 f181 	uxtab	r1, r5, r1
 80158ea:	4808      	ldr	r0, [pc, #32]	@ (801590c <USBD_Get_String_Framework+0xa0>)
 80158ec:	f7ff fd16 	bl	801531c <USBD_Desc_GetString>
  *Length = strlen((const char *)USBD_string_framework);
 80158f0:	4628      	mov	r0, r5
 80158f2:	f7ea fea8 	bl	8000646 <strlen>
 80158f6:	6030      	str	r0, [r6, #0]
}
 80158f8:	4628      	mov	r0, r5
 80158fa:	b002      	add	sp, #8
 80158fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015900:	20015304 	.word	0x20015304
 8015904:	080179b8 	.word	0x080179b8
 8015908:	080179c4 	.word	0x080179c4
 801590c:	080179d4 	.word	0x080179d4

08015910 <USBD_Get_Language_Id_Framework>:
{
 8015910:	b538      	push	{r3, r4, r5, lr}
 8015912:	4605      	mov	r5, r0
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8015914:	4c05      	ldr	r4, [pc, #20]	@ (801592c <USBD_Get_Language_Id_Framework+0x1c>)
 8015916:	2309      	movs	r3, #9
 8015918:	7023      	strb	r3, [r4, #0]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 801591a:	2304      	movs	r3, #4
 801591c:	7063      	strb	r3, [r4, #1]
  *Length = strlen((const char *)USBD_language_id_framework);
 801591e:	4620      	mov	r0, r4
 8015920:	f7ea fe91 	bl	8000646 <strlen>
 8015924:	6028      	str	r0, [r5, #0]
}
 8015926:	4620      	mov	r0, r4
 8015928:	bd38      	pop	{r3, r4, r5, pc}
 801592a:	bf00      	nop
 801592c:	20015300 	.word	0x20015300

08015930 <USBD_Get_Interface_Number>:
{
 8015930:	4684      	mov	ip, r0
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 8015932:	2300      	movs	r3, #0
  uint8_t itf_num = 0U;
 8015934:	4618      	mov	r0, r3
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 8015936:	2b02      	cmp	r3, #2
 8015938:	d81a      	bhi.n	8015970 <USBD_Get_Interface_Number+0x40>
{
 801593a:	b510      	push	{r4, lr}
 801593c:	e003      	b.n	8015946 <USBD_Get_Interface_Number+0x16>
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 801593e:	3301      	adds	r3, #1
 8015940:	b2db      	uxtb	r3, r3
 8015942:	2b02      	cmp	r3, #2
 8015944:	d813      	bhi.n	801596e <USBD_Get_Interface_Number+0x3e>
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 8015946:	4a0b      	ldr	r2, [pc, #44]	@ (8015974 <USBD_Get_Interface_Number+0x44>)
 8015948:	f04f 0e5c 	mov.w	lr, #92	@ 0x5c
 801594c:	fb0e 2203 	mla	r2, lr, r3, r2
 8015950:	7b12      	ldrb	r2, [r2, #12]
 8015952:	4562      	cmp	r2, ip
 8015954:	d1f3      	bne.n	801593e <USBD_Get_Interface_Number+0xe>
        (USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 8015956:	4a07      	ldr	r2, [pc, #28]	@ (8015974 <USBD_Get_Interface_Number+0x44>)
 8015958:	fb0e 2203 	mla	r2, lr, r3, r2
 801595c:	7d12      	ldrb	r2, [r2, #20]
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 801595e:	428a      	cmp	r2, r1
 8015960:	d1ed      	bne.n	801593e <USBD_Get_Interface_Number+0xe>
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 8015962:	4a04      	ldr	r2, [pc, #16]	@ (8015974 <USBD_Get_Interface_Number+0x44>)
 8015964:	fb0e 2203 	mla	r2, lr, r3, r2
 8015968:	f892 005a 	ldrb.w	r0, [r2, #90]	@ 0x5a
 801596c:	e7e7      	b.n	801593e <USBD_Get_Interface_Number+0xe>
}
 801596e:	bd10      	pop	{r4, pc}
 8015970:	4770      	bx	lr
 8015972:	bf00      	nop
 8015974:	200156bc 	.word	0x200156bc

08015978 <USBD_Get_Configuration_Number>:
}
 8015978:	2001      	movs	r0, #1
 801597a:	4770      	bx	lr

0801597c <malloc>:
 801597c:	4b02      	ldr	r3, [pc, #8]	@ (8015988 <malloc+0xc>)
 801597e:	4601      	mov	r1, r0
 8015980:	6818      	ldr	r0, [r3, #0]
 8015982:	f000 b825 	b.w	80159d0 <_malloc_r>
 8015986:	bf00      	nop
 8015988:	20000084 	.word	0x20000084

0801598c <sbrk_aligned>:
 801598c:	b570      	push	{r4, r5, r6, lr}
 801598e:	4e0f      	ldr	r6, [pc, #60]	@ (80159cc <sbrk_aligned+0x40>)
 8015990:	460c      	mov	r4, r1
 8015992:	4605      	mov	r5, r0
 8015994:	6831      	ldr	r1, [r6, #0]
 8015996:	b911      	cbnz	r1, 801599e <sbrk_aligned+0x12>
 8015998:	f000 f934 	bl	8015c04 <_sbrk_r>
 801599c:	6030      	str	r0, [r6, #0]
 801599e:	4621      	mov	r1, r4
 80159a0:	4628      	mov	r0, r5
 80159a2:	f000 f92f 	bl	8015c04 <_sbrk_r>
 80159a6:	1c43      	adds	r3, r0, #1
 80159a8:	d103      	bne.n	80159b2 <sbrk_aligned+0x26>
 80159aa:	f04f 34ff 	mov.w	r4, #4294967295
 80159ae:	4620      	mov	r0, r4
 80159b0:	bd70      	pop	{r4, r5, r6, pc}
 80159b2:	1cc4      	adds	r4, r0, #3
 80159b4:	f024 0403 	bic.w	r4, r4, #3
 80159b8:	42a0      	cmp	r0, r4
 80159ba:	d0f8      	beq.n	80159ae <sbrk_aligned+0x22>
 80159bc:	1a21      	subs	r1, r4, r0
 80159be:	4628      	mov	r0, r5
 80159c0:	f000 f920 	bl	8015c04 <_sbrk_r>
 80159c4:	3001      	adds	r0, #1
 80159c6:	d1f2      	bne.n	80159ae <sbrk_aligned+0x22>
 80159c8:	e7ef      	b.n	80159aa <sbrk_aligned+0x1e>
 80159ca:	bf00      	nop
 80159cc:	200157e4 	.word	0x200157e4

080159d0 <_malloc_r>:
 80159d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159d4:	1ccd      	adds	r5, r1, #3
 80159d6:	4606      	mov	r6, r0
 80159d8:	f025 0503 	bic.w	r5, r5, #3
 80159dc:	3508      	adds	r5, #8
 80159de:	2d0c      	cmp	r5, #12
 80159e0:	bf38      	it	cc
 80159e2:	250c      	movcc	r5, #12
 80159e4:	2d00      	cmp	r5, #0
 80159e6:	db01      	blt.n	80159ec <_malloc_r+0x1c>
 80159e8:	42a9      	cmp	r1, r5
 80159ea:	d904      	bls.n	80159f6 <_malloc_r+0x26>
 80159ec:	230c      	movs	r3, #12
 80159ee:	6033      	str	r3, [r6, #0]
 80159f0:	2000      	movs	r0, #0
 80159f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015acc <_malloc_r+0xfc>
 80159fa:	f000 f869 	bl	8015ad0 <__malloc_lock>
 80159fe:	f8d8 3000 	ldr.w	r3, [r8]
 8015a02:	461c      	mov	r4, r3
 8015a04:	bb44      	cbnz	r4, 8015a58 <_malloc_r+0x88>
 8015a06:	4629      	mov	r1, r5
 8015a08:	4630      	mov	r0, r6
 8015a0a:	f7ff ffbf 	bl	801598c <sbrk_aligned>
 8015a0e:	1c43      	adds	r3, r0, #1
 8015a10:	4604      	mov	r4, r0
 8015a12:	d158      	bne.n	8015ac6 <_malloc_r+0xf6>
 8015a14:	f8d8 4000 	ldr.w	r4, [r8]
 8015a18:	4627      	mov	r7, r4
 8015a1a:	2f00      	cmp	r7, #0
 8015a1c:	d143      	bne.n	8015aa6 <_malloc_r+0xd6>
 8015a1e:	2c00      	cmp	r4, #0
 8015a20:	d04b      	beq.n	8015aba <_malloc_r+0xea>
 8015a22:	6823      	ldr	r3, [r4, #0]
 8015a24:	4639      	mov	r1, r7
 8015a26:	4630      	mov	r0, r6
 8015a28:	eb04 0903 	add.w	r9, r4, r3
 8015a2c:	f000 f8ea 	bl	8015c04 <_sbrk_r>
 8015a30:	4581      	cmp	r9, r0
 8015a32:	d142      	bne.n	8015aba <_malloc_r+0xea>
 8015a34:	6821      	ldr	r1, [r4, #0]
 8015a36:	4630      	mov	r0, r6
 8015a38:	1a6d      	subs	r5, r5, r1
 8015a3a:	4629      	mov	r1, r5
 8015a3c:	f7ff ffa6 	bl	801598c <sbrk_aligned>
 8015a40:	3001      	adds	r0, #1
 8015a42:	d03a      	beq.n	8015aba <_malloc_r+0xea>
 8015a44:	6823      	ldr	r3, [r4, #0]
 8015a46:	442b      	add	r3, r5
 8015a48:	6023      	str	r3, [r4, #0]
 8015a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8015a4e:	685a      	ldr	r2, [r3, #4]
 8015a50:	bb62      	cbnz	r2, 8015aac <_malloc_r+0xdc>
 8015a52:	f8c8 7000 	str.w	r7, [r8]
 8015a56:	e00f      	b.n	8015a78 <_malloc_r+0xa8>
 8015a58:	6822      	ldr	r2, [r4, #0]
 8015a5a:	1b52      	subs	r2, r2, r5
 8015a5c:	d420      	bmi.n	8015aa0 <_malloc_r+0xd0>
 8015a5e:	2a0b      	cmp	r2, #11
 8015a60:	d917      	bls.n	8015a92 <_malloc_r+0xc2>
 8015a62:	1961      	adds	r1, r4, r5
 8015a64:	42a3      	cmp	r3, r4
 8015a66:	6025      	str	r5, [r4, #0]
 8015a68:	bf18      	it	ne
 8015a6a:	6059      	strne	r1, [r3, #4]
 8015a6c:	6863      	ldr	r3, [r4, #4]
 8015a6e:	bf08      	it	eq
 8015a70:	f8c8 1000 	streq.w	r1, [r8]
 8015a74:	5162      	str	r2, [r4, r5]
 8015a76:	604b      	str	r3, [r1, #4]
 8015a78:	4630      	mov	r0, r6
 8015a7a:	f000 f82f 	bl	8015adc <__malloc_unlock>
 8015a7e:	f104 000b 	add.w	r0, r4, #11
 8015a82:	1d23      	adds	r3, r4, #4
 8015a84:	f020 0007 	bic.w	r0, r0, #7
 8015a88:	1ac2      	subs	r2, r0, r3
 8015a8a:	bf1c      	itt	ne
 8015a8c:	1a1b      	subne	r3, r3, r0
 8015a8e:	50a3      	strne	r3, [r4, r2]
 8015a90:	e7af      	b.n	80159f2 <_malloc_r+0x22>
 8015a92:	6862      	ldr	r2, [r4, #4]
 8015a94:	42a3      	cmp	r3, r4
 8015a96:	bf0c      	ite	eq
 8015a98:	f8c8 2000 	streq.w	r2, [r8]
 8015a9c:	605a      	strne	r2, [r3, #4]
 8015a9e:	e7eb      	b.n	8015a78 <_malloc_r+0xa8>
 8015aa0:	4623      	mov	r3, r4
 8015aa2:	6864      	ldr	r4, [r4, #4]
 8015aa4:	e7ae      	b.n	8015a04 <_malloc_r+0x34>
 8015aa6:	463c      	mov	r4, r7
 8015aa8:	687f      	ldr	r7, [r7, #4]
 8015aaa:	e7b6      	b.n	8015a1a <_malloc_r+0x4a>
 8015aac:	461a      	mov	r2, r3
 8015aae:	685b      	ldr	r3, [r3, #4]
 8015ab0:	42a3      	cmp	r3, r4
 8015ab2:	d1fb      	bne.n	8015aac <_malloc_r+0xdc>
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	6053      	str	r3, [r2, #4]
 8015ab8:	e7de      	b.n	8015a78 <_malloc_r+0xa8>
 8015aba:	230c      	movs	r3, #12
 8015abc:	4630      	mov	r0, r6
 8015abe:	6033      	str	r3, [r6, #0]
 8015ac0:	f000 f80c 	bl	8015adc <__malloc_unlock>
 8015ac4:	e794      	b.n	80159f0 <_malloc_r+0x20>
 8015ac6:	6005      	str	r5, [r0, #0]
 8015ac8:	e7d6      	b.n	8015a78 <_malloc_r+0xa8>
 8015aca:	bf00      	nop
 8015acc:	200157e8 	.word	0x200157e8

08015ad0 <__malloc_lock>:
 8015ad0:	4801      	ldr	r0, [pc, #4]	@ (8015ad8 <__malloc_lock+0x8>)
 8015ad2:	f000 b8d1 	b.w	8015c78 <__retarget_lock_acquire_recursive>
 8015ad6:	bf00      	nop
 8015ad8:	20015928 	.word	0x20015928

08015adc <__malloc_unlock>:
 8015adc:	4801      	ldr	r0, [pc, #4]	@ (8015ae4 <__malloc_unlock+0x8>)
 8015ade:	f000 b8cc 	b.w	8015c7a <__retarget_lock_release_recursive>
 8015ae2:	bf00      	nop
 8015ae4:	20015928 	.word	0x20015928

08015ae8 <sniprintf>:
 8015ae8:	b40c      	push	{r2, r3}
 8015aea:	4b18      	ldr	r3, [pc, #96]	@ (8015b4c <sniprintf+0x64>)
 8015aec:	b530      	push	{r4, r5, lr}
 8015aee:	1e0c      	subs	r4, r1, #0
 8015af0:	b09d      	sub	sp, #116	@ 0x74
 8015af2:	681d      	ldr	r5, [r3, #0]
 8015af4:	da08      	bge.n	8015b08 <sniprintf+0x20>
 8015af6:	238b      	movs	r3, #139	@ 0x8b
 8015af8:	f04f 30ff 	mov.w	r0, #4294967295
 8015afc:	602b      	str	r3, [r5, #0]
 8015afe:	b01d      	add	sp, #116	@ 0x74
 8015b00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015b04:	b002      	add	sp, #8
 8015b06:	4770      	bx	lr
 8015b08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015b0c:	9002      	str	r0, [sp, #8]
 8015b0e:	9006      	str	r0, [sp, #24]
 8015b10:	a902      	add	r1, sp, #8
 8015b12:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015b16:	bf14      	ite	ne
 8015b18:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015b1c:	4623      	moveq	r3, r4
 8015b1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015b20:	4628      	mov	r0, r5
 8015b22:	9304      	str	r3, [sp, #16]
 8015b24:	9307      	str	r3, [sp, #28]
 8015b26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015b2a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015b2e:	ab21      	add	r3, sp, #132	@ 0x84
 8015b30:	9301      	str	r3, [sp, #4]
 8015b32:	f000 f955 	bl	8015de0 <_svfiprintf_r>
 8015b36:	1c43      	adds	r3, r0, #1
 8015b38:	bfbc      	itt	lt
 8015b3a:	238b      	movlt	r3, #139	@ 0x8b
 8015b3c:	602b      	strlt	r3, [r5, #0]
 8015b3e:	2c00      	cmp	r4, #0
 8015b40:	d0dd      	beq.n	8015afe <sniprintf+0x16>
 8015b42:	9b02      	ldr	r3, [sp, #8]
 8015b44:	2200      	movs	r2, #0
 8015b46:	701a      	strb	r2, [r3, #0]
 8015b48:	e7d9      	b.n	8015afe <sniprintf+0x16>
 8015b4a:	bf00      	nop
 8015b4c:	20000084 	.word	0x20000084

08015b50 <siscanf>:
 8015b50:	b40e      	push	{r1, r2, r3}
 8015b52:	b530      	push	{r4, r5, lr}
 8015b54:	b09c      	sub	sp, #112	@ 0x70
 8015b56:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8015b5a:	ac1f      	add	r4, sp, #124	@ 0x7c
 8015b5c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015b60:	9002      	str	r0, [sp, #8]
 8015b62:	f854 5b04 	ldr.w	r5, [r4], #4
 8015b66:	9006      	str	r0, [sp, #24]
 8015b68:	f7ea fd6d 	bl	8000646 <strlen>
 8015b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8015b9c <siscanf+0x4c>)
 8015b6e:	462a      	mov	r2, r5
 8015b70:	9003      	str	r0, [sp, #12]
 8015b72:	a902      	add	r1, sp, #8
 8015b74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015b76:	2300      	movs	r3, #0
 8015b78:	9007      	str	r0, [sp, #28]
 8015b7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015b7c:	9314      	str	r3, [sp, #80]	@ 0x50
 8015b7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015b82:	4807      	ldr	r0, [pc, #28]	@ (8015ba0 <siscanf+0x50>)
 8015b84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015b88:	4623      	mov	r3, r4
 8015b8a:	6800      	ldr	r0, [r0, #0]
 8015b8c:	9401      	str	r4, [sp, #4]
 8015b8e:	f000 fa7b 	bl	8016088 <__ssvfiscanf_r>
 8015b92:	b01c      	add	sp, #112	@ 0x70
 8015b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015b98:	b003      	add	sp, #12
 8015b9a:	4770      	bx	lr
 8015b9c:	08015ba5 	.word	0x08015ba5
 8015ba0:	20000084 	.word	0x20000084

08015ba4 <__seofread>:
 8015ba4:	2000      	movs	r0, #0
 8015ba6:	4770      	bx	lr

08015ba8 <memset>:
 8015ba8:	4402      	add	r2, r0
 8015baa:	4603      	mov	r3, r0
 8015bac:	4293      	cmp	r3, r2
 8015bae:	d100      	bne.n	8015bb2 <memset+0xa>
 8015bb0:	4770      	bx	lr
 8015bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8015bb6:	e7f9      	b.n	8015bac <memset+0x4>

08015bb8 <strncmp>:
 8015bb8:	b510      	push	{r4, lr}
 8015bba:	b16a      	cbz	r2, 8015bd8 <strncmp+0x20>
 8015bbc:	3901      	subs	r1, #1
 8015bbe:	1884      	adds	r4, r0, r2
 8015bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015bc4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015bc8:	429a      	cmp	r2, r3
 8015bca:	d103      	bne.n	8015bd4 <strncmp+0x1c>
 8015bcc:	42a0      	cmp	r0, r4
 8015bce:	d001      	beq.n	8015bd4 <strncmp+0x1c>
 8015bd0:	2a00      	cmp	r2, #0
 8015bd2:	d1f5      	bne.n	8015bc0 <strncmp+0x8>
 8015bd4:	1ad0      	subs	r0, r2, r3
 8015bd6:	bd10      	pop	{r4, pc}
 8015bd8:	4610      	mov	r0, r2
 8015bda:	e7fc      	b.n	8015bd6 <strncmp+0x1e>

08015bdc <strncpy>:
 8015bdc:	3901      	subs	r1, #1
 8015bde:	4603      	mov	r3, r0
 8015be0:	b510      	push	{r4, lr}
 8015be2:	b132      	cbz	r2, 8015bf2 <strncpy+0x16>
 8015be4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015be8:	3a01      	subs	r2, #1
 8015bea:	f803 4b01 	strb.w	r4, [r3], #1
 8015bee:	2c00      	cmp	r4, #0
 8015bf0:	d1f7      	bne.n	8015be2 <strncpy+0x6>
 8015bf2:	441a      	add	r2, r3
 8015bf4:	2100      	movs	r1, #0
 8015bf6:	4293      	cmp	r3, r2
 8015bf8:	d100      	bne.n	8015bfc <strncpy+0x20>
 8015bfa:	bd10      	pop	{r4, pc}
 8015bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8015c00:	e7f9      	b.n	8015bf6 <strncpy+0x1a>
	...

08015c04 <_sbrk_r>:
 8015c04:	b538      	push	{r3, r4, r5, lr}
 8015c06:	2300      	movs	r3, #0
 8015c08:	4d05      	ldr	r5, [pc, #20]	@ (8015c20 <_sbrk_r+0x1c>)
 8015c0a:	4604      	mov	r4, r0
 8015c0c:	4608      	mov	r0, r1
 8015c0e:	602b      	str	r3, [r5, #0]
 8015c10:	f7ee fa1a 	bl	8004048 <_sbrk>
 8015c14:	1c43      	adds	r3, r0, #1
 8015c16:	d102      	bne.n	8015c1e <_sbrk_r+0x1a>
 8015c18:	682b      	ldr	r3, [r5, #0]
 8015c1a:	b103      	cbz	r3, 8015c1e <_sbrk_r+0x1a>
 8015c1c:	6023      	str	r3, [r4, #0]
 8015c1e:	bd38      	pop	{r3, r4, r5, pc}
 8015c20:	20015924 	.word	0x20015924

08015c24 <__errno>:
 8015c24:	4b01      	ldr	r3, [pc, #4]	@ (8015c2c <__errno+0x8>)
 8015c26:	6818      	ldr	r0, [r3, #0]
 8015c28:	4770      	bx	lr
 8015c2a:	bf00      	nop
 8015c2c:	20000084 	.word	0x20000084

08015c30 <__libc_init_array>:
 8015c30:	b570      	push	{r4, r5, r6, lr}
 8015c32:	4d0d      	ldr	r5, [pc, #52]	@ (8015c68 <__libc_init_array+0x38>)
 8015c34:	2600      	movs	r6, #0
 8015c36:	4c0d      	ldr	r4, [pc, #52]	@ (8015c6c <__libc_init_array+0x3c>)
 8015c38:	1b64      	subs	r4, r4, r5
 8015c3a:	10a4      	asrs	r4, r4, #2
 8015c3c:	42a6      	cmp	r6, r4
 8015c3e:	d109      	bne.n	8015c54 <__libc_init_array+0x24>
 8015c40:	4d0b      	ldr	r5, [pc, #44]	@ (8015c70 <__libc_init_array+0x40>)
 8015c42:	2600      	movs	r6, #0
 8015c44:	4c0b      	ldr	r4, [pc, #44]	@ (8015c74 <__libc_init_array+0x44>)
 8015c46:	f001 f839 	bl	8016cbc <_init>
 8015c4a:	1b64      	subs	r4, r4, r5
 8015c4c:	10a4      	asrs	r4, r4, #2
 8015c4e:	42a6      	cmp	r6, r4
 8015c50:	d105      	bne.n	8015c5e <__libc_init_array+0x2e>
 8015c52:	bd70      	pop	{r4, r5, r6, pc}
 8015c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c58:	3601      	adds	r6, #1
 8015c5a:	4798      	blx	r3
 8015c5c:	e7ee      	b.n	8015c3c <__libc_init_array+0xc>
 8015c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c62:	3601      	adds	r6, #1
 8015c64:	4798      	blx	r3
 8015c66:	e7f2      	b.n	8015c4e <__libc_init_array+0x1e>
 8015c68:	08017b38 	.word	0x08017b38
 8015c6c:	08017b38 	.word	0x08017b38
 8015c70:	08017b38 	.word	0x08017b38
 8015c74:	08017b3c 	.word	0x08017b3c

08015c78 <__retarget_lock_acquire_recursive>:
 8015c78:	4770      	bx	lr

08015c7a <__retarget_lock_release_recursive>:
 8015c7a:	4770      	bx	lr

08015c7c <strcpy>:
 8015c7c:	4603      	mov	r3, r0
 8015c7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015c82:	f803 2b01 	strb.w	r2, [r3], #1
 8015c86:	2a00      	cmp	r2, #0
 8015c88:	d1f9      	bne.n	8015c7e <strcpy+0x2>
 8015c8a:	4770      	bx	lr

08015c8c <__aeabi_memclr>:
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	f7ea bce2 	b.w	8000656 <__aeabi_memset>
	...

08015c94 <_free_r>:
 8015c94:	b538      	push	{r3, r4, r5, lr}
 8015c96:	4605      	mov	r5, r0
 8015c98:	2900      	cmp	r1, #0
 8015c9a:	d041      	beq.n	8015d20 <_free_r+0x8c>
 8015c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ca0:	1f0c      	subs	r4, r1, #4
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	bfb8      	it	lt
 8015ca6:	18e4      	addlt	r4, r4, r3
 8015ca8:	f7ff ff12 	bl	8015ad0 <__malloc_lock>
 8015cac:	4a1d      	ldr	r2, [pc, #116]	@ (8015d24 <_free_r+0x90>)
 8015cae:	6813      	ldr	r3, [r2, #0]
 8015cb0:	b933      	cbnz	r3, 8015cc0 <_free_r+0x2c>
 8015cb2:	6063      	str	r3, [r4, #4]
 8015cb4:	6014      	str	r4, [r2, #0]
 8015cb6:	4628      	mov	r0, r5
 8015cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015cbc:	f7ff bf0e 	b.w	8015adc <__malloc_unlock>
 8015cc0:	42a3      	cmp	r3, r4
 8015cc2:	d908      	bls.n	8015cd6 <_free_r+0x42>
 8015cc4:	6820      	ldr	r0, [r4, #0]
 8015cc6:	1821      	adds	r1, r4, r0
 8015cc8:	428b      	cmp	r3, r1
 8015cca:	bf01      	itttt	eq
 8015ccc:	6819      	ldreq	r1, [r3, #0]
 8015cce:	685b      	ldreq	r3, [r3, #4]
 8015cd0:	1809      	addeq	r1, r1, r0
 8015cd2:	6021      	streq	r1, [r4, #0]
 8015cd4:	e7ed      	b.n	8015cb2 <_free_r+0x1e>
 8015cd6:	461a      	mov	r2, r3
 8015cd8:	685b      	ldr	r3, [r3, #4]
 8015cda:	b10b      	cbz	r3, 8015ce0 <_free_r+0x4c>
 8015cdc:	42a3      	cmp	r3, r4
 8015cde:	d9fa      	bls.n	8015cd6 <_free_r+0x42>
 8015ce0:	6811      	ldr	r1, [r2, #0]
 8015ce2:	1850      	adds	r0, r2, r1
 8015ce4:	42a0      	cmp	r0, r4
 8015ce6:	d10b      	bne.n	8015d00 <_free_r+0x6c>
 8015ce8:	6820      	ldr	r0, [r4, #0]
 8015cea:	4401      	add	r1, r0
 8015cec:	1850      	adds	r0, r2, r1
 8015cee:	6011      	str	r1, [r2, #0]
 8015cf0:	4283      	cmp	r3, r0
 8015cf2:	d1e0      	bne.n	8015cb6 <_free_r+0x22>
 8015cf4:	6818      	ldr	r0, [r3, #0]
 8015cf6:	685b      	ldr	r3, [r3, #4]
 8015cf8:	4408      	add	r0, r1
 8015cfa:	6053      	str	r3, [r2, #4]
 8015cfc:	6010      	str	r0, [r2, #0]
 8015cfe:	e7da      	b.n	8015cb6 <_free_r+0x22>
 8015d00:	d902      	bls.n	8015d08 <_free_r+0x74>
 8015d02:	230c      	movs	r3, #12
 8015d04:	602b      	str	r3, [r5, #0]
 8015d06:	e7d6      	b.n	8015cb6 <_free_r+0x22>
 8015d08:	6820      	ldr	r0, [r4, #0]
 8015d0a:	1821      	adds	r1, r4, r0
 8015d0c:	428b      	cmp	r3, r1
 8015d0e:	bf02      	ittt	eq
 8015d10:	6819      	ldreq	r1, [r3, #0]
 8015d12:	685b      	ldreq	r3, [r3, #4]
 8015d14:	1809      	addeq	r1, r1, r0
 8015d16:	6063      	str	r3, [r4, #4]
 8015d18:	bf08      	it	eq
 8015d1a:	6021      	streq	r1, [r4, #0]
 8015d1c:	6054      	str	r4, [r2, #4]
 8015d1e:	e7ca      	b.n	8015cb6 <_free_r+0x22>
 8015d20:	bd38      	pop	{r3, r4, r5, pc}
 8015d22:	bf00      	nop
 8015d24:	200157e8 	.word	0x200157e8

08015d28 <__ssputs_r>:
 8015d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d2c:	461f      	mov	r7, r3
 8015d2e:	688e      	ldr	r6, [r1, #8]
 8015d30:	4682      	mov	sl, r0
 8015d32:	460c      	mov	r4, r1
 8015d34:	42be      	cmp	r6, r7
 8015d36:	4690      	mov	r8, r2
 8015d38:	680b      	ldr	r3, [r1, #0]
 8015d3a:	d82d      	bhi.n	8015d98 <__ssputs_r+0x70>
 8015d3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015d40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015d44:	d026      	beq.n	8015d94 <__ssputs_r+0x6c>
 8015d46:	6965      	ldr	r5, [r4, #20]
 8015d48:	6909      	ldr	r1, [r1, #16]
 8015d4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015d4e:	eba3 0901 	sub.w	r9, r3, r1
 8015d52:	1c7b      	adds	r3, r7, #1
 8015d54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015d58:	444b      	add	r3, r9
 8015d5a:	106d      	asrs	r5, r5, #1
 8015d5c:	429d      	cmp	r5, r3
 8015d5e:	bf38      	it	cc
 8015d60:	461d      	movcc	r5, r3
 8015d62:	0553      	lsls	r3, r2, #21
 8015d64:	d527      	bpl.n	8015db6 <__ssputs_r+0x8e>
 8015d66:	4629      	mov	r1, r5
 8015d68:	f7ff fe32 	bl	80159d0 <_malloc_r>
 8015d6c:	4606      	mov	r6, r0
 8015d6e:	b360      	cbz	r0, 8015dca <__ssputs_r+0xa2>
 8015d70:	464a      	mov	r2, r9
 8015d72:	6921      	ldr	r1, [r4, #16]
 8015d74:	f000 fe72 	bl	8016a5c <memcpy>
 8015d78:	89a3      	ldrh	r3, [r4, #12]
 8015d7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015d82:	81a3      	strh	r3, [r4, #12]
 8015d84:	6126      	str	r6, [r4, #16]
 8015d86:	444e      	add	r6, r9
 8015d88:	6165      	str	r5, [r4, #20]
 8015d8a:	eba5 0509 	sub.w	r5, r5, r9
 8015d8e:	6026      	str	r6, [r4, #0]
 8015d90:	463e      	mov	r6, r7
 8015d92:	60a5      	str	r5, [r4, #8]
 8015d94:	42be      	cmp	r6, r7
 8015d96:	d900      	bls.n	8015d9a <__ssputs_r+0x72>
 8015d98:	463e      	mov	r6, r7
 8015d9a:	4632      	mov	r2, r6
 8015d9c:	4641      	mov	r1, r8
 8015d9e:	6820      	ldr	r0, [r4, #0]
 8015da0:	f000 fe34 	bl	8016a0c <memmove>
 8015da4:	68a3      	ldr	r3, [r4, #8]
 8015da6:	2000      	movs	r0, #0
 8015da8:	1b9b      	subs	r3, r3, r6
 8015daa:	60a3      	str	r3, [r4, #8]
 8015dac:	6823      	ldr	r3, [r4, #0]
 8015dae:	4433      	add	r3, r6
 8015db0:	6023      	str	r3, [r4, #0]
 8015db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015db6:	462a      	mov	r2, r5
 8015db8:	f000 fe5d 	bl	8016a76 <_realloc_r>
 8015dbc:	4606      	mov	r6, r0
 8015dbe:	2800      	cmp	r0, #0
 8015dc0:	d1e0      	bne.n	8015d84 <__ssputs_r+0x5c>
 8015dc2:	6921      	ldr	r1, [r4, #16]
 8015dc4:	4650      	mov	r0, sl
 8015dc6:	f7ff ff65 	bl	8015c94 <_free_r>
 8015dca:	230c      	movs	r3, #12
 8015dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8015dd0:	f8ca 3000 	str.w	r3, [sl]
 8015dd4:	89a3      	ldrh	r3, [r4, #12]
 8015dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015dda:	81a3      	strh	r3, [r4, #12]
 8015ddc:	e7e9      	b.n	8015db2 <__ssputs_r+0x8a>
	...

08015de0 <_svfiprintf_r>:
 8015de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015de4:	4698      	mov	r8, r3
 8015de6:	898b      	ldrh	r3, [r1, #12]
 8015de8:	b09d      	sub	sp, #116	@ 0x74
 8015dea:	4607      	mov	r7, r0
 8015dec:	061b      	lsls	r3, r3, #24
 8015dee:	460d      	mov	r5, r1
 8015df0:	4614      	mov	r4, r2
 8015df2:	d510      	bpl.n	8015e16 <_svfiprintf_r+0x36>
 8015df4:	690b      	ldr	r3, [r1, #16]
 8015df6:	b973      	cbnz	r3, 8015e16 <_svfiprintf_r+0x36>
 8015df8:	2140      	movs	r1, #64	@ 0x40
 8015dfa:	f7ff fde9 	bl	80159d0 <_malloc_r>
 8015dfe:	6028      	str	r0, [r5, #0]
 8015e00:	6128      	str	r0, [r5, #16]
 8015e02:	b930      	cbnz	r0, 8015e12 <_svfiprintf_r+0x32>
 8015e04:	230c      	movs	r3, #12
 8015e06:	603b      	str	r3, [r7, #0]
 8015e08:	f04f 30ff 	mov.w	r0, #4294967295
 8015e0c:	b01d      	add	sp, #116	@ 0x74
 8015e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e12:	2340      	movs	r3, #64	@ 0x40
 8015e14:	616b      	str	r3, [r5, #20]
 8015e16:	2300      	movs	r3, #0
 8015e18:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e1c:	f04f 0901 	mov.w	r9, #1
 8015e20:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8015fc4 <_svfiprintf_r+0x1e4>
 8015e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e26:	2320      	movs	r3, #32
 8015e28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015e2c:	2330      	movs	r3, #48	@ 0x30
 8015e2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015e32:	4623      	mov	r3, r4
 8015e34:	469a      	mov	sl, r3
 8015e36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e3a:	b10a      	cbz	r2, 8015e40 <_svfiprintf_r+0x60>
 8015e3c:	2a25      	cmp	r2, #37	@ 0x25
 8015e3e:	d1f9      	bne.n	8015e34 <_svfiprintf_r+0x54>
 8015e40:	ebba 0b04 	subs.w	fp, sl, r4
 8015e44:	d00b      	beq.n	8015e5e <_svfiprintf_r+0x7e>
 8015e46:	465b      	mov	r3, fp
 8015e48:	4622      	mov	r2, r4
 8015e4a:	4629      	mov	r1, r5
 8015e4c:	4638      	mov	r0, r7
 8015e4e:	f7ff ff6b 	bl	8015d28 <__ssputs_r>
 8015e52:	3001      	adds	r0, #1
 8015e54:	f000 80a7 	beq.w	8015fa6 <_svfiprintf_r+0x1c6>
 8015e58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015e5a:	445a      	add	r2, fp
 8015e5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8015e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	f000 809f 	beq.w	8015fa6 <_svfiprintf_r+0x1c6>
 8015e68:	2300      	movs	r3, #0
 8015e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8015e6e:	f10a 0a01 	add.w	sl, sl, #1
 8015e72:	9304      	str	r3, [sp, #16]
 8015e74:	9307      	str	r3, [sp, #28]
 8015e76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015e7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8015e7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e80:	4654      	mov	r4, sl
 8015e82:	2205      	movs	r2, #5
 8015e84:	484f      	ldr	r0, [pc, #316]	@ (8015fc4 <_svfiprintf_r+0x1e4>)
 8015e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e8a:	f000 fdd9 	bl	8016a40 <memchr>
 8015e8e:	9a04      	ldr	r2, [sp, #16]
 8015e90:	b9d8      	cbnz	r0, 8015eca <_svfiprintf_r+0xea>
 8015e92:	06d0      	lsls	r0, r2, #27
 8015e94:	bf44      	itt	mi
 8015e96:	2320      	movmi	r3, #32
 8015e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015e9c:	0711      	lsls	r1, r2, #28
 8015e9e:	bf44      	itt	mi
 8015ea0:	232b      	movmi	r3, #43	@ 0x2b
 8015ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8015eaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8015eac:	d015      	beq.n	8015eda <_svfiprintf_r+0xfa>
 8015eae:	9a07      	ldr	r2, [sp, #28]
 8015eb0:	4654      	mov	r4, sl
 8015eb2:	2000      	movs	r0, #0
 8015eb4:	f04f 0c0a 	mov.w	ip, #10
 8015eb8:	4621      	mov	r1, r4
 8015eba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ebe:	3b30      	subs	r3, #48	@ 0x30
 8015ec0:	2b09      	cmp	r3, #9
 8015ec2:	d94b      	bls.n	8015f5c <_svfiprintf_r+0x17c>
 8015ec4:	b1b0      	cbz	r0, 8015ef4 <_svfiprintf_r+0x114>
 8015ec6:	9207      	str	r2, [sp, #28]
 8015ec8:	e014      	b.n	8015ef4 <_svfiprintf_r+0x114>
 8015eca:	eba0 0308 	sub.w	r3, r0, r8
 8015ece:	46a2      	mov	sl, r4
 8015ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8015ed4:	4313      	orrs	r3, r2
 8015ed6:	9304      	str	r3, [sp, #16]
 8015ed8:	e7d2      	b.n	8015e80 <_svfiprintf_r+0xa0>
 8015eda:	9b03      	ldr	r3, [sp, #12]
 8015edc:	1d19      	adds	r1, r3, #4
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	9103      	str	r1, [sp, #12]
 8015ee4:	bfbb      	ittet	lt
 8015ee6:	425b      	neglt	r3, r3
 8015ee8:	f042 0202 	orrlt.w	r2, r2, #2
 8015eec:	9307      	strge	r3, [sp, #28]
 8015eee:	9307      	strlt	r3, [sp, #28]
 8015ef0:	bfb8      	it	lt
 8015ef2:	9204      	strlt	r2, [sp, #16]
 8015ef4:	7823      	ldrb	r3, [r4, #0]
 8015ef6:	2b2e      	cmp	r3, #46	@ 0x2e
 8015ef8:	d10a      	bne.n	8015f10 <_svfiprintf_r+0x130>
 8015efa:	7863      	ldrb	r3, [r4, #1]
 8015efc:	2b2a      	cmp	r3, #42	@ 0x2a
 8015efe:	d132      	bne.n	8015f66 <_svfiprintf_r+0x186>
 8015f00:	9b03      	ldr	r3, [sp, #12]
 8015f02:	3402      	adds	r4, #2
 8015f04:	1d1a      	adds	r2, r3, #4
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015f0c:	9203      	str	r2, [sp, #12]
 8015f0e:	9305      	str	r3, [sp, #20]
 8015f10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015fd4 <_svfiprintf_r+0x1f4>
 8015f14:	2203      	movs	r2, #3
 8015f16:	7821      	ldrb	r1, [r4, #0]
 8015f18:	4650      	mov	r0, sl
 8015f1a:	f000 fd91 	bl	8016a40 <memchr>
 8015f1e:	b138      	cbz	r0, 8015f30 <_svfiprintf_r+0x150>
 8015f20:	eba0 000a 	sub.w	r0, r0, sl
 8015f24:	2240      	movs	r2, #64	@ 0x40
 8015f26:	9b04      	ldr	r3, [sp, #16]
 8015f28:	3401      	adds	r4, #1
 8015f2a:	4082      	lsls	r2, r0
 8015f2c:	4313      	orrs	r3, r2
 8015f2e:	9304      	str	r3, [sp, #16]
 8015f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f34:	2206      	movs	r2, #6
 8015f36:	4824      	ldr	r0, [pc, #144]	@ (8015fc8 <_svfiprintf_r+0x1e8>)
 8015f38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015f3c:	f000 fd80 	bl	8016a40 <memchr>
 8015f40:	2800      	cmp	r0, #0
 8015f42:	d036      	beq.n	8015fb2 <_svfiprintf_r+0x1d2>
 8015f44:	4b21      	ldr	r3, [pc, #132]	@ (8015fcc <_svfiprintf_r+0x1ec>)
 8015f46:	bb1b      	cbnz	r3, 8015f90 <_svfiprintf_r+0x1b0>
 8015f48:	9b03      	ldr	r3, [sp, #12]
 8015f4a:	3307      	adds	r3, #7
 8015f4c:	f023 0307 	bic.w	r3, r3, #7
 8015f50:	3308      	adds	r3, #8
 8015f52:	9303      	str	r3, [sp, #12]
 8015f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f56:	4433      	add	r3, r6
 8015f58:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f5a:	e76a      	b.n	8015e32 <_svfiprintf_r+0x52>
 8015f5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f60:	460c      	mov	r4, r1
 8015f62:	2001      	movs	r0, #1
 8015f64:	e7a8      	b.n	8015eb8 <_svfiprintf_r+0xd8>
 8015f66:	2300      	movs	r3, #0
 8015f68:	3401      	adds	r4, #1
 8015f6a:	f04f 0c0a 	mov.w	ip, #10
 8015f6e:	4619      	mov	r1, r3
 8015f70:	9305      	str	r3, [sp, #20]
 8015f72:	4620      	mov	r0, r4
 8015f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f78:	3a30      	subs	r2, #48	@ 0x30
 8015f7a:	2a09      	cmp	r2, #9
 8015f7c:	d903      	bls.n	8015f86 <_svfiprintf_r+0x1a6>
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d0c6      	beq.n	8015f10 <_svfiprintf_r+0x130>
 8015f82:	9105      	str	r1, [sp, #20]
 8015f84:	e7c4      	b.n	8015f10 <_svfiprintf_r+0x130>
 8015f86:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f8a:	4604      	mov	r4, r0
 8015f8c:	2301      	movs	r3, #1
 8015f8e:	e7f0      	b.n	8015f72 <_svfiprintf_r+0x192>
 8015f90:	ab03      	add	r3, sp, #12
 8015f92:	462a      	mov	r2, r5
 8015f94:	a904      	add	r1, sp, #16
 8015f96:	4638      	mov	r0, r7
 8015f98:	9300      	str	r3, [sp, #0]
 8015f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8015fd0 <_svfiprintf_r+0x1f0>)
 8015f9c:	f3af 8000 	nop.w
 8015fa0:	1c42      	adds	r2, r0, #1
 8015fa2:	4606      	mov	r6, r0
 8015fa4:	d1d6      	bne.n	8015f54 <_svfiprintf_r+0x174>
 8015fa6:	89ab      	ldrh	r3, [r5, #12]
 8015fa8:	065b      	lsls	r3, r3, #25
 8015faa:	f53f af2d 	bmi.w	8015e08 <_svfiprintf_r+0x28>
 8015fae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015fb0:	e72c      	b.n	8015e0c <_svfiprintf_r+0x2c>
 8015fb2:	ab03      	add	r3, sp, #12
 8015fb4:	462a      	mov	r2, r5
 8015fb6:	a904      	add	r1, sp, #16
 8015fb8:	4638      	mov	r0, r7
 8015fba:	9300      	str	r3, [sp, #0]
 8015fbc:	4b04      	ldr	r3, [pc, #16]	@ (8015fd0 <_svfiprintf_r+0x1f0>)
 8015fbe:	f000 fa49 	bl	8016454 <_printf_i>
 8015fc2:	e7ed      	b.n	8015fa0 <_svfiprintf_r+0x1c0>
 8015fc4:	080179df 	.word	0x080179df
 8015fc8:	080179e9 	.word	0x080179e9
 8015fcc:	00000000 	.word	0x00000000
 8015fd0:	08015d29 	.word	0x08015d29
 8015fd4:	080179e5 	.word	0x080179e5

08015fd8 <_sungetc_r>:
 8015fd8:	b538      	push	{r3, r4, r5, lr}
 8015fda:	1c4b      	adds	r3, r1, #1
 8015fdc:	4614      	mov	r4, r2
 8015fde:	d103      	bne.n	8015fe8 <_sungetc_r+0x10>
 8015fe0:	f04f 35ff 	mov.w	r5, #4294967295
 8015fe4:	4628      	mov	r0, r5
 8015fe6:	bd38      	pop	{r3, r4, r5, pc}
 8015fe8:	8993      	ldrh	r3, [r2, #12]
 8015fea:	b2cd      	uxtb	r5, r1
 8015fec:	f023 0320 	bic.w	r3, r3, #32
 8015ff0:	8193      	strh	r3, [r2, #12]
 8015ff2:	6853      	ldr	r3, [r2, #4]
 8015ff4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8015ff6:	b18a      	cbz	r2, 801601c <_sungetc_r+0x44>
 8015ff8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	dd08      	ble.n	8016010 <_sungetc_r+0x38>
 8015ffe:	6823      	ldr	r3, [r4, #0]
 8016000:	1e5a      	subs	r2, r3, #1
 8016002:	6022      	str	r2, [r4, #0]
 8016004:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016008:	6863      	ldr	r3, [r4, #4]
 801600a:	3301      	adds	r3, #1
 801600c:	6063      	str	r3, [r4, #4]
 801600e:	e7e9      	b.n	8015fe4 <_sungetc_r+0xc>
 8016010:	4621      	mov	r1, r4
 8016012:	f000 fcc4 	bl	801699e <__submore>
 8016016:	2800      	cmp	r0, #0
 8016018:	d0f1      	beq.n	8015ffe <_sungetc_r+0x26>
 801601a:	e7e1      	b.n	8015fe0 <_sungetc_r+0x8>
 801601c:	6921      	ldr	r1, [r4, #16]
 801601e:	6822      	ldr	r2, [r4, #0]
 8016020:	b141      	cbz	r1, 8016034 <_sungetc_r+0x5c>
 8016022:	4291      	cmp	r1, r2
 8016024:	d206      	bcs.n	8016034 <_sungetc_r+0x5c>
 8016026:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801602a:	42a9      	cmp	r1, r5
 801602c:	d102      	bne.n	8016034 <_sungetc_r+0x5c>
 801602e:	3a01      	subs	r2, #1
 8016030:	6022      	str	r2, [r4, #0]
 8016032:	e7ea      	b.n	801600a <_sungetc_r+0x32>
 8016034:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8016038:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801603c:	6363      	str	r3, [r4, #52]	@ 0x34
 801603e:	2303      	movs	r3, #3
 8016040:	63a3      	str	r3, [r4, #56]	@ 0x38
 8016042:	4623      	mov	r3, r4
 8016044:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016048:	6023      	str	r3, [r4, #0]
 801604a:	2301      	movs	r3, #1
 801604c:	e7de      	b.n	801600c <_sungetc_r+0x34>

0801604e <__ssrefill_r>:
 801604e:	b510      	push	{r4, lr}
 8016050:	460c      	mov	r4, r1
 8016052:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016054:	b169      	cbz	r1, 8016072 <__ssrefill_r+0x24>
 8016056:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801605a:	4299      	cmp	r1, r3
 801605c:	d001      	beq.n	8016062 <__ssrefill_r+0x14>
 801605e:	f7ff fe19 	bl	8015c94 <_free_r>
 8016062:	2000      	movs	r0, #0
 8016064:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016066:	6360      	str	r0, [r4, #52]	@ 0x34
 8016068:	6063      	str	r3, [r4, #4]
 801606a:	b113      	cbz	r3, 8016072 <__ssrefill_r+0x24>
 801606c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801606e:	6023      	str	r3, [r4, #0]
 8016070:	bd10      	pop	{r4, pc}
 8016072:	6923      	ldr	r3, [r4, #16]
 8016074:	f04f 30ff 	mov.w	r0, #4294967295
 8016078:	6023      	str	r3, [r4, #0]
 801607a:	2300      	movs	r3, #0
 801607c:	6063      	str	r3, [r4, #4]
 801607e:	89a3      	ldrh	r3, [r4, #12]
 8016080:	f043 0320 	orr.w	r3, r3, #32
 8016084:	81a3      	strh	r3, [r4, #12]
 8016086:	e7f3      	b.n	8016070 <__ssrefill_r+0x22>

08016088 <__ssvfiscanf_r>:
 8016088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801608c:	460c      	mov	r4, r1
 801608e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8016092:	2100      	movs	r1, #0
 8016094:	4606      	mov	r6, r0
 8016096:	f10d 0804 	add.w	r8, sp, #4
 801609a:	4fa5      	ldr	r7, [pc, #660]	@ (8016330 <__ssvfiscanf_r+0x2a8>)
 801609c:	9300      	str	r3, [sp, #0]
 801609e:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80160a2:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80160a6:	49a3      	ldr	r1, [pc, #652]	@ (8016334 <__ssvfiscanf_r+0x2ac>)
 80160a8:	91a0      	str	r1, [sp, #640]	@ 0x280
 80160aa:	49a3      	ldr	r1, [pc, #652]	@ (8016338 <__ssvfiscanf_r+0x2b0>)
 80160ac:	91a1      	str	r1, [sp, #644]	@ 0x284
 80160ae:	7813      	ldrb	r3, [r2, #0]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	f000 8158 	beq.w	8016366 <__ssvfiscanf_r+0x2de>
 80160b6:	5cf9      	ldrb	r1, [r7, r3]
 80160b8:	1c55      	adds	r5, r2, #1
 80160ba:	f011 0108 	ands.w	r1, r1, #8
 80160be:	d019      	beq.n	80160f4 <__ssvfiscanf_r+0x6c>
 80160c0:	6863      	ldr	r3, [r4, #4]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	dd0f      	ble.n	80160e6 <__ssvfiscanf_r+0x5e>
 80160c6:	6823      	ldr	r3, [r4, #0]
 80160c8:	781a      	ldrb	r2, [r3, #0]
 80160ca:	5cba      	ldrb	r2, [r7, r2]
 80160cc:	0712      	lsls	r2, r2, #28
 80160ce:	d401      	bmi.n	80160d4 <__ssvfiscanf_r+0x4c>
 80160d0:	462a      	mov	r2, r5
 80160d2:	e7ec      	b.n	80160ae <__ssvfiscanf_r+0x26>
 80160d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80160d6:	3301      	adds	r3, #1
 80160d8:	3201      	adds	r2, #1
 80160da:	6023      	str	r3, [r4, #0]
 80160dc:	9245      	str	r2, [sp, #276]	@ 0x114
 80160de:	6862      	ldr	r2, [r4, #4]
 80160e0:	3a01      	subs	r2, #1
 80160e2:	6062      	str	r2, [r4, #4]
 80160e4:	e7ec      	b.n	80160c0 <__ssvfiscanf_r+0x38>
 80160e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80160e8:	4621      	mov	r1, r4
 80160ea:	4630      	mov	r0, r6
 80160ec:	4798      	blx	r3
 80160ee:	2800      	cmp	r0, #0
 80160f0:	d0e9      	beq.n	80160c6 <__ssvfiscanf_r+0x3e>
 80160f2:	e7ed      	b.n	80160d0 <__ssvfiscanf_r+0x48>
 80160f4:	2b25      	cmp	r3, #37	@ 0x25
 80160f6:	d012      	beq.n	801611e <__ssvfiscanf_r+0x96>
 80160f8:	4699      	mov	r9, r3
 80160fa:	6863      	ldr	r3, [r4, #4]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	f340 8094 	ble.w	801622a <__ssvfiscanf_r+0x1a2>
 8016102:	6822      	ldr	r2, [r4, #0]
 8016104:	7813      	ldrb	r3, [r2, #0]
 8016106:	454b      	cmp	r3, r9
 8016108:	f040 812d 	bne.w	8016366 <__ssvfiscanf_r+0x2de>
 801610c:	6863      	ldr	r3, [r4, #4]
 801610e:	3201      	adds	r2, #1
 8016110:	3b01      	subs	r3, #1
 8016112:	6022      	str	r2, [r4, #0]
 8016114:	6063      	str	r3, [r4, #4]
 8016116:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8016118:	3301      	adds	r3, #1
 801611a:	9345      	str	r3, [sp, #276]	@ 0x114
 801611c:	e7d8      	b.n	80160d0 <__ssvfiscanf_r+0x48>
 801611e:	9141      	str	r1, [sp, #260]	@ 0x104
 8016120:	9143      	str	r1, [sp, #268]	@ 0x10c
 8016122:	7853      	ldrb	r3, [r2, #1]
 8016124:	2b2a      	cmp	r3, #42	@ 0x2a
 8016126:	bf04      	itt	eq
 8016128:	2310      	moveq	r3, #16
 801612a:	1c95      	addeq	r5, r2, #2
 801612c:	f04f 020a 	mov.w	r2, #10
 8016130:	bf08      	it	eq
 8016132:	9341      	streq	r3, [sp, #260]	@ 0x104
 8016134:	46a9      	mov	r9, r5
 8016136:	f819 1b01 	ldrb.w	r1, [r9], #1
 801613a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801613e:	2b09      	cmp	r3, #9
 8016140:	d91e      	bls.n	8016180 <__ssvfiscanf_r+0xf8>
 8016142:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 801633c <__ssvfiscanf_r+0x2b4>
 8016146:	2203      	movs	r2, #3
 8016148:	4650      	mov	r0, sl
 801614a:	f000 fc79 	bl	8016a40 <memchr>
 801614e:	b138      	cbz	r0, 8016160 <__ssvfiscanf_r+0xd8>
 8016150:	eba0 000a 	sub.w	r0, r0, sl
 8016154:	2301      	movs	r3, #1
 8016156:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016158:	464d      	mov	r5, r9
 801615a:	4083      	lsls	r3, r0
 801615c:	4313      	orrs	r3, r2
 801615e:	9341      	str	r3, [sp, #260]	@ 0x104
 8016160:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016164:	2b78      	cmp	r3, #120	@ 0x78
 8016166:	d806      	bhi.n	8016176 <__ssvfiscanf_r+0xee>
 8016168:	2b57      	cmp	r3, #87	@ 0x57
 801616a:	d810      	bhi.n	801618e <__ssvfiscanf_r+0x106>
 801616c:	2b25      	cmp	r3, #37	@ 0x25
 801616e:	d0c3      	beq.n	80160f8 <__ssvfiscanf_r+0x70>
 8016170:	d856      	bhi.n	8016220 <__ssvfiscanf_r+0x198>
 8016172:	2b00      	cmp	r3, #0
 8016174:	d064      	beq.n	8016240 <__ssvfiscanf_r+0x1b8>
 8016176:	2303      	movs	r3, #3
 8016178:	9347      	str	r3, [sp, #284]	@ 0x11c
 801617a:	230a      	movs	r3, #10
 801617c:	9342      	str	r3, [sp, #264]	@ 0x108
 801617e:	e077      	b.n	8016270 <__ssvfiscanf_r+0x1e8>
 8016180:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8016182:	464d      	mov	r5, r9
 8016184:	fb02 1103 	mla	r1, r2, r3, r1
 8016188:	3930      	subs	r1, #48	@ 0x30
 801618a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801618c:	e7d2      	b.n	8016134 <__ssvfiscanf_r+0xac>
 801618e:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8016192:	2a20      	cmp	r2, #32
 8016194:	d8ef      	bhi.n	8016176 <__ssvfiscanf_r+0xee>
 8016196:	a101      	add	r1, pc, #4	@ (adr r1, 801619c <__ssvfiscanf_r+0x114>)
 8016198:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801619c:	0801624f 	.word	0x0801624f
 80161a0:	08016177 	.word	0x08016177
 80161a4:	08016177 	.word	0x08016177
 80161a8:	080162a9 	.word	0x080162a9
 80161ac:	08016177 	.word	0x08016177
 80161b0:	08016177 	.word	0x08016177
 80161b4:	08016177 	.word	0x08016177
 80161b8:	08016177 	.word	0x08016177
 80161bc:	08016177 	.word	0x08016177
 80161c0:	08016177 	.word	0x08016177
 80161c4:	08016177 	.word	0x08016177
 80161c8:	080162bf 	.word	0x080162bf
 80161cc:	080162a5 	.word	0x080162a5
 80161d0:	08016227 	.word	0x08016227
 80161d4:	08016227 	.word	0x08016227
 80161d8:	08016227 	.word	0x08016227
 80161dc:	08016177 	.word	0x08016177
 80161e0:	08016261 	.word	0x08016261
 80161e4:	08016177 	.word	0x08016177
 80161e8:	08016177 	.word	0x08016177
 80161ec:	08016177 	.word	0x08016177
 80161f0:	08016177 	.word	0x08016177
 80161f4:	080162cf 	.word	0x080162cf
 80161f8:	08016269 	.word	0x08016269
 80161fc:	08016247 	.word	0x08016247
 8016200:	08016177 	.word	0x08016177
 8016204:	08016177 	.word	0x08016177
 8016208:	080162cb 	.word	0x080162cb
 801620c:	08016177 	.word	0x08016177
 8016210:	080162a5 	.word	0x080162a5
 8016214:	08016177 	.word	0x08016177
 8016218:	08016177 	.word	0x08016177
 801621c:	0801624f 	.word	0x0801624f
 8016220:	3b45      	subs	r3, #69	@ 0x45
 8016222:	2b02      	cmp	r3, #2
 8016224:	d8a7      	bhi.n	8016176 <__ssvfiscanf_r+0xee>
 8016226:	2305      	movs	r3, #5
 8016228:	e021      	b.n	801626e <__ssvfiscanf_r+0x1e6>
 801622a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801622c:	4621      	mov	r1, r4
 801622e:	4630      	mov	r0, r6
 8016230:	4798      	blx	r3
 8016232:	2800      	cmp	r0, #0
 8016234:	f43f af65 	beq.w	8016102 <__ssvfiscanf_r+0x7a>
 8016238:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801623a:	2800      	cmp	r0, #0
 801623c:	f040 808b 	bne.w	8016356 <__ssvfiscanf_r+0x2ce>
 8016240:	f04f 30ff 	mov.w	r0, #4294967295
 8016244:	e08b      	b.n	801635e <__ssvfiscanf_r+0x2d6>
 8016246:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016248:	f042 0220 	orr.w	r2, r2, #32
 801624c:	9241      	str	r2, [sp, #260]	@ 0x104
 801624e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016250:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016254:	9241      	str	r2, [sp, #260]	@ 0x104
 8016256:	2210      	movs	r2, #16
 8016258:	2b6e      	cmp	r3, #110	@ 0x6e
 801625a:	9242      	str	r2, [sp, #264]	@ 0x108
 801625c:	d902      	bls.n	8016264 <__ssvfiscanf_r+0x1dc>
 801625e:	e005      	b.n	801626c <__ssvfiscanf_r+0x1e4>
 8016260:	2300      	movs	r3, #0
 8016262:	9342      	str	r3, [sp, #264]	@ 0x108
 8016264:	2303      	movs	r3, #3
 8016266:	e002      	b.n	801626e <__ssvfiscanf_r+0x1e6>
 8016268:	2308      	movs	r3, #8
 801626a:	9342      	str	r3, [sp, #264]	@ 0x108
 801626c:	2304      	movs	r3, #4
 801626e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8016270:	6863      	ldr	r3, [r4, #4]
 8016272:	2b00      	cmp	r3, #0
 8016274:	dd3a      	ble.n	80162ec <__ssvfiscanf_r+0x264>
 8016276:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016278:	0659      	lsls	r1, r3, #25
 801627a:	d404      	bmi.n	8016286 <__ssvfiscanf_r+0x1fe>
 801627c:	6823      	ldr	r3, [r4, #0]
 801627e:	781a      	ldrb	r2, [r3, #0]
 8016280:	5cba      	ldrb	r2, [r7, r2]
 8016282:	0712      	lsls	r2, r2, #28
 8016284:	d439      	bmi.n	80162fa <__ssvfiscanf_r+0x272>
 8016286:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8016288:	2b02      	cmp	r3, #2
 801628a:	dc48      	bgt.n	801631e <__ssvfiscanf_r+0x296>
 801628c:	466b      	mov	r3, sp
 801628e:	4622      	mov	r2, r4
 8016290:	a941      	add	r1, sp, #260	@ 0x104
 8016292:	4630      	mov	r0, r6
 8016294:	f000 f9fe 	bl	8016694 <_scanf_chars>
 8016298:	2801      	cmp	r0, #1
 801629a:	d064      	beq.n	8016366 <__ssvfiscanf_r+0x2de>
 801629c:	2802      	cmp	r0, #2
 801629e:	f47f af17 	bne.w	80160d0 <__ssvfiscanf_r+0x48>
 80162a2:	e7c9      	b.n	8016238 <__ssvfiscanf_r+0x1b0>
 80162a4:	220a      	movs	r2, #10
 80162a6:	e7d7      	b.n	8016258 <__ssvfiscanf_r+0x1d0>
 80162a8:	4629      	mov	r1, r5
 80162aa:	4640      	mov	r0, r8
 80162ac:	f000 fb3e 	bl	801692c <__sccl>
 80162b0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80162b2:	4605      	mov	r5, r0
 80162b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80162b8:	9341      	str	r3, [sp, #260]	@ 0x104
 80162ba:	2301      	movs	r3, #1
 80162bc:	e7d7      	b.n	801626e <__ssvfiscanf_r+0x1e6>
 80162be:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80162c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80162c4:	9341      	str	r3, [sp, #260]	@ 0x104
 80162c6:	2300      	movs	r3, #0
 80162c8:	e7d1      	b.n	801626e <__ssvfiscanf_r+0x1e6>
 80162ca:	2302      	movs	r3, #2
 80162cc:	e7cf      	b.n	801626e <__ssvfiscanf_r+0x1e6>
 80162ce:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80162d0:	06c3      	lsls	r3, r0, #27
 80162d2:	f53f aefd 	bmi.w	80160d0 <__ssvfiscanf_r+0x48>
 80162d6:	9b00      	ldr	r3, [sp, #0]
 80162d8:	07c0      	lsls	r0, r0, #31
 80162da:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80162dc:	f103 0104 	add.w	r1, r3, #4
 80162e0:	9100      	str	r1, [sp, #0]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	bf4c      	ite	mi
 80162e6:	801a      	strhmi	r2, [r3, #0]
 80162e8:	601a      	strpl	r2, [r3, #0]
 80162ea:	e6f1      	b.n	80160d0 <__ssvfiscanf_r+0x48>
 80162ec:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80162ee:	4621      	mov	r1, r4
 80162f0:	4630      	mov	r0, r6
 80162f2:	4798      	blx	r3
 80162f4:	2800      	cmp	r0, #0
 80162f6:	d0be      	beq.n	8016276 <__ssvfiscanf_r+0x1ee>
 80162f8:	e79e      	b.n	8016238 <__ssvfiscanf_r+0x1b0>
 80162fa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80162fc:	3201      	adds	r2, #1
 80162fe:	9245      	str	r2, [sp, #276]	@ 0x114
 8016300:	6862      	ldr	r2, [r4, #4]
 8016302:	3a01      	subs	r2, #1
 8016304:	2a00      	cmp	r2, #0
 8016306:	6062      	str	r2, [r4, #4]
 8016308:	dd02      	ble.n	8016310 <__ssvfiscanf_r+0x288>
 801630a:	3301      	adds	r3, #1
 801630c:	6023      	str	r3, [r4, #0]
 801630e:	e7b5      	b.n	801627c <__ssvfiscanf_r+0x1f4>
 8016310:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016312:	4621      	mov	r1, r4
 8016314:	4630      	mov	r0, r6
 8016316:	4798      	blx	r3
 8016318:	2800      	cmp	r0, #0
 801631a:	d0af      	beq.n	801627c <__ssvfiscanf_r+0x1f4>
 801631c:	e78c      	b.n	8016238 <__ssvfiscanf_r+0x1b0>
 801631e:	2b04      	cmp	r3, #4
 8016320:	dc0e      	bgt.n	8016340 <__ssvfiscanf_r+0x2b8>
 8016322:	466b      	mov	r3, sp
 8016324:	4622      	mov	r2, r4
 8016326:	a941      	add	r1, sp, #260	@ 0x104
 8016328:	4630      	mov	r0, r6
 801632a:	f000 fa0d 	bl	8016748 <_scanf_i>
 801632e:	e7b3      	b.n	8016298 <__ssvfiscanf_r+0x210>
 8016330:	08017a2e 	.word	0x08017a2e
 8016334:	08015fd9 	.word	0x08015fd9
 8016338:	0801604f 	.word	0x0801604f
 801633c:	080179e5 	.word	0x080179e5
 8016340:	4b0a      	ldr	r3, [pc, #40]	@ (801636c <__ssvfiscanf_r+0x2e4>)
 8016342:	2b00      	cmp	r3, #0
 8016344:	f43f aec4 	beq.w	80160d0 <__ssvfiscanf_r+0x48>
 8016348:	466b      	mov	r3, sp
 801634a:	4622      	mov	r2, r4
 801634c:	a941      	add	r1, sp, #260	@ 0x104
 801634e:	4630      	mov	r0, r6
 8016350:	f3af 8000 	nop.w
 8016354:	e7a0      	b.n	8016298 <__ssvfiscanf_r+0x210>
 8016356:	89a3      	ldrh	r3, [r4, #12]
 8016358:	065b      	lsls	r3, r3, #25
 801635a:	f53f af71 	bmi.w	8016240 <__ssvfiscanf_r+0x1b8>
 801635e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8016362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016366:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8016368:	e7f9      	b.n	801635e <__ssvfiscanf_r+0x2d6>
 801636a:	bf00      	nop
 801636c:	00000000 	.word	0x00000000

08016370 <_printf_common>:
 8016370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016374:	4616      	mov	r6, r2
 8016376:	4698      	mov	r8, r3
 8016378:	688a      	ldr	r2, [r1, #8]
 801637a:	4607      	mov	r7, r0
 801637c:	690b      	ldr	r3, [r1, #16]
 801637e:	460c      	mov	r4, r1
 8016380:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016384:	4293      	cmp	r3, r2
 8016386:	bfb8      	it	lt
 8016388:	4613      	movlt	r3, r2
 801638a:	6033      	str	r3, [r6, #0]
 801638c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016390:	b10a      	cbz	r2, 8016396 <_printf_common+0x26>
 8016392:	3301      	adds	r3, #1
 8016394:	6033      	str	r3, [r6, #0]
 8016396:	6823      	ldr	r3, [r4, #0]
 8016398:	0699      	lsls	r1, r3, #26
 801639a:	bf42      	ittt	mi
 801639c:	6833      	ldrmi	r3, [r6, #0]
 801639e:	3302      	addmi	r3, #2
 80163a0:	6033      	strmi	r3, [r6, #0]
 80163a2:	6825      	ldr	r5, [r4, #0]
 80163a4:	f015 0506 	ands.w	r5, r5, #6
 80163a8:	d106      	bne.n	80163b8 <_printf_common+0x48>
 80163aa:	f104 0a19 	add.w	sl, r4, #25
 80163ae:	68e3      	ldr	r3, [r4, #12]
 80163b0:	6832      	ldr	r2, [r6, #0]
 80163b2:	1a9b      	subs	r3, r3, r2
 80163b4:	42ab      	cmp	r3, r5
 80163b6:	dc2b      	bgt.n	8016410 <_printf_common+0xa0>
 80163b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80163bc:	6822      	ldr	r2, [r4, #0]
 80163be:	3b00      	subs	r3, #0
 80163c0:	bf18      	it	ne
 80163c2:	2301      	movne	r3, #1
 80163c4:	0692      	lsls	r2, r2, #26
 80163c6:	d430      	bmi.n	801642a <_printf_common+0xba>
 80163c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80163cc:	4641      	mov	r1, r8
 80163ce:	4638      	mov	r0, r7
 80163d0:	47c8      	blx	r9
 80163d2:	3001      	adds	r0, #1
 80163d4:	d023      	beq.n	801641e <_printf_common+0xae>
 80163d6:	6823      	ldr	r3, [r4, #0]
 80163d8:	341a      	adds	r4, #26
 80163da:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80163de:	f003 0306 	and.w	r3, r3, #6
 80163e2:	2b04      	cmp	r3, #4
 80163e4:	bf0a      	itet	eq
 80163e6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80163ea:	2500      	movne	r5, #0
 80163ec:	6833      	ldreq	r3, [r6, #0]
 80163ee:	f04f 0600 	mov.w	r6, #0
 80163f2:	bf08      	it	eq
 80163f4:	1aed      	subeq	r5, r5, r3
 80163f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80163fa:	bf08      	it	eq
 80163fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016400:	4293      	cmp	r3, r2
 8016402:	bfc4      	itt	gt
 8016404:	1a9b      	subgt	r3, r3, r2
 8016406:	18ed      	addgt	r5, r5, r3
 8016408:	42b5      	cmp	r5, r6
 801640a:	d11a      	bne.n	8016442 <_printf_common+0xd2>
 801640c:	2000      	movs	r0, #0
 801640e:	e008      	b.n	8016422 <_printf_common+0xb2>
 8016410:	2301      	movs	r3, #1
 8016412:	4652      	mov	r2, sl
 8016414:	4641      	mov	r1, r8
 8016416:	4638      	mov	r0, r7
 8016418:	47c8      	blx	r9
 801641a:	3001      	adds	r0, #1
 801641c:	d103      	bne.n	8016426 <_printf_common+0xb6>
 801641e:	f04f 30ff 	mov.w	r0, #4294967295
 8016422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016426:	3501      	adds	r5, #1
 8016428:	e7c1      	b.n	80163ae <_printf_common+0x3e>
 801642a:	18e1      	adds	r1, r4, r3
 801642c:	1c5a      	adds	r2, r3, #1
 801642e:	2030      	movs	r0, #48	@ 0x30
 8016430:	3302      	adds	r3, #2
 8016432:	4422      	add	r2, r4
 8016434:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016438:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801643c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016440:	e7c2      	b.n	80163c8 <_printf_common+0x58>
 8016442:	2301      	movs	r3, #1
 8016444:	4622      	mov	r2, r4
 8016446:	4641      	mov	r1, r8
 8016448:	4638      	mov	r0, r7
 801644a:	47c8      	blx	r9
 801644c:	3001      	adds	r0, #1
 801644e:	d0e6      	beq.n	801641e <_printf_common+0xae>
 8016450:	3601      	adds	r6, #1
 8016452:	e7d9      	b.n	8016408 <_printf_common+0x98>

08016454 <_printf_i>:
 8016454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016458:	7e0f      	ldrb	r7, [r1, #24]
 801645a:	4691      	mov	r9, r2
 801645c:	4680      	mov	r8, r0
 801645e:	460c      	mov	r4, r1
 8016460:	2f78      	cmp	r7, #120	@ 0x78
 8016462:	469a      	mov	sl, r3
 8016464:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016466:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801646a:	d807      	bhi.n	801647c <_printf_i+0x28>
 801646c:	2f62      	cmp	r7, #98	@ 0x62
 801646e:	d80a      	bhi.n	8016486 <_printf_i+0x32>
 8016470:	2f00      	cmp	r7, #0
 8016472:	f000 80d2 	beq.w	801661a <_printf_i+0x1c6>
 8016476:	2f58      	cmp	r7, #88	@ 0x58
 8016478:	f000 80b9 	beq.w	80165ee <_printf_i+0x19a>
 801647c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016480:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016484:	e03a      	b.n	80164fc <_printf_i+0xa8>
 8016486:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801648a:	2b15      	cmp	r3, #21
 801648c:	d8f6      	bhi.n	801647c <_printf_i+0x28>
 801648e:	a101      	add	r1, pc, #4	@ (adr r1, 8016494 <_printf_i+0x40>)
 8016490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016494:	080164ed 	.word	0x080164ed
 8016498:	08016501 	.word	0x08016501
 801649c:	0801647d 	.word	0x0801647d
 80164a0:	0801647d 	.word	0x0801647d
 80164a4:	0801647d 	.word	0x0801647d
 80164a8:	0801647d 	.word	0x0801647d
 80164ac:	08016501 	.word	0x08016501
 80164b0:	0801647d 	.word	0x0801647d
 80164b4:	0801647d 	.word	0x0801647d
 80164b8:	0801647d 	.word	0x0801647d
 80164bc:	0801647d 	.word	0x0801647d
 80164c0:	08016601 	.word	0x08016601
 80164c4:	0801652b 	.word	0x0801652b
 80164c8:	080165bb 	.word	0x080165bb
 80164cc:	0801647d 	.word	0x0801647d
 80164d0:	0801647d 	.word	0x0801647d
 80164d4:	08016623 	.word	0x08016623
 80164d8:	0801647d 	.word	0x0801647d
 80164dc:	0801652b 	.word	0x0801652b
 80164e0:	0801647d 	.word	0x0801647d
 80164e4:	0801647d 	.word	0x0801647d
 80164e8:	080165c3 	.word	0x080165c3
 80164ec:	6833      	ldr	r3, [r6, #0]
 80164ee:	1d1a      	adds	r2, r3, #4
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	6032      	str	r2, [r6, #0]
 80164f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80164f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80164fc:	2301      	movs	r3, #1
 80164fe:	e09d      	b.n	801663c <_printf_i+0x1e8>
 8016500:	6833      	ldr	r3, [r6, #0]
 8016502:	6820      	ldr	r0, [r4, #0]
 8016504:	1d19      	adds	r1, r3, #4
 8016506:	6031      	str	r1, [r6, #0]
 8016508:	0606      	lsls	r6, r0, #24
 801650a:	d501      	bpl.n	8016510 <_printf_i+0xbc>
 801650c:	681d      	ldr	r5, [r3, #0]
 801650e:	e003      	b.n	8016518 <_printf_i+0xc4>
 8016510:	0645      	lsls	r5, r0, #25
 8016512:	d5fb      	bpl.n	801650c <_printf_i+0xb8>
 8016514:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016518:	2d00      	cmp	r5, #0
 801651a:	da03      	bge.n	8016524 <_printf_i+0xd0>
 801651c:	232d      	movs	r3, #45	@ 0x2d
 801651e:	426d      	negs	r5, r5
 8016520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016524:	4859      	ldr	r0, [pc, #356]	@ (801668c <_printf_i+0x238>)
 8016526:	230a      	movs	r3, #10
 8016528:	e011      	b.n	801654e <_printf_i+0xfa>
 801652a:	6821      	ldr	r1, [r4, #0]
 801652c:	6833      	ldr	r3, [r6, #0]
 801652e:	0608      	lsls	r0, r1, #24
 8016530:	f853 5b04 	ldr.w	r5, [r3], #4
 8016534:	d402      	bmi.n	801653c <_printf_i+0xe8>
 8016536:	0649      	lsls	r1, r1, #25
 8016538:	bf48      	it	mi
 801653a:	b2ad      	uxthmi	r5, r5
 801653c:	2f6f      	cmp	r7, #111	@ 0x6f
 801653e:	6033      	str	r3, [r6, #0]
 8016540:	4852      	ldr	r0, [pc, #328]	@ (801668c <_printf_i+0x238>)
 8016542:	bf14      	ite	ne
 8016544:	230a      	movne	r3, #10
 8016546:	2308      	moveq	r3, #8
 8016548:	2100      	movs	r1, #0
 801654a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801654e:	6866      	ldr	r6, [r4, #4]
 8016550:	2e00      	cmp	r6, #0
 8016552:	60a6      	str	r6, [r4, #8]
 8016554:	bfa2      	ittt	ge
 8016556:	6821      	ldrge	r1, [r4, #0]
 8016558:	f021 0104 	bicge.w	r1, r1, #4
 801655c:	6021      	strge	r1, [r4, #0]
 801655e:	b90d      	cbnz	r5, 8016564 <_printf_i+0x110>
 8016560:	2e00      	cmp	r6, #0
 8016562:	d04b      	beq.n	80165fc <_printf_i+0x1a8>
 8016564:	4616      	mov	r6, r2
 8016566:	fbb5 f1f3 	udiv	r1, r5, r3
 801656a:	fb03 5711 	mls	r7, r3, r1, r5
 801656e:	5dc7      	ldrb	r7, [r0, r7]
 8016570:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016574:	462f      	mov	r7, r5
 8016576:	460d      	mov	r5, r1
 8016578:	42bb      	cmp	r3, r7
 801657a:	d9f4      	bls.n	8016566 <_printf_i+0x112>
 801657c:	2b08      	cmp	r3, #8
 801657e:	d10b      	bne.n	8016598 <_printf_i+0x144>
 8016580:	6823      	ldr	r3, [r4, #0]
 8016582:	07df      	lsls	r7, r3, #31
 8016584:	d508      	bpl.n	8016598 <_printf_i+0x144>
 8016586:	6923      	ldr	r3, [r4, #16]
 8016588:	6861      	ldr	r1, [r4, #4]
 801658a:	4299      	cmp	r1, r3
 801658c:	bfde      	ittt	le
 801658e:	2330      	movle	r3, #48	@ 0x30
 8016590:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016594:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016598:	1b92      	subs	r2, r2, r6
 801659a:	6122      	str	r2, [r4, #16]
 801659c:	464b      	mov	r3, r9
 801659e:	aa03      	add	r2, sp, #12
 80165a0:	4621      	mov	r1, r4
 80165a2:	4640      	mov	r0, r8
 80165a4:	f8cd a000 	str.w	sl, [sp]
 80165a8:	f7ff fee2 	bl	8016370 <_printf_common>
 80165ac:	3001      	adds	r0, #1
 80165ae:	d14a      	bne.n	8016646 <_printf_i+0x1f2>
 80165b0:	f04f 30ff 	mov.w	r0, #4294967295
 80165b4:	b004      	add	sp, #16
 80165b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165ba:	6823      	ldr	r3, [r4, #0]
 80165bc:	f043 0320 	orr.w	r3, r3, #32
 80165c0:	6023      	str	r3, [r4, #0]
 80165c2:	2778      	movs	r7, #120	@ 0x78
 80165c4:	4832      	ldr	r0, [pc, #200]	@ (8016690 <_printf_i+0x23c>)
 80165c6:	6823      	ldr	r3, [r4, #0]
 80165c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80165cc:	061f      	lsls	r7, r3, #24
 80165ce:	6831      	ldr	r1, [r6, #0]
 80165d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80165d4:	d402      	bmi.n	80165dc <_printf_i+0x188>
 80165d6:	065f      	lsls	r7, r3, #25
 80165d8:	bf48      	it	mi
 80165da:	b2ad      	uxthmi	r5, r5
 80165dc:	6031      	str	r1, [r6, #0]
 80165de:	07d9      	lsls	r1, r3, #31
 80165e0:	bf44      	itt	mi
 80165e2:	f043 0320 	orrmi.w	r3, r3, #32
 80165e6:	6023      	strmi	r3, [r4, #0]
 80165e8:	b11d      	cbz	r5, 80165f2 <_printf_i+0x19e>
 80165ea:	2310      	movs	r3, #16
 80165ec:	e7ac      	b.n	8016548 <_printf_i+0xf4>
 80165ee:	4827      	ldr	r0, [pc, #156]	@ (801668c <_printf_i+0x238>)
 80165f0:	e7e9      	b.n	80165c6 <_printf_i+0x172>
 80165f2:	6823      	ldr	r3, [r4, #0]
 80165f4:	f023 0320 	bic.w	r3, r3, #32
 80165f8:	6023      	str	r3, [r4, #0]
 80165fa:	e7f6      	b.n	80165ea <_printf_i+0x196>
 80165fc:	4616      	mov	r6, r2
 80165fe:	e7bd      	b.n	801657c <_printf_i+0x128>
 8016600:	6833      	ldr	r3, [r6, #0]
 8016602:	6825      	ldr	r5, [r4, #0]
 8016604:	1d18      	adds	r0, r3, #4
 8016606:	6961      	ldr	r1, [r4, #20]
 8016608:	6030      	str	r0, [r6, #0]
 801660a:	062e      	lsls	r6, r5, #24
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	d501      	bpl.n	8016614 <_printf_i+0x1c0>
 8016610:	6019      	str	r1, [r3, #0]
 8016612:	e002      	b.n	801661a <_printf_i+0x1c6>
 8016614:	0668      	lsls	r0, r5, #25
 8016616:	d5fb      	bpl.n	8016610 <_printf_i+0x1bc>
 8016618:	8019      	strh	r1, [r3, #0]
 801661a:	2300      	movs	r3, #0
 801661c:	4616      	mov	r6, r2
 801661e:	6123      	str	r3, [r4, #16]
 8016620:	e7bc      	b.n	801659c <_printf_i+0x148>
 8016622:	6833      	ldr	r3, [r6, #0]
 8016624:	2100      	movs	r1, #0
 8016626:	1d1a      	adds	r2, r3, #4
 8016628:	6032      	str	r2, [r6, #0]
 801662a:	681e      	ldr	r6, [r3, #0]
 801662c:	6862      	ldr	r2, [r4, #4]
 801662e:	4630      	mov	r0, r6
 8016630:	f000 fa06 	bl	8016a40 <memchr>
 8016634:	b108      	cbz	r0, 801663a <_printf_i+0x1e6>
 8016636:	1b80      	subs	r0, r0, r6
 8016638:	6060      	str	r0, [r4, #4]
 801663a:	6863      	ldr	r3, [r4, #4]
 801663c:	6123      	str	r3, [r4, #16]
 801663e:	2300      	movs	r3, #0
 8016640:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016644:	e7aa      	b.n	801659c <_printf_i+0x148>
 8016646:	6923      	ldr	r3, [r4, #16]
 8016648:	4632      	mov	r2, r6
 801664a:	4649      	mov	r1, r9
 801664c:	4640      	mov	r0, r8
 801664e:	47d0      	blx	sl
 8016650:	3001      	adds	r0, #1
 8016652:	d0ad      	beq.n	80165b0 <_printf_i+0x15c>
 8016654:	6823      	ldr	r3, [r4, #0]
 8016656:	079b      	lsls	r3, r3, #30
 8016658:	d413      	bmi.n	8016682 <_printf_i+0x22e>
 801665a:	68e0      	ldr	r0, [r4, #12]
 801665c:	9b03      	ldr	r3, [sp, #12]
 801665e:	4298      	cmp	r0, r3
 8016660:	bfb8      	it	lt
 8016662:	4618      	movlt	r0, r3
 8016664:	e7a6      	b.n	80165b4 <_printf_i+0x160>
 8016666:	2301      	movs	r3, #1
 8016668:	4632      	mov	r2, r6
 801666a:	4649      	mov	r1, r9
 801666c:	4640      	mov	r0, r8
 801666e:	47d0      	blx	sl
 8016670:	3001      	adds	r0, #1
 8016672:	d09d      	beq.n	80165b0 <_printf_i+0x15c>
 8016674:	3501      	adds	r5, #1
 8016676:	68e3      	ldr	r3, [r4, #12]
 8016678:	9903      	ldr	r1, [sp, #12]
 801667a:	1a5b      	subs	r3, r3, r1
 801667c:	42ab      	cmp	r3, r5
 801667e:	dcf2      	bgt.n	8016666 <_printf_i+0x212>
 8016680:	e7eb      	b.n	801665a <_printf_i+0x206>
 8016682:	2500      	movs	r5, #0
 8016684:	f104 0619 	add.w	r6, r4, #25
 8016688:	e7f5      	b.n	8016676 <_printf_i+0x222>
 801668a:	bf00      	nop
 801668c:	080179f0 	.word	0x080179f0
 8016690:	08017a01 	.word	0x08017a01

08016694 <_scanf_chars>:
 8016694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016698:	4615      	mov	r5, r2
 801669a:	688a      	ldr	r2, [r1, #8]
 801669c:	4680      	mov	r8, r0
 801669e:	460c      	mov	r4, r1
 80166a0:	b932      	cbnz	r2, 80166b0 <_scanf_chars+0x1c>
 80166a2:	698a      	ldr	r2, [r1, #24]
 80166a4:	2a00      	cmp	r2, #0
 80166a6:	bf14      	ite	ne
 80166a8:	f04f 32ff 	movne.w	r2, #4294967295
 80166ac:	2201      	moveq	r2, #1
 80166ae:	608a      	str	r2, [r1, #8]
 80166b0:	6822      	ldr	r2, [r4, #0]
 80166b2:	2700      	movs	r7, #0
 80166b4:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8016744 <_scanf_chars+0xb0>
 80166b8:	06d1      	lsls	r1, r2, #27
 80166ba:	bf5f      	itttt	pl
 80166bc:	681a      	ldrpl	r2, [r3, #0]
 80166be:	1d11      	addpl	r1, r2, #4
 80166c0:	6019      	strpl	r1, [r3, #0]
 80166c2:	6816      	ldrpl	r6, [r2, #0]
 80166c4:	69a0      	ldr	r0, [r4, #24]
 80166c6:	b188      	cbz	r0, 80166ec <_scanf_chars+0x58>
 80166c8:	2801      	cmp	r0, #1
 80166ca:	d107      	bne.n	80166dc <_scanf_chars+0x48>
 80166cc:	682b      	ldr	r3, [r5, #0]
 80166ce:	781a      	ldrb	r2, [r3, #0]
 80166d0:	6963      	ldr	r3, [r4, #20]
 80166d2:	5c9b      	ldrb	r3, [r3, r2]
 80166d4:	b953      	cbnz	r3, 80166ec <_scanf_chars+0x58>
 80166d6:	2f00      	cmp	r7, #0
 80166d8:	d031      	beq.n	801673e <_scanf_chars+0xaa>
 80166da:	e022      	b.n	8016722 <_scanf_chars+0x8e>
 80166dc:	2802      	cmp	r0, #2
 80166de:	d120      	bne.n	8016722 <_scanf_chars+0x8e>
 80166e0:	682b      	ldr	r3, [r5, #0]
 80166e2:	781b      	ldrb	r3, [r3, #0]
 80166e4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80166e8:	071b      	lsls	r3, r3, #28
 80166ea:	d41a      	bmi.n	8016722 <_scanf_chars+0x8e>
 80166ec:	6823      	ldr	r3, [r4, #0]
 80166ee:	3701      	adds	r7, #1
 80166f0:	06da      	lsls	r2, r3, #27
 80166f2:	bf5e      	ittt	pl
 80166f4:	682b      	ldrpl	r3, [r5, #0]
 80166f6:	781b      	ldrbpl	r3, [r3, #0]
 80166f8:	f806 3b01 	strbpl.w	r3, [r6], #1
 80166fc:	682a      	ldr	r2, [r5, #0]
 80166fe:	686b      	ldr	r3, [r5, #4]
 8016700:	3201      	adds	r2, #1
 8016702:	3b01      	subs	r3, #1
 8016704:	602a      	str	r2, [r5, #0]
 8016706:	68a2      	ldr	r2, [r4, #8]
 8016708:	606b      	str	r3, [r5, #4]
 801670a:	3a01      	subs	r2, #1
 801670c:	60a2      	str	r2, [r4, #8]
 801670e:	b142      	cbz	r2, 8016722 <_scanf_chars+0x8e>
 8016710:	2b00      	cmp	r3, #0
 8016712:	dcd7      	bgt.n	80166c4 <_scanf_chars+0x30>
 8016714:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016718:	4629      	mov	r1, r5
 801671a:	4640      	mov	r0, r8
 801671c:	4798      	blx	r3
 801671e:	2800      	cmp	r0, #0
 8016720:	d0d0      	beq.n	80166c4 <_scanf_chars+0x30>
 8016722:	6823      	ldr	r3, [r4, #0]
 8016724:	f013 0310 	ands.w	r3, r3, #16
 8016728:	d105      	bne.n	8016736 <_scanf_chars+0xa2>
 801672a:	68e2      	ldr	r2, [r4, #12]
 801672c:	3201      	adds	r2, #1
 801672e:	60e2      	str	r2, [r4, #12]
 8016730:	69a2      	ldr	r2, [r4, #24]
 8016732:	b102      	cbz	r2, 8016736 <_scanf_chars+0xa2>
 8016734:	7033      	strb	r3, [r6, #0]
 8016736:	6923      	ldr	r3, [r4, #16]
 8016738:	2000      	movs	r0, #0
 801673a:	443b      	add	r3, r7
 801673c:	6123      	str	r3, [r4, #16]
 801673e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016742:	bf00      	nop
 8016744:	08017a2e 	.word	0x08017a2e

08016748 <_scanf_i>:
 8016748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801674c:	4698      	mov	r8, r3
 801674e:	b087      	sub	sp, #28
 8016750:	4b72      	ldr	r3, [pc, #456]	@ (801691c <_scanf_i+0x1d4>)
 8016752:	460c      	mov	r4, r1
 8016754:	4682      	mov	sl, r0
 8016756:	4616      	mov	r6, r2
 8016758:	4627      	mov	r7, r4
 801675a:	f04f 0b00 	mov.w	fp, #0
 801675e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016762:	ab03      	add	r3, sp, #12
 8016764:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016768:	4b6d      	ldr	r3, [pc, #436]	@ (8016920 <_scanf_i+0x1d8>)
 801676a:	69a1      	ldr	r1, [r4, #24]
 801676c:	4a6d      	ldr	r2, [pc, #436]	@ (8016924 <_scanf_i+0x1dc>)
 801676e:	2903      	cmp	r1, #3
 8016770:	bf08      	it	eq
 8016772:	461a      	moveq	r2, r3
 8016774:	68a3      	ldr	r3, [r4, #8]
 8016776:	9201      	str	r2, [sp, #4]
 8016778:	1e5a      	subs	r2, r3, #1
 801677a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801677e:	bf89      	itett	hi
 8016780:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8016784:	f04f 0900 	movls.w	r9, #0
 8016788:	eb03 0905 	addhi.w	r9, r3, r5
 801678c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8016790:	bf88      	it	hi
 8016792:	60a3      	strhi	r3, [r4, #8]
 8016794:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016798:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801679c:	463d      	mov	r5, r7
 801679e:	6023      	str	r3, [r4, #0]
 80167a0:	6831      	ldr	r1, [r6, #0]
 80167a2:	ab03      	add	r3, sp, #12
 80167a4:	2202      	movs	r2, #2
 80167a6:	7809      	ldrb	r1, [r1, #0]
 80167a8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80167ac:	f000 f948 	bl	8016a40 <memchr>
 80167b0:	b328      	cbz	r0, 80167fe <_scanf_i+0xb6>
 80167b2:	f1bb 0f01 	cmp.w	fp, #1
 80167b6:	d159      	bne.n	801686c <_scanf_i+0x124>
 80167b8:	6862      	ldr	r2, [r4, #4]
 80167ba:	b92a      	cbnz	r2, 80167c8 <_scanf_i+0x80>
 80167bc:	6822      	ldr	r2, [r4, #0]
 80167be:	2108      	movs	r1, #8
 80167c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80167c4:	6061      	str	r1, [r4, #4]
 80167c6:	6022      	str	r2, [r4, #0]
 80167c8:	6822      	ldr	r2, [r4, #0]
 80167ca:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80167ce:	6022      	str	r2, [r4, #0]
 80167d0:	68a2      	ldr	r2, [r4, #8]
 80167d2:	1e51      	subs	r1, r2, #1
 80167d4:	60a1      	str	r1, [r4, #8]
 80167d6:	b192      	cbz	r2, 80167fe <_scanf_i+0xb6>
 80167d8:	6832      	ldr	r2, [r6, #0]
 80167da:	1c51      	adds	r1, r2, #1
 80167dc:	6031      	str	r1, [r6, #0]
 80167de:	7812      	ldrb	r2, [r2, #0]
 80167e0:	f805 2b01 	strb.w	r2, [r5], #1
 80167e4:	6872      	ldr	r2, [r6, #4]
 80167e6:	3a01      	subs	r2, #1
 80167e8:	2a00      	cmp	r2, #0
 80167ea:	6072      	str	r2, [r6, #4]
 80167ec:	dc07      	bgt.n	80167fe <_scanf_i+0xb6>
 80167ee:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80167f2:	4631      	mov	r1, r6
 80167f4:	4650      	mov	r0, sl
 80167f6:	4790      	blx	r2
 80167f8:	2800      	cmp	r0, #0
 80167fa:	f040 8085 	bne.w	8016908 <_scanf_i+0x1c0>
 80167fe:	f10b 0b01 	add.w	fp, fp, #1
 8016802:	f1bb 0f03 	cmp.w	fp, #3
 8016806:	d1cb      	bne.n	80167a0 <_scanf_i+0x58>
 8016808:	6863      	ldr	r3, [r4, #4]
 801680a:	b90b      	cbnz	r3, 8016810 <_scanf_i+0xc8>
 801680c:	230a      	movs	r3, #10
 801680e:	6063      	str	r3, [r4, #4]
 8016810:	6863      	ldr	r3, [r4, #4]
 8016812:	f04f 0b00 	mov.w	fp, #0
 8016816:	4944      	ldr	r1, [pc, #272]	@ (8016928 <_scanf_i+0x1e0>)
 8016818:	6960      	ldr	r0, [r4, #20]
 801681a:	1ac9      	subs	r1, r1, r3
 801681c:	f000 f886 	bl	801692c <__sccl>
 8016820:	68a3      	ldr	r3, [r4, #8]
 8016822:	6822      	ldr	r2, [r4, #0]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d03d      	beq.n	80168a4 <_scanf_i+0x15c>
 8016828:	6831      	ldr	r1, [r6, #0]
 801682a:	6960      	ldr	r0, [r4, #20]
 801682c:	f891 c000 	ldrb.w	ip, [r1]
 8016830:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016834:	2800      	cmp	r0, #0
 8016836:	d035      	beq.n	80168a4 <_scanf_i+0x15c>
 8016838:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801683c:	d124      	bne.n	8016888 <_scanf_i+0x140>
 801683e:	0510      	lsls	r0, r2, #20
 8016840:	d522      	bpl.n	8016888 <_scanf_i+0x140>
 8016842:	f10b 0b01 	add.w	fp, fp, #1
 8016846:	f1b9 0f00 	cmp.w	r9, #0
 801684a:	d003      	beq.n	8016854 <_scanf_i+0x10c>
 801684c:	3301      	adds	r3, #1
 801684e:	f109 39ff 	add.w	r9, r9, #4294967295
 8016852:	60a3      	str	r3, [r4, #8]
 8016854:	6873      	ldr	r3, [r6, #4]
 8016856:	3b01      	subs	r3, #1
 8016858:	2b00      	cmp	r3, #0
 801685a:	6073      	str	r3, [r6, #4]
 801685c:	dd1b      	ble.n	8016896 <_scanf_i+0x14e>
 801685e:	6833      	ldr	r3, [r6, #0]
 8016860:	3301      	adds	r3, #1
 8016862:	6033      	str	r3, [r6, #0]
 8016864:	68a3      	ldr	r3, [r4, #8]
 8016866:	3b01      	subs	r3, #1
 8016868:	60a3      	str	r3, [r4, #8]
 801686a:	e7d9      	b.n	8016820 <_scanf_i+0xd8>
 801686c:	f1bb 0f02 	cmp.w	fp, #2
 8016870:	d1ae      	bne.n	80167d0 <_scanf_i+0x88>
 8016872:	6822      	ldr	r2, [r4, #0]
 8016874:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8016878:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801687c:	d1bf      	bne.n	80167fe <_scanf_i+0xb6>
 801687e:	2110      	movs	r1, #16
 8016880:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016884:	6061      	str	r1, [r4, #4]
 8016886:	e7a2      	b.n	80167ce <_scanf_i+0x86>
 8016888:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801688c:	6022      	str	r2, [r4, #0]
 801688e:	780b      	ldrb	r3, [r1, #0]
 8016890:	f805 3b01 	strb.w	r3, [r5], #1
 8016894:	e7de      	b.n	8016854 <_scanf_i+0x10c>
 8016896:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801689a:	4631      	mov	r1, r6
 801689c:	4650      	mov	r0, sl
 801689e:	4798      	blx	r3
 80168a0:	2800      	cmp	r0, #0
 80168a2:	d0df      	beq.n	8016864 <_scanf_i+0x11c>
 80168a4:	6823      	ldr	r3, [r4, #0]
 80168a6:	05d9      	lsls	r1, r3, #23
 80168a8:	d50d      	bpl.n	80168c6 <_scanf_i+0x17e>
 80168aa:	42bd      	cmp	r5, r7
 80168ac:	d909      	bls.n	80168c2 <_scanf_i+0x17a>
 80168ae:	f105 39ff 	add.w	r9, r5, #4294967295
 80168b2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80168b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80168ba:	4632      	mov	r2, r6
 80168bc:	464d      	mov	r5, r9
 80168be:	4650      	mov	r0, sl
 80168c0:	4798      	blx	r3
 80168c2:	42bd      	cmp	r5, r7
 80168c4:	d028      	beq.n	8016918 <_scanf_i+0x1d0>
 80168c6:	6822      	ldr	r2, [r4, #0]
 80168c8:	f012 0210 	ands.w	r2, r2, #16
 80168cc:	d113      	bne.n	80168f6 <_scanf_i+0x1ae>
 80168ce:	702a      	strb	r2, [r5, #0]
 80168d0:	4639      	mov	r1, r7
 80168d2:	6863      	ldr	r3, [r4, #4]
 80168d4:	4650      	mov	r0, sl
 80168d6:	9e01      	ldr	r6, [sp, #4]
 80168d8:	47b0      	blx	r6
 80168da:	f8d8 3000 	ldr.w	r3, [r8]
 80168de:	6821      	ldr	r1, [r4, #0]
 80168e0:	1d1a      	adds	r2, r3, #4
 80168e2:	f011 0f20 	tst.w	r1, #32
 80168e6:	f8c8 2000 	str.w	r2, [r8]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	d00f      	beq.n	801690e <_scanf_i+0x1c6>
 80168ee:	6018      	str	r0, [r3, #0]
 80168f0:	68e3      	ldr	r3, [r4, #12]
 80168f2:	3301      	adds	r3, #1
 80168f4:	60e3      	str	r3, [r4, #12]
 80168f6:	1bed      	subs	r5, r5, r7
 80168f8:	6923      	ldr	r3, [r4, #16]
 80168fa:	2000      	movs	r0, #0
 80168fc:	445d      	add	r5, fp
 80168fe:	442b      	add	r3, r5
 8016900:	6123      	str	r3, [r4, #16]
 8016902:	b007      	add	sp, #28
 8016904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016908:	f04f 0b00 	mov.w	fp, #0
 801690c:	e7ca      	b.n	80168a4 <_scanf_i+0x15c>
 801690e:	07ca      	lsls	r2, r1, #31
 8016910:	bf4c      	ite	mi
 8016912:	8018      	strhmi	r0, [r3, #0]
 8016914:	6018      	strpl	r0, [r3, #0]
 8016916:	e7eb      	b.n	80168f0 <_scanf_i+0x1a8>
 8016918:	2001      	movs	r0, #1
 801691a:	e7f2      	b.n	8016902 <_scanf_i+0x1ba>
 801691c:	08016cd4 	.word	0x08016cd4
 8016920:	08016bc9 	.word	0x08016bc9
 8016924:	08016ca9 	.word	0x08016ca9
 8016928:	08017a22 	.word	0x08017a22

0801692c <__sccl>:
 801692c:	b570      	push	{r4, r5, r6, lr}
 801692e:	780b      	ldrb	r3, [r1, #0]
 8016930:	4604      	mov	r4, r0
 8016932:	3801      	subs	r0, #1
 8016934:	2b5e      	cmp	r3, #94	@ 0x5e
 8016936:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801693a:	bf13      	iteet	ne
 801693c:	1c4a      	addne	r2, r1, #1
 801693e:	1c8a      	addeq	r2, r1, #2
 8016940:	784b      	ldrbeq	r3, [r1, #1]
 8016942:	2100      	movne	r1, #0
 8016944:	bf08      	it	eq
 8016946:	2101      	moveq	r1, #1
 8016948:	f800 1f01 	strb.w	r1, [r0, #1]!
 801694c:	42a8      	cmp	r0, r5
 801694e:	d1fb      	bne.n	8016948 <__sccl+0x1c>
 8016950:	b90b      	cbnz	r3, 8016956 <__sccl+0x2a>
 8016952:	1e50      	subs	r0, r2, #1
 8016954:	bd70      	pop	{r4, r5, r6, pc}
 8016956:	f081 0101 	eor.w	r1, r1, #1
 801695a:	4610      	mov	r0, r2
 801695c:	54e1      	strb	r1, [r4, r3]
 801695e:	4602      	mov	r2, r0
 8016960:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016964:	2d2d      	cmp	r5, #45	@ 0x2d
 8016966:	d005      	beq.n	8016974 <__sccl+0x48>
 8016968:	2d5d      	cmp	r5, #93	@ 0x5d
 801696a:	d016      	beq.n	801699a <__sccl+0x6e>
 801696c:	2d00      	cmp	r5, #0
 801696e:	d0f1      	beq.n	8016954 <__sccl+0x28>
 8016970:	462b      	mov	r3, r5
 8016972:	e7f2      	b.n	801695a <__sccl+0x2e>
 8016974:	7846      	ldrb	r6, [r0, #1]
 8016976:	2e5d      	cmp	r6, #93	@ 0x5d
 8016978:	d0fa      	beq.n	8016970 <__sccl+0x44>
 801697a:	42b3      	cmp	r3, r6
 801697c:	dcf8      	bgt.n	8016970 <__sccl+0x44>
 801697e:	3002      	adds	r0, #2
 8016980:	461a      	mov	r2, r3
 8016982:	3201      	adds	r2, #1
 8016984:	4296      	cmp	r6, r2
 8016986:	54a1      	strb	r1, [r4, r2]
 8016988:	dcfb      	bgt.n	8016982 <__sccl+0x56>
 801698a:	1af2      	subs	r2, r6, r3
 801698c:	1c5d      	adds	r5, r3, #1
 801698e:	3a01      	subs	r2, #1
 8016990:	42b3      	cmp	r3, r6
 8016992:	bfa8      	it	ge
 8016994:	2200      	movge	r2, #0
 8016996:	18ab      	adds	r3, r5, r2
 8016998:	e7e1      	b.n	801695e <__sccl+0x32>
 801699a:	4610      	mov	r0, r2
 801699c:	e7da      	b.n	8016954 <__sccl+0x28>

0801699e <__submore>:
 801699e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169a2:	460c      	mov	r4, r1
 80169a4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80169a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80169aa:	4299      	cmp	r1, r3
 80169ac:	d11a      	bne.n	80169e4 <__submore+0x46>
 80169ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80169b2:	f7ff f80d 	bl	80159d0 <_malloc_r>
 80169b6:	b918      	cbnz	r0, 80169c0 <__submore+0x22>
 80169b8:	f04f 30ff 	mov.w	r0, #4294967295
 80169bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80169c4:	6360      	str	r0, [r4, #52]	@ 0x34
 80169c6:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80169ca:	63a3      	str	r3, [r4, #56]	@ 0x38
 80169cc:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80169d0:	7083      	strb	r3, [r0, #2]
 80169d2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80169d6:	7043      	strb	r3, [r0, #1]
 80169d8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80169dc:	7003      	strb	r3, [r0, #0]
 80169de:	6020      	str	r0, [r4, #0]
 80169e0:	2000      	movs	r0, #0
 80169e2:	e7eb      	b.n	80169bc <__submore+0x1e>
 80169e4:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80169e6:	0077      	lsls	r7, r6, #1
 80169e8:	463a      	mov	r2, r7
 80169ea:	f000 f844 	bl	8016a76 <_realloc_r>
 80169ee:	4605      	mov	r5, r0
 80169f0:	2800      	cmp	r0, #0
 80169f2:	d0e1      	beq.n	80169b8 <__submore+0x1a>
 80169f4:	eb00 0806 	add.w	r8, r0, r6
 80169f8:	4601      	mov	r1, r0
 80169fa:	4632      	mov	r2, r6
 80169fc:	4640      	mov	r0, r8
 80169fe:	f000 f82d 	bl	8016a5c <memcpy>
 8016a02:	f8c4 8000 	str.w	r8, [r4]
 8016a06:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8016a0a:	e7e9      	b.n	80169e0 <__submore+0x42>

08016a0c <memmove>:
 8016a0c:	4288      	cmp	r0, r1
 8016a0e:	b510      	push	{r4, lr}
 8016a10:	eb01 0402 	add.w	r4, r1, r2
 8016a14:	d902      	bls.n	8016a1c <memmove+0x10>
 8016a16:	4284      	cmp	r4, r0
 8016a18:	4623      	mov	r3, r4
 8016a1a:	d807      	bhi.n	8016a2c <memmove+0x20>
 8016a1c:	1e43      	subs	r3, r0, #1
 8016a1e:	42a1      	cmp	r1, r4
 8016a20:	d008      	beq.n	8016a34 <memmove+0x28>
 8016a22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016a26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016a2a:	e7f8      	b.n	8016a1e <memmove+0x12>
 8016a2c:	4402      	add	r2, r0
 8016a2e:	4601      	mov	r1, r0
 8016a30:	428a      	cmp	r2, r1
 8016a32:	d100      	bne.n	8016a36 <memmove+0x2a>
 8016a34:	bd10      	pop	{r4, pc}
 8016a36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016a3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016a3e:	e7f7      	b.n	8016a30 <memmove+0x24>

08016a40 <memchr>:
 8016a40:	b2c9      	uxtb	r1, r1
 8016a42:	4603      	mov	r3, r0
 8016a44:	4402      	add	r2, r0
 8016a46:	b510      	push	{r4, lr}
 8016a48:	4293      	cmp	r3, r2
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	d101      	bne.n	8016a52 <memchr+0x12>
 8016a4e:	2000      	movs	r0, #0
 8016a50:	e003      	b.n	8016a5a <memchr+0x1a>
 8016a52:	7804      	ldrb	r4, [r0, #0]
 8016a54:	3301      	adds	r3, #1
 8016a56:	428c      	cmp	r4, r1
 8016a58:	d1f6      	bne.n	8016a48 <memchr+0x8>
 8016a5a:	bd10      	pop	{r4, pc}

08016a5c <memcpy>:
 8016a5c:	440a      	add	r2, r1
 8016a5e:	1e43      	subs	r3, r0, #1
 8016a60:	4291      	cmp	r1, r2
 8016a62:	d100      	bne.n	8016a66 <memcpy+0xa>
 8016a64:	4770      	bx	lr
 8016a66:	b510      	push	{r4, lr}
 8016a68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016a6c:	4291      	cmp	r1, r2
 8016a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016a72:	d1f9      	bne.n	8016a68 <memcpy+0xc>
 8016a74:	bd10      	pop	{r4, pc}

08016a76 <_realloc_r>:
 8016a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a7a:	4680      	mov	r8, r0
 8016a7c:	4615      	mov	r5, r2
 8016a7e:	460c      	mov	r4, r1
 8016a80:	b921      	cbnz	r1, 8016a8c <_realloc_r+0x16>
 8016a82:	4611      	mov	r1, r2
 8016a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a88:	f7fe bfa2 	b.w	80159d0 <_malloc_r>
 8016a8c:	b92a      	cbnz	r2, 8016a9a <_realloc_r+0x24>
 8016a8e:	f7ff f901 	bl	8015c94 <_free_r>
 8016a92:	2400      	movs	r4, #0
 8016a94:	4620      	mov	r0, r4
 8016a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a9a:	f000 f907 	bl	8016cac <_malloc_usable_size_r>
 8016a9e:	4285      	cmp	r5, r0
 8016aa0:	4606      	mov	r6, r0
 8016aa2:	d802      	bhi.n	8016aaa <_realloc_r+0x34>
 8016aa4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016aa8:	d8f4      	bhi.n	8016a94 <_realloc_r+0x1e>
 8016aaa:	4629      	mov	r1, r5
 8016aac:	4640      	mov	r0, r8
 8016aae:	f7fe ff8f 	bl	80159d0 <_malloc_r>
 8016ab2:	4607      	mov	r7, r0
 8016ab4:	2800      	cmp	r0, #0
 8016ab6:	d0ec      	beq.n	8016a92 <_realloc_r+0x1c>
 8016ab8:	42b5      	cmp	r5, r6
 8016aba:	462a      	mov	r2, r5
 8016abc:	4621      	mov	r1, r4
 8016abe:	bf28      	it	cs
 8016ac0:	4632      	movcs	r2, r6
 8016ac2:	f7ff ffcb 	bl	8016a5c <memcpy>
 8016ac6:	4621      	mov	r1, r4
 8016ac8:	4640      	mov	r0, r8
 8016aca:	463c      	mov	r4, r7
 8016acc:	f7ff f8e2 	bl	8015c94 <_free_r>
 8016ad0:	e7e0      	b.n	8016a94 <_realloc_r+0x1e>
	...

08016ad4 <_strtol_l.constprop.0>:
 8016ad4:	2b24      	cmp	r3, #36	@ 0x24
 8016ad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ada:	4686      	mov	lr, r0
 8016adc:	4690      	mov	r8, r2
 8016ade:	d801      	bhi.n	8016ae4 <_strtol_l.constprop.0+0x10>
 8016ae0:	2b01      	cmp	r3, #1
 8016ae2:	d106      	bne.n	8016af2 <_strtol_l.constprop.0+0x1e>
 8016ae4:	f7ff f89e 	bl	8015c24 <__errno>
 8016ae8:	2316      	movs	r3, #22
 8016aea:	6003      	str	r3, [r0, #0]
 8016aec:	2000      	movs	r0, #0
 8016aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016af2:	460d      	mov	r5, r1
 8016af4:	4833      	ldr	r0, [pc, #204]	@ (8016bc4 <_strtol_l.constprop.0+0xf0>)
 8016af6:	462a      	mov	r2, r5
 8016af8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016afc:	5d06      	ldrb	r6, [r0, r4]
 8016afe:	f016 0608 	ands.w	r6, r6, #8
 8016b02:	d1f8      	bne.n	8016af6 <_strtol_l.constprop.0+0x22>
 8016b04:	2c2d      	cmp	r4, #45	@ 0x2d
 8016b06:	d12d      	bne.n	8016b64 <_strtol_l.constprop.0+0x90>
 8016b08:	782c      	ldrb	r4, [r5, #0]
 8016b0a:	2601      	movs	r6, #1
 8016b0c:	1c95      	adds	r5, r2, #2
 8016b0e:	f033 0210 	bics.w	r2, r3, #16
 8016b12:	d109      	bne.n	8016b28 <_strtol_l.constprop.0+0x54>
 8016b14:	2c30      	cmp	r4, #48	@ 0x30
 8016b16:	d12a      	bne.n	8016b6e <_strtol_l.constprop.0+0x9a>
 8016b18:	782a      	ldrb	r2, [r5, #0]
 8016b1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016b1e:	2a58      	cmp	r2, #88	@ 0x58
 8016b20:	d125      	bne.n	8016b6e <_strtol_l.constprop.0+0x9a>
 8016b22:	786c      	ldrb	r4, [r5, #1]
 8016b24:	2310      	movs	r3, #16
 8016b26:	3502      	adds	r5, #2
 8016b28:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016b2c:	2200      	movs	r2, #0
 8016b2e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016b32:	4610      	mov	r0, r2
 8016b34:	fbbc f9f3 	udiv	r9, ip, r3
 8016b38:	fb03 ca19 	mls	sl, r3, r9, ip
 8016b3c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016b40:	2f09      	cmp	r7, #9
 8016b42:	d81b      	bhi.n	8016b7c <_strtol_l.constprop.0+0xa8>
 8016b44:	463c      	mov	r4, r7
 8016b46:	42a3      	cmp	r3, r4
 8016b48:	dd27      	ble.n	8016b9a <_strtol_l.constprop.0+0xc6>
 8016b4a:	1c57      	adds	r7, r2, #1
 8016b4c:	d007      	beq.n	8016b5e <_strtol_l.constprop.0+0x8a>
 8016b4e:	4581      	cmp	r9, r0
 8016b50:	d320      	bcc.n	8016b94 <_strtol_l.constprop.0+0xc0>
 8016b52:	d101      	bne.n	8016b58 <_strtol_l.constprop.0+0x84>
 8016b54:	45a2      	cmp	sl, r4
 8016b56:	db1d      	blt.n	8016b94 <_strtol_l.constprop.0+0xc0>
 8016b58:	fb00 4003 	mla	r0, r0, r3, r4
 8016b5c:	2201      	movs	r2, #1
 8016b5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016b62:	e7eb      	b.n	8016b3c <_strtol_l.constprop.0+0x68>
 8016b64:	2c2b      	cmp	r4, #43	@ 0x2b
 8016b66:	bf04      	itt	eq
 8016b68:	782c      	ldrbeq	r4, [r5, #0]
 8016b6a:	1c95      	addeq	r5, r2, #2
 8016b6c:	e7cf      	b.n	8016b0e <_strtol_l.constprop.0+0x3a>
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d1da      	bne.n	8016b28 <_strtol_l.constprop.0+0x54>
 8016b72:	2c30      	cmp	r4, #48	@ 0x30
 8016b74:	bf0c      	ite	eq
 8016b76:	2308      	moveq	r3, #8
 8016b78:	230a      	movne	r3, #10
 8016b7a:	e7d5      	b.n	8016b28 <_strtol_l.constprop.0+0x54>
 8016b7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016b80:	2f19      	cmp	r7, #25
 8016b82:	d801      	bhi.n	8016b88 <_strtol_l.constprop.0+0xb4>
 8016b84:	3c37      	subs	r4, #55	@ 0x37
 8016b86:	e7de      	b.n	8016b46 <_strtol_l.constprop.0+0x72>
 8016b88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016b8c:	2f19      	cmp	r7, #25
 8016b8e:	d804      	bhi.n	8016b9a <_strtol_l.constprop.0+0xc6>
 8016b90:	3c57      	subs	r4, #87	@ 0x57
 8016b92:	e7d8      	b.n	8016b46 <_strtol_l.constprop.0+0x72>
 8016b94:	f04f 32ff 	mov.w	r2, #4294967295
 8016b98:	e7e1      	b.n	8016b5e <_strtol_l.constprop.0+0x8a>
 8016b9a:	1c53      	adds	r3, r2, #1
 8016b9c:	d108      	bne.n	8016bb0 <_strtol_l.constprop.0+0xdc>
 8016b9e:	2322      	movs	r3, #34	@ 0x22
 8016ba0:	4660      	mov	r0, ip
 8016ba2:	f8ce 3000 	str.w	r3, [lr]
 8016ba6:	f1b8 0f00 	cmp.w	r8, #0
 8016baa:	d0a0      	beq.n	8016aee <_strtol_l.constprop.0+0x1a>
 8016bac:	1e69      	subs	r1, r5, #1
 8016bae:	e006      	b.n	8016bbe <_strtol_l.constprop.0+0xea>
 8016bb0:	b106      	cbz	r6, 8016bb4 <_strtol_l.constprop.0+0xe0>
 8016bb2:	4240      	negs	r0, r0
 8016bb4:	f1b8 0f00 	cmp.w	r8, #0
 8016bb8:	d099      	beq.n	8016aee <_strtol_l.constprop.0+0x1a>
 8016bba:	2a00      	cmp	r2, #0
 8016bbc:	d1f6      	bne.n	8016bac <_strtol_l.constprop.0+0xd8>
 8016bbe:	f8c8 1000 	str.w	r1, [r8]
 8016bc2:	e794      	b.n	8016aee <_strtol_l.constprop.0+0x1a>
 8016bc4:	08017a2e 	.word	0x08017a2e

08016bc8 <_strtol_r>:
 8016bc8:	f7ff bf84 	b.w	8016ad4 <_strtol_l.constprop.0>

08016bcc <_strtoul_l.constprop.0>:
 8016bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bd0:	4686      	mov	lr, r0
 8016bd2:	460d      	mov	r5, r1
 8016bd4:	4e33      	ldr	r6, [pc, #204]	@ (8016ca4 <_strtoul_l.constprop.0+0xd8>)
 8016bd6:	4628      	mov	r0, r5
 8016bd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016bdc:	5d37      	ldrb	r7, [r6, r4]
 8016bde:	f017 0708 	ands.w	r7, r7, #8
 8016be2:	d1f8      	bne.n	8016bd6 <_strtoul_l.constprop.0+0xa>
 8016be4:	2c2d      	cmp	r4, #45	@ 0x2d
 8016be6:	d12f      	bne.n	8016c48 <_strtoul_l.constprop.0+0x7c>
 8016be8:	782c      	ldrb	r4, [r5, #0]
 8016bea:	2701      	movs	r7, #1
 8016bec:	1c85      	adds	r5, r0, #2
 8016bee:	f033 0010 	bics.w	r0, r3, #16
 8016bf2:	d109      	bne.n	8016c08 <_strtoul_l.constprop.0+0x3c>
 8016bf4:	2c30      	cmp	r4, #48	@ 0x30
 8016bf6:	d12c      	bne.n	8016c52 <_strtoul_l.constprop.0+0x86>
 8016bf8:	7828      	ldrb	r0, [r5, #0]
 8016bfa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016bfe:	2858      	cmp	r0, #88	@ 0x58
 8016c00:	d127      	bne.n	8016c52 <_strtoul_l.constprop.0+0x86>
 8016c02:	786c      	ldrb	r4, [r5, #1]
 8016c04:	2310      	movs	r3, #16
 8016c06:	3502      	adds	r5, #2
 8016c08:	f04f 38ff 	mov.w	r8, #4294967295
 8016c0c:	2600      	movs	r6, #0
 8016c0e:	fbb8 f8f3 	udiv	r8, r8, r3
 8016c12:	fb03 f908 	mul.w	r9, r3, r8
 8016c16:	4630      	mov	r0, r6
 8016c18:	ea6f 0909 	mvn.w	r9, r9
 8016c1c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016c20:	f1bc 0f09 	cmp.w	ip, #9
 8016c24:	d81c      	bhi.n	8016c60 <_strtoul_l.constprop.0+0x94>
 8016c26:	4664      	mov	r4, ip
 8016c28:	42a3      	cmp	r3, r4
 8016c2a:	dd2a      	ble.n	8016c82 <_strtoul_l.constprop.0+0xb6>
 8016c2c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8016c30:	d007      	beq.n	8016c42 <_strtoul_l.constprop.0+0x76>
 8016c32:	4580      	cmp	r8, r0
 8016c34:	d322      	bcc.n	8016c7c <_strtoul_l.constprop.0+0xb0>
 8016c36:	d101      	bne.n	8016c3c <_strtoul_l.constprop.0+0x70>
 8016c38:	45a1      	cmp	r9, r4
 8016c3a:	db1f      	blt.n	8016c7c <_strtoul_l.constprop.0+0xb0>
 8016c3c:	fb00 4003 	mla	r0, r0, r3, r4
 8016c40:	2601      	movs	r6, #1
 8016c42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c46:	e7e9      	b.n	8016c1c <_strtoul_l.constprop.0+0x50>
 8016c48:	2c2b      	cmp	r4, #43	@ 0x2b
 8016c4a:	bf04      	itt	eq
 8016c4c:	782c      	ldrbeq	r4, [r5, #0]
 8016c4e:	1c85      	addeq	r5, r0, #2
 8016c50:	e7cd      	b.n	8016bee <_strtoul_l.constprop.0+0x22>
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d1d8      	bne.n	8016c08 <_strtoul_l.constprop.0+0x3c>
 8016c56:	2c30      	cmp	r4, #48	@ 0x30
 8016c58:	bf0c      	ite	eq
 8016c5a:	2308      	moveq	r3, #8
 8016c5c:	230a      	movne	r3, #10
 8016c5e:	e7d3      	b.n	8016c08 <_strtoul_l.constprop.0+0x3c>
 8016c60:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016c64:	f1bc 0f19 	cmp.w	ip, #25
 8016c68:	d801      	bhi.n	8016c6e <_strtoul_l.constprop.0+0xa2>
 8016c6a:	3c37      	subs	r4, #55	@ 0x37
 8016c6c:	e7dc      	b.n	8016c28 <_strtoul_l.constprop.0+0x5c>
 8016c6e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016c72:	f1bc 0f19 	cmp.w	ip, #25
 8016c76:	d804      	bhi.n	8016c82 <_strtoul_l.constprop.0+0xb6>
 8016c78:	3c57      	subs	r4, #87	@ 0x57
 8016c7a:	e7d5      	b.n	8016c28 <_strtoul_l.constprop.0+0x5c>
 8016c7c:	f04f 36ff 	mov.w	r6, #4294967295
 8016c80:	e7df      	b.n	8016c42 <_strtoul_l.constprop.0+0x76>
 8016c82:	1c73      	adds	r3, r6, #1
 8016c84:	d106      	bne.n	8016c94 <_strtoul_l.constprop.0+0xc8>
 8016c86:	2322      	movs	r3, #34	@ 0x22
 8016c88:	4630      	mov	r0, r6
 8016c8a:	f8ce 3000 	str.w	r3, [lr]
 8016c8e:	b932      	cbnz	r2, 8016c9e <_strtoul_l.constprop.0+0xd2>
 8016c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c94:	b107      	cbz	r7, 8016c98 <_strtoul_l.constprop.0+0xcc>
 8016c96:	4240      	negs	r0, r0
 8016c98:	2a00      	cmp	r2, #0
 8016c9a:	d0f9      	beq.n	8016c90 <_strtoul_l.constprop.0+0xc4>
 8016c9c:	b106      	cbz	r6, 8016ca0 <_strtoul_l.constprop.0+0xd4>
 8016c9e:	1e69      	subs	r1, r5, #1
 8016ca0:	6011      	str	r1, [r2, #0]
 8016ca2:	e7f5      	b.n	8016c90 <_strtoul_l.constprop.0+0xc4>
 8016ca4:	08017a2e 	.word	0x08017a2e

08016ca8 <_strtoul_r>:
 8016ca8:	f7ff bf90 	b.w	8016bcc <_strtoul_l.constprop.0>

08016cac <_malloc_usable_size_r>:
 8016cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016cb0:	1f18      	subs	r0, r3, #4
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	bfbc      	itt	lt
 8016cb6:	580b      	ldrlt	r3, [r1, r0]
 8016cb8:	18c0      	addlt	r0, r0, r3
 8016cba:	4770      	bx	lr

08016cbc <_init>:
 8016cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cbe:	bf00      	nop
 8016cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cc2:	bc08      	pop	{r3}
 8016cc4:	469e      	mov	lr, r3
 8016cc6:	4770      	bx	lr

08016cc8 <_fini>:
 8016cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cca:	bf00      	nop
 8016ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cce:	bc08      	pop	{r3}
 8016cd0:	469e      	mov	lr, r3
 8016cd2:	4770      	bx	lr
